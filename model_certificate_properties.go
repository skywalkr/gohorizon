/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the CertificateProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateProperties{}

// CertificateProperties Certificate properties.
type CertificateProperties struct {
	// Certificate generation SSO Key length.
	KeyLength *int32 `json:"key_length,omitempty"`
	// Certificate generation SSO key validity period in days.
	Validity *int32 `json:"validity,omitempty"`
}

// NewCertificateProperties instantiates a new CertificateProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateProperties() *CertificateProperties {
	this := CertificateProperties{}
	return &this
}

// NewCertificatePropertiesWithDefaults instantiates a new CertificateProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificatePropertiesWithDefaults() *CertificateProperties {
	this := CertificateProperties{}
	return &this
}

// GetKeyLength returns the KeyLength field value if set, zero value otherwise.
func (o *CertificateProperties) GetKeyLength() int32 {
	if o == nil || IsNil(o.KeyLength) {
		var ret int32
		return ret
	}
	return *o.KeyLength
}

// GetKeyLengthOk returns a tuple with the KeyLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProperties) GetKeyLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.KeyLength) {
		return nil, false
	}
	return o.KeyLength, true
}

// HasKeyLength returns a boolean if a field has been set.
func (o *CertificateProperties) HasKeyLength() bool {
	if o != nil && !IsNil(o.KeyLength) {
		return true
	}

	return false
}

// SetKeyLength gets a reference to the given int32 and assigns it to the KeyLength field.
func (o *CertificateProperties) SetKeyLength(v int32) {
	o.KeyLength = &v
}

// GetValidity returns the Validity field value if set, zero value otherwise.
func (o *CertificateProperties) GetValidity() int32 {
	if o == nil || IsNil(o.Validity) {
		var ret int32
		return ret
	}
	return *o.Validity
}

// GetValidityOk returns a tuple with the Validity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProperties) GetValidityOk() (*int32, bool) {
	if o == nil || IsNil(o.Validity) {
		return nil, false
	}
	return o.Validity, true
}

// HasValidity returns a boolean if a field has been set.
func (o *CertificateProperties) HasValidity() bool {
	if o != nil && !IsNil(o.Validity) {
		return true
	}

	return false
}

// SetValidity gets a reference to the given int32 and assigns it to the Validity field.
func (o *CertificateProperties) SetValidity(v int32) {
	o.Validity = &v
}

func (o CertificateProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.KeyLength) {
		toSerialize["key_length"] = o.KeyLength
	}
	if !IsNil(o.Validity) {
		toSerialize["validity"] = o.Validity
	}
	return toSerialize, nil
}

type NullableCertificateProperties struct {
	value *CertificateProperties
	isSet bool
}

func (v NullableCertificateProperties) Get() *CertificateProperties {
	return v.value
}

func (v *NullableCertificateProperties) Set(val *CertificateProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateProperties(val *CertificateProperties) *NullableCertificateProperties {
	return &NullableCertificateProperties{value: val, isSet: true}
}

func (v NullableCertificateProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


