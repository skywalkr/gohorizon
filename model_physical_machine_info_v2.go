/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the PhysicalMachineInfoV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PhysicalMachineInfoV2{}

// PhysicalMachineInfoV2 Information related to a Physical Machine.<br>List API returning this summary information can use search filter query to filter on specific fields supported by filters.<br> Supported Filters : 'And', 'Or', 'Equals', 'NotEquals', 'StartsWith', 'Contains' and 'EndsWith'.<br>See the field description to know the filter types it supports.
type PhysicalMachineInfoV2 struct {
	// Description of the machine.<br>Supported Filters : 'Equals', 'StartsWith' and 'Contains'.
	Description *string `json:"description,omitempty"`
	// DNS name of the machine.<br>Supported Filters : 'Equals', 'StartsWith', 'EndsWith' and 'Contains'.
	DnsName *string `json:"dns_name,omitempty"`
	// Unique ID representing machine.<br>Supported Filters : 'Equals'.
	Id *string `json:"id,omitempty"`
	// Indicates whether ENHANCED message security mode is currently supported by this machine.
	MessageSecurityEnhancedModeSupported *bool `json:"message_security_enhanced_mode_supported,omitempty"`
	// The current JMS message security mode used by this machine.<br>Supported Filters : 'Equals'. * DISABLED: Message security mode is disabled. * MIXED: Message security mode is enabled but not enforced. * ENABLED: Message security mode is enabled. Unsigned messages are rejected by Horizon components. * ENHANCED: Message Security mode is Enhanced. Message signing and validation is performed based on the current Security Level and desktop Message Security mode.
	MessageSecurityMode *string `json:"message_security_mode,omitempty"`
	// Name of the machine.<br>Supported Filters : 'Equals', 'StartsWith' and 'Contains'.
	Name *string `json:"name,omitempty"`
	// The machine operating system. * UNKNOWN: Unknown * WINDOWS_XP: Windows XP * WINDOWS_VISTA: Windows Vista * WINDOWS_7: Windows 7 * WINDOWS_8: Windows 8 * WINDOWS_10: Windows 10 * WINDOWS_11: Windows 11 * WINDOWS_SERVER_2003: Windows Server 2003 * WINDOWS_SERVER_2008: Windows Server 2008 * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2 * WINDOWS_SERVER_2012: Windows Server 2012 * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2 * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above * LINUX_OTHER: Linux (other) * LINUX_SERVER_OTHER: Linux server (other) * LINUX_UBUNTU: Linux (Ubuntu) * LINUX_RHEL: Linux (Red Hat Enterprise) * LINUX_SUSE: Linux (Suse) * LINUX_CENTOS: Linux (CentOS)
	OperatingSystem *string `json:"operating_system,omitempty"`
	// Indicates if the physical machine is RDS Server.<br>Supported Filters : 'Equals'.
	RdsServer *bool `json:"rds_server,omitempty"`
	// The state of the machine.<br>Supported Filters : 'Equals'. * AGENT_UNREACHABLE: Horizon Connection Server cannot establish communication with Horizon Agent on the machine. * UNASSIGNED_USER_CONNECTED: A user other than the assigned user is logged in to the machine in a dedicated desktop pool. * CONNECTED: The machine is in an active session and has an active connection to a Horizon client. * UNASSIGNED_USER_DISCONNECTED: A user other than the assigned user is logged in and disconnected from the machine in a dedicated desktop pool. * DISCONNECTED: The machine is in an active session, but it is disconnected from the Horizon client. * AGENT_ERROR_STARTUP_IN_PROGRESS: Horizon Agent has started on the machine, but other required services such as the display protocol are still starting. * AGENT_ERROR_DISABLED: Horizon Agent is disabled. * AGENT_ERROR_INVALID_IP: Horizon Agent has an invalid IP address. * AGENT_ERROR_NEEDS_REBOOT: Horizon Agent needs reboot. * AGENT_ERROR_PROTOCOL_FAILURE: Protocol such as BLAST, RDP or PCoIP is not enabled. * AGENT_CONFIG_ERROR: The Remote Desktop Services role is not enabled on the windows server. * AVAILABLE: The machine is powered on and ready for active connections. * VALIDATING: The Horizon Connection Server is synchronizing state information with the agent. * DISABLED: The machine is disabled. * UNKNOWN: Could not determine the state of the machine.
	State *string `json:"state,omitempty"`
}

// NewPhysicalMachineInfoV2 instantiates a new PhysicalMachineInfoV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhysicalMachineInfoV2() *PhysicalMachineInfoV2 {
	this := PhysicalMachineInfoV2{}
	return &this
}

// NewPhysicalMachineInfoV2WithDefaults instantiates a new PhysicalMachineInfoV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhysicalMachineInfoV2WithDefaults() *PhysicalMachineInfoV2 {
	this := PhysicalMachineInfoV2{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PhysicalMachineInfoV2) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalMachineInfoV2) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PhysicalMachineInfoV2) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PhysicalMachineInfoV2) SetDescription(v string) {
	o.Description = &v
}

// GetDnsName returns the DnsName field value if set, zero value otherwise.
func (o *PhysicalMachineInfoV2) GetDnsName() string {
	if o == nil || IsNil(o.DnsName) {
		var ret string
		return ret
	}
	return *o.DnsName
}

// GetDnsNameOk returns a tuple with the DnsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalMachineInfoV2) GetDnsNameOk() (*string, bool) {
	if o == nil || IsNil(o.DnsName) {
		return nil, false
	}
	return o.DnsName, true
}

// HasDnsName returns a boolean if a field has been set.
func (o *PhysicalMachineInfoV2) HasDnsName() bool {
	if o != nil && !IsNil(o.DnsName) {
		return true
	}

	return false
}

// SetDnsName gets a reference to the given string and assigns it to the DnsName field.
func (o *PhysicalMachineInfoV2) SetDnsName(v string) {
	o.DnsName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PhysicalMachineInfoV2) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalMachineInfoV2) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PhysicalMachineInfoV2) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PhysicalMachineInfoV2) SetId(v string) {
	o.Id = &v
}

// GetMessageSecurityEnhancedModeSupported returns the MessageSecurityEnhancedModeSupported field value if set, zero value otherwise.
func (o *PhysicalMachineInfoV2) GetMessageSecurityEnhancedModeSupported() bool {
	if o == nil || IsNil(o.MessageSecurityEnhancedModeSupported) {
		var ret bool
		return ret
	}
	return *o.MessageSecurityEnhancedModeSupported
}

// GetMessageSecurityEnhancedModeSupportedOk returns a tuple with the MessageSecurityEnhancedModeSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalMachineInfoV2) GetMessageSecurityEnhancedModeSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.MessageSecurityEnhancedModeSupported) {
		return nil, false
	}
	return o.MessageSecurityEnhancedModeSupported, true
}

// HasMessageSecurityEnhancedModeSupported returns a boolean if a field has been set.
func (o *PhysicalMachineInfoV2) HasMessageSecurityEnhancedModeSupported() bool {
	if o != nil && !IsNil(o.MessageSecurityEnhancedModeSupported) {
		return true
	}

	return false
}

// SetMessageSecurityEnhancedModeSupported gets a reference to the given bool and assigns it to the MessageSecurityEnhancedModeSupported field.
func (o *PhysicalMachineInfoV2) SetMessageSecurityEnhancedModeSupported(v bool) {
	o.MessageSecurityEnhancedModeSupported = &v
}

// GetMessageSecurityMode returns the MessageSecurityMode field value if set, zero value otherwise.
func (o *PhysicalMachineInfoV2) GetMessageSecurityMode() string {
	if o == nil || IsNil(o.MessageSecurityMode) {
		var ret string
		return ret
	}
	return *o.MessageSecurityMode
}

// GetMessageSecurityModeOk returns a tuple with the MessageSecurityMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalMachineInfoV2) GetMessageSecurityModeOk() (*string, bool) {
	if o == nil || IsNil(o.MessageSecurityMode) {
		return nil, false
	}
	return o.MessageSecurityMode, true
}

// HasMessageSecurityMode returns a boolean if a field has been set.
func (o *PhysicalMachineInfoV2) HasMessageSecurityMode() bool {
	if o != nil && !IsNil(o.MessageSecurityMode) {
		return true
	}

	return false
}

// SetMessageSecurityMode gets a reference to the given string and assigns it to the MessageSecurityMode field.
func (o *PhysicalMachineInfoV2) SetMessageSecurityMode(v string) {
	o.MessageSecurityMode = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PhysicalMachineInfoV2) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalMachineInfoV2) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PhysicalMachineInfoV2) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PhysicalMachineInfoV2) SetName(v string) {
	o.Name = &v
}

// GetOperatingSystem returns the OperatingSystem field value if set, zero value otherwise.
func (o *PhysicalMachineInfoV2) GetOperatingSystem() string {
	if o == nil || IsNil(o.OperatingSystem) {
		var ret string
		return ret
	}
	return *o.OperatingSystem
}

// GetOperatingSystemOk returns a tuple with the OperatingSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalMachineInfoV2) GetOperatingSystemOk() (*string, bool) {
	if o == nil || IsNil(o.OperatingSystem) {
		return nil, false
	}
	return o.OperatingSystem, true
}

// HasOperatingSystem returns a boolean if a field has been set.
func (o *PhysicalMachineInfoV2) HasOperatingSystem() bool {
	if o != nil && !IsNil(o.OperatingSystem) {
		return true
	}

	return false
}

// SetOperatingSystem gets a reference to the given string and assigns it to the OperatingSystem field.
func (o *PhysicalMachineInfoV2) SetOperatingSystem(v string) {
	o.OperatingSystem = &v
}

// GetRdsServer returns the RdsServer field value if set, zero value otherwise.
func (o *PhysicalMachineInfoV2) GetRdsServer() bool {
	if o == nil || IsNil(o.RdsServer) {
		var ret bool
		return ret
	}
	return *o.RdsServer
}

// GetRdsServerOk returns a tuple with the RdsServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalMachineInfoV2) GetRdsServerOk() (*bool, bool) {
	if o == nil || IsNil(o.RdsServer) {
		return nil, false
	}
	return o.RdsServer, true
}

// HasRdsServer returns a boolean if a field has been set.
func (o *PhysicalMachineInfoV2) HasRdsServer() bool {
	if o != nil && !IsNil(o.RdsServer) {
		return true
	}

	return false
}

// SetRdsServer gets a reference to the given bool and assigns it to the RdsServer field.
func (o *PhysicalMachineInfoV2) SetRdsServer(v bool) {
	o.RdsServer = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *PhysicalMachineInfoV2) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalMachineInfoV2) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *PhysicalMachineInfoV2) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *PhysicalMachineInfoV2) SetState(v string) {
	o.State = &v
}

func (o PhysicalMachineInfoV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PhysicalMachineInfoV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DnsName) {
		toSerialize["dns_name"] = o.DnsName
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MessageSecurityEnhancedModeSupported) {
		toSerialize["message_security_enhanced_mode_supported"] = o.MessageSecurityEnhancedModeSupported
	}
	if !IsNil(o.MessageSecurityMode) {
		toSerialize["message_security_mode"] = o.MessageSecurityMode
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OperatingSystem) {
		toSerialize["operating_system"] = o.OperatingSystem
	}
	if !IsNil(o.RdsServer) {
		toSerialize["rds_server"] = o.RdsServer
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullablePhysicalMachineInfoV2 struct {
	value *PhysicalMachineInfoV2
	isSet bool
}

func (v NullablePhysicalMachineInfoV2) Get() *PhysicalMachineInfoV2 {
	return v.value
}

func (v *NullablePhysicalMachineInfoV2) Set(val *PhysicalMachineInfoV2) {
	v.value = val
	v.isSet = true
}

func (v NullablePhysicalMachineInfoV2) IsSet() bool {
	return v.isSet
}

func (v *NullablePhysicalMachineInfoV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhysicalMachineInfoV2(val *PhysicalMachineInfoV2) *NullablePhysicalMachineInfoV2 {
	return &NullablePhysicalMachineInfoV2{value: val, isSet: true}
}

func (v NullablePhysicalMachineInfoV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhysicalMachineInfoV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


