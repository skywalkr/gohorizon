/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the ViewComposerMonitorInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewComposerMonitorInfo{}

// ViewComposerMonitorInfo Monitoring information related to View Composer.
type ViewComposerMonitorInfo struct {
	// Information about the View Composer connections from each of the connection servers.
	ConnectionServers []ViewComposerMonitorConnectionServer `json:"connection_servers,omitempty"`
	Details *ViewComposerMonitorDetails `json:"details,omitempty"`
	// View Composer server host name or IP address.
	Name *string `json:"name,omitempty"`
	// View Composer server port number.
	Port *int32 `json:"port,omitempty"`
}

// NewViewComposerMonitorInfo instantiates a new ViewComposerMonitorInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewComposerMonitorInfo() *ViewComposerMonitorInfo {
	this := ViewComposerMonitorInfo{}
	return &this
}

// NewViewComposerMonitorInfoWithDefaults instantiates a new ViewComposerMonitorInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewComposerMonitorInfoWithDefaults() *ViewComposerMonitorInfo {
	this := ViewComposerMonitorInfo{}
	return &this
}

// GetConnectionServers returns the ConnectionServers field value if set, zero value otherwise.
func (o *ViewComposerMonitorInfo) GetConnectionServers() []ViewComposerMonitorConnectionServer {
	if o == nil || IsNil(o.ConnectionServers) {
		var ret []ViewComposerMonitorConnectionServer
		return ret
	}
	return o.ConnectionServers
}

// GetConnectionServersOk returns a tuple with the ConnectionServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewComposerMonitorInfo) GetConnectionServersOk() ([]ViewComposerMonitorConnectionServer, bool) {
	if o == nil || IsNil(o.ConnectionServers) {
		return nil, false
	}
	return o.ConnectionServers, true
}

// HasConnectionServers returns a boolean if a field has been set.
func (o *ViewComposerMonitorInfo) HasConnectionServers() bool {
	if o != nil && !IsNil(o.ConnectionServers) {
		return true
	}

	return false
}

// SetConnectionServers gets a reference to the given []ViewComposerMonitorConnectionServer and assigns it to the ConnectionServers field.
func (o *ViewComposerMonitorInfo) SetConnectionServers(v []ViewComposerMonitorConnectionServer) {
	o.ConnectionServers = v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *ViewComposerMonitorInfo) GetDetails() ViewComposerMonitorDetails {
	if o == nil || IsNil(o.Details) {
		var ret ViewComposerMonitorDetails
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewComposerMonitorInfo) GetDetailsOk() (*ViewComposerMonitorDetails, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *ViewComposerMonitorInfo) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given ViewComposerMonitorDetails and assigns it to the Details field.
func (o *ViewComposerMonitorInfo) SetDetails(v ViewComposerMonitorDetails) {
	o.Details = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ViewComposerMonitorInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewComposerMonitorInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ViewComposerMonitorInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ViewComposerMonitorInfo) SetName(v string) {
	o.Name = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *ViewComposerMonitorInfo) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewComposerMonitorInfo) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *ViewComposerMonitorInfo) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *ViewComposerMonitorInfo) SetPort(v int32) {
	o.Port = &v
}

func (o ViewComposerMonitorInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewComposerMonitorInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConnectionServers) {
		toSerialize["connection_servers"] = o.ConnectionServers
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	return toSerialize, nil
}

type NullableViewComposerMonitorInfo struct {
	value *ViewComposerMonitorInfo
	isSet bool
}

func (v NullableViewComposerMonitorInfo) Get() *ViewComposerMonitorInfo {
	return v.value
}

func (v *NullableViewComposerMonitorInfo) Set(val *ViewComposerMonitorInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableViewComposerMonitorInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableViewComposerMonitorInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewComposerMonitorInfo(val *ViewComposerMonitorInfo) *NullableViewComposerMonitorInfo {
	return &NullableViewComposerMonitorInfo{value: val, isSet: true}
}

func (v NullableViewComposerMonitorInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewComposerMonitorInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


