/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2111
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// DesktopPoolCreateSpec Information required to create a desktop pool.
type DesktopPoolCreateSpec struct {
	// Access groups can organize the entities such as desktop pools in the organization. They can also be used for delegated administration. <br> This property is required for all the pools except for RDS desktop pool, which will be inherited from the corresponding Farm.
	AccessGroupId *string `json:"access_group_id,omitempty"`
	// Applicable To: Dedicated manual and automated desktop pools with manual user assignment with default value as false.<br>Whether assignment of multiple users to a single machine is allowed.<br>If this is true then automatic_user_assignment should be false. <br>
	AllowMultipleUserAssignments *bool `json:"allow_multiple_user_assignments,omitempty"`
	// Applicable To: RDS desktop pools with default value as false.<br>Indicates whether multiple sessions are allowed per user for this pool.For other desktop pools, allow_multiple_sessions_per_user from session_settings will be applicable. <br>
	AllowRdsPoolMultiSessionPerUser *bool `json:"allow_rds_pool_multi_session_per_user,omitempty"`
	// Automatic assignment of a user the first time they access the machine.<br>This property is applicable if user_assignment is set to DEDICATED with default value as true.<br>
	AutomaticUserAssignment *bool `json:"automatic_user_assignment,omitempty"`
	// Name of the category folder in the user's OS containing a shortcut to the desktop pool.Will be unset if the desktop does not belong to a category.This property defines valid folder names with a max length of 64 characters and up to 4 subdirectory levels.The subdirectories can be specified using a backslash, e.g. (dir1\\dir2\\dir3\\dir4). Folder names can't start orend with a backslash nor can there be 2 or more backslashes together. Combinations such as(\\dir1, dir1\\dir2\\, dir1\\\\\\dir2, dir1\\\\\\\\\\dir2) are invalid. The windows reserved keywords(CON, PRN, NUL, AUX, COM1 - COM9, LPT1 - LPT9 etc.) are not allowed in subdirectory names.
	CategoryFolderName *string `json:"category_folder_name,omitempty"`
	// Indicates whether this desktop is assigned to a workspace in Horizon Cloud Services.<br>This can be set to true from cloud session only and only when cloud_managed is set to true.<br>Default value is false. <br>
	CloudAssigned *bool `json:"cloud_assigned,omitempty"`
	// Applicable To: RDS Desktop Pools with default value as false.
	CloudBrokered *bool `json:"cloud_brokered,omitempty"`
	// Indicates whether this desktop is managed by Horizon Cloud Services. This can be set to false only when cloud_assigned is set to false.<br>Default value is false. <br>This property cannot be set to true, if any of the conditions are satisfied: <br>user is provided.<br>enabled is false.<br>supported_session_type is not DESKTOP.<br>global_entitlement is set.<br>user_assignment is DEDICATED and automatic_user_assignment is false. <br>Local entitlements are configured. <br>Any of the machines in the pool have users assigned. <br>cs_restriction_tags is not set. <br>Desktop pool type is MANUAL.
	CloudManaged *bool `json:"cloud_managed,omitempty"`
	// List of Connection server restriction tags to which the access to the desktop pool is restricted. If this property is not set it indicates that desktop pool can be accessed from any connection server.
	CsRestrictionTags     *[]string                                   `json:"cs_restriction_tags,omitempty"`
	CustomizationSettings *DesktopPoolCustomizationSettingsCreateSpec `json:"customization_settings,omitempty"`
	// Description of the desktop pool.
	Description *string `json:"description,omitempty"`
	// Applicable To: Dedicated desktop pools with default value as false.<br>Indicates whether users should see the hostname of the machine assigned to them instead of display_name when they connect using Horizon Client. If no machine is assigned to the user then \"display_name (No machine assigned)\" will be displayed in the client.<br>
	DisplayAssignedMachineName *bool `json:"display_assigned_machine_name,omitempty"`
	// Applicable To: Dedicated desktop pools with default value as false.<br> If no machine is assigned to the user then \"displayName No machine assigned)\" will be displayed in the Horizon client. If both display_assigned_machine_name and this property is set to true, machine alias of the assigned machine is displayed if the user has machine alias set. Otherwise hostname will be displayed.
	DisplayMachineAlias *bool `json:"display_machine_alias,omitempty"`
	// Display name of the desktop pool. If the display name is left blank, it defaults to name.
	DisplayName             *string                                       `json:"display_name,omitempty"`
	DisplayProtocolSettings *DesktopPoolDisplayProtocolSettingsCreateSpec `json:"display_protocol_settings,omitempty"`
	// Client restrictions to be applied to the desktop pool.<br>Default value is false.
	EnableClientRestrictions *bool `json:"enable_client_restrictions,omitempty"`
	// Applicable To: Automated desktop pools with default value as true.<br>Indicates whether provisioning is enabled.<br>
	EnableProvisioning *bool `json:"enable_provisioning,omitempty"`
	// Indicates whether the desktop pool is enabled for brokering. Default value is true.
	Enabled *bool `json:"enabled,omitempty"`
	// Applicable To: RDS Desktop pool.<br>Farm is needed to create RDS desktop pool. This is required for RDS desktop pools.This Farm must not already be associated with another RDS desktop.
	FarmId *string `json:"farm_id,omitempty"`
	// Applicable To: Manual desktop pools. <br>List of machines to add to this desktop pool during creation.
	Machines *[]string `json:"machines,omitempty"`
	// Name of the desktop pool. This property must contain only alphanumerics, underscores and dashes.
	Name string `json:"name"`
	// Applicable To: Automated desktop pool.<br>Naming method for the desktop pool. This is required for Automated desktop pools. * SPECIFIED: List of specified names. All provisioning is done up-front. * PATTERN: Naming pattern.
	NamingMethod *string `json:"naming_method,omitempty"`
	// Network interface card settings for machines provisioned for this desktop.
	Nics                  *[]DesktopPoolNetworkInterfaceCardSettingsCreateSpec      `json:"nics,omitempty"`
	PatternNamingSettings *DesktopPoolVirtualMachinePatternNamingSettingsCreateSpec `json:"pattern_naming_settings,omitempty"`
	ProvisioningSettings  *DesktopPoolProvisioningSettingsCreateSpec                `json:"provisioning_settings,omitempty"`
	SessionSettings       *DesktopPoolSessionSettingsCreateSpec                     `json:"session_settings,omitempty"`
	// Applicable To: Managed desktop pools with default value as DESKTOP.<br> Supported session types for this desktop pool. If this property is set to APPLICATION then this desktop pool can be used for application pool creation. This will be useful when the machines in the pool support application remoting. * DESKTOP: Only desktop sessions are supported. * APPLICATION: Only application sessions are supported. * DESKTOP_AND_APPLICATION: Both desktop and application sessions are supported.
	SessionType *string `json:"session_type,omitempty"`
	// Locations of the category folder in the user's OS containing a shortcut to the desktop pool. This is required if the category_folder_name is set.
	ShortcutLocationsV2 *[]string `json:"shortcut_locations_v2,omitempty"`
	// Applicable To: Manual and Automated desktop pools.<br>Source of the Machines in this Desktop Pool. This is required for Manual and Automated desktop pools.<br> * INSTANT_CLONE: The Desktop Pool uses instant clone technology for provisioning the machines. Applicable for AUTOMATED type desktop pools. * LINKED_CLONE: The Desktop Pool uses linked clone technology for provisioning the machines. Applicable for AUTOMATED type desktop pools. * VIRTUAL_CENTER: The Desktop Pool uses Virtual Center as source for provisioning the machines. Applicable for AUTOMATED and MANUAL type desktop pools. * RDS: The Desktop Pool is backed by Farm. The Farm used in this Desktop Pool can be of any Source. * UNMANAGED: The Desktop Pool holds the non-vCenter source machines that includes physical computers, blade PCs and non-vCenter servers. Applicable for MANUAL type desktop pools.
	Source                 *string                                                     `json:"source,omitempty"`
	SpecificNamingSettings *DesktopPoolVirtualMachineSpecifiedNamingSettingsCreateSpec `json:"specific_naming_settings,omitempty"`
	// Applicable for Automated pools only with default value as true.
	StopProvisioningOnError *bool                                 `json:"stop_provisioning_on_error,omitempty"`
	StorageSettings         *DesktopPoolStorageSettingsCreateSpec `json:"storage_settings,omitempty"`
	// Applicable To: Managed Manual and Automated desktop pools with default value as VM.<br>Transparent page sharing scope for this Desktop Pool. * VM: Inter-VM page sharing is not permitted. * DESKTOP_POOL: Inter-VM page sharing among VMs belonging to the same Desktop pool is permitted. * POD: Inter-VM page sharing among VMs belonging to the same Pod is permitted. * GLOBAL: Inter-VM page sharing among all VMs on the same host is permitted.
	TransparentPageSharingScope *string `json:"transparent_page_sharing_scope,omitempty"`
	// Type of the Desktop Pool. * AUTOMATED: Automated Desktop Pool. * MANUAL: Manual Desktop Pool. * RDS: RDS Desktop Pool.
	Type string `json:"type"`
	// Applicable To: Automated and Manual Desktop pools. User assignment scheme. This is required for Automated and Manual Desktop Pools.<br> * DEDICATED: With dedicated assignment, a user returns to the same machine at each session. * FLOATING: With floating assignment, a user may return to one of the available machines for the next session.
	UserAssignment *string `json:"user_assignment,omitempty"`
	// ID of the virtual center server. <br>This is required for all desktop pool except Unmanaged Manual and RDS desktop pool. <br>
	VcenterId                      *string                                              `json:"vcenter_id,omitempty"`
	ViewStorageAcceleratorSettings *DesktopPoolViewStorageAcceleratorSettingsCreateSpec `json:"view_storage_accelerator_settings,omitempty"`
}

// NewDesktopPoolCreateSpec instantiates a new DesktopPoolCreateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDesktopPoolCreateSpec(name string, type_ string) *DesktopPoolCreateSpec {
	this := DesktopPoolCreateSpec{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewDesktopPoolCreateSpecWithDefaults instantiates a new DesktopPoolCreateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDesktopPoolCreateSpecWithDefaults() *DesktopPoolCreateSpec {
	this := DesktopPoolCreateSpec{}
	return &this
}

// GetAccessGroupId returns the AccessGroupId field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetAccessGroupId() string {
	if o == nil || o.AccessGroupId == nil {
		var ret string
		return ret
	}
	return *o.AccessGroupId
}

// GetAccessGroupIdOk returns a tuple with the AccessGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetAccessGroupIdOk() (*string, bool) {
	if o == nil || o.AccessGroupId == nil {
		return nil, false
	}
	return o.AccessGroupId, true
}

// HasAccessGroupId returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasAccessGroupId() bool {
	if o != nil && o.AccessGroupId != nil {
		return true
	}

	return false
}

// SetAccessGroupId gets a reference to the given string and assigns it to the AccessGroupId field.
func (o *DesktopPoolCreateSpec) SetAccessGroupId(v string) {
	o.AccessGroupId = &v
}

// GetAllowMultipleUserAssignments returns the AllowMultipleUserAssignments field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetAllowMultipleUserAssignments() bool {
	if o == nil || o.AllowMultipleUserAssignments == nil {
		var ret bool
		return ret
	}
	return *o.AllowMultipleUserAssignments
}

// GetAllowMultipleUserAssignmentsOk returns a tuple with the AllowMultipleUserAssignments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetAllowMultipleUserAssignmentsOk() (*bool, bool) {
	if o == nil || o.AllowMultipleUserAssignments == nil {
		return nil, false
	}
	return o.AllowMultipleUserAssignments, true
}

// HasAllowMultipleUserAssignments returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasAllowMultipleUserAssignments() bool {
	if o != nil && o.AllowMultipleUserAssignments != nil {
		return true
	}

	return false
}

// SetAllowMultipleUserAssignments gets a reference to the given bool and assigns it to the AllowMultipleUserAssignments field.
func (o *DesktopPoolCreateSpec) SetAllowMultipleUserAssignments(v bool) {
	o.AllowMultipleUserAssignments = &v
}

// GetAllowRdsPoolMultiSessionPerUser returns the AllowRdsPoolMultiSessionPerUser field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetAllowRdsPoolMultiSessionPerUser() bool {
	if o == nil || o.AllowRdsPoolMultiSessionPerUser == nil {
		var ret bool
		return ret
	}
	return *o.AllowRdsPoolMultiSessionPerUser
}

// GetAllowRdsPoolMultiSessionPerUserOk returns a tuple with the AllowRdsPoolMultiSessionPerUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetAllowRdsPoolMultiSessionPerUserOk() (*bool, bool) {
	if o == nil || o.AllowRdsPoolMultiSessionPerUser == nil {
		return nil, false
	}
	return o.AllowRdsPoolMultiSessionPerUser, true
}

// HasAllowRdsPoolMultiSessionPerUser returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasAllowRdsPoolMultiSessionPerUser() bool {
	if o != nil && o.AllowRdsPoolMultiSessionPerUser != nil {
		return true
	}

	return false
}

// SetAllowRdsPoolMultiSessionPerUser gets a reference to the given bool and assigns it to the AllowRdsPoolMultiSessionPerUser field.
func (o *DesktopPoolCreateSpec) SetAllowRdsPoolMultiSessionPerUser(v bool) {
	o.AllowRdsPoolMultiSessionPerUser = &v
}

// GetAutomaticUserAssignment returns the AutomaticUserAssignment field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetAutomaticUserAssignment() bool {
	if o == nil || o.AutomaticUserAssignment == nil {
		var ret bool
		return ret
	}
	return *o.AutomaticUserAssignment
}

// GetAutomaticUserAssignmentOk returns a tuple with the AutomaticUserAssignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetAutomaticUserAssignmentOk() (*bool, bool) {
	if o == nil || o.AutomaticUserAssignment == nil {
		return nil, false
	}
	return o.AutomaticUserAssignment, true
}

// HasAutomaticUserAssignment returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasAutomaticUserAssignment() bool {
	if o != nil && o.AutomaticUserAssignment != nil {
		return true
	}

	return false
}

// SetAutomaticUserAssignment gets a reference to the given bool and assigns it to the AutomaticUserAssignment field.
func (o *DesktopPoolCreateSpec) SetAutomaticUserAssignment(v bool) {
	o.AutomaticUserAssignment = &v
}

// GetCategoryFolderName returns the CategoryFolderName field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetCategoryFolderName() string {
	if o == nil || o.CategoryFolderName == nil {
		var ret string
		return ret
	}
	return *o.CategoryFolderName
}

// GetCategoryFolderNameOk returns a tuple with the CategoryFolderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetCategoryFolderNameOk() (*string, bool) {
	if o == nil || o.CategoryFolderName == nil {
		return nil, false
	}
	return o.CategoryFolderName, true
}

// HasCategoryFolderName returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasCategoryFolderName() bool {
	if o != nil && o.CategoryFolderName != nil {
		return true
	}

	return false
}

// SetCategoryFolderName gets a reference to the given string and assigns it to the CategoryFolderName field.
func (o *DesktopPoolCreateSpec) SetCategoryFolderName(v string) {
	o.CategoryFolderName = &v
}

// GetCloudAssigned returns the CloudAssigned field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetCloudAssigned() bool {
	if o == nil || o.CloudAssigned == nil {
		var ret bool
		return ret
	}
	return *o.CloudAssigned
}

// GetCloudAssignedOk returns a tuple with the CloudAssigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetCloudAssignedOk() (*bool, bool) {
	if o == nil || o.CloudAssigned == nil {
		return nil, false
	}
	return o.CloudAssigned, true
}

// HasCloudAssigned returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasCloudAssigned() bool {
	if o != nil && o.CloudAssigned != nil {
		return true
	}

	return false
}

// SetCloudAssigned gets a reference to the given bool and assigns it to the CloudAssigned field.
func (o *DesktopPoolCreateSpec) SetCloudAssigned(v bool) {
	o.CloudAssigned = &v
}

// GetCloudBrokered returns the CloudBrokered field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetCloudBrokered() bool {
	if o == nil || o.CloudBrokered == nil {
		var ret bool
		return ret
	}
	return *o.CloudBrokered
}

// GetCloudBrokeredOk returns a tuple with the CloudBrokered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetCloudBrokeredOk() (*bool, bool) {
	if o == nil || o.CloudBrokered == nil {
		return nil, false
	}
	return o.CloudBrokered, true
}

// HasCloudBrokered returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasCloudBrokered() bool {
	if o != nil && o.CloudBrokered != nil {
		return true
	}

	return false
}

// SetCloudBrokered gets a reference to the given bool and assigns it to the CloudBrokered field.
func (o *DesktopPoolCreateSpec) SetCloudBrokered(v bool) {
	o.CloudBrokered = &v
}

// GetCloudManaged returns the CloudManaged field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetCloudManaged() bool {
	if o == nil || o.CloudManaged == nil {
		var ret bool
		return ret
	}
	return *o.CloudManaged
}

// GetCloudManagedOk returns a tuple with the CloudManaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetCloudManagedOk() (*bool, bool) {
	if o == nil || o.CloudManaged == nil {
		return nil, false
	}
	return o.CloudManaged, true
}

// HasCloudManaged returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasCloudManaged() bool {
	if o != nil && o.CloudManaged != nil {
		return true
	}

	return false
}

// SetCloudManaged gets a reference to the given bool and assigns it to the CloudManaged field.
func (o *DesktopPoolCreateSpec) SetCloudManaged(v bool) {
	o.CloudManaged = &v
}

// GetCsRestrictionTags returns the CsRestrictionTags field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetCsRestrictionTags() []string {
	if o == nil || o.CsRestrictionTags == nil {
		var ret []string
		return ret
	}
	return *o.CsRestrictionTags
}

// GetCsRestrictionTagsOk returns a tuple with the CsRestrictionTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetCsRestrictionTagsOk() (*[]string, bool) {
	if o == nil || o.CsRestrictionTags == nil {
		return nil, false
	}
	return o.CsRestrictionTags, true
}

// HasCsRestrictionTags returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasCsRestrictionTags() bool {
	if o != nil && o.CsRestrictionTags != nil {
		return true
	}

	return false
}

// SetCsRestrictionTags gets a reference to the given []string and assigns it to the CsRestrictionTags field.
func (o *DesktopPoolCreateSpec) SetCsRestrictionTags(v []string) {
	o.CsRestrictionTags = &v
}

// GetCustomizationSettings returns the CustomizationSettings field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetCustomizationSettings() DesktopPoolCustomizationSettingsCreateSpec {
	if o == nil || o.CustomizationSettings == nil {
		var ret DesktopPoolCustomizationSettingsCreateSpec
		return ret
	}
	return *o.CustomizationSettings
}

// GetCustomizationSettingsOk returns a tuple with the CustomizationSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetCustomizationSettingsOk() (*DesktopPoolCustomizationSettingsCreateSpec, bool) {
	if o == nil || o.CustomizationSettings == nil {
		return nil, false
	}
	return o.CustomizationSettings, true
}

// HasCustomizationSettings returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasCustomizationSettings() bool {
	if o != nil && o.CustomizationSettings != nil {
		return true
	}

	return false
}

// SetCustomizationSettings gets a reference to the given DesktopPoolCustomizationSettingsCreateSpec and assigns it to the CustomizationSettings field.
func (o *DesktopPoolCreateSpec) SetCustomizationSettings(v DesktopPoolCustomizationSettingsCreateSpec) {
	o.CustomizationSettings = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DesktopPoolCreateSpec) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayAssignedMachineName returns the DisplayAssignedMachineName field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetDisplayAssignedMachineName() bool {
	if o == nil || o.DisplayAssignedMachineName == nil {
		var ret bool
		return ret
	}
	return *o.DisplayAssignedMachineName
}

// GetDisplayAssignedMachineNameOk returns a tuple with the DisplayAssignedMachineName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetDisplayAssignedMachineNameOk() (*bool, bool) {
	if o == nil || o.DisplayAssignedMachineName == nil {
		return nil, false
	}
	return o.DisplayAssignedMachineName, true
}

// HasDisplayAssignedMachineName returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasDisplayAssignedMachineName() bool {
	if o != nil && o.DisplayAssignedMachineName != nil {
		return true
	}

	return false
}

// SetDisplayAssignedMachineName gets a reference to the given bool and assigns it to the DisplayAssignedMachineName field.
func (o *DesktopPoolCreateSpec) SetDisplayAssignedMachineName(v bool) {
	o.DisplayAssignedMachineName = &v
}

// GetDisplayMachineAlias returns the DisplayMachineAlias field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetDisplayMachineAlias() bool {
	if o == nil || o.DisplayMachineAlias == nil {
		var ret bool
		return ret
	}
	return *o.DisplayMachineAlias
}

// GetDisplayMachineAliasOk returns a tuple with the DisplayMachineAlias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetDisplayMachineAliasOk() (*bool, bool) {
	if o == nil || o.DisplayMachineAlias == nil {
		return nil, false
	}
	return o.DisplayMachineAlias, true
}

// HasDisplayMachineAlias returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasDisplayMachineAlias() bool {
	if o != nil && o.DisplayMachineAlias != nil {
		return true
	}

	return false
}

// SetDisplayMachineAlias gets a reference to the given bool and assigns it to the DisplayMachineAlias field.
func (o *DesktopPoolCreateSpec) SetDisplayMachineAlias(v bool) {
	o.DisplayMachineAlias = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *DesktopPoolCreateSpec) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDisplayProtocolSettings returns the DisplayProtocolSettings field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetDisplayProtocolSettings() DesktopPoolDisplayProtocolSettingsCreateSpec {
	if o == nil || o.DisplayProtocolSettings == nil {
		var ret DesktopPoolDisplayProtocolSettingsCreateSpec
		return ret
	}
	return *o.DisplayProtocolSettings
}

// GetDisplayProtocolSettingsOk returns a tuple with the DisplayProtocolSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetDisplayProtocolSettingsOk() (*DesktopPoolDisplayProtocolSettingsCreateSpec, bool) {
	if o == nil || o.DisplayProtocolSettings == nil {
		return nil, false
	}
	return o.DisplayProtocolSettings, true
}

// HasDisplayProtocolSettings returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasDisplayProtocolSettings() bool {
	if o != nil && o.DisplayProtocolSettings != nil {
		return true
	}

	return false
}

// SetDisplayProtocolSettings gets a reference to the given DesktopPoolDisplayProtocolSettingsCreateSpec and assigns it to the DisplayProtocolSettings field.
func (o *DesktopPoolCreateSpec) SetDisplayProtocolSettings(v DesktopPoolDisplayProtocolSettingsCreateSpec) {
	o.DisplayProtocolSettings = &v
}

// GetEnableClientRestrictions returns the EnableClientRestrictions field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetEnableClientRestrictions() bool {
	if o == nil || o.EnableClientRestrictions == nil {
		var ret bool
		return ret
	}
	return *o.EnableClientRestrictions
}

// GetEnableClientRestrictionsOk returns a tuple with the EnableClientRestrictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetEnableClientRestrictionsOk() (*bool, bool) {
	if o == nil || o.EnableClientRestrictions == nil {
		return nil, false
	}
	return o.EnableClientRestrictions, true
}

// HasEnableClientRestrictions returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasEnableClientRestrictions() bool {
	if o != nil && o.EnableClientRestrictions != nil {
		return true
	}

	return false
}

// SetEnableClientRestrictions gets a reference to the given bool and assigns it to the EnableClientRestrictions field.
func (o *DesktopPoolCreateSpec) SetEnableClientRestrictions(v bool) {
	o.EnableClientRestrictions = &v
}

// GetEnableProvisioning returns the EnableProvisioning field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetEnableProvisioning() bool {
	if o == nil || o.EnableProvisioning == nil {
		var ret bool
		return ret
	}
	return *o.EnableProvisioning
}

// GetEnableProvisioningOk returns a tuple with the EnableProvisioning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetEnableProvisioningOk() (*bool, bool) {
	if o == nil || o.EnableProvisioning == nil {
		return nil, false
	}
	return o.EnableProvisioning, true
}

// HasEnableProvisioning returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasEnableProvisioning() bool {
	if o != nil && o.EnableProvisioning != nil {
		return true
	}

	return false
}

// SetEnableProvisioning gets a reference to the given bool and assigns it to the EnableProvisioning field.
func (o *DesktopPoolCreateSpec) SetEnableProvisioning(v bool) {
	o.EnableProvisioning = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *DesktopPoolCreateSpec) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetFarmId returns the FarmId field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetFarmId() string {
	if o == nil || o.FarmId == nil {
		var ret string
		return ret
	}
	return *o.FarmId
}

// GetFarmIdOk returns a tuple with the FarmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetFarmIdOk() (*string, bool) {
	if o == nil || o.FarmId == nil {
		return nil, false
	}
	return o.FarmId, true
}

// HasFarmId returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasFarmId() bool {
	if o != nil && o.FarmId != nil {
		return true
	}

	return false
}

// SetFarmId gets a reference to the given string and assigns it to the FarmId field.
func (o *DesktopPoolCreateSpec) SetFarmId(v string) {
	o.FarmId = &v
}

// GetMachines returns the Machines field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetMachines() []string {
	if o == nil || o.Machines == nil {
		var ret []string
		return ret
	}
	return *o.Machines
}

// GetMachinesOk returns a tuple with the Machines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetMachinesOk() (*[]string, bool) {
	if o == nil || o.Machines == nil {
		return nil, false
	}
	return o.Machines, true
}

// HasMachines returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasMachines() bool {
	if o != nil && o.Machines != nil {
		return true
	}

	return false
}

// SetMachines gets a reference to the given []string and assigns it to the Machines field.
func (o *DesktopPoolCreateSpec) SetMachines(v []string) {
	o.Machines = &v
}

// GetName returns the Name field value
func (o *DesktopPoolCreateSpec) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DesktopPoolCreateSpec) SetName(v string) {
	o.Name = v
}

// GetNamingMethod returns the NamingMethod field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetNamingMethod() string {
	if o == nil || o.NamingMethod == nil {
		var ret string
		return ret
	}
	return *o.NamingMethod
}

// GetNamingMethodOk returns a tuple with the NamingMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetNamingMethodOk() (*string, bool) {
	if o == nil || o.NamingMethod == nil {
		return nil, false
	}
	return o.NamingMethod, true
}

// HasNamingMethod returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasNamingMethod() bool {
	if o != nil && o.NamingMethod != nil {
		return true
	}

	return false
}

// SetNamingMethod gets a reference to the given string and assigns it to the NamingMethod field.
func (o *DesktopPoolCreateSpec) SetNamingMethod(v string) {
	o.NamingMethod = &v
}

// GetNics returns the Nics field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetNics() []DesktopPoolNetworkInterfaceCardSettingsCreateSpec {
	if o == nil || o.Nics == nil {
		var ret []DesktopPoolNetworkInterfaceCardSettingsCreateSpec
		return ret
	}
	return *o.Nics
}

// GetNicsOk returns a tuple with the Nics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetNicsOk() (*[]DesktopPoolNetworkInterfaceCardSettingsCreateSpec, bool) {
	if o == nil || o.Nics == nil {
		return nil, false
	}
	return o.Nics, true
}

// HasNics returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasNics() bool {
	if o != nil && o.Nics != nil {
		return true
	}

	return false
}

// SetNics gets a reference to the given []DesktopPoolNetworkInterfaceCardSettingsCreateSpec and assigns it to the Nics field.
func (o *DesktopPoolCreateSpec) SetNics(v []DesktopPoolNetworkInterfaceCardSettingsCreateSpec) {
	o.Nics = &v
}

// GetPatternNamingSettings returns the PatternNamingSettings field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetPatternNamingSettings() DesktopPoolVirtualMachinePatternNamingSettingsCreateSpec {
	if o == nil || o.PatternNamingSettings == nil {
		var ret DesktopPoolVirtualMachinePatternNamingSettingsCreateSpec
		return ret
	}
	return *o.PatternNamingSettings
}

// GetPatternNamingSettingsOk returns a tuple with the PatternNamingSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetPatternNamingSettingsOk() (*DesktopPoolVirtualMachinePatternNamingSettingsCreateSpec, bool) {
	if o == nil || o.PatternNamingSettings == nil {
		return nil, false
	}
	return o.PatternNamingSettings, true
}

// HasPatternNamingSettings returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasPatternNamingSettings() bool {
	if o != nil && o.PatternNamingSettings != nil {
		return true
	}

	return false
}

// SetPatternNamingSettings gets a reference to the given DesktopPoolVirtualMachinePatternNamingSettingsCreateSpec and assigns it to the PatternNamingSettings field.
func (o *DesktopPoolCreateSpec) SetPatternNamingSettings(v DesktopPoolVirtualMachinePatternNamingSettingsCreateSpec) {
	o.PatternNamingSettings = &v
}

// GetProvisioningSettings returns the ProvisioningSettings field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetProvisioningSettings() DesktopPoolProvisioningSettingsCreateSpec {
	if o == nil || o.ProvisioningSettings == nil {
		var ret DesktopPoolProvisioningSettingsCreateSpec
		return ret
	}
	return *o.ProvisioningSettings
}

// GetProvisioningSettingsOk returns a tuple with the ProvisioningSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetProvisioningSettingsOk() (*DesktopPoolProvisioningSettingsCreateSpec, bool) {
	if o == nil || o.ProvisioningSettings == nil {
		return nil, false
	}
	return o.ProvisioningSettings, true
}

// HasProvisioningSettings returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasProvisioningSettings() bool {
	if o != nil && o.ProvisioningSettings != nil {
		return true
	}

	return false
}

// SetProvisioningSettings gets a reference to the given DesktopPoolProvisioningSettingsCreateSpec and assigns it to the ProvisioningSettings field.
func (o *DesktopPoolCreateSpec) SetProvisioningSettings(v DesktopPoolProvisioningSettingsCreateSpec) {
	o.ProvisioningSettings = &v
}

// GetSessionSettings returns the SessionSettings field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetSessionSettings() DesktopPoolSessionSettingsCreateSpec {
	if o == nil || o.SessionSettings == nil {
		var ret DesktopPoolSessionSettingsCreateSpec
		return ret
	}
	return *o.SessionSettings
}

// GetSessionSettingsOk returns a tuple with the SessionSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetSessionSettingsOk() (*DesktopPoolSessionSettingsCreateSpec, bool) {
	if o == nil || o.SessionSettings == nil {
		return nil, false
	}
	return o.SessionSettings, true
}

// HasSessionSettings returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasSessionSettings() bool {
	if o != nil && o.SessionSettings != nil {
		return true
	}

	return false
}

// SetSessionSettings gets a reference to the given DesktopPoolSessionSettingsCreateSpec and assigns it to the SessionSettings field.
func (o *DesktopPoolCreateSpec) SetSessionSettings(v DesktopPoolSessionSettingsCreateSpec) {
	o.SessionSettings = &v
}

// GetSessionType returns the SessionType field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetSessionType() string {
	if o == nil || o.SessionType == nil {
		var ret string
		return ret
	}
	return *o.SessionType
}

// GetSessionTypeOk returns a tuple with the SessionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetSessionTypeOk() (*string, bool) {
	if o == nil || o.SessionType == nil {
		return nil, false
	}
	return o.SessionType, true
}

// HasSessionType returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasSessionType() bool {
	if o != nil && o.SessionType != nil {
		return true
	}

	return false
}

// SetSessionType gets a reference to the given string and assigns it to the SessionType field.
func (o *DesktopPoolCreateSpec) SetSessionType(v string) {
	o.SessionType = &v
}

// GetShortcutLocationsV2 returns the ShortcutLocationsV2 field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetShortcutLocationsV2() []string {
	if o == nil || o.ShortcutLocationsV2 == nil {
		var ret []string
		return ret
	}
	return *o.ShortcutLocationsV2
}

// GetShortcutLocationsV2Ok returns a tuple with the ShortcutLocationsV2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetShortcutLocationsV2Ok() (*[]string, bool) {
	if o == nil || o.ShortcutLocationsV2 == nil {
		return nil, false
	}
	return o.ShortcutLocationsV2, true
}

// HasShortcutLocationsV2 returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasShortcutLocationsV2() bool {
	if o != nil && o.ShortcutLocationsV2 != nil {
		return true
	}

	return false
}

// SetShortcutLocationsV2 gets a reference to the given []string and assigns it to the ShortcutLocationsV2 field.
func (o *DesktopPoolCreateSpec) SetShortcutLocationsV2(v []string) {
	o.ShortcutLocationsV2 = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *DesktopPoolCreateSpec) SetSource(v string) {
	o.Source = &v
}

// GetSpecificNamingSettings returns the SpecificNamingSettings field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetSpecificNamingSettings() DesktopPoolVirtualMachineSpecifiedNamingSettingsCreateSpec {
	if o == nil || o.SpecificNamingSettings == nil {
		var ret DesktopPoolVirtualMachineSpecifiedNamingSettingsCreateSpec
		return ret
	}
	return *o.SpecificNamingSettings
}

// GetSpecificNamingSettingsOk returns a tuple with the SpecificNamingSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetSpecificNamingSettingsOk() (*DesktopPoolVirtualMachineSpecifiedNamingSettingsCreateSpec, bool) {
	if o == nil || o.SpecificNamingSettings == nil {
		return nil, false
	}
	return o.SpecificNamingSettings, true
}

// HasSpecificNamingSettings returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasSpecificNamingSettings() bool {
	if o != nil && o.SpecificNamingSettings != nil {
		return true
	}

	return false
}

// SetSpecificNamingSettings gets a reference to the given DesktopPoolVirtualMachineSpecifiedNamingSettingsCreateSpec and assigns it to the SpecificNamingSettings field.
func (o *DesktopPoolCreateSpec) SetSpecificNamingSettings(v DesktopPoolVirtualMachineSpecifiedNamingSettingsCreateSpec) {
	o.SpecificNamingSettings = &v
}

// GetStopProvisioningOnError returns the StopProvisioningOnError field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetStopProvisioningOnError() bool {
	if o == nil || o.StopProvisioningOnError == nil {
		var ret bool
		return ret
	}
	return *o.StopProvisioningOnError
}

// GetStopProvisioningOnErrorOk returns a tuple with the StopProvisioningOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetStopProvisioningOnErrorOk() (*bool, bool) {
	if o == nil || o.StopProvisioningOnError == nil {
		return nil, false
	}
	return o.StopProvisioningOnError, true
}

// HasStopProvisioningOnError returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasStopProvisioningOnError() bool {
	if o != nil && o.StopProvisioningOnError != nil {
		return true
	}

	return false
}

// SetStopProvisioningOnError gets a reference to the given bool and assigns it to the StopProvisioningOnError field.
func (o *DesktopPoolCreateSpec) SetStopProvisioningOnError(v bool) {
	o.StopProvisioningOnError = &v
}

// GetStorageSettings returns the StorageSettings field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetStorageSettings() DesktopPoolStorageSettingsCreateSpec {
	if o == nil || o.StorageSettings == nil {
		var ret DesktopPoolStorageSettingsCreateSpec
		return ret
	}
	return *o.StorageSettings
}

// GetStorageSettingsOk returns a tuple with the StorageSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetStorageSettingsOk() (*DesktopPoolStorageSettingsCreateSpec, bool) {
	if o == nil || o.StorageSettings == nil {
		return nil, false
	}
	return o.StorageSettings, true
}

// HasStorageSettings returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasStorageSettings() bool {
	if o != nil && o.StorageSettings != nil {
		return true
	}

	return false
}

// SetStorageSettings gets a reference to the given DesktopPoolStorageSettingsCreateSpec and assigns it to the StorageSettings field.
func (o *DesktopPoolCreateSpec) SetStorageSettings(v DesktopPoolStorageSettingsCreateSpec) {
	o.StorageSettings = &v
}

// GetTransparentPageSharingScope returns the TransparentPageSharingScope field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetTransparentPageSharingScope() string {
	if o == nil || o.TransparentPageSharingScope == nil {
		var ret string
		return ret
	}
	return *o.TransparentPageSharingScope
}

// GetTransparentPageSharingScopeOk returns a tuple with the TransparentPageSharingScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetTransparentPageSharingScopeOk() (*string, bool) {
	if o == nil || o.TransparentPageSharingScope == nil {
		return nil, false
	}
	return o.TransparentPageSharingScope, true
}

// HasTransparentPageSharingScope returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasTransparentPageSharingScope() bool {
	if o != nil && o.TransparentPageSharingScope != nil {
		return true
	}

	return false
}

// SetTransparentPageSharingScope gets a reference to the given string and assigns it to the TransparentPageSharingScope field.
func (o *DesktopPoolCreateSpec) SetTransparentPageSharingScope(v string) {
	o.TransparentPageSharingScope = &v
}

// GetType returns the Type field value
func (o *DesktopPoolCreateSpec) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DesktopPoolCreateSpec) SetType(v string) {
	o.Type = v
}

// GetUserAssignment returns the UserAssignment field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetUserAssignment() string {
	if o == nil || o.UserAssignment == nil {
		var ret string
		return ret
	}
	return *o.UserAssignment
}

// GetUserAssignmentOk returns a tuple with the UserAssignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetUserAssignmentOk() (*string, bool) {
	if o == nil || o.UserAssignment == nil {
		return nil, false
	}
	return o.UserAssignment, true
}

// HasUserAssignment returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasUserAssignment() bool {
	if o != nil && o.UserAssignment != nil {
		return true
	}

	return false
}

// SetUserAssignment gets a reference to the given string and assigns it to the UserAssignment field.
func (o *DesktopPoolCreateSpec) SetUserAssignment(v string) {
	o.UserAssignment = &v
}

// GetVcenterId returns the VcenterId field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetVcenterId() string {
	if o == nil || o.VcenterId == nil {
		var ret string
		return ret
	}
	return *o.VcenterId
}

// GetVcenterIdOk returns a tuple with the VcenterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetVcenterIdOk() (*string, bool) {
	if o == nil || o.VcenterId == nil {
		return nil, false
	}
	return o.VcenterId, true
}

// HasVcenterId returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasVcenterId() bool {
	if o != nil && o.VcenterId != nil {
		return true
	}

	return false
}

// SetVcenterId gets a reference to the given string and assigns it to the VcenterId field.
func (o *DesktopPoolCreateSpec) SetVcenterId(v string) {
	o.VcenterId = &v
}

// GetViewStorageAcceleratorSettings returns the ViewStorageAcceleratorSettings field value if set, zero value otherwise.
func (o *DesktopPoolCreateSpec) GetViewStorageAcceleratorSettings() DesktopPoolViewStorageAcceleratorSettingsCreateSpec {
	if o == nil || o.ViewStorageAcceleratorSettings == nil {
		var ret DesktopPoolViewStorageAcceleratorSettingsCreateSpec
		return ret
	}
	return *o.ViewStorageAcceleratorSettings
}

// GetViewStorageAcceleratorSettingsOk returns a tuple with the ViewStorageAcceleratorSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolCreateSpec) GetViewStorageAcceleratorSettingsOk() (*DesktopPoolViewStorageAcceleratorSettingsCreateSpec, bool) {
	if o == nil || o.ViewStorageAcceleratorSettings == nil {
		return nil, false
	}
	return o.ViewStorageAcceleratorSettings, true
}

// HasViewStorageAcceleratorSettings returns a boolean if a field has been set.
func (o *DesktopPoolCreateSpec) HasViewStorageAcceleratorSettings() bool {
	if o != nil && o.ViewStorageAcceleratorSettings != nil {
		return true
	}

	return false
}

// SetViewStorageAcceleratorSettings gets a reference to the given DesktopPoolViewStorageAcceleratorSettingsCreateSpec and assigns it to the ViewStorageAcceleratorSettings field.
func (o *DesktopPoolCreateSpec) SetViewStorageAcceleratorSettings(v DesktopPoolViewStorageAcceleratorSettingsCreateSpec) {
	o.ViewStorageAcceleratorSettings = &v
}

func (o DesktopPoolCreateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessGroupId != nil {
		toSerialize["access_group_id"] = o.AccessGroupId
	}
	if o.AllowMultipleUserAssignments != nil {
		toSerialize["allow_multiple_user_assignments"] = o.AllowMultipleUserAssignments
	}
	if o.AllowRdsPoolMultiSessionPerUser != nil {
		toSerialize["allow_rds_pool_multi_session_per_user"] = o.AllowRdsPoolMultiSessionPerUser
	}
	if o.AutomaticUserAssignment != nil {
		toSerialize["automatic_user_assignment"] = o.AutomaticUserAssignment
	}
	if o.CategoryFolderName != nil {
		toSerialize["category_folder_name"] = o.CategoryFolderName
	}
	if o.CloudAssigned != nil {
		toSerialize["cloud_assigned"] = o.CloudAssigned
	}
	if o.CloudBrokered != nil {
		toSerialize["cloud_brokered"] = o.CloudBrokered
	}
	if o.CloudManaged != nil {
		toSerialize["cloud_managed"] = o.CloudManaged
	}
	if o.CsRestrictionTags != nil {
		toSerialize["cs_restriction_tags"] = o.CsRestrictionTags
	}
	if o.CustomizationSettings != nil {
		toSerialize["customization_settings"] = o.CustomizationSettings
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayAssignedMachineName != nil {
		toSerialize["display_assigned_machine_name"] = o.DisplayAssignedMachineName
	}
	if o.DisplayMachineAlias != nil {
		toSerialize["display_machine_alias"] = o.DisplayMachineAlias
	}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.DisplayProtocolSettings != nil {
		toSerialize["display_protocol_settings"] = o.DisplayProtocolSettings
	}
	if o.EnableClientRestrictions != nil {
		toSerialize["enable_client_restrictions"] = o.EnableClientRestrictions
	}
	if o.EnableProvisioning != nil {
		toSerialize["enable_provisioning"] = o.EnableProvisioning
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.FarmId != nil {
		toSerialize["farm_id"] = o.FarmId
	}
	if o.Machines != nil {
		toSerialize["machines"] = o.Machines
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.NamingMethod != nil {
		toSerialize["naming_method"] = o.NamingMethod
	}
	if o.Nics != nil {
		toSerialize["nics"] = o.Nics
	}
	if o.PatternNamingSettings != nil {
		toSerialize["pattern_naming_settings"] = o.PatternNamingSettings
	}
	if o.ProvisioningSettings != nil {
		toSerialize["provisioning_settings"] = o.ProvisioningSettings
	}
	if o.SessionSettings != nil {
		toSerialize["session_settings"] = o.SessionSettings
	}
	if o.SessionType != nil {
		toSerialize["session_type"] = o.SessionType
	}
	if o.ShortcutLocationsV2 != nil {
		toSerialize["shortcut_locations_v2"] = o.ShortcutLocationsV2
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.SpecificNamingSettings != nil {
		toSerialize["specific_naming_settings"] = o.SpecificNamingSettings
	}
	if o.StopProvisioningOnError != nil {
		toSerialize["stop_provisioning_on_error"] = o.StopProvisioningOnError
	}
	if o.StorageSettings != nil {
		toSerialize["storage_settings"] = o.StorageSettings
	}
	if o.TransparentPageSharingScope != nil {
		toSerialize["transparent_page_sharing_scope"] = o.TransparentPageSharingScope
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.UserAssignment != nil {
		toSerialize["user_assignment"] = o.UserAssignment
	}
	if o.VcenterId != nil {
		toSerialize["vcenter_id"] = o.VcenterId
	}
	if o.ViewStorageAcceleratorSettings != nil {
		toSerialize["view_storage_accelerator_settings"] = o.ViewStorageAcceleratorSettings
	}
	return json.Marshal(toSerialize)
}

type NullableDesktopPoolCreateSpec struct {
	value *DesktopPoolCreateSpec
	isSet bool
}

func (v NullableDesktopPoolCreateSpec) Get() *DesktopPoolCreateSpec {
	return v.value
}

func (v *NullableDesktopPoolCreateSpec) Set(val *DesktopPoolCreateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableDesktopPoolCreateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableDesktopPoolCreateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDesktopPoolCreateSpec(val *DesktopPoolCreateSpec) *NullableDesktopPoolCreateSpec {
	return &NullableDesktopPoolCreateSpec{value: val, isSet: true}
}

func (v NullableDesktopPoolCreateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDesktopPoolCreateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
