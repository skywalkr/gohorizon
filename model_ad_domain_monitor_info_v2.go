/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2111
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// ADDomainMonitorInfoV2 Monitoring information related to AD Domain.
type ADDomainMonitorInfoV2 struct {
	// Information about the AD Domain connections from each of the connection servers.
	ConnectionServers *[]ADDomainMonitorConnectionServerV2 `json:"connection_servers,omitempty"`
	// The DNS name for the domain.
	DnsName *string `json:"dns_name,omitempty"`
	// The NetBIOS name for the domain.
	NetbiosName *string `json:"netbios_name,omitempty"`
	// If this is an NT4 domain or not.
	Nt4Domain *bool `json:"nt4_domain,omitempty"`
}

// NewADDomainMonitorInfoV2 instantiates a new ADDomainMonitorInfoV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewADDomainMonitorInfoV2() *ADDomainMonitorInfoV2 {
	this := ADDomainMonitorInfoV2{}
	return &this
}

// NewADDomainMonitorInfoV2WithDefaults instantiates a new ADDomainMonitorInfoV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewADDomainMonitorInfoV2WithDefaults() *ADDomainMonitorInfoV2 {
	this := ADDomainMonitorInfoV2{}
	return &this
}

// GetConnectionServers returns the ConnectionServers field value if set, zero value otherwise.
func (o *ADDomainMonitorInfoV2) GetConnectionServers() []ADDomainMonitorConnectionServerV2 {
	if o == nil || o.ConnectionServers == nil {
		var ret []ADDomainMonitorConnectionServerV2
		return ret
	}
	return *o.ConnectionServers
}

// GetConnectionServersOk returns a tuple with the ConnectionServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADDomainMonitorInfoV2) GetConnectionServersOk() (*[]ADDomainMonitorConnectionServerV2, bool) {
	if o == nil || o.ConnectionServers == nil {
		return nil, false
	}
	return o.ConnectionServers, true
}

// HasConnectionServers returns a boolean if a field has been set.
func (o *ADDomainMonitorInfoV2) HasConnectionServers() bool {
	if o != nil && o.ConnectionServers != nil {
		return true
	}

	return false
}

// SetConnectionServers gets a reference to the given []ADDomainMonitorConnectionServerV2 and assigns it to the ConnectionServers field.
func (o *ADDomainMonitorInfoV2) SetConnectionServers(v []ADDomainMonitorConnectionServerV2) {
	o.ConnectionServers = &v
}

// GetDnsName returns the DnsName field value if set, zero value otherwise.
func (o *ADDomainMonitorInfoV2) GetDnsName() string {
	if o == nil || o.DnsName == nil {
		var ret string
		return ret
	}
	return *o.DnsName
}

// GetDnsNameOk returns a tuple with the DnsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADDomainMonitorInfoV2) GetDnsNameOk() (*string, bool) {
	if o == nil || o.DnsName == nil {
		return nil, false
	}
	return o.DnsName, true
}

// HasDnsName returns a boolean if a field has been set.
func (o *ADDomainMonitorInfoV2) HasDnsName() bool {
	if o != nil && o.DnsName != nil {
		return true
	}

	return false
}

// SetDnsName gets a reference to the given string and assigns it to the DnsName field.
func (o *ADDomainMonitorInfoV2) SetDnsName(v string) {
	o.DnsName = &v
}

// GetNetbiosName returns the NetbiosName field value if set, zero value otherwise.
func (o *ADDomainMonitorInfoV2) GetNetbiosName() string {
	if o == nil || o.NetbiosName == nil {
		var ret string
		return ret
	}
	return *o.NetbiosName
}

// GetNetbiosNameOk returns a tuple with the NetbiosName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADDomainMonitorInfoV2) GetNetbiosNameOk() (*string, bool) {
	if o == nil || o.NetbiosName == nil {
		return nil, false
	}
	return o.NetbiosName, true
}

// HasNetbiosName returns a boolean if a field has been set.
func (o *ADDomainMonitorInfoV2) HasNetbiosName() bool {
	if o != nil && o.NetbiosName != nil {
		return true
	}

	return false
}

// SetNetbiosName gets a reference to the given string and assigns it to the NetbiosName field.
func (o *ADDomainMonitorInfoV2) SetNetbiosName(v string) {
	o.NetbiosName = &v
}

// GetNt4Domain returns the Nt4Domain field value if set, zero value otherwise.
func (o *ADDomainMonitorInfoV2) GetNt4Domain() bool {
	if o == nil || o.Nt4Domain == nil {
		var ret bool
		return ret
	}
	return *o.Nt4Domain
}

// GetNt4DomainOk returns a tuple with the Nt4Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADDomainMonitorInfoV2) GetNt4DomainOk() (*bool, bool) {
	if o == nil || o.Nt4Domain == nil {
		return nil, false
	}
	return o.Nt4Domain, true
}

// HasNt4Domain returns a boolean if a field has been set.
func (o *ADDomainMonitorInfoV2) HasNt4Domain() bool {
	if o != nil && o.Nt4Domain != nil {
		return true
	}

	return false
}

// SetNt4Domain gets a reference to the given bool and assigns it to the Nt4Domain field.
func (o *ADDomainMonitorInfoV2) SetNt4Domain(v bool) {
	o.Nt4Domain = &v
}

func (o ADDomainMonitorInfoV2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConnectionServers != nil {
		toSerialize["connection_servers"] = o.ConnectionServers
	}
	if o.DnsName != nil {
		toSerialize["dns_name"] = o.DnsName
	}
	if o.NetbiosName != nil {
		toSerialize["netbios_name"] = o.NetbiosName
	}
	if o.Nt4Domain != nil {
		toSerialize["nt4_domain"] = o.Nt4Domain
	}
	return json.Marshal(toSerialize)
}

type NullableADDomainMonitorInfoV2 struct {
	value *ADDomainMonitorInfoV2
	isSet bool
}

func (v NullableADDomainMonitorInfoV2) Get() *ADDomainMonitorInfoV2 {
	return v.value
}

func (v *NullableADDomainMonitorInfoV2) Set(val *ADDomainMonitorInfoV2) {
	v.value = val
	v.isSet = true
}

func (v NullableADDomainMonitorInfoV2) IsSet() bool {
	return v.isSet
}

func (v *NullableADDomainMonitorInfoV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableADDomainMonitorInfoV2(val *ADDomainMonitorInfoV2) *NullableADDomainMonitorInfoV2 {
	return &NullableADDomainMonitorInfoV2{value: val, isSet: true}
}

func (v NullableADDomainMonitorInfoV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableADDomainMonitorInfoV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
