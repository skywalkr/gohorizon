/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the LicenseInfoV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseInfoV2{}

// LicenseInfoV2 Information about a license.
type LicenseInfoV2 struct {
	// Indicates whether agent auto upgrade is enabled.
	AgentAutoUpgradeEnabled *bool `json:"agent_auto_upgrade_enabled,omitempty"`
	// Whether application pool launch is enabled.
	ApplicationPoolLaunchEnabled *bool `json:"application_pool_launch_enabled,omitempty"`
	// Whether desktop pool launch is enabled.
	DesktopPoolLaunchEnabled *bool `json:"desktop_pool_launch_enabled,omitempty"`
	// The expiration date of the license. Caller should have permission to GLOBAL_CONFIG_VIEW privilege for this field to be populated.
	ExpirationTime *int64 `json:"expiration_time,omitempty"`
	// The grace period in days. Caller should have permission to GLOBAL_CONFIG_VIEW privilege for this field to be populated.
	GracePeriodDays *int32 `json:"grace_period_days,omitempty"`
	// Whether help desk is enabled.
	HelpDeskEnabled *bool `json:"help_desk_enabled,omitempty"`
	// Whether instant clone is enabled.
	InstantCloneEnabled *bool `json:"instant_clone_enabled,omitempty"`
	// The license edition. Caller should have permission to GLOBAL_CONFIG_VIEW privilege for this field to be populated. * ENTERPRISE_CONCURRENT_USER: VMware Enterprise. * HORIZON_ADVANCED_CONCURRENT_USER: VMware Horizon Advanced (Concurrent User). * HORIZON_ADVANCED_NAMED_USER: VMware Horizon Advanced (Named User). * HORIZON_APPS_ADVANCED_CONCURRENT_USER: Mware Horizon Apps 7 Advanced (Concurrent User). * HORIZON_APPS_ADVANCED_NAMED_USER: VMware Horizon Apps 7 Advanced (Named User). * HORIZON_APPS_STANDARD_CONCURRENT_USER: VMware Horizon Apps 7 Standard  (Concurrent User). * HORIZON_APPS_STANDARD_NAMED_USER: VMware Horizon Apps 7 Standard (Named User). * HORIZON_ENTERPRISE_CONCURRENT_USER: Horizon Enterprise (Concurrent User). * HORIZON_ENTERPRISE_NAMED_USER: Horizon Enterprise (Named User). * HORIZON_STANDARD_CONCURRENT_USER: VMware Horizon Standard  (Concurrent User). * WS1_ENTERPRISE_NAMED_USER: Workspace ONE Enterprise. * WS1_ENTERPRISE_WITH_VDI_NAMED_USER: Workspace ONE Enterprise with VDI.
	LicenseEdition *string `json:"license_edition,omitempty"`
	// The license health. The property will only be set when license_mode is set to SUBSCRIPTION. Caller should have permission to GLOBAL_CONFIG_VIEW privilege for this field to be populated. * GREEN: License is not expired and license update is missed but not more than 7 days. * RED: License is expired. * YELLOW: License is not expired and license update is missed for more than 7 days.
	LicenseHealth *string `json:"license_health,omitempty"`
	// The license key in partially redacted form. Caller should have permission to GLOBAL_CONFIG_VIEW privilege for this field to be populated.
	LicenseKey *string `json:"license_key,omitempty"`
	// The license mode used. Caller should have permission to GLOBAL_CONFIG_VIEW privilege for this field to be populated. * DEFAULT: Perpetual license is in use. * PERPETUAL_ONLY: Perpetual license is in use. * SUBSCRIPTION: Cloud subscription license is in use.
	LicenseMode *string `json:"license_mode,omitempty"`
	// Whether the horizon is licensed.
	Licensed *bool `json:"licensed,omitempty"`
	// Whether session collaboration is enabled.
	SessionCollaborationEnabled *bool `json:"session_collaboration_enabled,omitempty"`
	// The expiry of subscription slice. The property will only be set  when license_mode is set to SUBSCRIPTION. Caller should have permission to GLOBAL_CONFIG_VIEW privilege for this field to be populated.
	SubscriptionSliceExpiry *int64 `json:"subscription_slice_expiry,omitempty"`
	// TThe usage model for this license. * CONCURRENT_USER: The is the license usage model for a standalone install. * NAMED_USER: This is the license usage model for an install as part of a suite.
	UsageModel *string `json:"usage_model,omitempty"`
}

// NewLicenseInfoV2 instantiates a new LicenseInfoV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseInfoV2() *LicenseInfoV2 {
	this := LicenseInfoV2{}
	return &this
}

// NewLicenseInfoV2WithDefaults instantiates a new LicenseInfoV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseInfoV2WithDefaults() *LicenseInfoV2 {
	this := LicenseInfoV2{}
	return &this
}

// GetAgentAutoUpgradeEnabled returns the AgentAutoUpgradeEnabled field value if set, zero value otherwise.
func (o *LicenseInfoV2) GetAgentAutoUpgradeEnabled() bool {
	if o == nil || IsNil(o.AgentAutoUpgradeEnabled) {
		var ret bool
		return ret
	}
	return *o.AgentAutoUpgradeEnabled
}

// GetAgentAutoUpgradeEnabledOk returns a tuple with the AgentAutoUpgradeEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoV2) GetAgentAutoUpgradeEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AgentAutoUpgradeEnabled) {
		return nil, false
	}
	return o.AgentAutoUpgradeEnabled, true
}

// HasAgentAutoUpgradeEnabled returns a boolean if a field has been set.
func (o *LicenseInfoV2) HasAgentAutoUpgradeEnabled() bool {
	if o != nil && !IsNil(o.AgentAutoUpgradeEnabled) {
		return true
	}

	return false
}

// SetAgentAutoUpgradeEnabled gets a reference to the given bool and assigns it to the AgentAutoUpgradeEnabled field.
func (o *LicenseInfoV2) SetAgentAutoUpgradeEnabled(v bool) {
	o.AgentAutoUpgradeEnabled = &v
}

// GetApplicationPoolLaunchEnabled returns the ApplicationPoolLaunchEnabled field value if set, zero value otherwise.
func (o *LicenseInfoV2) GetApplicationPoolLaunchEnabled() bool {
	if o == nil || IsNil(o.ApplicationPoolLaunchEnabled) {
		var ret bool
		return ret
	}
	return *o.ApplicationPoolLaunchEnabled
}

// GetApplicationPoolLaunchEnabledOk returns a tuple with the ApplicationPoolLaunchEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoV2) GetApplicationPoolLaunchEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ApplicationPoolLaunchEnabled) {
		return nil, false
	}
	return o.ApplicationPoolLaunchEnabled, true
}

// HasApplicationPoolLaunchEnabled returns a boolean if a field has been set.
func (o *LicenseInfoV2) HasApplicationPoolLaunchEnabled() bool {
	if o != nil && !IsNil(o.ApplicationPoolLaunchEnabled) {
		return true
	}

	return false
}

// SetApplicationPoolLaunchEnabled gets a reference to the given bool and assigns it to the ApplicationPoolLaunchEnabled field.
func (o *LicenseInfoV2) SetApplicationPoolLaunchEnabled(v bool) {
	o.ApplicationPoolLaunchEnabled = &v
}

// GetDesktopPoolLaunchEnabled returns the DesktopPoolLaunchEnabled field value if set, zero value otherwise.
func (o *LicenseInfoV2) GetDesktopPoolLaunchEnabled() bool {
	if o == nil || IsNil(o.DesktopPoolLaunchEnabled) {
		var ret bool
		return ret
	}
	return *o.DesktopPoolLaunchEnabled
}

// GetDesktopPoolLaunchEnabledOk returns a tuple with the DesktopPoolLaunchEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoV2) GetDesktopPoolLaunchEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DesktopPoolLaunchEnabled) {
		return nil, false
	}
	return o.DesktopPoolLaunchEnabled, true
}

// HasDesktopPoolLaunchEnabled returns a boolean if a field has been set.
func (o *LicenseInfoV2) HasDesktopPoolLaunchEnabled() bool {
	if o != nil && !IsNil(o.DesktopPoolLaunchEnabled) {
		return true
	}

	return false
}

// SetDesktopPoolLaunchEnabled gets a reference to the given bool and assigns it to the DesktopPoolLaunchEnabled field.
func (o *LicenseInfoV2) SetDesktopPoolLaunchEnabled(v bool) {
	o.DesktopPoolLaunchEnabled = &v
}

// GetExpirationTime returns the ExpirationTime field value if set, zero value otherwise.
func (o *LicenseInfoV2) GetExpirationTime() int64 {
	if o == nil || IsNil(o.ExpirationTime) {
		var ret int64
		return ret
	}
	return *o.ExpirationTime
}

// GetExpirationTimeOk returns a tuple with the ExpirationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoV2) GetExpirationTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpirationTime) {
		return nil, false
	}
	return o.ExpirationTime, true
}

// HasExpirationTime returns a boolean if a field has been set.
func (o *LicenseInfoV2) HasExpirationTime() bool {
	if o != nil && !IsNil(o.ExpirationTime) {
		return true
	}

	return false
}

// SetExpirationTime gets a reference to the given int64 and assigns it to the ExpirationTime field.
func (o *LicenseInfoV2) SetExpirationTime(v int64) {
	o.ExpirationTime = &v
}

// GetGracePeriodDays returns the GracePeriodDays field value if set, zero value otherwise.
func (o *LicenseInfoV2) GetGracePeriodDays() int32 {
	if o == nil || IsNil(o.GracePeriodDays) {
		var ret int32
		return ret
	}
	return *o.GracePeriodDays
}

// GetGracePeriodDaysOk returns a tuple with the GracePeriodDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoV2) GetGracePeriodDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.GracePeriodDays) {
		return nil, false
	}
	return o.GracePeriodDays, true
}

// HasGracePeriodDays returns a boolean if a field has been set.
func (o *LicenseInfoV2) HasGracePeriodDays() bool {
	if o != nil && !IsNil(o.GracePeriodDays) {
		return true
	}

	return false
}

// SetGracePeriodDays gets a reference to the given int32 and assigns it to the GracePeriodDays field.
func (o *LicenseInfoV2) SetGracePeriodDays(v int32) {
	o.GracePeriodDays = &v
}

// GetHelpDeskEnabled returns the HelpDeskEnabled field value if set, zero value otherwise.
func (o *LicenseInfoV2) GetHelpDeskEnabled() bool {
	if o == nil || IsNil(o.HelpDeskEnabled) {
		var ret bool
		return ret
	}
	return *o.HelpDeskEnabled
}

// GetHelpDeskEnabledOk returns a tuple with the HelpDeskEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoV2) GetHelpDeskEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.HelpDeskEnabled) {
		return nil, false
	}
	return o.HelpDeskEnabled, true
}

// HasHelpDeskEnabled returns a boolean if a field has been set.
func (o *LicenseInfoV2) HasHelpDeskEnabled() bool {
	if o != nil && !IsNil(o.HelpDeskEnabled) {
		return true
	}

	return false
}

// SetHelpDeskEnabled gets a reference to the given bool and assigns it to the HelpDeskEnabled field.
func (o *LicenseInfoV2) SetHelpDeskEnabled(v bool) {
	o.HelpDeskEnabled = &v
}

// GetInstantCloneEnabled returns the InstantCloneEnabled field value if set, zero value otherwise.
func (o *LicenseInfoV2) GetInstantCloneEnabled() bool {
	if o == nil || IsNil(o.InstantCloneEnabled) {
		var ret bool
		return ret
	}
	return *o.InstantCloneEnabled
}

// GetInstantCloneEnabledOk returns a tuple with the InstantCloneEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoV2) GetInstantCloneEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.InstantCloneEnabled) {
		return nil, false
	}
	return o.InstantCloneEnabled, true
}

// HasInstantCloneEnabled returns a boolean if a field has been set.
func (o *LicenseInfoV2) HasInstantCloneEnabled() bool {
	if o != nil && !IsNil(o.InstantCloneEnabled) {
		return true
	}

	return false
}

// SetInstantCloneEnabled gets a reference to the given bool and assigns it to the InstantCloneEnabled field.
func (o *LicenseInfoV2) SetInstantCloneEnabled(v bool) {
	o.InstantCloneEnabled = &v
}

// GetLicenseEdition returns the LicenseEdition field value if set, zero value otherwise.
func (o *LicenseInfoV2) GetLicenseEdition() string {
	if o == nil || IsNil(o.LicenseEdition) {
		var ret string
		return ret
	}
	return *o.LicenseEdition
}

// GetLicenseEditionOk returns a tuple with the LicenseEdition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoV2) GetLicenseEditionOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseEdition) {
		return nil, false
	}
	return o.LicenseEdition, true
}

// HasLicenseEdition returns a boolean if a field has been set.
func (o *LicenseInfoV2) HasLicenseEdition() bool {
	if o != nil && !IsNil(o.LicenseEdition) {
		return true
	}

	return false
}

// SetLicenseEdition gets a reference to the given string and assigns it to the LicenseEdition field.
func (o *LicenseInfoV2) SetLicenseEdition(v string) {
	o.LicenseEdition = &v
}

// GetLicenseHealth returns the LicenseHealth field value if set, zero value otherwise.
func (o *LicenseInfoV2) GetLicenseHealth() string {
	if o == nil || IsNil(o.LicenseHealth) {
		var ret string
		return ret
	}
	return *o.LicenseHealth
}

// GetLicenseHealthOk returns a tuple with the LicenseHealth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoV2) GetLicenseHealthOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseHealth) {
		return nil, false
	}
	return o.LicenseHealth, true
}

// HasLicenseHealth returns a boolean if a field has been set.
func (o *LicenseInfoV2) HasLicenseHealth() bool {
	if o != nil && !IsNil(o.LicenseHealth) {
		return true
	}

	return false
}

// SetLicenseHealth gets a reference to the given string and assigns it to the LicenseHealth field.
func (o *LicenseInfoV2) SetLicenseHealth(v string) {
	o.LicenseHealth = &v
}

// GetLicenseKey returns the LicenseKey field value if set, zero value otherwise.
func (o *LicenseInfoV2) GetLicenseKey() string {
	if o == nil || IsNil(o.LicenseKey) {
		var ret string
		return ret
	}
	return *o.LicenseKey
}

// GetLicenseKeyOk returns a tuple with the LicenseKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoV2) GetLicenseKeyOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseKey) {
		return nil, false
	}
	return o.LicenseKey, true
}

// HasLicenseKey returns a boolean if a field has been set.
func (o *LicenseInfoV2) HasLicenseKey() bool {
	if o != nil && !IsNil(o.LicenseKey) {
		return true
	}

	return false
}

// SetLicenseKey gets a reference to the given string and assigns it to the LicenseKey field.
func (o *LicenseInfoV2) SetLicenseKey(v string) {
	o.LicenseKey = &v
}

// GetLicenseMode returns the LicenseMode field value if set, zero value otherwise.
func (o *LicenseInfoV2) GetLicenseMode() string {
	if o == nil || IsNil(o.LicenseMode) {
		var ret string
		return ret
	}
	return *o.LicenseMode
}

// GetLicenseModeOk returns a tuple with the LicenseMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoV2) GetLicenseModeOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseMode) {
		return nil, false
	}
	return o.LicenseMode, true
}

// HasLicenseMode returns a boolean if a field has been set.
func (o *LicenseInfoV2) HasLicenseMode() bool {
	if o != nil && !IsNil(o.LicenseMode) {
		return true
	}

	return false
}

// SetLicenseMode gets a reference to the given string and assigns it to the LicenseMode field.
func (o *LicenseInfoV2) SetLicenseMode(v string) {
	o.LicenseMode = &v
}

// GetLicensed returns the Licensed field value if set, zero value otherwise.
func (o *LicenseInfoV2) GetLicensed() bool {
	if o == nil || IsNil(o.Licensed) {
		var ret bool
		return ret
	}
	return *o.Licensed
}

// GetLicensedOk returns a tuple with the Licensed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoV2) GetLicensedOk() (*bool, bool) {
	if o == nil || IsNil(o.Licensed) {
		return nil, false
	}
	return o.Licensed, true
}

// HasLicensed returns a boolean if a field has been set.
func (o *LicenseInfoV2) HasLicensed() bool {
	if o != nil && !IsNil(o.Licensed) {
		return true
	}

	return false
}

// SetLicensed gets a reference to the given bool and assigns it to the Licensed field.
func (o *LicenseInfoV2) SetLicensed(v bool) {
	o.Licensed = &v
}

// GetSessionCollaborationEnabled returns the SessionCollaborationEnabled field value if set, zero value otherwise.
func (o *LicenseInfoV2) GetSessionCollaborationEnabled() bool {
	if o == nil || IsNil(o.SessionCollaborationEnabled) {
		var ret bool
		return ret
	}
	return *o.SessionCollaborationEnabled
}

// GetSessionCollaborationEnabledOk returns a tuple with the SessionCollaborationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoV2) GetSessionCollaborationEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SessionCollaborationEnabled) {
		return nil, false
	}
	return o.SessionCollaborationEnabled, true
}

// HasSessionCollaborationEnabled returns a boolean if a field has been set.
func (o *LicenseInfoV2) HasSessionCollaborationEnabled() bool {
	if o != nil && !IsNil(o.SessionCollaborationEnabled) {
		return true
	}

	return false
}

// SetSessionCollaborationEnabled gets a reference to the given bool and assigns it to the SessionCollaborationEnabled field.
func (o *LicenseInfoV2) SetSessionCollaborationEnabled(v bool) {
	o.SessionCollaborationEnabled = &v
}

// GetSubscriptionSliceExpiry returns the SubscriptionSliceExpiry field value if set, zero value otherwise.
func (o *LicenseInfoV2) GetSubscriptionSliceExpiry() int64 {
	if o == nil || IsNil(o.SubscriptionSliceExpiry) {
		var ret int64
		return ret
	}
	return *o.SubscriptionSliceExpiry
}

// GetSubscriptionSliceExpiryOk returns a tuple with the SubscriptionSliceExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoV2) GetSubscriptionSliceExpiryOk() (*int64, bool) {
	if o == nil || IsNil(o.SubscriptionSliceExpiry) {
		return nil, false
	}
	return o.SubscriptionSliceExpiry, true
}

// HasSubscriptionSliceExpiry returns a boolean if a field has been set.
func (o *LicenseInfoV2) HasSubscriptionSliceExpiry() bool {
	if o != nil && !IsNil(o.SubscriptionSliceExpiry) {
		return true
	}

	return false
}

// SetSubscriptionSliceExpiry gets a reference to the given int64 and assigns it to the SubscriptionSliceExpiry field.
func (o *LicenseInfoV2) SetSubscriptionSliceExpiry(v int64) {
	o.SubscriptionSliceExpiry = &v
}

// GetUsageModel returns the UsageModel field value if set, zero value otherwise.
func (o *LicenseInfoV2) GetUsageModel() string {
	if o == nil || IsNil(o.UsageModel) {
		var ret string
		return ret
	}
	return *o.UsageModel
}

// GetUsageModelOk returns a tuple with the UsageModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoV2) GetUsageModelOk() (*string, bool) {
	if o == nil || IsNil(o.UsageModel) {
		return nil, false
	}
	return o.UsageModel, true
}

// HasUsageModel returns a boolean if a field has been set.
func (o *LicenseInfoV2) HasUsageModel() bool {
	if o != nil && !IsNil(o.UsageModel) {
		return true
	}

	return false
}

// SetUsageModel gets a reference to the given string and assigns it to the UsageModel field.
func (o *LicenseInfoV2) SetUsageModel(v string) {
	o.UsageModel = &v
}

func (o LicenseInfoV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseInfoV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AgentAutoUpgradeEnabled) {
		toSerialize["agent_auto_upgrade_enabled"] = o.AgentAutoUpgradeEnabled
	}
	if !IsNil(o.ApplicationPoolLaunchEnabled) {
		toSerialize["application_pool_launch_enabled"] = o.ApplicationPoolLaunchEnabled
	}
	if !IsNil(o.DesktopPoolLaunchEnabled) {
		toSerialize["desktop_pool_launch_enabled"] = o.DesktopPoolLaunchEnabled
	}
	if !IsNil(o.ExpirationTime) {
		toSerialize["expiration_time"] = o.ExpirationTime
	}
	if !IsNil(o.GracePeriodDays) {
		toSerialize["grace_period_days"] = o.GracePeriodDays
	}
	if !IsNil(o.HelpDeskEnabled) {
		toSerialize["help_desk_enabled"] = o.HelpDeskEnabled
	}
	if !IsNil(o.InstantCloneEnabled) {
		toSerialize["instant_clone_enabled"] = o.InstantCloneEnabled
	}
	if !IsNil(o.LicenseEdition) {
		toSerialize["license_edition"] = o.LicenseEdition
	}
	if !IsNil(o.LicenseHealth) {
		toSerialize["license_health"] = o.LicenseHealth
	}
	if !IsNil(o.LicenseKey) {
		toSerialize["license_key"] = o.LicenseKey
	}
	if !IsNil(o.LicenseMode) {
		toSerialize["license_mode"] = o.LicenseMode
	}
	if !IsNil(o.Licensed) {
		toSerialize["licensed"] = o.Licensed
	}
	if !IsNil(o.SessionCollaborationEnabled) {
		toSerialize["session_collaboration_enabled"] = o.SessionCollaborationEnabled
	}
	if !IsNil(o.SubscriptionSliceExpiry) {
		toSerialize["subscription_slice_expiry"] = o.SubscriptionSliceExpiry
	}
	if !IsNil(o.UsageModel) {
		toSerialize["usage_model"] = o.UsageModel
	}
	return toSerialize, nil
}

type NullableLicenseInfoV2 struct {
	value *LicenseInfoV2
	isSet bool
}

func (v NullableLicenseInfoV2) Get() *LicenseInfoV2 {
	return v.value
}

func (v *NullableLicenseInfoV2) Set(val *LicenseInfoV2) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseInfoV2) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseInfoV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseInfoV2(val *LicenseInfoV2) *NullableLicenseInfoV2 {
	return &NullableLicenseInfoV2{value: val, isSet: true}
}

func (v NullableLicenseInfoV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseInfoV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


