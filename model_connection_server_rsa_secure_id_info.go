/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the ConnectionServerRSASecureIdInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionServerRSASecureIdInfo{}

// ConnectionServerRSASecureIdInfo Information related to Connection server RSA SecureId authentication settings.
type ConnectionServerRSASecureIdInfo struct {
	// When set to TRUE the SecureID node secret is cleared
	ClearNodeSecret *bool `json:"clear_node_secret,omitempty"`
	// Indicates how SecureID names map to AD usernames. It is false for not mapped.
	NameMapping *bool `json:"name_mapping,omitempty"`
	// Indicates whether SecureID authentication is required.
	SecureIdEnabled *bool `json:"secure_id_enabled,omitempty"`
	// If SecureID sdconf.rec file is already uploaded. The client can never download the file.
	SecurityFileUploaded *bool `json:"security_file_uploaded,omitempty"`
}

// NewConnectionServerRSASecureIdInfo instantiates a new ConnectionServerRSASecureIdInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionServerRSASecureIdInfo() *ConnectionServerRSASecureIdInfo {
	this := ConnectionServerRSASecureIdInfo{}
	return &this
}

// NewConnectionServerRSASecureIdInfoWithDefaults instantiates a new ConnectionServerRSASecureIdInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionServerRSASecureIdInfoWithDefaults() *ConnectionServerRSASecureIdInfo {
	this := ConnectionServerRSASecureIdInfo{}
	return &this
}

// GetClearNodeSecret returns the ClearNodeSecret field value if set, zero value otherwise.
func (o *ConnectionServerRSASecureIdInfo) GetClearNodeSecret() bool {
	if o == nil || IsNil(o.ClearNodeSecret) {
		var ret bool
		return ret
	}
	return *o.ClearNodeSecret
}

// GetClearNodeSecretOk returns a tuple with the ClearNodeSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerRSASecureIdInfo) GetClearNodeSecretOk() (*bool, bool) {
	if o == nil || IsNil(o.ClearNodeSecret) {
		return nil, false
	}
	return o.ClearNodeSecret, true
}

// HasClearNodeSecret returns a boolean if a field has been set.
func (o *ConnectionServerRSASecureIdInfo) HasClearNodeSecret() bool {
	if o != nil && !IsNil(o.ClearNodeSecret) {
		return true
	}

	return false
}

// SetClearNodeSecret gets a reference to the given bool and assigns it to the ClearNodeSecret field.
func (o *ConnectionServerRSASecureIdInfo) SetClearNodeSecret(v bool) {
	o.ClearNodeSecret = &v
}

// GetNameMapping returns the NameMapping field value if set, zero value otherwise.
func (o *ConnectionServerRSASecureIdInfo) GetNameMapping() bool {
	if o == nil || IsNil(o.NameMapping) {
		var ret bool
		return ret
	}
	return *o.NameMapping
}

// GetNameMappingOk returns a tuple with the NameMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerRSASecureIdInfo) GetNameMappingOk() (*bool, bool) {
	if o == nil || IsNil(o.NameMapping) {
		return nil, false
	}
	return o.NameMapping, true
}

// HasNameMapping returns a boolean if a field has been set.
func (o *ConnectionServerRSASecureIdInfo) HasNameMapping() bool {
	if o != nil && !IsNil(o.NameMapping) {
		return true
	}

	return false
}

// SetNameMapping gets a reference to the given bool and assigns it to the NameMapping field.
func (o *ConnectionServerRSASecureIdInfo) SetNameMapping(v bool) {
	o.NameMapping = &v
}

// GetSecureIdEnabled returns the SecureIdEnabled field value if set, zero value otherwise.
func (o *ConnectionServerRSASecureIdInfo) GetSecureIdEnabled() bool {
	if o == nil || IsNil(o.SecureIdEnabled) {
		var ret bool
		return ret
	}
	return *o.SecureIdEnabled
}

// GetSecureIdEnabledOk returns a tuple with the SecureIdEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerRSASecureIdInfo) GetSecureIdEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SecureIdEnabled) {
		return nil, false
	}
	return o.SecureIdEnabled, true
}

// HasSecureIdEnabled returns a boolean if a field has been set.
func (o *ConnectionServerRSASecureIdInfo) HasSecureIdEnabled() bool {
	if o != nil && !IsNil(o.SecureIdEnabled) {
		return true
	}

	return false
}

// SetSecureIdEnabled gets a reference to the given bool and assigns it to the SecureIdEnabled field.
func (o *ConnectionServerRSASecureIdInfo) SetSecureIdEnabled(v bool) {
	o.SecureIdEnabled = &v
}

// GetSecurityFileUploaded returns the SecurityFileUploaded field value if set, zero value otherwise.
func (o *ConnectionServerRSASecureIdInfo) GetSecurityFileUploaded() bool {
	if o == nil || IsNil(o.SecurityFileUploaded) {
		var ret bool
		return ret
	}
	return *o.SecurityFileUploaded
}

// GetSecurityFileUploadedOk returns a tuple with the SecurityFileUploaded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerRSASecureIdInfo) GetSecurityFileUploadedOk() (*bool, bool) {
	if o == nil || IsNil(o.SecurityFileUploaded) {
		return nil, false
	}
	return o.SecurityFileUploaded, true
}

// HasSecurityFileUploaded returns a boolean if a field has been set.
func (o *ConnectionServerRSASecureIdInfo) HasSecurityFileUploaded() bool {
	if o != nil && !IsNil(o.SecurityFileUploaded) {
		return true
	}

	return false
}

// SetSecurityFileUploaded gets a reference to the given bool and assigns it to the SecurityFileUploaded field.
func (o *ConnectionServerRSASecureIdInfo) SetSecurityFileUploaded(v bool) {
	o.SecurityFileUploaded = &v
}

func (o ConnectionServerRSASecureIdInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionServerRSASecureIdInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClearNodeSecret) {
		toSerialize["clear_node_secret"] = o.ClearNodeSecret
	}
	if !IsNil(o.NameMapping) {
		toSerialize["name_mapping"] = o.NameMapping
	}
	if !IsNil(o.SecureIdEnabled) {
		toSerialize["secure_id_enabled"] = o.SecureIdEnabled
	}
	if !IsNil(o.SecurityFileUploaded) {
		toSerialize["security_file_uploaded"] = o.SecurityFileUploaded
	}
	return toSerialize, nil
}

type NullableConnectionServerRSASecureIdInfo struct {
	value *ConnectionServerRSASecureIdInfo
	isSet bool
}

func (v NullableConnectionServerRSASecureIdInfo) Get() *ConnectionServerRSASecureIdInfo {
	return v.value
}

func (v *NullableConnectionServerRSASecureIdInfo) Set(val *ConnectionServerRSASecureIdInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionServerRSASecureIdInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionServerRSASecureIdInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionServerRSASecureIdInfo(val *ConnectionServerRSASecureIdInfo) *NullableConnectionServerRSASecureIdInfo {
	return &NullableConnectionServerRSASecureIdInfo{value: val, isSet: true}
}

func (v NullableConnectionServerRSASecureIdInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionServerRSASecureIdInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


