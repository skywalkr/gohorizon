/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the EndsWithFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EndsWithFilter{}

// EndsWithFilter struct for EndsWithFilter
type EndsWithFilter struct {
	BaseFilter
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	Value map[string]interface{} `json:"value,omitempty"`
}

// NewEndsWithFilter instantiates a new EndsWithFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndsWithFilter() *EndsWithFilter {
	this := EndsWithFilter{}
	return &this
}

// NewEndsWithFilterWithDefaults instantiates a new EndsWithFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndsWithFilterWithDefaults() *EndsWithFilter {
	this := EndsWithFilter{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EndsWithFilter) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndsWithFilter) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EndsWithFilter) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EndsWithFilter) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EndsWithFilter) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndsWithFilter) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EndsWithFilter) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EndsWithFilter) SetType(v string) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *EndsWithFilter) GetValue() map[string]interface{} {
	if o == nil || IsNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndsWithFilter) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *EndsWithFilter) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *EndsWithFilter) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o EndsWithFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EndsWithFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedBaseFilter, errBaseFilter := json.Marshal(o.BaseFilter)
	if errBaseFilter != nil {
		return map[string]interface{}{}, errBaseFilter
	}
	errBaseFilter = json.Unmarshal([]byte(serializedBaseFilter), &toSerialize)
	if errBaseFilter != nil {
		return map[string]interface{}{}, errBaseFilter
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableEndsWithFilter struct {
	value *EndsWithFilter
	isSet bool
}

func (v NullableEndsWithFilter) Get() *EndsWithFilter {
	return v.value
}

func (v *NullableEndsWithFilter) Set(val *EndsWithFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableEndsWithFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableEndsWithFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndsWithFilter(val *EndsWithFilter) *NullableEndsWithFilter {
	return &NullableEndsWithFilter{value: val, isSet: true}
}

func (v NullableEndsWithFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndsWithFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


