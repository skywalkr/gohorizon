/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// RDSServerInfo Information related to an RDS Server.<br>List API returning this summary information can use search filter query to filter on specific fields supported by filters.<br> Supported Filters : 'And', 'Or', 'Equals', 'NotEquals', 'StartsWith', 'Contains' and 'EndsWith'.<br>See the field description to know the filter types it supports.
type RDSServerInfo struct {
	// The id of the Access Group that the RDS Server belongs to.<br>Supported Filters : 'Equals'.
	AccessGroupId *string `json:"access_group_id,omitempty"`
	// The Horizon Agent build number.<br>Supported Filters : 'Equals'.
	AgentBuildNumber *string `json:"agent_build_number,omitempty"`
	// The Horizon Agent version.<br>Supported Filters : 'Equals'.
	AgentVersion *string `json:"agent_version,omitempty"`
	// The base vm id.<br>Supported Filters : 'Equals'.
	BaseVmId *string `json:"base_vm_id,omitempty"`
	// The base vm snapshot id.<br>Supported Filters : 'Equals'.
	BaseVmSnapshotId *string `json:"base_vm_snapshot_id,omitempty"`
	// Description of the RDS Server.<br>Supported Filters : 'Equals', 'StartsWith' and 'Contains'.
	Description *string `json:"description,omitempty"`
	// DNS name of the machine.<br>Supported Filters : 'Equals', 'StartsWith', 'EndsWith' and 'Contains'.
	DnsName *string `json:"dns_name,omitempty"`
	// Indicates if RDS server is enabled.<br>Supported Filters : 'Equals'.
	Enabled *bool `json:"enabled,omitempty"`
	// The id of the Farm that the RDS Server belongs to.<br>Supported Filters : 'Equals'.
	FarmId *string `json:"farm_id,omitempty"`
	// Unique ID representing the RDS Server.<br>Supported Filters : 'Equals'.
	Id *string `json:"id,omitempty"`
	// The id of the image management stream. This will be populated only for RDS server belonging to Instant Clone farms created using image catalog.<br>Supported Filters : 'Equals'.
	ImageManagementStreamId *string `json:"image_management_stream_id,omitempty"`
	// The id of the image management tag. This will be populated only for RDS server belonging to Instant Clone farms created using image catalog.<br>Supported Filters : 'Equals'.
	ImageManagementTagId *string `json:"image_management_tag_id,omitempty"`
	// This value is similar to load_preference and represents the load on RDS Server in the range of 0 to 100.
	LoadIndex *int32 `json:"load_index,omitempty"`
	// Based on the current load of this RDS Server, gives a measure of how preferential this server is to be chosen for new application sessions. * BLOCK: RDS Server is blocked and new sessions will not be accepted. * HEAVY: RDS Server is experiencing heavy load and should likely not be chosen for new sessions. * NORMAL: RDS Server is experiencing normal load and is okay to be chosen for new sessions. * LIGHT: RDS Server is experiencing light load and is okay to be chosen for new sessions. * UNKNOWN: RDS Server did not report a load preference. This is potentially a configuration issue if other RDS Servers in the same Farm do report load preferences.
	LoadPreference *string `json:"load_preference,omitempty"`
	// The user log off behavior at the time of maintenance. * FORCE_LOGOFF: Users will be forced to log off when the system is ready to execute the operation. Before being forcibly logged off, users may have a grace period in which to save their work which can be configured in Global Settings. * WAIT_FOR_LOGOFF: Wait for connected users to disconnect before the task starts. The operation starts immediately when there are no active sessions.
	LogoffPolicy *string `json:"logoff_policy,omitempty"`
	// Maximum number of sessions for RDS server as reported by the Horizon Agent. This will be unset if the value is not configured.
	MaxSessionsCount *int32 `json:"max_sessions_count,omitempty"`
	// Maximum number of sessions for RDS server as configured by administrator. This will be unset if the value is not configured.
	MaxSessionsCountConfigured *int32 `json:"max_sessions_count_configured,omitempty"`
	// RDS Server max sessions type as reported by the Horizon Agent. * UNLIMITED: The RDS Server has an unlimited number of sessions. * LIMITED: The RDS Server has a limited number of sessions.
	MaxSessionsType *string `json:"max_sessions_type,omitempty"`
	// The configured RDS Server max sessions type. If the RDS Server is part of an automated farm, this value is inherited from the farm configuration. This property has a default value of UNCONFIGURED. * UNLIMITED: The RDS Server has an unlimited number of sessions. * LIMITED: The RDS Server has a limited number of sessions. * UNCONFIGURED: The max number of sessions has not yet been defined for the RDSServer.
	MaxSessionsTypeConfigured *string `json:"max_sessions_type_configured,omitempty"`
	// Indicates whether ENHANCED message security mode is currently supported by this machine.
	MessageSecurityEnhancedModeSupported *bool `json:"message_security_enhanced_mode_supported,omitempty"`
	// The current JMS message security mode used by this machine.<br>Supported Filters : 'Equals'. * DISABLED: Message security mode is disabled. * MIXED: Message security mode is enabled but not enforced. * ENABLED: Message security mode is enabled. Unsigned messages are rejected by Horizon components. * ENHANCED: Message Security mode is Enhanced. Message signing and validation is performed based on the current Security Level and desktop Message Security mode.
	MessageSecurityMode *string `json:"message_security_mode,omitempty"`
	// Name of the RDS Server.<br>Supported Filters : 'Equals', 'StartsWith' and 'Contains'.
	Name *string `json:"name,omitempty"`
	// The machine operating system. * UNKNOWN: Unknown * WINDOWS_SERVER_2003: Windows Server 2003 * WINDOWS_SERVER_2008: Windows Server 2008 * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2 * WINDOWS_SERVER_2012: Windows Server 2012 * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2 * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above * LINUX_SERVER_OTHER: Linux Server (other)
	OperatingSystem *string `json:"operating_system,omitempty"`
	// The current maintenance operation on the RDS Server.<br>Supported Filters : 'Equals'. * PUSH_IMAGE: A push image operation.
	Operation *string `json:"operation,omitempty"`
	// The state of the current maintenance operation on the RDS Server.<br>Supported Filters : 'Equals'. * UNDEFINED: The operation state is unrecognized. * SCHEDULED: The operation is scheduled for future execution. * PROGRESSING: The operation is in progress. * COMPLETED: The operation has completed. * FAULT: The operation has encountered an error. * CANCELLING: The operation has been cancelled. * HOLDING: The operation has been paused. * CREATE: The operation is being initiated.
	OperationState *string `json:"operation_state,omitempty"`
	// The pending base vm id.<br>Supported Filters : 'Equals'.
	PendingBaseVmId *string `json:"pending_base_vm_id,omitempty"`
	// The pending base vm snapshot id.<br>Supported Filters : 'Equals'.
	PendingBaseVmSnapshotId *string `json:"pending_base_vm_snapshot_id,omitempty"`
	// The id of the pending image management stream. This will be populated only for RDS server belonging to Instant Clone farms created using image catalog.<br>Supported Filters : 'Equals'.
	PendingImageManagementStreamId *string `json:"pending_image_management_stream_id,omitempty"`
	// The id of the pending image management tag. This will be populated only for RDS server belonging to Instant Clone farms created using image catalog.<br>Supported Filters : 'Equals'.
	PendingImageManagementTagId *string `json:"pending_image_management_tag_id,omitempty"`
	// The remote experience Horizon Agent build number.<br>Supported Filters : 'Equals'.
	RemoteExperienceAgentBuildNumber *string `json:"remote_experience_agent_build_number,omitempty"`
	// The remote experience Horizon Agent version.<br>Supported Filters : 'Equals'.
	RemoteExperienceAgentVersion *string `json:"remote_experience_agent_version,omitempty"`
	// RDS server session count.<br>Supported Filters : 'Equals'.
	SessionCount *int32 `json:"session_count,omitempty"`
	// The state of the RDS server.<br>Supported Filters : 'Equals'. * WAIT_FOR_AGENT: Connection Server is waiting to establish communication with View Agent on a RDS Server. * AGENT_UNREACHABLE: Connection Server cannot establish communication with View Agent on a RDS Server. * AGENT_CONFIG_ERROR: The RDS Server has configuration error. Ex: Remote Desktop Service role is not enabled. * AVAILABLE: The RDS Server is powered on and ready for an active connection. * DISABLED: The RDS Server is disabled. * DISABLE_IN_PROGRESS: Disabled RDS server still has some brokered sessions. It can still accept re-connections. * PROVISIONING: The RDS Server is being provisioned. * PROVISIONING_ERROR: An error occurred during provisioning. * CUSTOMIZING: The RDS Server is being customized. * DELETING: The RDS Server is marked for deletion. It will be deleted soon. * MAINTENANCE: The RDS Server is in maintenance mode. * ERROR: An unknown error occurred in the RDS Server. * PROVISIONED: The RDS Server has been provisioned. * CONNECTED: The RDS Server is in an active session. * DISCONNECTED: The RDS Server is in an active session but is disconnected. * AGENT_ERR_STARTUP_IN_PROGRESS: The Horizon Agent has started on the virtual machine, but other required services such as the display protocol are still starting. * AGENT_ERR_DISABLED: The Horizon Agent is disabled. * AGENT_ERR_INVALID_IP: The Horizon Agent has an invalid IP. * AGENT_ERR_NEED_REBOOT: The Horizon Agent needs reboot. * AGENT_ERR_PROTOCOL_FAILURE: Protocol such as RDP or PCoIP is not enabled. * AGENT_ERR_DOMAIN_FAILURE: The RDS Server has an invalid domain. * AGENT_DRAIN_MODE: The RDS Server is configured for drain mode. * AGENT_DRAIN_UNTIL_RESTART: The RDS Server is configured a mode to drain until restart. * ALREADY_USED: The RDS Server cannot accept new sessions. * IN_PROGRESS: There is a RDS Server operation in progress. * VALIDATING: The connection server is synchronizing state information with the agent. * UNKNOWN: Could not determine the state of the RDS Server.
	State *string `json:"state,omitempty"`
}

// NewRDSServerInfo instantiates a new RDSServerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRDSServerInfo() *RDSServerInfo {
	this := RDSServerInfo{}
	return &this
}

// NewRDSServerInfoWithDefaults instantiates a new RDSServerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRDSServerInfoWithDefaults() *RDSServerInfo {
	this := RDSServerInfo{}
	return &this
}

// GetAccessGroupId returns the AccessGroupId field value if set, zero value otherwise.
func (o *RDSServerInfo) GetAccessGroupId() string {
	if o == nil || o.AccessGroupId == nil {
		var ret string
		return ret
	}
	return *o.AccessGroupId
}

// GetAccessGroupIdOk returns a tuple with the AccessGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetAccessGroupIdOk() (*string, bool) {
	if o == nil || o.AccessGroupId == nil {
		return nil, false
	}
	return o.AccessGroupId, true
}

// HasAccessGroupId returns a boolean if a field has been set.
func (o *RDSServerInfo) HasAccessGroupId() bool {
	if o != nil && o.AccessGroupId != nil {
		return true
	}

	return false
}

// SetAccessGroupId gets a reference to the given string and assigns it to the AccessGroupId field.
func (o *RDSServerInfo) SetAccessGroupId(v string) {
	o.AccessGroupId = &v
}

// GetAgentBuildNumber returns the AgentBuildNumber field value if set, zero value otherwise.
func (o *RDSServerInfo) GetAgentBuildNumber() string {
	if o == nil || o.AgentBuildNumber == nil {
		var ret string
		return ret
	}
	return *o.AgentBuildNumber
}

// GetAgentBuildNumberOk returns a tuple with the AgentBuildNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetAgentBuildNumberOk() (*string, bool) {
	if o == nil || o.AgentBuildNumber == nil {
		return nil, false
	}
	return o.AgentBuildNumber, true
}

// HasAgentBuildNumber returns a boolean if a field has been set.
func (o *RDSServerInfo) HasAgentBuildNumber() bool {
	if o != nil && o.AgentBuildNumber != nil {
		return true
	}

	return false
}

// SetAgentBuildNumber gets a reference to the given string and assigns it to the AgentBuildNumber field.
func (o *RDSServerInfo) SetAgentBuildNumber(v string) {
	o.AgentBuildNumber = &v
}

// GetAgentVersion returns the AgentVersion field value if set, zero value otherwise.
func (o *RDSServerInfo) GetAgentVersion() string {
	if o == nil || o.AgentVersion == nil {
		var ret string
		return ret
	}
	return *o.AgentVersion
}

// GetAgentVersionOk returns a tuple with the AgentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetAgentVersionOk() (*string, bool) {
	if o == nil || o.AgentVersion == nil {
		return nil, false
	}
	return o.AgentVersion, true
}

// HasAgentVersion returns a boolean if a field has been set.
func (o *RDSServerInfo) HasAgentVersion() bool {
	if o != nil && o.AgentVersion != nil {
		return true
	}

	return false
}

// SetAgentVersion gets a reference to the given string and assigns it to the AgentVersion field.
func (o *RDSServerInfo) SetAgentVersion(v string) {
	o.AgentVersion = &v
}

// GetBaseVmId returns the BaseVmId field value if set, zero value otherwise.
func (o *RDSServerInfo) GetBaseVmId() string {
	if o == nil || o.BaseVmId == nil {
		var ret string
		return ret
	}
	return *o.BaseVmId
}

// GetBaseVmIdOk returns a tuple with the BaseVmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetBaseVmIdOk() (*string, bool) {
	if o == nil || o.BaseVmId == nil {
		return nil, false
	}
	return o.BaseVmId, true
}

// HasBaseVmId returns a boolean if a field has been set.
func (o *RDSServerInfo) HasBaseVmId() bool {
	if o != nil && o.BaseVmId != nil {
		return true
	}

	return false
}

// SetBaseVmId gets a reference to the given string and assigns it to the BaseVmId field.
func (o *RDSServerInfo) SetBaseVmId(v string) {
	o.BaseVmId = &v
}

// GetBaseVmSnapshotId returns the BaseVmSnapshotId field value if set, zero value otherwise.
func (o *RDSServerInfo) GetBaseVmSnapshotId() string {
	if o == nil || o.BaseVmSnapshotId == nil {
		var ret string
		return ret
	}
	return *o.BaseVmSnapshotId
}

// GetBaseVmSnapshotIdOk returns a tuple with the BaseVmSnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetBaseVmSnapshotIdOk() (*string, bool) {
	if o == nil || o.BaseVmSnapshotId == nil {
		return nil, false
	}
	return o.BaseVmSnapshotId, true
}

// HasBaseVmSnapshotId returns a boolean if a field has been set.
func (o *RDSServerInfo) HasBaseVmSnapshotId() bool {
	if o != nil && o.BaseVmSnapshotId != nil {
		return true
	}

	return false
}

// SetBaseVmSnapshotId gets a reference to the given string and assigns it to the BaseVmSnapshotId field.
func (o *RDSServerInfo) SetBaseVmSnapshotId(v string) {
	o.BaseVmSnapshotId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RDSServerInfo) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RDSServerInfo) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RDSServerInfo) SetDescription(v string) {
	o.Description = &v
}

// GetDnsName returns the DnsName field value if set, zero value otherwise.
func (o *RDSServerInfo) GetDnsName() string {
	if o == nil || o.DnsName == nil {
		var ret string
		return ret
	}
	return *o.DnsName
}

// GetDnsNameOk returns a tuple with the DnsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetDnsNameOk() (*string, bool) {
	if o == nil || o.DnsName == nil {
		return nil, false
	}
	return o.DnsName, true
}

// HasDnsName returns a boolean if a field has been set.
func (o *RDSServerInfo) HasDnsName() bool {
	if o != nil && o.DnsName != nil {
		return true
	}

	return false
}

// SetDnsName gets a reference to the given string and assigns it to the DnsName field.
func (o *RDSServerInfo) SetDnsName(v string) {
	o.DnsName = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RDSServerInfo) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RDSServerInfo) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RDSServerInfo) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetFarmId returns the FarmId field value if set, zero value otherwise.
func (o *RDSServerInfo) GetFarmId() string {
	if o == nil || o.FarmId == nil {
		var ret string
		return ret
	}
	return *o.FarmId
}

// GetFarmIdOk returns a tuple with the FarmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetFarmIdOk() (*string, bool) {
	if o == nil || o.FarmId == nil {
		return nil, false
	}
	return o.FarmId, true
}

// HasFarmId returns a boolean if a field has been set.
func (o *RDSServerInfo) HasFarmId() bool {
	if o != nil && o.FarmId != nil {
		return true
	}

	return false
}

// SetFarmId gets a reference to the given string and assigns it to the FarmId field.
func (o *RDSServerInfo) SetFarmId(v string) {
	o.FarmId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RDSServerInfo) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RDSServerInfo) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RDSServerInfo) SetId(v string) {
	o.Id = &v
}

// GetImageManagementStreamId returns the ImageManagementStreamId field value if set, zero value otherwise.
func (o *RDSServerInfo) GetImageManagementStreamId() string {
	if o == nil || o.ImageManagementStreamId == nil {
		var ret string
		return ret
	}
	return *o.ImageManagementStreamId
}

// GetImageManagementStreamIdOk returns a tuple with the ImageManagementStreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetImageManagementStreamIdOk() (*string, bool) {
	if o == nil || o.ImageManagementStreamId == nil {
		return nil, false
	}
	return o.ImageManagementStreamId, true
}

// HasImageManagementStreamId returns a boolean if a field has been set.
func (o *RDSServerInfo) HasImageManagementStreamId() bool {
	if o != nil && o.ImageManagementStreamId != nil {
		return true
	}

	return false
}

// SetImageManagementStreamId gets a reference to the given string and assigns it to the ImageManagementStreamId field.
func (o *RDSServerInfo) SetImageManagementStreamId(v string) {
	o.ImageManagementStreamId = &v
}

// GetImageManagementTagId returns the ImageManagementTagId field value if set, zero value otherwise.
func (o *RDSServerInfo) GetImageManagementTagId() string {
	if o == nil || o.ImageManagementTagId == nil {
		var ret string
		return ret
	}
	return *o.ImageManagementTagId
}

// GetImageManagementTagIdOk returns a tuple with the ImageManagementTagId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetImageManagementTagIdOk() (*string, bool) {
	if o == nil || o.ImageManagementTagId == nil {
		return nil, false
	}
	return o.ImageManagementTagId, true
}

// HasImageManagementTagId returns a boolean if a field has been set.
func (o *RDSServerInfo) HasImageManagementTagId() bool {
	if o != nil && o.ImageManagementTagId != nil {
		return true
	}

	return false
}

// SetImageManagementTagId gets a reference to the given string and assigns it to the ImageManagementTagId field.
func (o *RDSServerInfo) SetImageManagementTagId(v string) {
	o.ImageManagementTagId = &v
}

// GetLoadIndex returns the LoadIndex field value if set, zero value otherwise.
func (o *RDSServerInfo) GetLoadIndex() int32 {
	if o == nil || o.LoadIndex == nil {
		var ret int32
		return ret
	}
	return *o.LoadIndex
}

// GetLoadIndexOk returns a tuple with the LoadIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetLoadIndexOk() (*int32, bool) {
	if o == nil || o.LoadIndex == nil {
		return nil, false
	}
	return o.LoadIndex, true
}

// HasLoadIndex returns a boolean if a field has been set.
func (o *RDSServerInfo) HasLoadIndex() bool {
	if o != nil && o.LoadIndex != nil {
		return true
	}

	return false
}

// SetLoadIndex gets a reference to the given int32 and assigns it to the LoadIndex field.
func (o *RDSServerInfo) SetLoadIndex(v int32) {
	o.LoadIndex = &v
}

// GetLoadPreference returns the LoadPreference field value if set, zero value otherwise.
func (o *RDSServerInfo) GetLoadPreference() string {
	if o == nil || o.LoadPreference == nil {
		var ret string
		return ret
	}
	return *o.LoadPreference
}

// GetLoadPreferenceOk returns a tuple with the LoadPreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetLoadPreferenceOk() (*string, bool) {
	if o == nil || o.LoadPreference == nil {
		return nil, false
	}
	return o.LoadPreference, true
}

// HasLoadPreference returns a boolean if a field has been set.
func (o *RDSServerInfo) HasLoadPreference() bool {
	if o != nil && o.LoadPreference != nil {
		return true
	}

	return false
}

// SetLoadPreference gets a reference to the given string and assigns it to the LoadPreference field.
func (o *RDSServerInfo) SetLoadPreference(v string) {
	o.LoadPreference = &v
}

// GetLogoffPolicy returns the LogoffPolicy field value if set, zero value otherwise.
func (o *RDSServerInfo) GetLogoffPolicy() string {
	if o == nil || o.LogoffPolicy == nil {
		var ret string
		return ret
	}
	return *o.LogoffPolicy
}

// GetLogoffPolicyOk returns a tuple with the LogoffPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetLogoffPolicyOk() (*string, bool) {
	if o == nil || o.LogoffPolicy == nil {
		return nil, false
	}
	return o.LogoffPolicy, true
}

// HasLogoffPolicy returns a boolean if a field has been set.
func (o *RDSServerInfo) HasLogoffPolicy() bool {
	if o != nil && o.LogoffPolicy != nil {
		return true
	}

	return false
}

// SetLogoffPolicy gets a reference to the given string and assigns it to the LogoffPolicy field.
func (o *RDSServerInfo) SetLogoffPolicy(v string) {
	o.LogoffPolicy = &v
}

// GetMaxSessionsCount returns the MaxSessionsCount field value if set, zero value otherwise.
func (o *RDSServerInfo) GetMaxSessionsCount() int32 {
	if o == nil || o.MaxSessionsCount == nil {
		var ret int32
		return ret
	}
	return *o.MaxSessionsCount
}

// GetMaxSessionsCountOk returns a tuple with the MaxSessionsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetMaxSessionsCountOk() (*int32, bool) {
	if o == nil || o.MaxSessionsCount == nil {
		return nil, false
	}
	return o.MaxSessionsCount, true
}

// HasMaxSessionsCount returns a boolean if a field has been set.
func (o *RDSServerInfo) HasMaxSessionsCount() bool {
	if o != nil && o.MaxSessionsCount != nil {
		return true
	}

	return false
}

// SetMaxSessionsCount gets a reference to the given int32 and assigns it to the MaxSessionsCount field.
func (o *RDSServerInfo) SetMaxSessionsCount(v int32) {
	o.MaxSessionsCount = &v
}

// GetMaxSessionsCountConfigured returns the MaxSessionsCountConfigured field value if set, zero value otherwise.
func (o *RDSServerInfo) GetMaxSessionsCountConfigured() int32 {
	if o == nil || o.MaxSessionsCountConfigured == nil {
		var ret int32
		return ret
	}
	return *o.MaxSessionsCountConfigured
}

// GetMaxSessionsCountConfiguredOk returns a tuple with the MaxSessionsCountConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetMaxSessionsCountConfiguredOk() (*int32, bool) {
	if o == nil || o.MaxSessionsCountConfigured == nil {
		return nil, false
	}
	return o.MaxSessionsCountConfigured, true
}

// HasMaxSessionsCountConfigured returns a boolean if a field has been set.
func (o *RDSServerInfo) HasMaxSessionsCountConfigured() bool {
	if o != nil && o.MaxSessionsCountConfigured != nil {
		return true
	}

	return false
}

// SetMaxSessionsCountConfigured gets a reference to the given int32 and assigns it to the MaxSessionsCountConfigured field.
func (o *RDSServerInfo) SetMaxSessionsCountConfigured(v int32) {
	o.MaxSessionsCountConfigured = &v
}

// GetMaxSessionsType returns the MaxSessionsType field value if set, zero value otherwise.
func (o *RDSServerInfo) GetMaxSessionsType() string {
	if o == nil || o.MaxSessionsType == nil {
		var ret string
		return ret
	}
	return *o.MaxSessionsType
}

// GetMaxSessionsTypeOk returns a tuple with the MaxSessionsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetMaxSessionsTypeOk() (*string, bool) {
	if o == nil || o.MaxSessionsType == nil {
		return nil, false
	}
	return o.MaxSessionsType, true
}

// HasMaxSessionsType returns a boolean if a field has been set.
func (o *RDSServerInfo) HasMaxSessionsType() bool {
	if o != nil && o.MaxSessionsType != nil {
		return true
	}

	return false
}

// SetMaxSessionsType gets a reference to the given string and assigns it to the MaxSessionsType field.
func (o *RDSServerInfo) SetMaxSessionsType(v string) {
	o.MaxSessionsType = &v
}

// GetMaxSessionsTypeConfigured returns the MaxSessionsTypeConfigured field value if set, zero value otherwise.
func (o *RDSServerInfo) GetMaxSessionsTypeConfigured() string {
	if o == nil || o.MaxSessionsTypeConfigured == nil {
		var ret string
		return ret
	}
	return *o.MaxSessionsTypeConfigured
}

// GetMaxSessionsTypeConfiguredOk returns a tuple with the MaxSessionsTypeConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetMaxSessionsTypeConfiguredOk() (*string, bool) {
	if o == nil || o.MaxSessionsTypeConfigured == nil {
		return nil, false
	}
	return o.MaxSessionsTypeConfigured, true
}

// HasMaxSessionsTypeConfigured returns a boolean if a field has been set.
func (o *RDSServerInfo) HasMaxSessionsTypeConfigured() bool {
	if o != nil && o.MaxSessionsTypeConfigured != nil {
		return true
	}

	return false
}

// SetMaxSessionsTypeConfigured gets a reference to the given string and assigns it to the MaxSessionsTypeConfigured field.
func (o *RDSServerInfo) SetMaxSessionsTypeConfigured(v string) {
	o.MaxSessionsTypeConfigured = &v
}

// GetMessageSecurityEnhancedModeSupported returns the MessageSecurityEnhancedModeSupported field value if set, zero value otherwise.
func (o *RDSServerInfo) GetMessageSecurityEnhancedModeSupported() bool {
	if o == nil || o.MessageSecurityEnhancedModeSupported == nil {
		var ret bool
		return ret
	}
	return *o.MessageSecurityEnhancedModeSupported
}

// GetMessageSecurityEnhancedModeSupportedOk returns a tuple with the MessageSecurityEnhancedModeSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetMessageSecurityEnhancedModeSupportedOk() (*bool, bool) {
	if o == nil || o.MessageSecurityEnhancedModeSupported == nil {
		return nil, false
	}
	return o.MessageSecurityEnhancedModeSupported, true
}

// HasMessageSecurityEnhancedModeSupported returns a boolean if a field has been set.
func (o *RDSServerInfo) HasMessageSecurityEnhancedModeSupported() bool {
	if o != nil && o.MessageSecurityEnhancedModeSupported != nil {
		return true
	}

	return false
}

// SetMessageSecurityEnhancedModeSupported gets a reference to the given bool and assigns it to the MessageSecurityEnhancedModeSupported field.
func (o *RDSServerInfo) SetMessageSecurityEnhancedModeSupported(v bool) {
	o.MessageSecurityEnhancedModeSupported = &v
}

// GetMessageSecurityMode returns the MessageSecurityMode field value if set, zero value otherwise.
func (o *RDSServerInfo) GetMessageSecurityMode() string {
	if o == nil || o.MessageSecurityMode == nil {
		var ret string
		return ret
	}
	return *o.MessageSecurityMode
}

// GetMessageSecurityModeOk returns a tuple with the MessageSecurityMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetMessageSecurityModeOk() (*string, bool) {
	if o == nil || o.MessageSecurityMode == nil {
		return nil, false
	}
	return o.MessageSecurityMode, true
}

// HasMessageSecurityMode returns a boolean if a field has been set.
func (o *RDSServerInfo) HasMessageSecurityMode() bool {
	if o != nil && o.MessageSecurityMode != nil {
		return true
	}

	return false
}

// SetMessageSecurityMode gets a reference to the given string and assigns it to the MessageSecurityMode field.
func (o *RDSServerInfo) SetMessageSecurityMode(v string) {
	o.MessageSecurityMode = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RDSServerInfo) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RDSServerInfo) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RDSServerInfo) SetName(v string) {
	o.Name = &v
}

// GetOperatingSystem returns the OperatingSystem field value if set, zero value otherwise.
func (o *RDSServerInfo) GetOperatingSystem() string {
	if o == nil || o.OperatingSystem == nil {
		var ret string
		return ret
	}
	return *o.OperatingSystem
}

// GetOperatingSystemOk returns a tuple with the OperatingSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetOperatingSystemOk() (*string, bool) {
	if o == nil || o.OperatingSystem == nil {
		return nil, false
	}
	return o.OperatingSystem, true
}

// HasOperatingSystem returns a boolean if a field has been set.
func (o *RDSServerInfo) HasOperatingSystem() bool {
	if o != nil && o.OperatingSystem != nil {
		return true
	}

	return false
}

// SetOperatingSystem gets a reference to the given string and assigns it to the OperatingSystem field.
func (o *RDSServerInfo) SetOperatingSystem(v string) {
	o.OperatingSystem = &v
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *RDSServerInfo) GetOperation() string {
	if o == nil || o.Operation == nil {
		var ret string
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetOperationOk() (*string, bool) {
	if o == nil || o.Operation == nil {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *RDSServerInfo) HasOperation() bool {
	if o != nil && o.Operation != nil {
		return true
	}

	return false
}

// SetOperation gets a reference to the given string and assigns it to the Operation field.
func (o *RDSServerInfo) SetOperation(v string) {
	o.Operation = &v
}

// GetOperationState returns the OperationState field value if set, zero value otherwise.
func (o *RDSServerInfo) GetOperationState() string {
	if o == nil || o.OperationState == nil {
		var ret string
		return ret
	}
	return *o.OperationState
}

// GetOperationStateOk returns a tuple with the OperationState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetOperationStateOk() (*string, bool) {
	if o == nil || o.OperationState == nil {
		return nil, false
	}
	return o.OperationState, true
}

// HasOperationState returns a boolean if a field has been set.
func (o *RDSServerInfo) HasOperationState() bool {
	if o != nil && o.OperationState != nil {
		return true
	}

	return false
}

// SetOperationState gets a reference to the given string and assigns it to the OperationState field.
func (o *RDSServerInfo) SetOperationState(v string) {
	o.OperationState = &v
}

// GetPendingBaseVmId returns the PendingBaseVmId field value if set, zero value otherwise.
func (o *RDSServerInfo) GetPendingBaseVmId() string {
	if o == nil || o.PendingBaseVmId == nil {
		var ret string
		return ret
	}
	return *o.PendingBaseVmId
}

// GetPendingBaseVmIdOk returns a tuple with the PendingBaseVmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetPendingBaseVmIdOk() (*string, bool) {
	if o == nil || o.PendingBaseVmId == nil {
		return nil, false
	}
	return o.PendingBaseVmId, true
}

// HasPendingBaseVmId returns a boolean if a field has been set.
func (o *RDSServerInfo) HasPendingBaseVmId() bool {
	if o != nil && o.PendingBaseVmId != nil {
		return true
	}

	return false
}

// SetPendingBaseVmId gets a reference to the given string and assigns it to the PendingBaseVmId field.
func (o *RDSServerInfo) SetPendingBaseVmId(v string) {
	o.PendingBaseVmId = &v
}

// GetPendingBaseVmSnapshotId returns the PendingBaseVmSnapshotId field value if set, zero value otherwise.
func (o *RDSServerInfo) GetPendingBaseVmSnapshotId() string {
	if o == nil || o.PendingBaseVmSnapshotId == nil {
		var ret string
		return ret
	}
	return *o.PendingBaseVmSnapshotId
}

// GetPendingBaseVmSnapshotIdOk returns a tuple with the PendingBaseVmSnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetPendingBaseVmSnapshotIdOk() (*string, bool) {
	if o == nil || o.PendingBaseVmSnapshotId == nil {
		return nil, false
	}
	return o.PendingBaseVmSnapshotId, true
}

// HasPendingBaseVmSnapshotId returns a boolean if a field has been set.
func (o *RDSServerInfo) HasPendingBaseVmSnapshotId() bool {
	if o != nil && o.PendingBaseVmSnapshotId != nil {
		return true
	}

	return false
}

// SetPendingBaseVmSnapshotId gets a reference to the given string and assigns it to the PendingBaseVmSnapshotId field.
func (o *RDSServerInfo) SetPendingBaseVmSnapshotId(v string) {
	o.PendingBaseVmSnapshotId = &v
}

// GetPendingImageManagementStreamId returns the PendingImageManagementStreamId field value if set, zero value otherwise.
func (o *RDSServerInfo) GetPendingImageManagementStreamId() string {
	if o == nil || o.PendingImageManagementStreamId == nil {
		var ret string
		return ret
	}
	return *o.PendingImageManagementStreamId
}

// GetPendingImageManagementStreamIdOk returns a tuple with the PendingImageManagementStreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetPendingImageManagementStreamIdOk() (*string, bool) {
	if o == nil || o.PendingImageManagementStreamId == nil {
		return nil, false
	}
	return o.PendingImageManagementStreamId, true
}

// HasPendingImageManagementStreamId returns a boolean if a field has been set.
func (o *RDSServerInfo) HasPendingImageManagementStreamId() bool {
	if o != nil && o.PendingImageManagementStreamId != nil {
		return true
	}

	return false
}

// SetPendingImageManagementStreamId gets a reference to the given string and assigns it to the PendingImageManagementStreamId field.
func (o *RDSServerInfo) SetPendingImageManagementStreamId(v string) {
	o.PendingImageManagementStreamId = &v
}

// GetPendingImageManagementTagId returns the PendingImageManagementTagId field value if set, zero value otherwise.
func (o *RDSServerInfo) GetPendingImageManagementTagId() string {
	if o == nil || o.PendingImageManagementTagId == nil {
		var ret string
		return ret
	}
	return *o.PendingImageManagementTagId
}

// GetPendingImageManagementTagIdOk returns a tuple with the PendingImageManagementTagId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetPendingImageManagementTagIdOk() (*string, bool) {
	if o == nil || o.PendingImageManagementTagId == nil {
		return nil, false
	}
	return o.PendingImageManagementTagId, true
}

// HasPendingImageManagementTagId returns a boolean if a field has been set.
func (o *RDSServerInfo) HasPendingImageManagementTagId() bool {
	if o != nil && o.PendingImageManagementTagId != nil {
		return true
	}

	return false
}

// SetPendingImageManagementTagId gets a reference to the given string and assigns it to the PendingImageManagementTagId field.
func (o *RDSServerInfo) SetPendingImageManagementTagId(v string) {
	o.PendingImageManagementTagId = &v
}

// GetRemoteExperienceAgentBuildNumber returns the RemoteExperienceAgentBuildNumber field value if set, zero value otherwise.
func (o *RDSServerInfo) GetRemoteExperienceAgentBuildNumber() string {
	if o == nil || o.RemoteExperienceAgentBuildNumber == nil {
		var ret string
		return ret
	}
	return *o.RemoteExperienceAgentBuildNumber
}

// GetRemoteExperienceAgentBuildNumberOk returns a tuple with the RemoteExperienceAgentBuildNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetRemoteExperienceAgentBuildNumberOk() (*string, bool) {
	if o == nil || o.RemoteExperienceAgentBuildNumber == nil {
		return nil, false
	}
	return o.RemoteExperienceAgentBuildNumber, true
}

// HasRemoteExperienceAgentBuildNumber returns a boolean if a field has been set.
func (o *RDSServerInfo) HasRemoteExperienceAgentBuildNumber() bool {
	if o != nil && o.RemoteExperienceAgentBuildNumber != nil {
		return true
	}

	return false
}

// SetRemoteExperienceAgentBuildNumber gets a reference to the given string and assigns it to the RemoteExperienceAgentBuildNumber field.
func (o *RDSServerInfo) SetRemoteExperienceAgentBuildNumber(v string) {
	o.RemoteExperienceAgentBuildNumber = &v
}

// GetRemoteExperienceAgentVersion returns the RemoteExperienceAgentVersion field value if set, zero value otherwise.
func (o *RDSServerInfo) GetRemoteExperienceAgentVersion() string {
	if o == nil || o.RemoteExperienceAgentVersion == nil {
		var ret string
		return ret
	}
	return *o.RemoteExperienceAgentVersion
}

// GetRemoteExperienceAgentVersionOk returns a tuple with the RemoteExperienceAgentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetRemoteExperienceAgentVersionOk() (*string, bool) {
	if o == nil || o.RemoteExperienceAgentVersion == nil {
		return nil, false
	}
	return o.RemoteExperienceAgentVersion, true
}

// HasRemoteExperienceAgentVersion returns a boolean if a field has been set.
func (o *RDSServerInfo) HasRemoteExperienceAgentVersion() bool {
	if o != nil && o.RemoteExperienceAgentVersion != nil {
		return true
	}

	return false
}

// SetRemoteExperienceAgentVersion gets a reference to the given string and assigns it to the RemoteExperienceAgentVersion field.
func (o *RDSServerInfo) SetRemoteExperienceAgentVersion(v string) {
	o.RemoteExperienceAgentVersion = &v
}

// GetSessionCount returns the SessionCount field value if set, zero value otherwise.
func (o *RDSServerInfo) GetSessionCount() int32 {
	if o == nil || o.SessionCount == nil {
		var ret int32
		return ret
	}
	return *o.SessionCount
}

// GetSessionCountOk returns a tuple with the SessionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetSessionCountOk() (*int32, bool) {
	if o == nil || o.SessionCount == nil {
		return nil, false
	}
	return o.SessionCount, true
}

// HasSessionCount returns a boolean if a field has been set.
func (o *RDSServerInfo) HasSessionCount() bool {
	if o != nil && o.SessionCount != nil {
		return true
	}

	return false
}

// SetSessionCount gets a reference to the given int32 and assigns it to the SessionCount field.
func (o *RDSServerInfo) SetSessionCount(v int32) {
	o.SessionCount = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *RDSServerInfo) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerInfo) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *RDSServerInfo) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *RDSServerInfo) SetState(v string) {
	o.State = &v
}

func (o RDSServerInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessGroupId != nil {
		toSerialize["access_group_id"] = o.AccessGroupId
	}
	if o.AgentBuildNumber != nil {
		toSerialize["agent_build_number"] = o.AgentBuildNumber
	}
	if o.AgentVersion != nil {
		toSerialize["agent_version"] = o.AgentVersion
	}
	if o.BaseVmId != nil {
		toSerialize["base_vm_id"] = o.BaseVmId
	}
	if o.BaseVmSnapshotId != nil {
		toSerialize["base_vm_snapshot_id"] = o.BaseVmSnapshotId
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DnsName != nil {
		toSerialize["dns_name"] = o.DnsName
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.FarmId != nil {
		toSerialize["farm_id"] = o.FarmId
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ImageManagementStreamId != nil {
		toSerialize["image_management_stream_id"] = o.ImageManagementStreamId
	}
	if o.ImageManagementTagId != nil {
		toSerialize["image_management_tag_id"] = o.ImageManagementTagId
	}
	if o.LoadIndex != nil {
		toSerialize["load_index"] = o.LoadIndex
	}
	if o.LoadPreference != nil {
		toSerialize["load_preference"] = o.LoadPreference
	}
	if o.LogoffPolicy != nil {
		toSerialize["logoff_policy"] = o.LogoffPolicy
	}
	if o.MaxSessionsCount != nil {
		toSerialize["max_sessions_count"] = o.MaxSessionsCount
	}
	if o.MaxSessionsCountConfigured != nil {
		toSerialize["max_sessions_count_configured"] = o.MaxSessionsCountConfigured
	}
	if o.MaxSessionsType != nil {
		toSerialize["max_sessions_type"] = o.MaxSessionsType
	}
	if o.MaxSessionsTypeConfigured != nil {
		toSerialize["max_sessions_type_configured"] = o.MaxSessionsTypeConfigured
	}
	if o.MessageSecurityEnhancedModeSupported != nil {
		toSerialize["message_security_enhanced_mode_supported"] = o.MessageSecurityEnhancedModeSupported
	}
	if o.MessageSecurityMode != nil {
		toSerialize["message_security_mode"] = o.MessageSecurityMode
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.OperatingSystem != nil {
		toSerialize["operating_system"] = o.OperatingSystem
	}
	if o.Operation != nil {
		toSerialize["operation"] = o.Operation
	}
	if o.OperationState != nil {
		toSerialize["operation_state"] = o.OperationState
	}
	if o.PendingBaseVmId != nil {
		toSerialize["pending_base_vm_id"] = o.PendingBaseVmId
	}
	if o.PendingBaseVmSnapshotId != nil {
		toSerialize["pending_base_vm_snapshot_id"] = o.PendingBaseVmSnapshotId
	}
	if o.PendingImageManagementStreamId != nil {
		toSerialize["pending_image_management_stream_id"] = o.PendingImageManagementStreamId
	}
	if o.PendingImageManagementTagId != nil {
		toSerialize["pending_image_management_tag_id"] = o.PendingImageManagementTagId
	}
	if o.RemoteExperienceAgentBuildNumber != nil {
		toSerialize["remote_experience_agent_build_number"] = o.RemoteExperienceAgentBuildNumber
	}
	if o.RemoteExperienceAgentVersion != nil {
		toSerialize["remote_experience_agent_version"] = o.RemoteExperienceAgentVersion
	}
	if o.SessionCount != nil {
		toSerialize["session_count"] = o.SessionCount
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}

type NullableRDSServerInfo struct {
	value *RDSServerInfo
	isSet bool
}

func (v NullableRDSServerInfo) Get() *RDSServerInfo {
	return v.value
}

func (v *NullableRDSServerInfo) Set(val *RDSServerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRDSServerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRDSServerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRDSServerInfo(val *RDSServerInfo) *NullableRDSServerInfo {
	return &NullableRDSServerInfo{value: val, isSet: true}
}

func (v NullableRDSServerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRDSServerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
