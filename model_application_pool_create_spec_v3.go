/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApplicationPoolCreateSpecV3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationPoolCreateSpecV3{}

// ApplicationPoolCreateSpecV3 Information required to create an application pool.
type ApplicationPoolCreateSpecV3 struct {
	AntiAffinityData *ApplicationAntiAffinityData `json:"anti_affinity_data,omitempty"`
	// Shortcut ID of AVM managed application.
	AvmShortcutId *string `json:"avm_shortcut_id,omitempty"`
	// Name of the category folder in the user's OS containing a shortcut to the application. Unset if the application does not belong to a category.
	CategoryFolderName *string `json:"category_folder_name,omitempty"`
	// Indicates whether the application pool is cloud brokered. Default value is false.<br>
	CloudBrokered *bool `json:"cloud_brokered,omitempty"`
	// Connection server restrictions. Application pool can be accessed from only those connection server instances that have a matching tag in this list. Null or empty list means that the application pool can be accessed from any connection server.
	CsRestrictionTags []string `json:"cs_restriction_tags,omitempty"`
	// Notes about the application pool.
	Description *string `json:"description,omitempty"`
	// ID of the desktop pool from which this application pool is to be created. Once an application pool is created from a desktop pool, it is always associated with that desktop pool, and cannot be removed from the desktop pool, or added to another desktop pool. Either this or farm id should be set.
	DesktopPoolId *string `json:"desktop_pool_id,omitempty"`
	// The display name is the name that users will see in Horizon client. If the display name is left blank, it defaults to name.
	DisplayName *string `json:"display_name,omitempty"`
	// Indicates whether client restrictions are to be applied to application pool. Currently it is valid for application pool created from farm. Default value is false.
	EnableClientRestrictions *bool `json:"enable_client_restrictions,omitempty"`
	// Whether to pre-launch the application. Default value is false.
	EnablePreLaunch *bool `json:"enable_pre_launch,omitempty"`
	// Indicates whether the application pool is enabled. Default value is true
	Enabled *bool `json:"enabled,omitempty"`
	// Path to application executable.
	ExecutablePath string `json:"executable_path"`
	// ID of the farm from which this application pool is to be created. Once an application pool is created from a farm, it is always associated with that farm, and cannot be removed from the farm, or added to another farm. Either this or desktop pool id should be set.
	FarmId *string `json:"farm_id,omitempty"`
	// Maximum number of multi-sessions a user can have in this application pool. This property is required if multi-session mode is set to \"ENABLED_DEFAULT_OFF\", \"ENABLED_DEFAULT_ON\", or \"ENABLED_ENFORCED\"Default value is 1.
	MaxMultiSessions *int32 `json:"max_multi_sessions,omitempty"`
	// Multi-session mode for the application pool. An application launched in multi-session mode does not support reconnect behavior when user logs in from a different client instance. Multi-session mode should be disabled when pre-launch is enabled.Default value is \"DISABLED\" * DISABLED: Multi-session is not supported for this application. * ENABLED_DEFAULT_OFF: Multi-session is supported for this application but is disabled by default. The client would need to explicitly request multi-session launch, if wanted. If a legacy client is used, this will always result in a single-session application launch. * ENABLED_DEFAULT_ON: Multi-session mode is supported for this application and is enabled by default. The client can request explicitly for single-session launch, if wanted. If a legacy client is used, this will always result in a multi-session application launch. * ENABLED_ENFORCED: Multi-session is supported for this application and it is enforced. The client can not select to launch this application as a single-session application.
	MultiSessionMode *string `json:"multi_session_mode,omitempty"`
	// The application pool name is the unique identifier used to identify this application pool. This property must contain only alphanumerics, underscores, and dashes. The maximum length is 64 characters.
	Name string `json:"name"`
	// Parameters to pass to application when launching.
	Parameters *string `json:"parameters,omitempty"`
	// Application publisher
	Publisher *string `json:"publisher,omitempty"`
	// Locations of the category folder in the user's OS containing a shortcut to the desktop. The value must be set if category folder name is provided.
	ShortcutLocations []string `json:"shortcut_locations,omitempty"`
	// Starting folder for application
	StartFolder *string `json:"start_folder,omitempty"`
	SupportedFileTypesData *ApplicationSupportedFileTypesData `json:"supported_file_types_data,omitempty"`
	// Application version.
	Version *string `json:"version,omitempty"`
}

type _ApplicationPoolCreateSpecV3 ApplicationPoolCreateSpecV3

// NewApplicationPoolCreateSpecV3 instantiates a new ApplicationPoolCreateSpecV3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationPoolCreateSpecV3(executablePath string, name string) *ApplicationPoolCreateSpecV3 {
	this := ApplicationPoolCreateSpecV3{}
	this.ExecutablePath = executablePath
	this.Name = name
	return &this
}

// NewApplicationPoolCreateSpecV3WithDefaults instantiates a new ApplicationPoolCreateSpecV3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationPoolCreateSpecV3WithDefaults() *ApplicationPoolCreateSpecV3 {
	this := ApplicationPoolCreateSpecV3{}
	return &this
}

// GetAntiAffinityData returns the AntiAffinityData field value if set, zero value otherwise.
func (o *ApplicationPoolCreateSpecV3) GetAntiAffinityData() ApplicationAntiAffinityData {
	if o == nil || IsNil(o.AntiAffinityData) {
		var ret ApplicationAntiAffinityData
		return ret
	}
	return *o.AntiAffinityData
}

// GetAntiAffinityDataOk returns a tuple with the AntiAffinityData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolCreateSpecV3) GetAntiAffinityDataOk() (*ApplicationAntiAffinityData, bool) {
	if o == nil || IsNil(o.AntiAffinityData) {
		return nil, false
	}
	return o.AntiAffinityData, true
}

// HasAntiAffinityData returns a boolean if a field has been set.
func (o *ApplicationPoolCreateSpecV3) HasAntiAffinityData() bool {
	if o != nil && !IsNil(o.AntiAffinityData) {
		return true
	}

	return false
}

// SetAntiAffinityData gets a reference to the given ApplicationAntiAffinityData and assigns it to the AntiAffinityData field.
func (o *ApplicationPoolCreateSpecV3) SetAntiAffinityData(v ApplicationAntiAffinityData) {
	o.AntiAffinityData = &v
}

// GetAvmShortcutId returns the AvmShortcutId field value if set, zero value otherwise.
func (o *ApplicationPoolCreateSpecV3) GetAvmShortcutId() string {
	if o == nil || IsNil(o.AvmShortcutId) {
		var ret string
		return ret
	}
	return *o.AvmShortcutId
}

// GetAvmShortcutIdOk returns a tuple with the AvmShortcutId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolCreateSpecV3) GetAvmShortcutIdOk() (*string, bool) {
	if o == nil || IsNil(o.AvmShortcutId) {
		return nil, false
	}
	return o.AvmShortcutId, true
}

// HasAvmShortcutId returns a boolean if a field has been set.
func (o *ApplicationPoolCreateSpecV3) HasAvmShortcutId() bool {
	if o != nil && !IsNil(o.AvmShortcutId) {
		return true
	}

	return false
}

// SetAvmShortcutId gets a reference to the given string and assigns it to the AvmShortcutId field.
func (o *ApplicationPoolCreateSpecV3) SetAvmShortcutId(v string) {
	o.AvmShortcutId = &v
}

// GetCategoryFolderName returns the CategoryFolderName field value if set, zero value otherwise.
func (o *ApplicationPoolCreateSpecV3) GetCategoryFolderName() string {
	if o == nil || IsNil(o.CategoryFolderName) {
		var ret string
		return ret
	}
	return *o.CategoryFolderName
}

// GetCategoryFolderNameOk returns a tuple with the CategoryFolderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolCreateSpecV3) GetCategoryFolderNameOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryFolderName) {
		return nil, false
	}
	return o.CategoryFolderName, true
}

// HasCategoryFolderName returns a boolean if a field has been set.
func (o *ApplicationPoolCreateSpecV3) HasCategoryFolderName() bool {
	if o != nil && !IsNil(o.CategoryFolderName) {
		return true
	}

	return false
}

// SetCategoryFolderName gets a reference to the given string and assigns it to the CategoryFolderName field.
func (o *ApplicationPoolCreateSpecV3) SetCategoryFolderName(v string) {
	o.CategoryFolderName = &v
}

// GetCloudBrokered returns the CloudBrokered field value if set, zero value otherwise.
func (o *ApplicationPoolCreateSpecV3) GetCloudBrokered() bool {
	if o == nil || IsNil(o.CloudBrokered) {
		var ret bool
		return ret
	}
	return *o.CloudBrokered
}

// GetCloudBrokeredOk returns a tuple with the CloudBrokered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolCreateSpecV3) GetCloudBrokeredOk() (*bool, bool) {
	if o == nil || IsNil(o.CloudBrokered) {
		return nil, false
	}
	return o.CloudBrokered, true
}

// HasCloudBrokered returns a boolean if a field has been set.
func (o *ApplicationPoolCreateSpecV3) HasCloudBrokered() bool {
	if o != nil && !IsNil(o.CloudBrokered) {
		return true
	}

	return false
}

// SetCloudBrokered gets a reference to the given bool and assigns it to the CloudBrokered field.
func (o *ApplicationPoolCreateSpecV3) SetCloudBrokered(v bool) {
	o.CloudBrokered = &v
}

// GetCsRestrictionTags returns the CsRestrictionTags field value if set, zero value otherwise.
func (o *ApplicationPoolCreateSpecV3) GetCsRestrictionTags() []string {
	if o == nil || IsNil(o.CsRestrictionTags) {
		var ret []string
		return ret
	}
	return o.CsRestrictionTags
}

// GetCsRestrictionTagsOk returns a tuple with the CsRestrictionTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolCreateSpecV3) GetCsRestrictionTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.CsRestrictionTags) {
		return nil, false
	}
	return o.CsRestrictionTags, true
}

// HasCsRestrictionTags returns a boolean if a field has been set.
func (o *ApplicationPoolCreateSpecV3) HasCsRestrictionTags() bool {
	if o != nil && !IsNil(o.CsRestrictionTags) {
		return true
	}

	return false
}

// SetCsRestrictionTags gets a reference to the given []string and assigns it to the CsRestrictionTags field.
func (o *ApplicationPoolCreateSpecV3) SetCsRestrictionTags(v []string) {
	o.CsRestrictionTags = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ApplicationPoolCreateSpecV3) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolCreateSpecV3) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ApplicationPoolCreateSpecV3) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ApplicationPoolCreateSpecV3) SetDescription(v string) {
	o.Description = &v
}

// GetDesktopPoolId returns the DesktopPoolId field value if set, zero value otherwise.
func (o *ApplicationPoolCreateSpecV3) GetDesktopPoolId() string {
	if o == nil || IsNil(o.DesktopPoolId) {
		var ret string
		return ret
	}
	return *o.DesktopPoolId
}

// GetDesktopPoolIdOk returns a tuple with the DesktopPoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolCreateSpecV3) GetDesktopPoolIdOk() (*string, bool) {
	if o == nil || IsNil(o.DesktopPoolId) {
		return nil, false
	}
	return o.DesktopPoolId, true
}

// HasDesktopPoolId returns a boolean if a field has been set.
func (o *ApplicationPoolCreateSpecV3) HasDesktopPoolId() bool {
	if o != nil && !IsNil(o.DesktopPoolId) {
		return true
	}

	return false
}

// SetDesktopPoolId gets a reference to the given string and assigns it to the DesktopPoolId field.
func (o *ApplicationPoolCreateSpecV3) SetDesktopPoolId(v string) {
	o.DesktopPoolId = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ApplicationPoolCreateSpecV3) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolCreateSpecV3) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ApplicationPoolCreateSpecV3) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ApplicationPoolCreateSpecV3) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEnableClientRestrictions returns the EnableClientRestrictions field value if set, zero value otherwise.
func (o *ApplicationPoolCreateSpecV3) GetEnableClientRestrictions() bool {
	if o == nil || IsNil(o.EnableClientRestrictions) {
		var ret bool
		return ret
	}
	return *o.EnableClientRestrictions
}

// GetEnableClientRestrictionsOk returns a tuple with the EnableClientRestrictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolCreateSpecV3) GetEnableClientRestrictionsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableClientRestrictions) {
		return nil, false
	}
	return o.EnableClientRestrictions, true
}

// HasEnableClientRestrictions returns a boolean if a field has been set.
func (o *ApplicationPoolCreateSpecV3) HasEnableClientRestrictions() bool {
	if o != nil && !IsNil(o.EnableClientRestrictions) {
		return true
	}

	return false
}

// SetEnableClientRestrictions gets a reference to the given bool and assigns it to the EnableClientRestrictions field.
func (o *ApplicationPoolCreateSpecV3) SetEnableClientRestrictions(v bool) {
	o.EnableClientRestrictions = &v
}

// GetEnablePreLaunch returns the EnablePreLaunch field value if set, zero value otherwise.
func (o *ApplicationPoolCreateSpecV3) GetEnablePreLaunch() bool {
	if o == nil || IsNil(o.EnablePreLaunch) {
		var ret bool
		return ret
	}
	return *o.EnablePreLaunch
}

// GetEnablePreLaunchOk returns a tuple with the EnablePreLaunch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolCreateSpecV3) GetEnablePreLaunchOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePreLaunch) {
		return nil, false
	}
	return o.EnablePreLaunch, true
}

// HasEnablePreLaunch returns a boolean if a field has been set.
func (o *ApplicationPoolCreateSpecV3) HasEnablePreLaunch() bool {
	if o != nil && !IsNil(o.EnablePreLaunch) {
		return true
	}

	return false
}

// SetEnablePreLaunch gets a reference to the given bool and assigns it to the EnablePreLaunch field.
func (o *ApplicationPoolCreateSpecV3) SetEnablePreLaunch(v bool) {
	o.EnablePreLaunch = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ApplicationPoolCreateSpecV3) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolCreateSpecV3) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ApplicationPoolCreateSpecV3) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ApplicationPoolCreateSpecV3) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetExecutablePath returns the ExecutablePath field value
func (o *ApplicationPoolCreateSpecV3) GetExecutablePath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExecutablePath
}

// GetExecutablePathOk returns a tuple with the ExecutablePath field value
// and a boolean to check if the value has been set.
func (o *ApplicationPoolCreateSpecV3) GetExecutablePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExecutablePath, true
}

// SetExecutablePath sets field value
func (o *ApplicationPoolCreateSpecV3) SetExecutablePath(v string) {
	o.ExecutablePath = v
}

// GetFarmId returns the FarmId field value if set, zero value otherwise.
func (o *ApplicationPoolCreateSpecV3) GetFarmId() string {
	if o == nil || IsNil(o.FarmId) {
		var ret string
		return ret
	}
	return *o.FarmId
}

// GetFarmIdOk returns a tuple with the FarmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolCreateSpecV3) GetFarmIdOk() (*string, bool) {
	if o == nil || IsNil(o.FarmId) {
		return nil, false
	}
	return o.FarmId, true
}

// HasFarmId returns a boolean if a field has been set.
func (o *ApplicationPoolCreateSpecV3) HasFarmId() bool {
	if o != nil && !IsNil(o.FarmId) {
		return true
	}

	return false
}

// SetFarmId gets a reference to the given string and assigns it to the FarmId field.
func (o *ApplicationPoolCreateSpecV3) SetFarmId(v string) {
	o.FarmId = &v
}

// GetMaxMultiSessions returns the MaxMultiSessions field value if set, zero value otherwise.
func (o *ApplicationPoolCreateSpecV3) GetMaxMultiSessions() int32 {
	if o == nil || IsNil(o.MaxMultiSessions) {
		var ret int32
		return ret
	}
	return *o.MaxMultiSessions
}

// GetMaxMultiSessionsOk returns a tuple with the MaxMultiSessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolCreateSpecV3) GetMaxMultiSessionsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxMultiSessions) {
		return nil, false
	}
	return o.MaxMultiSessions, true
}

// HasMaxMultiSessions returns a boolean if a field has been set.
func (o *ApplicationPoolCreateSpecV3) HasMaxMultiSessions() bool {
	if o != nil && !IsNil(o.MaxMultiSessions) {
		return true
	}

	return false
}

// SetMaxMultiSessions gets a reference to the given int32 and assigns it to the MaxMultiSessions field.
func (o *ApplicationPoolCreateSpecV3) SetMaxMultiSessions(v int32) {
	o.MaxMultiSessions = &v
}

// GetMultiSessionMode returns the MultiSessionMode field value if set, zero value otherwise.
func (o *ApplicationPoolCreateSpecV3) GetMultiSessionMode() string {
	if o == nil || IsNil(o.MultiSessionMode) {
		var ret string
		return ret
	}
	return *o.MultiSessionMode
}

// GetMultiSessionModeOk returns a tuple with the MultiSessionMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolCreateSpecV3) GetMultiSessionModeOk() (*string, bool) {
	if o == nil || IsNil(o.MultiSessionMode) {
		return nil, false
	}
	return o.MultiSessionMode, true
}

// HasMultiSessionMode returns a boolean if a field has been set.
func (o *ApplicationPoolCreateSpecV3) HasMultiSessionMode() bool {
	if o != nil && !IsNil(o.MultiSessionMode) {
		return true
	}

	return false
}

// SetMultiSessionMode gets a reference to the given string and assigns it to the MultiSessionMode field.
func (o *ApplicationPoolCreateSpecV3) SetMultiSessionMode(v string) {
	o.MultiSessionMode = &v
}

// GetName returns the Name field value
func (o *ApplicationPoolCreateSpecV3) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApplicationPoolCreateSpecV3) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApplicationPoolCreateSpecV3) SetName(v string) {
	o.Name = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *ApplicationPoolCreateSpecV3) GetParameters() string {
	if o == nil || IsNil(o.Parameters) {
		var ret string
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolCreateSpecV3) GetParametersOk() (*string, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *ApplicationPoolCreateSpecV3) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given string and assigns it to the Parameters field.
func (o *ApplicationPoolCreateSpecV3) SetParameters(v string) {
	o.Parameters = &v
}

// GetPublisher returns the Publisher field value if set, zero value otherwise.
func (o *ApplicationPoolCreateSpecV3) GetPublisher() string {
	if o == nil || IsNil(o.Publisher) {
		var ret string
		return ret
	}
	return *o.Publisher
}

// GetPublisherOk returns a tuple with the Publisher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolCreateSpecV3) GetPublisherOk() (*string, bool) {
	if o == nil || IsNil(o.Publisher) {
		return nil, false
	}
	return o.Publisher, true
}

// HasPublisher returns a boolean if a field has been set.
func (o *ApplicationPoolCreateSpecV3) HasPublisher() bool {
	if o != nil && !IsNil(o.Publisher) {
		return true
	}

	return false
}

// SetPublisher gets a reference to the given string and assigns it to the Publisher field.
func (o *ApplicationPoolCreateSpecV3) SetPublisher(v string) {
	o.Publisher = &v
}

// GetShortcutLocations returns the ShortcutLocations field value if set, zero value otherwise.
func (o *ApplicationPoolCreateSpecV3) GetShortcutLocations() []string {
	if o == nil || IsNil(o.ShortcutLocations) {
		var ret []string
		return ret
	}
	return o.ShortcutLocations
}

// GetShortcutLocationsOk returns a tuple with the ShortcutLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolCreateSpecV3) GetShortcutLocationsOk() ([]string, bool) {
	if o == nil || IsNil(o.ShortcutLocations) {
		return nil, false
	}
	return o.ShortcutLocations, true
}

// HasShortcutLocations returns a boolean if a field has been set.
func (o *ApplicationPoolCreateSpecV3) HasShortcutLocations() bool {
	if o != nil && !IsNil(o.ShortcutLocations) {
		return true
	}

	return false
}

// SetShortcutLocations gets a reference to the given []string and assigns it to the ShortcutLocations field.
func (o *ApplicationPoolCreateSpecV3) SetShortcutLocations(v []string) {
	o.ShortcutLocations = v
}

// GetStartFolder returns the StartFolder field value if set, zero value otherwise.
func (o *ApplicationPoolCreateSpecV3) GetStartFolder() string {
	if o == nil || IsNil(o.StartFolder) {
		var ret string
		return ret
	}
	return *o.StartFolder
}

// GetStartFolderOk returns a tuple with the StartFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolCreateSpecV3) GetStartFolderOk() (*string, bool) {
	if o == nil || IsNil(o.StartFolder) {
		return nil, false
	}
	return o.StartFolder, true
}

// HasStartFolder returns a boolean if a field has been set.
func (o *ApplicationPoolCreateSpecV3) HasStartFolder() bool {
	if o != nil && !IsNil(o.StartFolder) {
		return true
	}

	return false
}

// SetStartFolder gets a reference to the given string and assigns it to the StartFolder field.
func (o *ApplicationPoolCreateSpecV3) SetStartFolder(v string) {
	o.StartFolder = &v
}

// GetSupportedFileTypesData returns the SupportedFileTypesData field value if set, zero value otherwise.
func (o *ApplicationPoolCreateSpecV3) GetSupportedFileTypesData() ApplicationSupportedFileTypesData {
	if o == nil || IsNil(o.SupportedFileTypesData) {
		var ret ApplicationSupportedFileTypesData
		return ret
	}
	return *o.SupportedFileTypesData
}

// GetSupportedFileTypesDataOk returns a tuple with the SupportedFileTypesData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolCreateSpecV3) GetSupportedFileTypesDataOk() (*ApplicationSupportedFileTypesData, bool) {
	if o == nil || IsNil(o.SupportedFileTypesData) {
		return nil, false
	}
	return o.SupportedFileTypesData, true
}

// HasSupportedFileTypesData returns a boolean if a field has been set.
func (o *ApplicationPoolCreateSpecV3) HasSupportedFileTypesData() bool {
	if o != nil && !IsNil(o.SupportedFileTypesData) {
		return true
	}

	return false
}

// SetSupportedFileTypesData gets a reference to the given ApplicationSupportedFileTypesData and assigns it to the SupportedFileTypesData field.
func (o *ApplicationPoolCreateSpecV3) SetSupportedFileTypesData(v ApplicationSupportedFileTypesData) {
	o.SupportedFileTypesData = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ApplicationPoolCreateSpecV3) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolCreateSpecV3) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ApplicationPoolCreateSpecV3) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ApplicationPoolCreateSpecV3) SetVersion(v string) {
	o.Version = &v
}

func (o ApplicationPoolCreateSpecV3) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationPoolCreateSpecV3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AntiAffinityData) {
		toSerialize["anti_affinity_data"] = o.AntiAffinityData
	}
	if !IsNil(o.AvmShortcutId) {
		toSerialize["avm_shortcut_id"] = o.AvmShortcutId
	}
	if !IsNil(o.CategoryFolderName) {
		toSerialize["category_folder_name"] = o.CategoryFolderName
	}
	if !IsNil(o.CloudBrokered) {
		toSerialize["cloud_brokered"] = o.CloudBrokered
	}
	if !IsNil(o.CsRestrictionTags) {
		toSerialize["cs_restriction_tags"] = o.CsRestrictionTags
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DesktopPoolId) {
		toSerialize["desktop_pool_id"] = o.DesktopPoolId
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.EnableClientRestrictions) {
		toSerialize["enable_client_restrictions"] = o.EnableClientRestrictions
	}
	if !IsNil(o.EnablePreLaunch) {
		toSerialize["enable_pre_launch"] = o.EnablePreLaunch
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	toSerialize["executable_path"] = o.ExecutablePath
	if !IsNil(o.FarmId) {
		toSerialize["farm_id"] = o.FarmId
	}
	if !IsNil(o.MaxMultiSessions) {
		toSerialize["max_multi_sessions"] = o.MaxMultiSessions
	}
	if !IsNil(o.MultiSessionMode) {
		toSerialize["multi_session_mode"] = o.MultiSessionMode
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	if !IsNil(o.Publisher) {
		toSerialize["publisher"] = o.Publisher
	}
	if !IsNil(o.ShortcutLocations) {
		toSerialize["shortcut_locations"] = o.ShortcutLocations
	}
	if !IsNil(o.StartFolder) {
		toSerialize["start_folder"] = o.StartFolder
	}
	if !IsNil(o.SupportedFileTypesData) {
		toSerialize["supported_file_types_data"] = o.SupportedFileTypesData
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

func (o *ApplicationPoolCreateSpecV3) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"executable_path",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApplicationPoolCreateSpecV3 := _ApplicationPoolCreateSpecV3{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApplicationPoolCreateSpecV3)

	if err != nil {
		return err
	}

	*o = ApplicationPoolCreateSpecV3(varApplicationPoolCreateSpecV3)

	return err
}

type NullableApplicationPoolCreateSpecV3 struct {
	value *ApplicationPoolCreateSpecV3
	isSet bool
}

func (v NullableApplicationPoolCreateSpecV3) Get() *ApplicationPoolCreateSpecV3 {
	return v.value
}

func (v *NullableApplicationPoolCreateSpecV3) Set(val *ApplicationPoolCreateSpecV3) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationPoolCreateSpecV3) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationPoolCreateSpecV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationPoolCreateSpecV3(val *ApplicationPoolCreateSpecV3) *NullableApplicationPoolCreateSpecV3 {
	return &NullableApplicationPoolCreateSpecV3{value: val, isSet: true}
}

func (v NullableApplicationPoolCreateSpecV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationPoolCreateSpecV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


