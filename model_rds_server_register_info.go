/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the RDSServerRegisterInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RDSServerRegisterInfo{}

// RDSServerRegisterInfo RDS Server register response.
type RDSServerRegisterInfo struct {
	// Unique ID representing the RDS Server.
	Id *string `json:"id,omitempty"`
	// The pairing token for the RDS Server.
	PairingToken *string `json:"pairing_token,omitempty"`
}

// NewRDSServerRegisterInfo instantiates a new RDSServerRegisterInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRDSServerRegisterInfo() *RDSServerRegisterInfo {
	this := RDSServerRegisterInfo{}
	return &this
}

// NewRDSServerRegisterInfoWithDefaults instantiates a new RDSServerRegisterInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRDSServerRegisterInfoWithDefaults() *RDSServerRegisterInfo {
	this := RDSServerRegisterInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RDSServerRegisterInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerRegisterInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RDSServerRegisterInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RDSServerRegisterInfo) SetId(v string) {
	o.Id = &v
}

// GetPairingToken returns the PairingToken field value if set, zero value otherwise.
func (o *RDSServerRegisterInfo) GetPairingToken() string {
	if o == nil || IsNil(o.PairingToken) {
		var ret string
		return ret
	}
	return *o.PairingToken
}

// GetPairingTokenOk returns a tuple with the PairingToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerRegisterInfo) GetPairingTokenOk() (*string, bool) {
	if o == nil || IsNil(o.PairingToken) {
		return nil, false
	}
	return o.PairingToken, true
}

// HasPairingToken returns a boolean if a field has been set.
func (o *RDSServerRegisterInfo) HasPairingToken() bool {
	if o != nil && !IsNil(o.PairingToken) {
		return true
	}

	return false
}

// SetPairingToken gets a reference to the given string and assigns it to the PairingToken field.
func (o *RDSServerRegisterInfo) SetPairingToken(v string) {
	o.PairingToken = &v
}

func (o RDSServerRegisterInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RDSServerRegisterInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.PairingToken) {
		toSerialize["pairing_token"] = o.PairingToken
	}
	return toSerialize, nil
}

type NullableRDSServerRegisterInfo struct {
	value *RDSServerRegisterInfo
	isSet bool
}

func (v NullableRDSServerRegisterInfo) Get() *RDSServerRegisterInfo {
	return v.value
}

func (v *NullableRDSServerRegisterInfo) Set(val *RDSServerRegisterInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRDSServerRegisterInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRDSServerRegisterInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRDSServerRegisterInfo(val *RDSServerRegisterInfo) *NullableRDSServerRegisterInfo {
	return &NullableRDSServerRegisterInfo{value: val, isSet: true}
}

func (v NullableRDSServerRegisterInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRDSServerRegisterInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


