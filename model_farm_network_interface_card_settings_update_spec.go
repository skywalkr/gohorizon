/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FarmNetworkInterfaceCardSettingsUpdateSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FarmNetworkInterfaceCardSettingsUpdateSpec{}

// FarmNetworkInterfaceCardSettingsUpdateSpec Network interface card settings for RDS Servers provisioned for the farm.
type FarmNetworkInterfaceCardSettingsUpdateSpec struct {
	// ID of the network interface card for these settings.
	NetworkInterfaceCardId string `json:"network_interface_card_id"`
	// Automatic network label assignment feature settings for this NIC. If network_label_assignment_specs is not set, nics will be ignored. By default, newly provisioned machines of an automated farm retain their parent image's network labels on each of their network interface cards. In certain circumstances, notably dealing with VLAN subset sizing and DHCP IP address availability, it may be desirable for the cloned VM to instead use different network labels for these newly provisioned machines. This feature allows an administrator to provide a per NIC list of network labels and their maximum availability to be automatically distributed to newly provisioned machines.<br>If this is not set, the feature is disabled.<br>Starting at the alphabetically first network label spec in the list that has not yet been assigned its maximum count for this NIC on this VM, the VM will have its next provisioned machine's NIC assigned that label. If all network labels in this list have reached their maximum count, this VM will have further provisioned machines assigned the last label in the list over capacity, and an error will be logged. Not all labels need be configured.<br>Any changes to these settings will be applicable only to RDS servers provisioned after the change. Already provisioned RDS servers will never have their network label assignments altered by this feature.
	NetworkLabelAssignmentSpecs []FarmNetworkLabelAssignmentSettingsUpdateSpec `json:"network_label_assignment_specs,omitempty"`
}

type _FarmNetworkInterfaceCardSettingsUpdateSpec FarmNetworkInterfaceCardSettingsUpdateSpec

// NewFarmNetworkInterfaceCardSettingsUpdateSpec instantiates a new FarmNetworkInterfaceCardSettingsUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFarmNetworkInterfaceCardSettingsUpdateSpec(networkInterfaceCardId string) *FarmNetworkInterfaceCardSettingsUpdateSpec {
	this := FarmNetworkInterfaceCardSettingsUpdateSpec{}
	this.NetworkInterfaceCardId = networkInterfaceCardId
	return &this
}

// NewFarmNetworkInterfaceCardSettingsUpdateSpecWithDefaults instantiates a new FarmNetworkInterfaceCardSettingsUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFarmNetworkInterfaceCardSettingsUpdateSpecWithDefaults() *FarmNetworkInterfaceCardSettingsUpdateSpec {
	this := FarmNetworkInterfaceCardSettingsUpdateSpec{}
	return &this
}

// GetNetworkInterfaceCardId returns the NetworkInterfaceCardId field value
func (o *FarmNetworkInterfaceCardSettingsUpdateSpec) GetNetworkInterfaceCardId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkInterfaceCardId
}

// GetNetworkInterfaceCardIdOk returns a tuple with the NetworkInterfaceCardId field value
// and a boolean to check if the value has been set.
func (o *FarmNetworkInterfaceCardSettingsUpdateSpec) GetNetworkInterfaceCardIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkInterfaceCardId, true
}

// SetNetworkInterfaceCardId sets field value
func (o *FarmNetworkInterfaceCardSettingsUpdateSpec) SetNetworkInterfaceCardId(v string) {
	o.NetworkInterfaceCardId = v
}

// GetNetworkLabelAssignmentSpecs returns the NetworkLabelAssignmentSpecs field value if set, zero value otherwise.
func (o *FarmNetworkInterfaceCardSettingsUpdateSpec) GetNetworkLabelAssignmentSpecs() []FarmNetworkLabelAssignmentSettingsUpdateSpec {
	if o == nil || IsNil(o.NetworkLabelAssignmentSpecs) {
		var ret []FarmNetworkLabelAssignmentSettingsUpdateSpec
		return ret
	}
	return o.NetworkLabelAssignmentSpecs
}

// GetNetworkLabelAssignmentSpecsOk returns a tuple with the NetworkLabelAssignmentSpecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmNetworkInterfaceCardSettingsUpdateSpec) GetNetworkLabelAssignmentSpecsOk() ([]FarmNetworkLabelAssignmentSettingsUpdateSpec, bool) {
	if o == nil || IsNil(o.NetworkLabelAssignmentSpecs) {
		return nil, false
	}
	return o.NetworkLabelAssignmentSpecs, true
}

// HasNetworkLabelAssignmentSpecs returns a boolean if a field has been set.
func (o *FarmNetworkInterfaceCardSettingsUpdateSpec) HasNetworkLabelAssignmentSpecs() bool {
	if o != nil && !IsNil(o.NetworkLabelAssignmentSpecs) {
		return true
	}

	return false
}

// SetNetworkLabelAssignmentSpecs gets a reference to the given []FarmNetworkLabelAssignmentSettingsUpdateSpec and assigns it to the NetworkLabelAssignmentSpecs field.
func (o *FarmNetworkInterfaceCardSettingsUpdateSpec) SetNetworkLabelAssignmentSpecs(v []FarmNetworkLabelAssignmentSettingsUpdateSpec) {
	o.NetworkLabelAssignmentSpecs = v
}

func (o FarmNetworkInterfaceCardSettingsUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FarmNetworkInterfaceCardSettingsUpdateSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["network_interface_card_id"] = o.NetworkInterfaceCardId
	if !IsNil(o.NetworkLabelAssignmentSpecs) {
		toSerialize["network_label_assignment_specs"] = o.NetworkLabelAssignmentSpecs
	}
	return toSerialize, nil
}

func (o *FarmNetworkInterfaceCardSettingsUpdateSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"network_interface_card_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFarmNetworkInterfaceCardSettingsUpdateSpec := _FarmNetworkInterfaceCardSettingsUpdateSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFarmNetworkInterfaceCardSettingsUpdateSpec)

	if err != nil {
		return err
	}

	*o = FarmNetworkInterfaceCardSettingsUpdateSpec(varFarmNetworkInterfaceCardSettingsUpdateSpec)

	return err
}

type NullableFarmNetworkInterfaceCardSettingsUpdateSpec struct {
	value *FarmNetworkInterfaceCardSettingsUpdateSpec
	isSet bool
}

func (v NullableFarmNetworkInterfaceCardSettingsUpdateSpec) Get() *FarmNetworkInterfaceCardSettingsUpdateSpec {
	return v.value
}

func (v *NullableFarmNetworkInterfaceCardSettingsUpdateSpec) Set(val *FarmNetworkInterfaceCardSettingsUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableFarmNetworkInterfaceCardSettingsUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableFarmNetworkInterfaceCardSettingsUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFarmNetworkInterfaceCardSettingsUpdateSpec(val *FarmNetworkInterfaceCardSettingsUpdateSpec) *NullableFarmNetworkInterfaceCardSettingsUpdateSpec {
	return &NullableFarmNetworkInterfaceCardSettingsUpdateSpec{value: val, isSet: true}
}

func (v NullableFarmNetworkInterfaceCardSettingsUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFarmNetworkInterfaceCardSettingsUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


