/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the FarmAutomatedSettingsInfoV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FarmAutomatedSettingsInfoV2{}

// FarmAutomatedSettingsInfoV2 Settings for Automated farm.
type FarmAutomatedSettingsInfoV2 struct {
	CustomizationSettings *FarmCustomizationSettingsInfoV2 `json:"customization_settings,omitempty"`
	// Indicates whether to enable provisioning immediately.<br>Supported Filters: 'Equals'.
	EnableProvisioning *bool `json:"enable_provisioning,omitempty"`
	// Source of image used in the farm.<br>Supported Filters: 'Equals'. * VIRTUAL_CENTER: Image was created in virtual center. * IMAGE_CATALOG: Image was created in image catalog.
	ImageSource *string `json:"image_source,omitempty"`
	// RDS Server type for max sessions. * UNLIMITED: The RDS Server has an unlimited number of sessions. * LIMITED: The RDS Server has a limited number of sessions.
	MaxSessionType *string `json:"max_session_type,omitempty"`
	// Maximum number of sessions allowed for RDS Server. This is set when max_session_type is LIMITED.
	MaxSessions *int32 `json:"max_sessions,omitempty"`
	// Minimum number of ready (provisioned) RDS Servers during Instant clone maintenance operations. Use this setting to perform machine maintenance operations in a rolling fashion. Increasing this count may decrease the concurrency for Instant clone maintenance operations for the automated farm.
	MinReadyVms *int32 `json:"min_ready_vms,omitempty"`
	// Network interface card settings for RDS Servers provisioned for this farm. A NIC may appear at most once in these settings and must be present on this RDS Server's parent's snapshot. Not all NICs need be configured. Any that are not will use default settings.
	Nics []FarmNetworkInterfaceCardSettingsInfo `json:"nics,omitempty"`
	// The guest operating system. * UNKNOWN: Unknown * WINDOWS_SERVER_2003: Windows Server 2003 * WINDOWS_SERVER_2008: Windows Server 2008 * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2 * WINDOWS_SERVER_2012: Windows Server 2012 * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2 * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above * LINUX_SERVER_OTHER: Linux Server (other)
	OperatingSystem *string `json:"operating_system,omitempty"`
	// The guest operating system architecture. * UNKNOWN: Operating System cannot be determined. * BIT_32: 32 bit Operating System Architecture. * BIT_64: 64 bit Operating System Architecture.
	OperatingSystemArchitecture *string `json:"operating_system_architecture,omitempty"`
	PatternNamingSettings *FarmRDSServersPatternNamingSettingsInfo `json:"pattern_naming_settings,omitempty"`
	ProvisioningSettings *FarmProvisioningSettingsInfo `json:"provisioning_settings,omitempty"`
	ProvisioningStatusData *FarmProvisioningStatusInfo `json:"provisioning_status_data,omitempty"`
	// Indicates whether provisioning on all VMs stops on error.
	StopProvisioningOnError *bool `json:"stop_provisioning_on_error,omitempty"`
	StorageSettings *FarmStorageSettingsInfo `json:"storage_settings,omitempty"`
	// Transparent page sharing scope for the farm. * VM: Inter-VM page sharing is not permitted. * FARM: Inter-VM page sharing among VMs belonging to the same automated farm is permitted. * POD: Inter-VM page sharing among VMs belonging to the same Pod is permitted. * GLOBAL: Inter-VM page sharing among all VMs on the same host is permitted.
	TransparentPageSharingScope *string `json:"transparent_page_sharing_scope,omitempty"`
	// ID of the virtual center server.<br>Supported Filters: 'Equals'.
	VcenterId *string `json:"vcenter_id,omitempty"`
}

// NewFarmAutomatedSettingsInfoV2 instantiates a new FarmAutomatedSettingsInfoV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFarmAutomatedSettingsInfoV2() *FarmAutomatedSettingsInfoV2 {
	this := FarmAutomatedSettingsInfoV2{}
	return &this
}

// NewFarmAutomatedSettingsInfoV2WithDefaults instantiates a new FarmAutomatedSettingsInfoV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFarmAutomatedSettingsInfoV2WithDefaults() *FarmAutomatedSettingsInfoV2 {
	this := FarmAutomatedSettingsInfoV2{}
	return &this
}

// GetCustomizationSettings returns the CustomizationSettings field value if set, zero value otherwise.
func (o *FarmAutomatedSettingsInfoV2) GetCustomizationSettings() FarmCustomizationSettingsInfoV2 {
	if o == nil || IsNil(o.CustomizationSettings) {
		var ret FarmCustomizationSettingsInfoV2
		return ret
	}
	return *o.CustomizationSettings
}

// GetCustomizationSettingsOk returns a tuple with the CustomizationSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsInfoV2) GetCustomizationSettingsOk() (*FarmCustomizationSettingsInfoV2, bool) {
	if o == nil || IsNil(o.CustomizationSettings) {
		return nil, false
	}
	return o.CustomizationSettings, true
}

// HasCustomizationSettings returns a boolean if a field has been set.
func (o *FarmAutomatedSettingsInfoV2) HasCustomizationSettings() bool {
	if o != nil && !IsNil(o.CustomizationSettings) {
		return true
	}

	return false
}

// SetCustomizationSettings gets a reference to the given FarmCustomizationSettingsInfoV2 and assigns it to the CustomizationSettings field.
func (o *FarmAutomatedSettingsInfoV2) SetCustomizationSettings(v FarmCustomizationSettingsInfoV2) {
	o.CustomizationSettings = &v
}

// GetEnableProvisioning returns the EnableProvisioning field value if set, zero value otherwise.
func (o *FarmAutomatedSettingsInfoV2) GetEnableProvisioning() bool {
	if o == nil || IsNil(o.EnableProvisioning) {
		var ret bool
		return ret
	}
	return *o.EnableProvisioning
}

// GetEnableProvisioningOk returns a tuple with the EnableProvisioning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsInfoV2) GetEnableProvisioningOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableProvisioning) {
		return nil, false
	}
	return o.EnableProvisioning, true
}

// HasEnableProvisioning returns a boolean if a field has been set.
func (o *FarmAutomatedSettingsInfoV2) HasEnableProvisioning() bool {
	if o != nil && !IsNil(o.EnableProvisioning) {
		return true
	}

	return false
}

// SetEnableProvisioning gets a reference to the given bool and assigns it to the EnableProvisioning field.
func (o *FarmAutomatedSettingsInfoV2) SetEnableProvisioning(v bool) {
	o.EnableProvisioning = &v
}

// GetImageSource returns the ImageSource field value if set, zero value otherwise.
func (o *FarmAutomatedSettingsInfoV2) GetImageSource() string {
	if o == nil || IsNil(o.ImageSource) {
		var ret string
		return ret
	}
	return *o.ImageSource
}

// GetImageSourceOk returns a tuple with the ImageSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsInfoV2) GetImageSourceOk() (*string, bool) {
	if o == nil || IsNil(o.ImageSource) {
		return nil, false
	}
	return o.ImageSource, true
}

// HasImageSource returns a boolean if a field has been set.
func (o *FarmAutomatedSettingsInfoV2) HasImageSource() bool {
	if o != nil && !IsNil(o.ImageSource) {
		return true
	}

	return false
}

// SetImageSource gets a reference to the given string and assigns it to the ImageSource field.
func (o *FarmAutomatedSettingsInfoV2) SetImageSource(v string) {
	o.ImageSource = &v
}

// GetMaxSessionType returns the MaxSessionType field value if set, zero value otherwise.
func (o *FarmAutomatedSettingsInfoV2) GetMaxSessionType() string {
	if o == nil || IsNil(o.MaxSessionType) {
		var ret string
		return ret
	}
	return *o.MaxSessionType
}

// GetMaxSessionTypeOk returns a tuple with the MaxSessionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsInfoV2) GetMaxSessionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MaxSessionType) {
		return nil, false
	}
	return o.MaxSessionType, true
}

// HasMaxSessionType returns a boolean if a field has been set.
func (o *FarmAutomatedSettingsInfoV2) HasMaxSessionType() bool {
	if o != nil && !IsNil(o.MaxSessionType) {
		return true
	}

	return false
}

// SetMaxSessionType gets a reference to the given string and assigns it to the MaxSessionType field.
func (o *FarmAutomatedSettingsInfoV2) SetMaxSessionType(v string) {
	o.MaxSessionType = &v
}

// GetMaxSessions returns the MaxSessions field value if set, zero value otherwise.
func (o *FarmAutomatedSettingsInfoV2) GetMaxSessions() int32 {
	if o == nil || IsNil(o.MaxSessions) {
		var ret int32
		return ret
	}
	return *o.MaxSessions
}

// GetMaxSessionsOk returns a tuple with the MaxSessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsInfoV2) GetMaxSessionsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxSessions) {
		return nil, false
	}
	return o.MaxSessions, true
}

// HasMaxSessions returns a boolean if a field has been set.
func (o *FarmAutomatedSettingsInfoV2) HasMaxSessions() bool {
	if o != nil && !IsNil(o.MaxSessions) {
		return true
	}

	return false
}

// SetMaxSessions gets a reference to the given int32 and assigns it to the MaxSessions field.
func (o *FarmAutomatedSettingsInfoV2) SetMaxSessions(v int32) {
	o.MaxSessions = &v
}

// GetMinReadyVms returns the MinReadyVms field value if set, zero value otherwise.
func (o *FarmAutomatedSettingsInfoV2) GetMinReadyVms() int32 {
	if o == nil || IsNil(o.MinReadyVms) {
		var ret int32
		return ret
	}
	return *o.MinReadyVms
}

// GetMinReadyVmsOk returns a tuple with the MinReadyVms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsInfoV2) GetMinReadyVmsOk() (*int32, bool) {
	if o == nil || IsNil(o.MinReadyVms) {
		return nil, false
	}
	return o.MinReadyVms, true
}

// HasMinReadyVms returns a boolean if a field has been set.
func (o *FarmAutomatedSettingsInfoV2) HasMinReadyVms() bool {
	if o != nil && !IsNil(o.MinReadyVms) {
		return true
	}

	return false
}

// SetMinReadyVms gets a reference to the given int32 and assigns it to the MinReadyVms field.
func (o *FarmAutomatedSettingsInfoV2) SetMinReadyVms(v int32) {
	o.MinReadyVms = &v
}

// GetNics returns the Nics field value if set, zero value otherwise.
func (o *FarmAutomatedSettingsInfoV2) GetNics() []FarmNetworkInterfaceCardSettingsInfo {
	if o == nil || IsNil(o.Nics) {
		var ret []FarmNetworkInterfaceCardSettingsInfo
		return ret
	}
	return o.Nics
}

// GetNicsOk returns a tuple with the Nics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsInfoV2) GetNicsOk() ([]FarmNetworkInterfaceCardSettingsInfo, bool) {
	if o == nil || IsNil(o.Nics) {
		return nil, false
	}
	return o.Nics, true
}

// HasNics returns a boolean if a field has been set.
func (o *FarmAutomatedSettingsInfoV2) HasNics() bool {
	if o != nil && !IsNil(o.Nics) {
		return true
	}

	return false
}

// SetNics gets a reference to the given []FarmNetworkInterfaceCardSettingsInfo and assigns it to the Nics field.
func (o *FarmAutomatedSettingsInfoV2) SetNics(v []FarmNetworkInterfaceCardSettingsInfo) {
	o.Nics = v
}

// GetOperatingSystem returns the OperatingSystem field value if set, zero value otherwise.
func (o *FarmAutomatedSettingsInfoV2) GetOperatingSystem() string {
	if o == nil || IsNil(o.OperatingSystem) {
		var ret string
		return ret
	}
	return *o.OperatingSystem
}

// GetOperatingSystemOk returns a tuple with the OperatingSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsInfoV2) GetOperatingSystemOk() (*string, bool) {
	if o == nil || IsNil(o.OperatingSystem) {
		return nil, false
	}
	return o.OperatingSystem, true
}

// HasOperatingSystem returns a boolean if a field has been set.
func (o *FarmAutomatedSettingsInfoV2) HasOperatingSystem() bool {
	if o != nil && !IsNil(o.OperatingSystem) {
		return true
	}

	return false
}

// SetOperatingSystem gets a reference to the given string and assigns it to the OperatingSystem field.
func (o *FarmAutomatedSettingsInfoV2) SetOperatingSystem(v string) {
	o.OperatingSystem = &v
}

// GetOperatingSystemArchitecture returns the OperatingSystemArchitecture field value if set, zero value otherwise.
func (o *FarmAutomatedSettingsInfoV2) GetOperatingSystemArchitecture() string {
	if o == nil || IsNil(o.OperatingSystemArchitecture) {
		var ret string
		return ret
	}
	return *o.OperatingSystemArchitecture
}

// GetOperatingSystemArchitectureOk returns a tuple with the OperatingSystemArchitecture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsInfoV2) GetOperatingSystemArchitectureOk() (*string, bool) {
	if o == nil || IsNil(o.OperatingSystemArchitecture) {
		return nil, false
	}
	return o.OperatingSystemArchitecture, true
}

// HasOperatingSystemArchitecture returns a boolean if a field has been set.
func (o *FarmAutomatedSettingsInfoV2) HasOperatingSystemArchitecture() bool {
	if o != nil && !IsNil(o.OperatingSystemArchitecture) {
		return true
	}

	return false
}

// SetOperatingSystemArchitecture gets a reference to the given string and assigns it to the OperatingSystemArchitecture field.
func (o *FarmAutomatedSettingsInfoV2) SetOperatingSystemArchitecture(v string) {
	o.OperatingSystemArchitecture = &v
}

// GetPatternNamingSettings returns the PatternNamingSettings field value if set, zero value otherwise.
func (o *FarmAutomatedSettingsInfoV2) GetPatternNamingSettings() FarmRDSServersPatternNamingSettingsInfo {
	if o == nil || IsNil(o.PatternNamingSettings) {
		var ret FarmRDSServersPatternNamingSettingsInfo
		return ret
	}
	return *o.PatternNamingSettings
}

// GetPatternNamingSettingsOk returns a tuple with the PatternNamingSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsInfoV2) GetPatternNamingSettingsOk() (*FarmRDSServersPatternNamingSettingsInfo, bool) {
	if o == nil || IsNil(o.PatternNamingSettings) {
		return nil, false
	}
	return o.PatternNamingSettings, true
}

// HasPatternNamingSettings returns a boolean if a field has been set.
func (o *FarmAutomatedSettingsInfoV2) HasPatternNamingSettings() bool {
	if o != nil && !IsNil(o.PatternNamingSettings) {
		return true
	}

	return false
}

// SetPatternNamingSettings gets a reference to the given FarmRDSServersPatternNamingSettingsInfo and assigns it to the PatternNamingSettings field.
func (o *FarmAutomatedSettingsInfoV2) SetPatternNamingSettings(v FarmRDSServersPatternNamingSettingsInfo) {
	o.PatternNamingSettings = &v
}

// GetProvisioningSettings returns the ProvisioningSettings field value if set, zero value otherwise.
func (o *FarmAutomatedSettingsInfoV2) GetProvisioningSettings() FarmProvisioningSettingsInfo {
	if o == nil || IsNil(o.ProvisioningSettings) {
		var ret FarmProvisioningSettingsInfo
		return ret
	}
	return *o.ProvisioningSettings
}

// GetProvisioningSettingsOk returns a tuple with the ProvisioningSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsInfoV2) GetProvisioningSettingsOk() (*FarmProvisioningSettingsInfo, bool) {
	if o == nil || IsNil(o.ProvisioningSettings) {
		return nil, false
	}
	return o.ProvisioningSettings, true
}

// HasProvisioningSettings returns a boolean if a field has been set.
func (o *FarmAutomatedSettingsInfoV2) HasProvisioningSettings() bool {
	if o != nil && !IsNil(o.ProvisioningSettings) {
		return true
	}

	return false
}

// SetProvisioningSettings gets a reference to the given FarmProvisioningSettingsInfo and assigns it to the ProvisioningSettings field.
func (o *FarmAutomatedSettingsInfoV2) SetProvisioningSettings(v FarmProvisioningSettingsInfo) {
	o.ProvisioningSettings = &v
}

// GetProvisioningStatusData returns the ProvisioningStatusData field value if set, zero value otherwise.
func (o *FarmAutomatedSettingsInfoV2) GetProvisioningStatusData() FarmProvisioningStatusInfo {
	if o == nil || IsNil(o.ProvisioningStatusData) {
		var ret FarmProvisioningStatusInfo
		return ret
	}
	return *o.ProvisioningStatusData
}

// GetProvisioningStatusDataOk returns a tuple with the ProvisioningStatusData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsInfoV2) GetProvisioningStatusDataOk() (*FarmProvisioningStatusInfo, bool) {
	if o == nil || IsNil(o.ProvisioningStatusData) {
		return nil, false
	}
	return o.ProvisioningStatusData, true
}

// HasProvisioningStatusData returns a boolean if a field has been set.
func (o *FarmAutomatedSettingsInfoV2) HasProvisioningStatusData() bool {
	if o != nil && !IsNil(o.ProvisioningStatusData) {
		return true
	}

	return false
}

// SetProvisioningStatusData gets a reference to the given FarmProvisioningStatusInfo and assigns it to the ProvisioningStatusData field.
func (o *FarmAutomatedSettingsInfoV2) SetProvisioningStatusData(v FarmProvisioningStatusInfo) {
	o.ProvisioningStatusData = &v
}

// GetStopProvisioningOnError returns the StopProvisioningOnError field value if set, zero value otherwise.
func (o *FarmAutomatedSettingsInfoV2) GetStopProvisioningOnError() bool {
	if o == nil || IsNil(o.StopProvisioningOnError) {
		var ret bool
		return ret
	}
	return *o.StopProvisioningOnError
}

// GetStopProvisioningOnErrorOk returns a tuple with the StopProvisioningOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsInfoV2) GetStopProvisioningOnErrorOk() (*bool, bool) {
	if o == nil || IsNil(o.StopProvisioningOnError) {
		return nil, false
	}
	return o.StopProvisioningOnError, true
}

// HasStopProvisioningOnError returns a boolean if a field has been set.
func (o *FarmAutomatedSettingsInfoV2) HasStopProvisioningOnError() bool {
	if o != nil && !IsNil(o.StopProvisioningOnError) {
		return true
	}

	return false
}

// SetStopProvisioningOnError gets a reference to the given bool and assigns it to the StopProvisioningOnError field.
func (o *FarmAutomatedSettingsInfoV2) SetStopProvisioningOnError(v bool) {
	o.StopProvisioningOnError = &v
}

// GetStorageSettings returns the StorageSettings field value if set, zero value otherwise.
func (o *FarmAutomatedSettingsInfoV2) GetStorageSettings() FarmStorageSettingsInfo {
	if o == nil || IsNil(o.StorageSettings) {
		var ret FarmStorageSettingsInfo
		return ret
	}
	return *o.StorageSettings
}

// GetStorageSettingsOk returns a tuple with the StorageSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsInfoV2) GetStorageSettingsOk() (*FarmStorageSettingsInfo, bool) {
	if o == nil || IsNil(o.StorageSettings) {
		return nil, false
	}
	return o.StorageSettings, true
}

// HasStorageSettings returns a boolean if a field has been set.
func (o *FarmAutomatedSettingsInfoV2) HasStorageSettings() bool {
	if o != nil && !IsNil(o.StorageSettings) {
		return true
	}

	return false
}

// SetStorageSettings gets a reference to the given FarmStorageSettingsInfo and assigns it to the StorageSettings field.
func (o *FarmAutomatedSettingsInfoV2) SetStorageSettings(v FarmStorageSettingsInfo) {
	o.StorageSettings = &v
}

// GetTransparentPageSharingScope returns the TransparentPageSharingScope field value if set, zero value otherwise.
func (o *FarmAutomatedSettingsInfoV2) GetTransparentPageSharingScope() string {
	if o == nil || IsNil(o.TransparentPageSharingScope) {
		var ret string
		return ret
	}
	return *o.TransparentPageSharingScope
}

// GetTransparentPageSharingScopeOk returns a tuple with the TransparentPageSharingScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsInfoV2) GetTransparentPageSharingScopeOk() (*string, bool) {
	if o == nil || IsNil(o.TransparentPageSharingScope) {
		return nil, false
	}
	return o.TransparentPageSharingScope, true
}

// HasTransparentPageSharingScope returns a boolean if a field has been set.
func (o *FarmAutomatedSettingsInfoV2) HasTransparentPageSharingScope() bool {
	if o != nil && !IsNil(o.TransparentPageSharingScope) {
		return true
	}

	return false
}

// SetTransparentPageSharingScope gets a reference to the given string and assigns it to the TransparentPageSharingScope field.
func (o *FarmAutomatedSettingsInfoV2) SetTransparentPageSharingScope(v string) {
	o.TransparentPageSharingScope = &v
}

// GetVcenterId returns the VcenterId field value if set, zero value otherwise.
func (o *FarmAutomatedSettingsInfoV2) GetVcenterId() string {
	if o == nil || IsNil(o.VcenterId) {
		var ret string
		return ret
	}
	return *o.VcenterId
}

// GetVcenterIdOk returns a tuple with the VcenterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsInfoV2) GetVcenterIdOk() (*string, bool) {
	if o == nil || IsNil(o.VcenterId) {
		return nil, false
	}
	return o.VcenterId, true
}

// HasVcenterId returns a boolean if a field has been set.
func (o *FarmAutomatedSettingsInfoV2) HasVcenterId() bool {
	if o != nil && !IsNil(o.VcenterId) {
		return true
	}

	return false
}

// SetVcenterId gets a reference to the given string and assigns it to the VcenterId field.
func (o *FarmAutomatedSettingsInfoV2) SetVcenterId(v string) {
	o.VcenterId = &v
}

func (o FarmAutomatedSettingsInfoV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FarmAutomatedSettingsInfoV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomizationSettings) {
		toSerialize["customization_settings"] = o.CustomizationSettings
	}
	if !IsNil(o.EnableProvisioning) {
		toSerialize["enable_provisioning"] = o.EnableProvisioning
	}
	if !IsNil(o.ImageSource) {
		toSerialize["image_source"] = o.ImageSource
	}
	if !IsNil(o.MaxSessionType) {
		toSerialize["max_session_type"] = o.MaxSessionType
	}
	if !IsNil(o.MaxSessions) {
		toSerialize["max_sessions"] = o.MaxSessions
	}
	if !IsNil(o.MinReadyVms) {
		toSerialize["min_ready_vms"] = o.MinReadyVms
	}
	if !IsNil(o.Nics) {
		toSerialize["nics"] = o.Nics
	}
	if !IsNil(o.OperatingSystem) {
		toSerialize["operating_system"] = o.OperatingSystem
	}
	if !IsNil(o.OperatingSystemArchitecture) {
		toSerialize["operating_system_architecture"] = o.OperatingSystemArchitecture
	}
	if !IsNil(o.PatternNamingSettings) {
		toSerialize["pattern_naming_settings"] = o.PatternNamingSettings
	}
	if !IsNil(o.ProvisioningSettings) {
		toSerialize["provisioning_settings"] = o.ProvisioningSettings
	}
	if !IsNil(o.ProvisioningStatusData) {
		toSerialize["provisioning_status_data"] = o.ProvisioningStatusData
	}
	if !IsNil(o.StopProvisioningOnError) {
		toSerialize["stop_provisioning_on_error"] = o.StopProvisioningOnError
	}
	if !IsNil(o.StorageSettings) {
		toSerialize["storage_settings"] = o.StorageSettings
	}
	if !IsNil(o.TransparentPageSharingScope) {
		toSerialize["transparent_page_sharing_scope"] = o.TransparentPageSharingScope
	}
	if !IsNil(o.VcenterId) {
		toSerialize["vcenter_id"] = o.VcenterId
	}
	return toSerialize, nil
}

type NullableFarmAutomatedSettingsInfoV2 struct {
	value *FarmAutomatedSettingsInfoV2
	isSet bool
}

func (v NullableFarmAutomatedSettingsInfoV2) Get() *FarmAutomatedSettingsInfoV2 {
	return v.value
}

func (v *NullableFarmAutomatedSettingsInfoV2) Set(val *FarmAutomatedSettingsInfoV2) {
	v.value = val
	v.isSet = true
}

func (v NullableFarmAutomatedSettingsInfoV2) IsSet() bool {
	return v.isSet
}

func (v *NullableFarmAutomatedSettingsInfoV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFarmAutomatedSettingsInfoV2(val *FarmAutomatedSettingsInfoV2) *NullableFarmAutomatedSettingsInfoV2 {
	return &NullableFarmAutomatedSettingsInfoV2{value: val, isSet: true}
}

func (v NullableFarmAutomatedSettingsInfoV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFarmAutomatedSettingsInfoV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


