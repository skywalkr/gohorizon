/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2111
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// PhysicalMachineRegisterInfo Physical machine register response.
type PhysicalMachineRegisterInfo struct {
	// Unique ID representing the physical machine.
	Id *string `json:"id,omitempty"`
	// The pairing token for the physical machine.
	PairingToken *string `json:"pairing_token,omitempty"`
}

// NewPhysicalMachineRegisterInfo instantiates a new PhysicalMachineRegisterInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhysicalMachineRegisterInfo() *PhysicalMachineRegisterInfo {
	this := PhysicalMachineRegisterInfo{}
	return &this
}

// NewPhysicalMachineRegisterInfoWithDefaults instantiates a new PhysicalMachineRegisterInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhysicalMachineRegisterInfoWithDefaults() *PhysicalMachineRegisterInfo {
	this := PhysicalMachineRegisterInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PhysicalMachineRegisterInfo) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalMachineRegisterInfo) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PhysicalMachineRegisterInfo) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PhysicalMachineRegisterInfo) SetId(v string) {
	o.Id = &v
}

// GetPairingToken returns the PairingToken field value if set, zero value otherwise.
func (o *PhysicalMachineRegisterInfo) GetPairingToken() string {
	if o == nil || o.PairingToken == nil {
		var ret string
		return ret
	}
	return *o.PairingToken
}

// GetPairingTokenOk returns a tuple with the PairingToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalMachineRegisterInfo) GetPairingTokenOk() (*string, bool) {
	if o == nil || o.PairingToken == nil {
		return nil, false
	}
	return o.PairingToken, true
}

// HasPairingToken returns a boolean if a field has been set.
func (o *PhysicalMachineRegisterInfo) HasPairingToken() bool {
	if o != nil && o.PairingToken != nil {
		return true
	}

	return false
}

// SetPairingToken gets a reference to the given string and assigns it to the PairingToken field.
func (o *PhysicalMachineRegisterInfo) SetPairingToken(v string) {
	o.PairingToken = &v
}

func (o PhysicalMachineRegisterInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.PairingToken != nil {
		toSerialize["pairing_token"] = o.PairingToken
	}
	return json.Marshal(toSerialize)
}

type NullablePhysicalMachineRegisterInfo struct {
	value *PhysicalMachineRegisterInfo
	isSet bool
}

func (v NullablePhysicalMachineRegisterInfo) Get() *PhysicalMachineRegisterInfo {
	return v.value
}

func (v *NullablePhysicalMachineRegisterInfo) Set(val *PhysicalMachineRegisterInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePhysicalMachineRegisterInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePhysicalMachineRegisterInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhysicalMachineRegisterInfo(val *PhysicalMachineRegisterInfo) *NullablePhysicalMachineRegisterInfo {
	return &NullablePhysicalMachineRegisterInfo{value: val, isSet: true}
}

func (v NullablePhysicalMachineRegisterInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhysicalMachineRegisterInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
