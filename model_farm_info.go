/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// FarmInfo Information related to Farm.
type FarmInfo struct {
	// Farm description. The maximum length is 1024 characters.
	Description *string `json:"description,omitempty"`
	// Display name of the Farm. The maximum length is 256 characters.
	DisplayName *string `json:"display_name,omitempty"`
	// Indicates whether the Farm is enabled for brokering. Default value is true.
	Enabled *bool `json:"enabled,omitempty"`
	// Unique ID representing Farm.
	Id string `json:"id"`
	// Name of the Farm. The maximum length is 64 characters.
	Name     string       `json:"name"`
	Settings FarmSettings `json:"settings"`
	// Type of the Farm. * INSTANT_CLONE: The Farm uses instant clone technology for provisioning the RDS Servers.Applicable for AUTOMATED type Farms only. * LINKED_CLONE: The Farm uses linked clone technology for provisioning the RDS Servers.Applicable for AUTOMATED type Farms only.
	Source *string `json:"source,omitempty"`
	// Type of the Farm. * AUTOMATED: Automated Farm. * MANUAL: Manual Farm.
	Type string `json:"type"`
}

// NewFarmInfo instantiates a new FarmInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFarmInfo(id string, name string, settings FarmSettings, type_ string) *FarmInfo {
	this := FarmInfo{}
	this.Id = id
	this.Name = name
	this.Settings = settings
	this.Type = type_
	return &this
}

// NewFarmInfoWithDefaults instantiates a new FarmInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFarmInfoWithDefaults() *FarmInfo {
	this := FarmInfo{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FarmInfo) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FarmInfo) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FarmInfo) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *FarmInfo) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmInfo) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *FarmInfo) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *FarmInfo) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *FarmInfo) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmInfo) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *FarmInfo) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *FarmInfo) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetId returns the Id field value
func (o *FarmInfo) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FarmInfo) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FarmInfo) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *FarmInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FarmInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FarmInfo) SetName(v string) {
	o.Name = v
}

// GetSettings returns the Settings field value
func (o *FarmInfo) GetSettings() FarmSettings {
	if o == nil {
		var ret FarmSettings
		return ret
	}

	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value
// and a boolean to check if the value has been set.
func (o *FarmInfo) GetSettingsOk() (*FarmSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Settings, true
}

// SetSettings sets field value
func (o *FarmInfo) SetSettings(v FarmSettings) {
	o.Settings = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *FarmInfo) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmInfo) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *FarmInfo) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *FarmInfo) SetSource(v string) {
	o.Source = &v
}

// GetType returns the Type field value
func (o *FarmInfo) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FarmInfo) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FarmInfo) SetType(v string) {
	o.Type = v
}

func (o FarmInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["settings"] = o.Settings
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableFarmInfo struct {
	value *FarmInfo
	isSet bool
}

func (v NullableFarmInfo) Get() *FarmInfo {
	return v.value
}

func (v *NullableFarmInfo) Set(val *FarmInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableFarmInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableFarmInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFarmInfo(val *FarmInfo) *NullableFarmInfo {
	return &NullableFarmInfo{value: val, isSet: true}
}

func (v NullableFarmInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFarmInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
