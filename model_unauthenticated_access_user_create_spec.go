/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UnauthenticatedAccessUserCreateSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnauthenticatedAccessUserCreateSpec{}

// UnauthenticatedAccessUserCreateSpec Information required to create unauthenticated access user.
type UnauthenticatedAccessUserCreateSpec struct {
	// Alias to be used for login from client. If unset, AD login name of the user would be used.
	AliasName *string `json:"alias_name,omitempty"`
	// Description of the unauthenticated access user.
	Description *string `json:"description,omitempty"`
	// Mode to be used for hybrid logon. If unset, hybrid logon will be disabled. * PASSWORD: Hybrid logon via username and password. * TRUESSO: Hybrid logon via True SSO. * DISABLED: Hybrid logon disabled.
	HybridLogonMode *string `json:"hybrid_logon_mode,omitempty"`
	// Password for the user for hybrid logon. This is required when hybrid_logon_mode is set to PASSWORD.
	HybridLogonPassword []string `json:"hybrid_logon_password,omitempty"`
	// SID of the user for whom unauthenticated access is to be configured.
	UserId string `json:"user_id"`
}

type _UnauthenticatedAccessUserCreateSpec UnauthenticatedAccessUserCreateSpec

// NewUnauthenticatedAccessUserCreateSpec instantiates a new UnauthenticatedAccessUserCreateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnauthenticatedAccessUserCreateSpec(userId string) *UnauthenticatedAccessUserCreateSpec {
	this := UnauthenticatedAccessUserCreateSpec{}
	this.UserId = userId
	return &this
}

// NewUnauthenticatedAccessUserCreateSpecWithDefaults instantiates a new UnauthenticatedAccessUserCreateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnauthenticatedAccessUserCreateSpecWithDefaults() *UnauthenticatedAccessUserCreateSpec {
	this := UnauthenticatedAccessUserCreateSpec{}
	return &this
}

// GetAliasName returns the AliasName field value if set, zero value otherwise.
func (o *UnauthenticatedAccessUserCreateSpec) GetAliasName() string {
	if o == nil || IsNil(o.AliasName) {
		var ret string
		return ret
	}
	return *o.AliasName
}

// GetAliasNameOk returns a tuple with the AliasName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnauthenticatedAccessUserCreateSpec) GetAliasNameOk() (*string, bool) {
	if o == nil || IsNil(o.AliasName) {
		return nil, false
	}
	return o.AliasName, true
}

// HasAliasName returns a boolean if a field has been set.
func (o *UnauthenticatedAccessUserCreateSpec) HasAliasName() bool {
	if o != nil && !IsNil(o.AliasName) {
		return true
	}

	return false
}

// SetAliasName gets a reference to the given string and assigns it to the AliasName field.
func (o *UnauthenticatedAccessUserCreateSpec) SetAliasName(v string) {
	o.AliasName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UnauthenticatedAccessUserCreateSpec) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnauthenticatedAccessUserCreateSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UnauthenticatedAccessUserCreateSpec) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UnauthenticatedAccessUserCreateSpec) SetDescription(v string) {
	o.Description = &v
}

// GetHybridLogonMode returns the HybridLogonMode field value if set, zero value otherwise.
func (o *UnauthenticatedAccessUserCreateSpec) GetHybridLogonMode() string {
	if o == nil || IsNil(o.HybridLogonMode) {
		var ret string
		return ret
	}
	return *o.HybridLogonMode
}

// GetHybridLogonModeOk returns a tuple with the HybridLogonMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnauthenticatedAccessUserCreateSpec) GetHybridLogonModeOk() (*string, bool) {
	if o == nil || IsNil(o.HybridLogonMode) {
		return nil, false
	}
	return o.HybridLogonMode, true
}

// HasHybridLogonMode returns a boolean if a field has been set.
func (o *UnauthenticatedAccessUserCreateSpec) HasHybridLogonMode() bool {
	if o != nil && !IsNil(o.HybridLogonMode) {
		return true
	}

	return false
}

// SetHybridLogonMode gets a reference to the given string and assigns it to the HybridLogonMode field.
func (o *UnauthenticatedAccessUserCreateSpec) SetHybridLogonMode(v string) {
	o.HybridLogonMode = &v
}

// GetHybridLogonPassword returns the HybridLogonPassword field value if set, zero value otherwise.
func (o *UnauthenticatedAccessUserCreateSpec) GetHybridLogonPassword() []string {
	if o == nil || IsNil(o.HybridLogonPassword) {
		var ret []string
		return ret
	}
	return o.HybridLogonPassword
}

// GetHybridLogonPasswordOk returns a tuple with the HybridLogonPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnauthenticatedAccessUserCreateSpec) GetHybridLogonPasswordOk() ([]string, bool) {
	if o == nil || IsNil(o.HybridLogonPassword) {
		return nil, false
	}
	return o.HybridLogonPassword, true
}

// HasHybridLogonPassword returns a boolean if a field has been set.
func (o *UnauthenticatedAccessUserCreateSpec) HasHybridLogonPassword() bool {
	if o != nil && !IsNil(o.HybridLogonPassword) {
		return true
	}

	return false
}

// SetHybridLogonPassword gets a reference to the given []string and assigns it to the HybridLogonPassword field.
func (o *UnauthenticatedAccessUserCreateSpec) SetHybridLogonPassword(v []string) {
	o.HybridLogonPassword = v
}

// GetUserId returns the UserId field value
func (o *UnauthenticatedAccessUserCreateSpec) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *UnauthenticatedAccessUserCreateSpec) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *UnauthenticatedAccessUserCreateSpec) SetUserId(v string) {
	o.UserId = v
}

func (o UnauthenticatedAccessUserCreateSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnauthenticatedAccessUserCreateSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AliasName) {
		toSerialize["alias_name"] = o.AliasName
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.HybridLogonMode) {
		toSerialize["hybrid_logon_mode"] = o.HybridLogonMode
	}
	if !IsNil(o.HybridLogonPassword) {
		toSerialize["hybrid_logon_password"] = o.HybridLogonPassword
	}
	toSerialize["user_id"] = o.UserId
	return toSerialize, nil
}

func (o *UnauthenticatedAccessUserCreateSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUnauthenticatedAccessUserCreateSpec := _UnauthenticatedAccessUserCreateSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUnauthenticatedAccessUserCreateSpec)

	if err != nil {
		return err
	}

	*o = UnauthenticatedAccessUserCreateSpec(varUnauthenticatedAccessUserCreateSpec)

	return err
}

type NullableUnauthenticatedAccessUserCreateSpec struct {
	value *UnauthenticatedAccessUserCreateSpec
	isSet bool
}

func (v NullableUnauthenticatedAccessUserCreateSpec) Get() *UnauthenticatedAccessUserCreateSpec {
	return v.value
}

func (v *NullableUnauthenticatedAccessUserCreateSpec) Set(val *UnauthenticatedAccessUserCreateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableUnauthenticatedAccessUserCreateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableUnauthenticatedAccessUserCreateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnauthenticatedAccessUserCreateSpec(val *UnauthenticatedAccessUserCreateSpec) *NullableUnauthenticatedAccessUserCreateSpec {
	return &NullableUnauthenticatedAccessUserCreateSpec{value: val, isSet: true}
}

func (v NullableUnauthenticatedAccessUserCreateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnauthenticatedAccessUserCreateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


