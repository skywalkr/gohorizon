/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2111
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// DesktopPoolUpdateSpec Information required to update a desktop pool.
type DesktopPoolUpdateSpec struct {
	// Access groups can organize the entities such as desktop pools in the organization. They can also be used for delegated administration. <br> This property is required for all the pools except for RDS desktop pool, which will be inherited from the corresponding Farm.
	AccessGroupId *string `json:"access_group_id,omitempty"`
	// Applicable To: Dedicated manual and automated desktop pools. with manual user assignment.<br>Indicates whether assignment of multiple users to a single machine is allowed. This is required for Dedicated manual and automated desktop pools<br>
	AllowMultipleUserAssignments *bool `json:"allow_multiple_user_assignments,omitempty"`
	// Applicable To: RDS desktop pools.<br>Indicates whether multiple sessions are allowed per user for this pool. This is required for RDS desktop pool. For other desktop pools, allow_multiple_sessions_per_user in session_settings will be applicable.
	AllowRdsPoolMultiSessionPerUser *bool `json:"allow_rds_pool_multi_session_per_user,omitempty"`
	// Applicable To: Dedicated desktop pools.<br>Automatic assignment of a user the first time they access the machine.<br>
	AutomaticUserAssignment *bool `json:"automatic_user_assignment,omitempty"`
	// Name of the category folder in the user's OS containing a shortcut to the desktop pool.This property will not be set if the desktop pool does not belong to a category.This property defines valid folder names with a max length of 64 characters and up to 4 subdirectory levels.The subdirectories can be specified using a backslash, e.g. (dir1\\dir2\\dir3\\dir4). Folder names can't start orend with a backslash nor can there be 2 or more backslashes together. Combinations such as(\\dir1, dir1\\dir2\\, dir1\\\\\\dir2, dir1\\\\\\\\\\dir2) are invalid. The windows reserved keywords(CON, PRN, NUL, AUX, COM1 - COM9, LPT1 - LPT9 etc.) are not allowed in subdirectory names.
	CategoryFolderName *string `json:"category_folder_name,omitempty"`
	// Indicates whether this desktop pool is assigned to a workspace in Horizon Cloud Services.<br>This can be set to true from cloud session only and only when cloud_managed is true.This can be changed to false only if there are no entitlements.
	CloudAssigned bool `json:"cloud_assigned"`
	// Applicable To: RDS Desktop Pools. <br>This is required for RDS Desktop Pools.
	CloudBrokered *bool `json:"cloud_brokered,omitempty"`
	// Indicates whether this desktop pool is managed by Horizon Cloud Services.This can be false only when cloud_assigned is false.<br>This cannot be set to true, if any of the conditions are satisfied:<br>1. user is provided.<br>2. enabled is false.<br>3. session_type is not DESKTOP.<br>4. global_entitlement is set.<br>5. user_assignment is DEDICATED.<br>6. automatic_user_assignment is false.<br>7. Local entitlements are configured.<br>8. Any of the machines in the pool have users assigned.<br>9. cs_restriction_tags is not set.<br>10. type is MANUAL.<br>
	CloudManaged bool `json:"cloud_managed"`
	// List of Connection server restriction tags for which the access to the desktop pool is restricted to. If this property is not set then it indicates that desktop pool can be accessed from any connection server.
	CsRestrictionTags     *[]string                                   `json:"cs_restriction_tags,omitempty"`
	CustomizationSettings *DesktopPoolCustomizationSettingsUpdateSpec `json:"customization_settings,omitempty"`
	// Description of the desktop pool.
	Description *string `json:"description,omitempty"`
	// Applicable To: Dedicated desktop pools.<br>Indicates whether users should see the hostname of the machine assigned to them instead of display_name when they connect using Horizon Client. If no machine is assigned to the user then \"display_name (No machine assigned)\" will be displayed in the client.
	DisplayAssignedMachineName bool `json:"display_assigned_machine_name"`
	// Applicable To: Dedicated desktop pools.<br>Indicates whether users should see the machine alias of the machine assigned to them instead of displayName when they connect using Horizon Client. If no machine is assigned to the user then \"display_name (No machine assigned)\" will be displayed in the client. If both display_assigned_machine_name and this property is set to true, machine alias of the assigned machine is displayed if the user has machine alias set. Otherwise hostname will be displayed.
	DisplayMachineAlias bool `json:"display_machine_alias"`
	// Display name of the desktop pool.
	DisplayName             string                                        `json:"display_name"`
	DisplayProtocolSettings *DesktopPoolDisplayProtocolSettingsUpdateSpec `json:"display_protocol_settings,omitempty"`
	// Indicates whether client restrictions are to be applied to desktop pool.
	EnableClientRestrictions bool `json:"enable_client_restrictions"`
	// Applicable To: Automated desktop pools.<br>Indicates whether provisioning is enabled. This is required for Automated desktop pools.
	EnableProvisioning *bool `json:"enable_provisioning,omitempty"`
	// Indicates whether the desktop pool is enabled for brokering.
	Enabled bool `json:"enabled"`
	// Applicable To: Instant Clone desktop pools.<br>Network interface card settings for machines provisioned for this desktop pool. A NIC may appear at most once in these settings and must be present on this desktop pool's parent's snapshot or template. Not all NICs need be configured. If value is not configured than will use default settings.
	Nics                  *[]DesktopPoolNetworkInterfaceCardSettingsUpdateSpec      `json:"nics,omitempty"`
	PatternNamingSettings *DesktopPoolVirtualMachinePatternNamingSettingsUpdateSpec `json:"pattern_naming_settings,omitempty"`
	ProvisioningSettings  *DesktopPoolProvisioningSettingsUpdateSpec                `json:"provisioning_settings,omitempty"`
	SessionSettings       *DesktopPoolSessionSettingsUpdateSpec                     `json:"session_settings,omitempty"`
	// Applicable To: Managed desktop pools.<br>Supported session types for this desktop pool. If this property is set to APPLICATION then this desktop pool can be used for application pool creation. This will beuseful when the machines in the pool support application remoting. This is required for managed desktop pools. * DESKTOP: Only desktop sessions are supported. * APPLICATION: Only application sessions are supported. * DESKTOP_AND_APPLICATION: Both desktop and application sessions are supported.
	SessionType *string `json:"session_type,omitempty"`
	// Locations of the category folder in the user's OS containing a shortcut to the desktop pool. This is required if category_folder_name is set.
	ShortcutLocationsV2    *[]string                                                   `json:"shortcut_locations_v2,omitempty"`
	SpecificNamingSettings *DesktopPoolVirtualMachineSpecifiedNamingSettingsUpdateSpec `json:"specific_naming_settings,omitempty"`
	// Applicable To: Automated desktop pools.<br>Indicates whether provisioning on all machines stops on error. This is required for Automated desktop pools.
	StopProvisioningOnError *bool                                 `json:"stop_provisioning_on_error,omitempty"`
	StorageSettings         *DesktopPoolStorageSettingsUpdateSpec `json:"storage_settings,omitempty"`
	// Applicable To: Managed Manual and Automated desktop pools.<br>The transparent page sharing scope. This is required for Manual and Automated desktop pools. * VM: Inter-VM page sharing is not permitted. * DESKTOP_POOL: Inter-VM page sharing among VMs belonging to the same Desktop pool is permitted. * POD: Inter-VM page sharing among VMs belonging to the same Pod is permitted. * GLOBAL: Inter-VM page sharing among all VMs on the same host is permitted.
	TransparentPageSharingScope    *string                                              `json:"transparent_page_sharing_scope,omitempty"`
	ViewStorageAcceleratorSettings *DesktopPoolViewStorageAcceleratorSettingsUpdateSpec `json:"view_storage_accelerator_settings,omitempty"`
}

// NewDesktopPoolUpdateSpec instantiates a new DesktopPoolUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDesktopPoolUpdateSpec(cloudAssigned bool, cloudManaged bool, displayAssignedMachineName bool, displayMachineAlias bool, displayName string, enableClientRestrictions bool, enabled bool) *DesktopPoolUpdateSpec {
	this := DesktopPoolUpdateSpec{}
	this.CloudAssigned = cloudAssigned
	this.CloudManaged = cloudManaged
	this.DisplayAssignedMachineName = displayAssignedMachineName
	this.DisplayMachineAlias = displayMachineAlias
	this.DisplayName = displayName
	this.EnableClientRestrictions = enableClientRestrictions
	this.Enabled = enabled
	return &this
}

// NewDesktopPoolUpdateSpecWithDefaults instantiates a new DesktopPoolUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDesktopPoolUpdateSpecWithDefaults() *DesktopPoolUpdateSpec {
	this := DesktopPoolUpdateSpec{}
	return &this
}

// GetAccessGroupId returns the AccessGroupId field value if set, zero value otherwise.
func (o *DesktopPoolUpdateSpec) GetAccessGroupId() string {
	if o == nil || o.AccessGroupId == nil {
		var ret string
		return ret
	}
	return *o.AccessGroupId
}

// GetAccessGroupIdOk returns a tuple with the AccessGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetAccessGroupIdOk() (*string, bool) {
	if o == nil || o.AccessGroupId == nil {
		return nil, false
	}
	return o.AccessGroupId, true
}

// HasAccessGroupId returns a boolean if a field has been set.
func (o *DesktopPoolUpdateSpec) HasAccessGroupId() bool {
	if o != nil && o.AccessGroupId != nil {
		return true
	}

	return false
}

// SetAccessGroupId gets a reference to the given string and assigns it to the AccessGroupId field.
func (o *DesktopPoolUpdateSpec) SetAccessGroupId(v string) {
	o.AccessGroupId = &v
}

// GetAllowMultipleUserAssignments returns the AllowMultipleUserAssignments field value if set, zero value otherwise.
func (o *DesktopPoolUpdateSpec) GetAllowMultipleUserAssignments() bool {
	if o == nil || o.AllowMultipleUserAssignments == nil {
		var ret bool
		return ret
	}
	return *o.AllowMultipleUserAssignments
}

// GetAllowMultipleUserAssignmentsOk returns a tuple with the AllowMultipleUserAssignments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetAllowMultipleUserAssignmentsOk() (*bool, bool) {
	if o == nil || o.AllowMultipleUserAssignments == nil {
		return nil, false
	}
	return o.AllowMultipleUserAssignments, true
}

// HasAllowMultipleUserAssignments returns a boolean if a field has been set.
func (o *DesktopPoolUpdateSpec) HasAllowMultipleUserAssignments() bool {
	if o != nil && o.AllowMultipleUserAssignments != nil {
		return true
	}

	return false
}

// SetAllowMultipleUserAssignments gets a reference to the given bool and assigns it to the AllowMultipleUserAssignments field.
func (o *DesktopPoolUpdateSpec) SetAllowMultipleUserAssignments(v bool) {
	o.AllowMultipleUserAssignments = &v
}

// GetAllowRdsPoolMultiSessionPerUser returns the AllowRdsPoolMultiSessionPerUser field value if set, zero value otherwise.
func (o *DesktopPoolUpdateSpec) GetAllowRdsPoolMultiSessionPerUser() bool {
	if o == nil || o.AllowRdsPoolMultiSessionPerUser == nil {
		var ret bool
		return ret
	}
	return *o.AllowRdsPoolMultiSessionPerUser
}

// GetAllowRdsPoolMultiSessionPerUserOk returns a tuple with the AllowRdsPoolMultiSessionPerUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetAllowRdsPoolMultiSessionPerUserOk() (*bool, bool) {
	if o == nil || o.AllowRdsPoolMultiSessionPerUser == nil {
		return nil, false
	}
	return o.AllowRdsPoolMultiSessionPerUser, true
}

// HasAllowRdsPoolMultiSessionPerUser returns a boolean if a field has been set.
func (o *DesktopPoolUpdateSpec) HasAllowRdsPoolMultiSessionPerUser() bool {
	if o != nil && o.AllowRdsPoolMultiSessionPerUser != nil {
		return true
	}

	return false
}

// SetAllowRdsPoolMultiSessionPerUser gets a reference to the given bool and assigns it to the AllowRdsPoolMultiSessionPerUser field.
func (o *DesktopPoolUpdateSpec) SetAllowRdsPoolMultiSessionPerUser(v bool) {
	o.AllowRdsPoolMultiSessionPerUser = &v
}

// GetAutomaticUserAssignment returns the AutomaticUserAssignment field value if set, zero value otherwise.
func (o *DesktopPoolUpdateSpec) GetAutomaticUserAssignment() bool {
	if o == nil || o.AutomaticUserAssignment == nil {
		var ret bool
		return ret
	}
	return *o.AutomaticUserAssignment
}

// GetAutomaticUserAssignmentOk returns a tuple with the AutomaticUserAssignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetAutomaticUserAssignmentOk() (*bool, bool) {
	if o == nil || o.AutomaticUserAssignment == nil {
		return nil, false
	}
	return o.AutomaticUserAssignment, true
}

// HasAutomaticUserAssignment returns a boolean if a field has been set.
func (o *DesktopPoolUpdateSpec) HasAutomaticUserAssignment() bool {
	if o != nil && o.AutomaticUserAssignment != nil {
		return true
	}

	return false
}

// SetAutomaticUserAssignment gets a reference to the given bool and assigns it to the AutomaticUserAssignment field.
func (o *DesktopPoolUpdateSpec) SetAutomaticUserAssignment(v bool) {
	o.AutomaticUserAssignment = &v
}

// GetCategoryFolderName returns the CategoryFolderName field value if set, zero value otherwise.
func (o *DesktopPoolUpdateSpec) GetCategoryFolderName() string {
	if o == nil || o.CategoryFolderName == nil {
		var ret string
		return ret
	}
	return *o.CategoryFolderName
}

// GetCategoryFolderNameOk returns a tuple with the CategoryFolderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetCategoryFolderNameOk() (*string, bool) {
	if o == nil || o.CategoryFolderName == nil {
		return nil, false
	}
	return o.CategoryFolderName, true
}

// HasCategoryFolderName returns a boolean if a field has been set.
func (o *DesktopPoolUpdateSpec) HasCategoryFolderName() bool {
	if o != nil && o.CategoryFolderName != nil {
		return true
	}

	return false
}

// SetCategoryFolderName gets a reference to the given string and assigns it to the CategoryFolderName field.
func (o *DesktopPoolUpdateSpec) SetCategoryFolderName(v string) {
	o.CategoryFolderName = &v
}

// GetCloudAssigned returns the CloudAssigned field value
func (o *DesktopPoolUpdateSpec) GetCloudAssigned() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CloudAssigned
}

// GetCloudAssignedOk returns a tuple with the CloudAssigned field value
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetCloudAssignedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudAssigned, true
}

// SetCloudAssigned sets field value
func (o *DesktopPoolUpdateSpec) SetCloudAssigned(v bool) {
	o.CloudAssigned = v
}

// GetCloudBrokered returns the CloudBrokered field value if set, zero value otherwise.
func (o *DesktopPoolUpdateSpec) GetCloudBrokered() bool {
	if o == nil || o.CloudBrokered == nil {
		var ret bool
		return ret
	}
	return *o.CloudBrokered
}

// GetCloudBrokeredOk returns a tuple with the CloudBrokered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetCloudBrokeredOk() (*bool, bool) {
	if o == nil || o.CloudBrokered == nil {
		return nil, false
	}
	return o.CloudBrokered, true
}

// HasCloudBrokered returns a boolean if a field has been set.
func (o *DesktopPoolUpdateSpec) HasCloudBrokered() bool {
	if o != nil && o.CloudBrokered != nil {
		return true
	}

	return false
}

// SetCloudBrokered gets a reference to the given bool and assigns it to the CloudBrokered field.
func (o *DesktopPoolUpdateSpec) SetCloudBrokered(v bool) {
	o.CloudBrokered = &v
}

// GetCloudManaged returns the CloudManaged field value
func (o *DesktopPoolUpdateSpec) GetCloudManaged() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CloudManaged
}

// GetCloudManagedOk returns a tuple with the CloudManaged field value
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetCloudManagedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudManaged, true
}

// SetCloudManaged sets field value
func (o *DesktopPoolUpdateSpec) SetCloudManaged(v bool) {
	o.CloudManaged = v
}

// GetCsRestrictionTags returns the CsRestrictionTags field value if set, zero value otherwise.
func (o *DesktopPoolUpdateSpec) GetCsRestrictionTags() []string {
	if o == nil || o.CsRestrictionTags == nil {
		var ret []string
		return ret
	}
	return *o.CsRestrictionTags
}

// GetCsRestrictionTagsOk returns a tuple with the CsRestrictionTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetCsRestrictionTagsOk() (*[]string, bool) {
	if o == nil || o.CsRestrictionTags == nil {
		return nil, false
	}
	return o.CsRestrictionTags, true
}

// HasCsRestrictionTags returns a boolean if a field has been set.
func (o *DesktopPoolUpdateSpec) HasCsRestrictionTags() bool {
	if o != nil && o.CsRestrictionTags != nil {
		return true
	}

	return false
}

// SetCsRestrictionTags gets a reference to the given []string and assigns it to the CsRestrictionTags field.
func (o *DesktopPoolUpdateSpec) SetCsRestrictionTags(v []string) {
	o.CsRestrictionTags = &v
}

// GetCustomizationSettings returns the CustomizationSettings field value if set, zero value otherwise.
func (o *DesktopPoolUpdateSpec) GetCustomizationSettings() DesktopPoolCustomizationSettingsUpdateSpec {
	if o == nil || o.CustomizationSettings == nil {
		var ret DesktopPoolCustomizationSettingsUpdateSpec
		return ret
	}
	return *o.CustomizationSettings
}

// GetCustomizationSettingsOk returns a tuple with the CustomizationSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetCustomizationSettingsOk() (*DesktopPoolCustomizationSettingsUpdateSpec, bool) {
	if o == nil || o.CustomizationSettings == nil {
		return nil, false
	}
	return o.CustomizationSettings, true
}

// HasCustomizationSettings returns a boolean if a field has been set.
func (o *DesktopPoolUpdateSpec) HasCustomizationSettings() bool {
	if o != nil && o.CustomizationSettings != nil {
		return true
	}

	return false
}

// SetCustomizationSettings gets a reference to the given DesktopPoolCustomizationSettingsUpdateSpec and assigns it to the CustomizationSettings field.
func (o *DesktopPoolUpdateSpec) SetCustomizationSettings(v DesktopPoolCustomizationSettingsUpdateSpec) {
	o.CustomizationSettings = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DesktopPoolUpdateSpec) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DesktopPoolUpdateSpec) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DesktopPoolUpdateSpec) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayAssignedMachineName returns the DisplayAssignedMachineName field value
func (o *DesktopPoolUpdateSpec) GetDisplayAssignedMachineName() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DisplayAssignedMachineName
}

// GetDisplayAssignedMachineNameOk returns a tuple with the DisplayAssignedMachineName field value
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetDisplayAssignedMachineNameOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayAssignedMachineName, true
}

// SetDisplayAssignedMachineName sets field value
func (o *DesktopPoolUpdateSpec) SetDisplayAssignedMachineName(v bool) {
	o.DisplayAssignedMachineName = v
}

// GetDisplayMachineAlias returns the DisplayMachineAlias field value
func (o *DesktopPoolUpdateSpec) GetDisplayMachineAlias() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DisplayMachineAlias
}

// GetDisplayMachineAliasOk returns a tuple with the DisplayMachineAlias field value
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetDisplayMachineAliasOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayMachineAlias, true
}

// SetDisplayMachineAlias sets field value
func (o *DesktopPoolUpdateSpec) SetDisplayMachineAlias(v bool) {
	o.DisplayMachineAlias = v
}

// GetDisplayName returns the DisplayName field value
func (o *DesktopPoolUpdateSpec) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *DesktopPoolUpdateSpec) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetDisplayProtocolSettings returns the DisplayProtocolSettings field value if set, zero value otherwise.
func (o *DesktopPoolUpdateSpec) GetDisplayProtocolSettings() DesktopPoolDisplayProtocolSettingsUpdateSpec {
	if o == nil || o.DisplayProtocolSettings == nil {
		var ret DesktopPoolDisplayProtocolSettingsUpdateSpec
		return ret
	}
	return *o.DisplayProtocolSettings
}

// GetDisplayProtocolSettingsOk returns a tuple with the DisplayProtocolSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetDisplayProtocolSettingsOk() (*DesktopPoolDisplayProtocolSettingsUpdateSpec, bool) {
	if o == nil || o.DisplayProtocolSettings == nil {
		return nil, false
	}
	return o.DisplayProtocolSettings, true
}

// HasDisplayProtocolSettings returns a boolean if a field has been set.
func (o *DesktopPoolUpdateSpec) HasDisplayProtocolSettings() bool {
	if o != nil && o.DisplayProtocolSettings != nil {
		return true
	}

	return false
}

// SetDisplayProtocolSettings gets a reference to the given DesktopPoolDisplayProtocolSettingsUpdateSpec and assigns it to the DisplayProtocolSettings field.
func (o *DesktopPoolUpdateSpec) SetDisplayProtocolSettings(v DesktopPoolDisplayProtocolSettingsUpdateSpec) {
	o.DisplayProtocolSettings = &v
}

// GetEnableClientRestrictions returns the EnableClientRestrictions field value
func (o *DesktopPoolUpdateSpec) GetEnableClientRestrictions() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EnableClientRestrictions
}

// GetEnableClientRestrictionsOk returns a tuple with the EnableClientRestrictions field value
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetEnableClientRestrictionsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnableClientRestrictions, true
}

// SetEnableClientRestrictions sets field value
func (o *DesktopPoolUpdateSpec) SetEnableClientRestrictions(v bool) {
	o.EnableClientRestrictions = v
}

// GetEnableProvisioning returns the EnableProvisioning field value if set, zero value otherwise.
func (o *DesktopPoolUpdateSpec) GetEnableProvisioning() bool {
	if o == nil || o.EnableProvisioning == nil {
		var ret bool
		return ret
	}
	return *o.EnableProvisioning
}

// GetEnableProvisioningOk returns a tuple with the EnableProvisioning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetEnableProvisioningOk() (*bool, bool) {
	if o == nil || o.EnableProvisioning == nil {
		return nil, false
	}
	return o.EnableProvisioning, true
}

// HasEnableProvisioning returns a boolean if a field has been set.
func (o *DesktopPoolUpdateSpec) HasEnableProvisioning() bool {
	if o != nil && o.EnableProvisioning != nil {
		return true
	}

	return false
}

// SetEnableProvisioning gets a reference to the given bool and assigns it to the EnableProvisioning field.
func (o *DesktopPoolUpdateSpec) SetEnableProvisioning(v bool) {
	o.EnableProvisioning = &v
}

// GetEnabled returns the Enabled field value
func (o *DesktopPoolUpdateSpec) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *DesktopPoolUpdateSpec) SetEnabled(v bool) {
	o.Enabled = v
}

// GetNics returns the Nics field value if set, zero value otherwise.
func (o *DesktopPoolUpdateSpec) GetNics() []DesktopPoolNetworkInterfaceCardSettingsUpdateSpec {
	if o == nil || o.Nics == nil {
		var ret []DesktopPoolNetworkInterfaceCardSettingsUpdateSpec
		return ret
	}
	return *o.Nics
}

// GetNicsOk returns a tuple with the Nics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetNicsOk() (*[]DesktopPoolNetworkInterfaceCardSettingsUpdateSpec, bool) {
	if o == nil || o.Nics == nil {
		return nil, false
	}
	return o.Nics, true
}

// HasNics returns a boolean if a field has been set.
func (o *DesktopPoolUpdateSpec) HasNics() bool {
	if o != nil && o.Nics != nil {
		return true
	}

	return false
}

// SetNics gets a reference to the given []DesktopPoolNetworkInterfaceCardSettingsUpdateSpec and assigns it to the Nics field.
func (o *DesktopPoolUpdateSpec) SetNics(v []DesktopPoolNetworkInterfaceCardSettingsUpdateSpec) {
	o.Nics = &v
}

// GetPatternNamingSettings returns the PatternNamingSettings field value if set, zero value otherwise.
func (o *DesktopPoolUpdateSpec) GetPatternNamingSettings() DesktopPoolVirtualMachinePatternNamingSettingsUpdateSpec {
	if o == nil || o.PatternNamingSettings == nil {
		var ret DesktopPoolVirtualMachinePatternNamingSettingsUpdateSpec
		return ret
	}
	return *o.PatternNamingSettings
}

// GetPatternNamingSettingsOk returns a tuple with the PatternNamingSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetPatternNamingSettingsOk() (*DesktopPoolVirtualMachinePatternNamingSettingsUpdateSpec, bool) {
	if o == nil || o.PatternNamingSettings == nil {
		return nil, false
	}
	return o.PatternNamingSettings, true
}

// HasPatternNamingSettings returns a boolean if a field has been set.
func (o *DesktopPoolUpdateSpec) HasPatternNamingSettings() bool {
	if o != nil && o.PatternNamingSettings != nil {
		return true
	}

	return false
}

// SetPatternNamingSettings gets a reference to the given DesktopPoolVirtualMachinePatternNamingSettingsUpdateSpec and assigns it to the PatternNamingSettings field.
func (o *DesktopPoolUpdateSpec) SetPatternNamingSettings(v DesktopPoolVirtualMachinePatternNamingSettingsUpdateSpec) {
	o.PatternNamingSettings = &v
}

// GetProvisioningSettings returns the ProvisioningSettings field value if set, zero value otherwise.
func (o *DesktopPoolUpdateSpec) GetProvisioningSettings() DesktopPoolProvisioningSettingsUpdateSpec {
	if o == nil || o.ProvisioningSettings == nil {
		var ret DesktopPoolProvisioningSettingsUpdateSpec
		return ret
	}
	return *o.ProvisioningSettings
}

// GetProvisioningSettingsOk returns a tuple with the ProvisioningSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetProvisioningSettingsOk() (*DesktopPoolProvisioningSettingsUpdateSpec, bool) {
	if o == nil || o.ProvisioningSettings == nil {
		return nil, false
	}
	return o.ProvisioningSettings, true
}

// HasProvisioningSettings returns a boolean if a field has been set.
func (o *DesktopPoolUpdateSpec) HasProvisioningSettings() bool {
	if o != nil && o.ProvisioningSettings != nil {
		return true
	}

	return false
}

// SetProvisioningSettings gets a reference to the given DesktopPoolProvisioningSettingsUpdateSpec and assigns it to the ProvisioningSettings field.
func (o *DesktopPoolUpdateSpec) SetProvisioningSettings(v DesktopPoolProvisioningSettingsUpdateSpec) {
	o.ProvisioningSettings = &v
}

// GetSessionSettings returns the SessionSettings field value if set, zero value otherwise.
func (o *DesktopPoolUpdateSpec) GetSessionSettings() DesktopPoolSessionSettingsUpdateSpec {
	if o == nil || o.SessionSettings == nil {
		var ret DesktopPoolSessionSettingsUpdateSpec
		return ret
	}
	return *o.SessionSettings
}

// GetSessionSettingsOk returns a tuple with the SessionSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetSessionSettingsOk() (*DesktopPoolSessionSettingsUpdateSpec, bool) {
	if o == nil || o.SessionSettings == nil {
		return nil, false
	}
	return o.SessionSettings, true
}

// HasSessionSettings returns a boolean if a field has been set.
func (o *DesktopPoolUpdateSpec) HasSessionSettings() bool {
	if o != nil && o.SessionSettings != nil {
		return true
	}

	return false
}

// SetSessionSettings gets a reference to the given DesktopPoolSessionSettingsUpdateSpec and assigns it to the SessionSettings field.
func (o *DesktopPoolUpdateSpec) SetSessionSettings(v DesktopPoolSessionSettingsUpdateSpec) {
	o.SessionSettings = &v
}

// GetSessionType returns the SessionType field value if set, zero value otherwise.
func (o *DesktopPoolUpdateSpec) GetSessionType() string {
	if o == nil || o.SessionType == nil {
		var ret string
		return ret
	}
	return *o.SessionType
}

// GetSessionTypeOk returns a tuple with the SessionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetSessionTypeOk() (*string, bool) {
	if o == nil || o.SessionType == nil {
		return nil, false
	}
	return o.SessionType, true
}

// HasSessionType returns a boolean if a field has been set.
func (o *DesktopPoolUpdateSpec) HasSessionType() bool {
	if o != nil && o.SessionType != nil {
		return true
	}

	return false
}

// SetSessionType gets a reference to the given string and assigns it to the SessionType field.
func (o *DesktopPoolUpdateSpec) SetSessionType(v string) {
	o.SessionType = &v
}

// GetShortcutLocationsV2 returns the ShortcutLocationsV2 field value if set, zero value otherwise.
func (o *DesktopPoolUpdateSpec) GetShortcutLocationsV2() []string {
	if o == nil || o.ShortcutLocationsV2 == nil {
		var ret []string
		return ret
	}
	return *o.ShortcutLocationsV2
}

// GetShortcutLocationsV2Ok returns a tuple with the ShortcutLocationsV2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetShortcutLocationsV2Ok() (*[]string, bool) {
	if o == nil || o.ShortcutLocationsV2 == nil {
		return nil, false
	}
	return o.ShortcutLocationsV2, true
}

// HasShortcutLocationsV2 returns a boolean if a field has been set.
func (o *DesktopPoolUpdateSpec) HasShortcutLocationsV2() bool {
	if o != nil && o.ShortcutLocationsV2 != nil {
		return true
	}

	return false
}

// SetShortcutLocationsV2 gets a reference to the given []string and assigns it to the ShortcutLocationsV2 field.
func (o *DesktopPoolUpdateSpec) SetShortcutLocationsV2(v []string) {
	o.ShortcutLocationsV2 = &v
}

// GetSpecificNamingSettings returns the SpecificNamingSettings field value if set, zero value otherwise.
func (o *DesktopPoolUpdateSpec) GetSpecificNamingSettings() DesktopPoolVirtualMachineSpecifiedNamingSettingsUpdateSpec {
	if o == nil || o.SpecificNamingSettings == nil {
		var ret DesktopPoolVirtualMachineSpecifiedNamingSettingsUpdateSpec
		return ret
	}
	return *o.SpecificNamingSettings
}

// GetSpecificNamingSettingsOk returns a tuple with the SpecificNamingSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetSpecificNamingSettingsOk() (*DesktopPoolVirtualMachineSpecifiedNamingSettingsUpdateSpec, bool) {
	if o == nil || o.SpecificNamingSettings == nil {
		return nil, false
	}
	return o.SpecificNamingSettings, true
}

// HasSpecificNamingSettings returns a boolean if a field has been set.
func (o *DesktopPoolUpdateSpec) HasSpecificNamingSettings() bool {
	if o != nil && o.SpecificNamingSettings != nil {
		return true
	}

	return false
}

// SetSpecificNamingSettings gets a reference to the given DesktopPoolVirtualMachineSpecifiedNamingSettingsUpdateSpec and assigns it to the SpecificNamingSettings field.
func (o *DesktopPoolUpdateSpec) SetSpecificNamingSettings(v DesktopPoolVirtualMachineSpecifiedNamingSettingsUpdateSpec) {
	o.SpecificNamingSettings = &v
}

// GetStopProvisioningOnError returns the StopProvisioningOnError field value if set, zero value otherwise.
func (o *DesktopPoolUpdateSpec) GetStopProvisioningOnError() bool {
	if o == nil || o.StopProvisioningOnError == nil {
		var ret bool
		return ret
	}
	return *o.StopProvisioningOnError
}

// GetStopProvisioningOnErrorOk returns a tuple with the StopProvisioningOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetStopProvisioningOnErrorOk() (*bool, bool) {
	if o == nil || o.StopProvisioningOnError == nil {
		return nil, false
	}
	return o.StopProvisioningOnError, true
}

// HasStopProvisioningOnError returns a boolean if a field has been set.
func (o *DesktopPoolUpdateSpec) HasStopProvisioningOnError() bool {
	if o != nil && o.StopProvisioningOnError != nil {
		return true
	}

	return false
}

// SetStopProvisioningOnError gets a reference to the given bool and assigns it to the StopProvisioningOnError field.
func (o *DesktopPoolUpdateSpec) SetStopProvisioningOnError(v bool) {
	o.StopProvisioningOnError = &v
}

// GetStorageSettings returns the StorageSettings field value if set, zero value otherwise.
func (o *DesktopPoolUpdateSpec) GetStorageSettings() DesktopPoolStorageSettingsUpdateSpec {
	if o == nil || o.StorageSettings == nil {
		var ret DesktopPoolStorageSettingsUpdateSpec
		return ret
	}
	return *o.StorageSettings
}

// GetStorageSettingsOk returns a tuple with the StorageSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetStorageSettingsOk() (*DesktopPoolStorageSettingsUpdateSpec, bool) {
	if o == nil || o.StorageSettings == nil {
		return nil, false
	}
	return o.StorageSettings, true
}

// HasStorageSettings returns a boolean if a field has been set.
func (o *DesktopPoolUpdateSpec) HasStorageSettings() bool {
	if o != nil && o.StorageSettings != nil {
		return true
	}

	return false
}

// SetStorageSettings gets a reference to the given DesktopPoolStorageSettingsUpdateSpec and assigns it to the StorageSettings field.
func (o *DesktopPoolUpdateSpec) SetStorageSettings(v DesktopPoolStorageSettingsUpdateSpec) {
	o.StorageSettings = &v
}

// GetTransparentPageSharingScope returns the TransparentPageSharingScope field value if set, zero value otherwise.
func (o *DesktopPoolUpdateSpec) GetTransparentPageSharingScope() string {
	if o == nil || o.TransparentPageSharingScope == nil {
		var ret string
		return ret
	}
	return *o.TransparentPageSharingScope
}

// GetTransparentPageSharingScopeOk returns a tuple with the TransparentPageSharingScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetTransparentPageSharingScopeOk() (*string, bool) {
	if o == nil || o.TransparentPageSharingScope == nil {
		return nil, false
	}
	return o.TransparentPageSharingScope, true
}

// HasTransparentPageSharingScope returns a boolean if a field has been set.
func (o *DesktopPoolUpdateSpec) HasTransparentPageSharingScope() bool {
	if o != nil && o.TransparentPageSharingScope != nil {
		return true
	}

	return false
}

// SetTransparentPageSharingScope gets a reference to the given string and assigns it to the TransparentPageSharingScope field.
func (o *DesktopPoolUpdateSpec) SetTransparentPageSharingScope(v string) {
	o.TransparentPageSharingScope = &v
}

// GetViewStorageAcceleratorSettings returns the ViewStorageAcceleratorSettings field value if set, zero value otherwise.
func (o *DesktopPoolUpdateSpec) GetViewStorageAcceleratorSettings() DesktopPoolViewStorageAcceleratorSettingsUpdateSpec {
	if o == nil || o.ViewStorageAcceleratorSettings == nil {
		var ret DesktopPoolViewStorageAcceleratorSettingsUpdateSpec
		return ret
	}
	return *o.ViewStorageAcceleratorSettings
}

// GetViewStorageAcceleratorSettingsOk returns a tuple with the ViewStorageAcceleratorSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolUpdateSpec) GetViewStorageAcceleratorSettingsOk() (*DesktopPoolViewStorageAcceleratorSettingsUpdateSpec, bool) {
	if o == nil || o.ViewStorageAcceleratorSettings == nil {
		return nil, false
	}
	return o.ViewStorageAcceleratorSettings, true
}

// HasViewStorageAcceleratorSettings returns a boolean if a field has been set.
func (o *DesktopPoolUpdateSpec) HasViewStorageAcceleratorSettings() bool {
	if o != nil && o.ViewStorageAcceleratorSettings != nil {
		return true
	}

	return false
}

// SetViewStorageAcceleratorSettings gets a reference to the given DesktopPoolViewStorageAcceleratorSettingsUpdateSpec and assigns it to the ViewStorageAcceleratorSettings field.
func (o *DesktopPoolUpdateSpec) SetViewStorageAcceleratorSettings(v DesktopPoolViewStorageAcceleratorSettingsUpdateSpec) {
	o.ViewStorageAcceleratorSettings = &v
}

func (o DesktopPoolUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessGroupId != nil {
		toSerialize["access_group_id"] = o.AccessGroupId
	}
	if o.AllowMultipleUserAssignments != nil {
		toSerialize["allow_multiple_user_assignments"] = o.AllowMultipleUserAssignments
	}
	if o.AllowRdsPoolMultiSessionPerUser != nil {
		toSerialize["allow_rds_pool_multi_session_per_user"] = o.AllowRdsPoolMultiSessionPerUser
	}
	if o.AutomaticUserAssignment != nil {
		toSerialize["automatic_user_assignment"] = o.AutomaticUserAssignment
	}
	if o.CategoryFolderName != nil {
		toSerialize["category_folder_name"] = o.CategoryFolderName
	}
	if true {
		toSerialize["cloud_assigned"] = o.CloudAssigned
	}
	if o.CloudBrokered != nil {
		toSerialize["cloud_brokered"] = o.CloudBrokered
	}
	if true {
		toSerialize["cloud_managed"] = o.CloudManaged
	}
	if o.CsRestrictionTags != nil {
		toSerialize["cs_restriction_tags"] = o.CsRestrictionTags
	}
	if o.CustomizationSettings != nil {
		toSerialize["customization_settings"] = o.CustomizationSettings
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["display_assigned_machine_name"] = o.DisplayAssignedMachineName
	}
	if true {
		toSerialize["display_machine_alias"] = o.DisplayMachineAlias
	}
	if true {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.DisplayProtocolSettings != nil {
		toSerialize["display_protocol_settings"] = o.DisplayProtocolSettings
	}
	if true {
		toSerialize["enable_client_restrictions"] = o.EnableClientRestrictions
	}
	if o.EnableProvisioning != nil {
		toSerialize["enable_provisioning"] = o.EnableProvisioning
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Nics != nil {
		toSerialize["nics"] = o.Nics
	}
	if o.PatternNamingSettings != nil {
		toSerialize["pattern_naming_settings"] = o.PatternNamingSettings
	}
	if o.ProvisioningSettings != nil {
		toSerialize["provisioning_settings"] = o.ProvisioningSettings
	}
	if o.SessionSettings != nil {
		toSerialize["session_settings"] = o.SessionSettings
	}
	if o.SessionType != nil {
		toSerialize["session_type"] = o.SessionType
	}
	if o.ShortcutLocationsV2 != nil {
		toSerialize["shortcut_locations_v2"] = o.ShortcutLocationsV2
	}
	if o.SpecificNamingSettings != nil {
		toSerialize["specific_naming_settings"] = o.SpecificNamingSettings
	}
	if o.StopProvisioningOnError != nil {
		toSerialize["stop_provisioning_on_error"] = o.StopProvisioningOnError
	}
	if o.StorageSettings != nil {
		toSerialize["storage_settings"] = o.StorageSettings
	}
	if o.TransparentPageSharingScope != nil {
		toSerialize["transparent_page_sharing_scope"] = o.TransparentPageSharingScope
	}
	if o.ViewStorageAcceleratorSettings != nil {
		toSerialize["view_storage_accelerator_settings"] = o.ViewStorageAcceleratorSettings
	}
	return json.Marshal(toSerialize)
}

type NullableDesktopPoolUpdateSpec struct {
	value *DesktopPoolUpdateSpec
	isSet bool
}

func (v NullableDesktopPoolUpdateSpec) Get() *DesktopPoolUpdateSpec {
	return v.value
}

func (v *NullableDesktopPoolUpdateSpec) Set(val *DesktopPoolUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableDesktopPoolUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableDesktopPoolUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDesktopPoolUpdateSpec(val *DesktopPoolUpdateSpec) *NullableDesktopPoolUpdateSpec {
	return &NullableDesktopPoolUpdateSpec{value: val, isSet: true}
}

func (v NullableDesktopPoolUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDesktopPoolUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
