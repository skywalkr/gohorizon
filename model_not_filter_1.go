/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2111
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// NotFilter1 struct for NotFilter1
type NotFilter1 struct {
	Filter *BaseFilter `json:"filter,omitempty"`
	Type   *string     `json:"type,omitempty"`
}

// NewNotFilter1 instantiates a new NotFilter1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotFilter1() *NotFilter1 {
	this := NotFilter1{}
	return &this
}

// NewNotFilter1WithDefaults instantiates a new NotFilter1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotFilter1WithDefaults() *NotFilter1 {
	this := NotFilter1{}
	return &this
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *NotFilter1) GetFilter() BaseFilter {
	if o == nil || o.Filter == nil {
		var ret BaseFilter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotFilter1) GetFilterOk() (*BaseFilter, bool) {
	if o == nil || o.Filter == nil {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *NotFilter1) HasFilter() bool {
	if o != nil && o.Filter != nil {
		return true
	}

	return false
}

// SetFilter gets a reference to the given BaseFilter and assigns it to the Filter field.
func (o *NotFilter1) SetFilter(v BaseFilter) {
	o.Filter = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NotFilter1) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotFilter1) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NotFilter1) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NotFilter1) SetType(v string) {
	o.Type = &v
}

func (o NotFilter1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Filter != nil {
		toSerialize["filter"] = o.Filter
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableNotFilter1 struct {
	value *NotFilter1
	isSet bool
}

func (v NullableNotFilter1) Get() *NotFilter1 {
	return v.value
}

func (v *NullableNotFilter1) Set(val *NotFilter1) {
	v.value = val
	v.isSet = true
}

func (v NullableNotFilter1) IsSet() bool {
	return v.isSet
}

func (v *NullableNotFilter1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotFilter1(val *NotFilter1) *NullableNotFilter1 {
	return &NullableNotFilter1{value: val, isSet: true}
}

func (v NullableNotFilter1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotFilter1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
