/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2111
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// GlobalDesktopEntitlementSummary Summary Information about Global Desktop Entitlement
type GlobalDesktopEntitlementSummary struct {
	// Indicates whether users can have multiple sessions when accessed from different client devices, this is also called Class room mode and applicable only to floating user assignment. If value is set to true, the desktop pools that are associated with this Global Desktop Entitlement  must also allow users to have multiple sessions with allowMultipleSessionsPerUser Supported Filters: 'Equals'.
	AllowMultipleSessionsPerUser *bool `json:"allow_multiple_sessions_per_user,omitempty"`
	// Indicates whether the users can choose the protocol used. If set to true, the desktop pools that are associated with this Global Desktop Entitlement must also allow users to choose display protocol with allowUsersToChooseProtocol. Supported Filters: 'Equals'.
	AllowUsersToChooseProtocol *bool `json:"allow_users_to_choose_protocol,omitempty"`
	// Indicates whether users are allowed to reset/restart their machines. If set to true, the desktop pools that are associated with this Global Desktop Entitlement must also allow users to reset/restart machines with allowUsersToResetMachines. Supported Filters: 'Equals'.
	AllowUsersToResetMachines *bool `json:"allow_users_to_reset_machines,omitempty"`
	// Indicates the Global Desktop Entitlement that can be used as backup for this Global Desktop Entitlement. Supported Filters: 'Equals'.
	BackupGdeId *string `json:"backup_gde_id,omitempty"`
	// Name of the category folder in the user's OS containing a shortcut to the entitlement. Unset if the entitlement does not belong to a category.
	CategoryFolderName *string `json:"category_folder_name,omitempty"`
	// Indicates whether this global desktop entitlement is managed from cloud. Supported Filters: 'Equals'.
	CloudManaged *bool `json:"cloud_managed,omitempty"`
	// Connection server restrictions. This is a list of tags that access to the entitlement is restricted to. No list means that the entitlement can be accessed from any connection server.
	CsRestrictionTags *[]string `json:"cs_restriction_tags,omitempty"`
	// Indicates whether global desktop entitlement is dedicated. If so, only dedicated desktop pools can be associated with this Global Desktop Entitlement. Otherwise, only floating desktop pools, can be associated with it. Can only be set at time of creation. Supported Filters: 'Equals'.
	Dedicated *bool `json:"dedicated,omitempty"`
	// The default display protocol for the Global Desktop Entitlement. Must be a protocol in the supportedDisplayProtocols list. Clients connecting through this Global Desktop Entitlement that do not specify a protocol will use this value, not the value specified directly on the desktop pool to which they connect (if different). Supported Filters: 'Equals'. * RDP: Microsoft Remote Desktop Protocol. * PCOIP: PCoIP protocol. * BLAST: BLAST protocol.
	DefaultDisplayProtocol *string `json:"default_display_protocol,omitempty"`
	// Description of Global Desktop Entitlement. This property has a maximum length of 1024 characters. Supported Filters: 'Equals', 'StartsWith' and 'Contains'.
	Description *string `json:"description,omitempty"`
	// Indicates whether users should see the hostname of the machine assigned to them instead of displayName when they connect using Horizon Client. This is applicable for dedicated Global Desktop Entitlements only. If no machine is assigned to the user then \"display_name (No machine assigned)\" will be displayed in the client. Supported Filters: 'Equals'.
	DisplayAssignedMachineName *bool `json:"display_assigned_machine_name,omitempty"`
	// Decides the visibility of the machine alias to the user.
	DisplayMachineAlias *bool `json:"display_machine_alias,omitempty"`
	// Name that users will see when they connect using Horizon Client. If the display name is left blank, while creating or updating the Global Desktop Entitlement display name value will be same as name. This property has a maximum length of 64 characters. Supported Filters: 'Equals', 'StartsWith' and 'Contains'.
	DisplayName *string `json:"display_name,omitempty"`
	// Indicates whether client restrictions to be applied to Global Desktop Entitlement. Currently it is valid for RDSH pools. Supported Filters: 'Equals'.
	EnableClientRestrictions *bool `json:"enable_client_restrictions,omitempty"`
	// Indicates if this Global Desktop Entitlement is enabled. Supported Filters: 'Equals'.
	Enabled *bool `json:"enabled,omitempty"`
	// Unique ID representing this Global Desktop Entitlement. Supported Filters: 'Equals'.
	Id *string `json:"id,omitempty"`
	// Indicates if automatic session clean up is enabled. This cannot be enabled when this Global Desktop Entitlement is associated with a Desktop pool that has dedicated user assignment. Supported Filters: 'Equals'.
	MultipleSessionAutoClean *bool `json:"multiple_session_auto_clean,omitempty"`
	// Unique name used to identify the Global Desktop Entitlement. This property has a maximum length of 64 characters. Supported Filters: 'Equals', 'StartsWith' and 'Contains'.
	Name *string `json:"name,omitempty"`
	// Indicates the Global Desktop Entitlement for which this Global Desktop Entitlement acts as backup.
	PrimaryGdeId *string `json:"primary_gde_id,omitempty"`
	// Indicates whether we fail if a home site isn't defined for this Global Desktop Entitlement. Supported Filters: 'Equals'.
	RequireHomeSite *bool `json:"require_home_site,omitempty"`
	// Scope for this global desktop entitlement. Visibility and Placement policies are defined by this value. Supported Filters: 'Equals'. * WITHIN_POD: Within POD Policy: Local pod will be used for this policy. If this policy is for visibility, search for existing session will happen only in local pod. If this policy is for placement, session will always be placed on local pod. * WITHIN_SITE: Within Site Policy: Site will be used for this policy. If this policy is for visibility, search for existing session will happen only from site. If this policy is for placement, session will be placed on site. * ALL_SITES: All Sites Policy: Any pod can be used for this action. If this policy is for visibility, search for existing session will span all pods in LMV set. If this policy is for placement, session can be placed on any pod in LMV set.
	Scope *string `json:"scope,omitempty"`
	// Session collaboration allows a user to share their remote session with other users. Blast must be configured as a supported protocol in supportedDisplayProtocols. Indicates if the desktop pools that are associated with this Global Desktop Entitlement must also have session collaboration enabled with enableCollaboration. Supported Filters: 'Equals'.
	SessionCollaborationEnabled *bool `json:"session_collaboration_enabled,omitempty"`
	// Locations of the category folder in the user's OS containing a shortcut to the desktop. The value must be set if categoryFolderName is provided.
	ShortcutLocations *[]string `json:"shortcut_locations,omitempty"`
	// The set of supported display protocols for the Global Desktop Entitlement. All the desktop pools associated with this Global Desktop Entitlement must support these protocols supportedDisplayProtocols . Clients connecting through this Global Desktop Entitlement that are allowed to select their protocol will see these display protocol options.
	SupportedDisplayProtocols *[]string `json:"supported_display_protocols,omitempty"`
	// Indicates whether a pod in the user's home site is used to start the search or the current site is used. Supported Filters: 'Equals'.
	UseHomeSite *bool `json:"use_home_site,omitempty"`
}

// NewGlobalDesktopEntitlementSummary instantiates a new GlobalDesktopEntitlementSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalDesktopEntitlementSummary() *GlobalDesktopEntitlementSummary {
	this := GlobalDesktopEntitlementSummary{}
	return &this
}

// NewGlobalDesktopEntitlementSummaryWithDefaults instantiates a new GlobalDesktopEntitlementSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalDesktopEntitlementSummaryWithDefaults() *GlobalDesktopEntitlementSummary {
	this := GlobalDesktopEntitlementSummary{}
	return &this
}

// GetAllowMultipleSessionsPerUser returns the AllowMultipleSessionsPerUser field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementSummary) GetAllowMultipleSessionsPerUser() bool {
	if o == nil || o.AllowMultipleSessionsPerUser == nil {
		var ret bool
		return ret
	}
	return *o.AllowMultipleSessionsPerUser
}

// GetAllowMultipleSessionsPerUserOk returns a tuple with the AllowMultipleSessionsPerUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementSummary) GetAllowMultipleSessionsPerUserOk() (*bool, bool) {
	if o == nil || o.AllowMultipleSessionsPerUser == nil {
		return nil, false
	}
	return o.AllowMultipleSessionsPerUser, true
}

// HasAllowMultipleSessionsPerUser returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementSummary) HasAllowMultipleSessionsPerUser() bool {
	if o != nil && o.AllowMultipleSessionsPerUser != nil {
		return true
	}

	return false
}

// SetAllowMultipleSessionsPerUser gets a reference to the given bool and assigns it to the AllowMultipleSessionsPerUser field.
func (o *GlobalDesktopEntitlementSummary) SetAllowMultipleSessionsPerUser(v bool) {
	o.AllowMultipleSessionsPerUser = &v
}

// GetAllowUsersToChooseProtocol returns the AllowUsersToChooseProtocol field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementSummary) GetAllowUsersToChooseProtocol() bool {
	if o == nil || o.AllowUsersToChooseProtocol == nil {
		var ret bool
		return ret
	}
	return *o.AllowUsersToChooseProtocol
}

// GetAllowUsersToChooseProtocolOk returns a tuple with the AllowUsersToChooseProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementSummary) GetAllowUsersToChooseProtocolOk() (*bool, bool) {
	if o == nil || o.AllowUsersToChooseProtocol == nil {
		return nil, false
	}
	return o.AllowUsersToChooseProtocol, true
}

// HasAllowUsersToChooseProtocol returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementSummary) HasAllowUsersToChooseProtocol() bool {
	if o != nil && o.AllowUsersToChooseProtocol != nil {
		return true
	}

	return false
}

// SetAllowUsersToChooseProtocol gets a reference to the given bool and assigns it to the AllowUsersToChooseProtocol field.
func (o *GlobalDesktopEntitlementSummary) SetAllowUsersToChooseProtocol(v bool) {
	o.AllowUsersToChooseProtocol = &v
}

// GetAllowUsersToResetMachines returns the AllowUsersToResetMachines field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementSummary) GetAllowUsersToResetMachines() bool {
	if o == nil || o.AllowUsersToResetMachines == nil {
		var ret bool
		return ret
	}
	return *o.AllowUsersToResetMachines
}

// GetAllowUsersToResetMachinesOk returns a tuple with the AllowUsersToResetMachines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementSummary) GetAllowUsersToResetMachinesOk() (*bool, bool) {
	if o == nil || o.AllowUsersToResetMachines == nil {
		return nil, false
	}
	return o.AllowUsersToResetMachines, true
}

// HasAllowUsersToResetMachines returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementSummary) HasAllowUsersToResetMachines() bool {
	if o != nil && o.AllowUsersToResetMachines != nil {
		return true
	}

	return false
}

// SetAllowUsersToResetMachines gets a reference to the given bool and assigns it to the AllowUsersToResetMachines field.
func (o *GlobalDesktopEntitlementSummary) SetAllowUsersToResetMachines(v bool) {
	o.AllowUsersToResetMachines = &v
}

// GetBackupGdeId returns the BackupGdeId field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementSummary) GetBackupGdeId() string {
	if o == nil || o.BackupGdeId == nil {
		var ret string
		return ret
	}
	return *o.BackupGdeId
}

// GetBackupGdeIdOk returns a tuple with the BackupGdeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementSummary) GetBackupGdeIdOk() (*string, bool) {
	if o == nil || o.BackupGdeId == nil {
		return nil, false
	}
	return o.BackupGdeId, true
}

// HasBackupGdeId returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementSummary) HasBackupGdeId() bool {
	if o != nil && o.BackupGdeId != nil {
		return true
	}

	return false
}

// SetBackupGdeId gets a reference to the given string and assigns it to the BackupGdeId field.
func (o *GlobalDesktopEntitlementSummary) SetBackupGdeId(v string) {
	o.BackupGdeId = &v
}

// GetCategoryFolderName returns the CategoryFolderName field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementSummary) GetCategoryFolderName() string {
	if o == nil || o.CategoryFolderName == nil {
		var ret string
		return ret
	}
	return *o.CategoryFolderName
}

// GetCategoryFolderNameOk returns a tuple with the CategoryFolderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementSummary) GetCategoryFolderNameOk() (*string, bool) {
	if o == nil || o.CategoryFolderName == nil {
		return nil, false
	}
	return o.CategoryFolderName, true
}

// HasCategoryFolderName returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementSummary) HasCategoryFolderName() bool {
	if o != nil && o.CategoryFolderName != nil {
		return true
	}

	return false
}

// SetCategoryFolderName gets a reference to the given string and assigns it to the CategoryFolderName field.
func (o *GlobalDesktopEntitlementSummary) SetCategoryFolderName(v string) {
	o.CategoryFolderName = &v
}

// GetCloudManaged returns the CloudManaged field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementSummary) GetCloudManaged() bool {
	if o == nil || o.CloudManaged == nil {
		var ret bool
		return ret
	}
	return *o.CloudManaged
}

// GetCloudManagedOk returns a tuple with the CloudManaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementSummary) GetCloudManagedOk() (*bool, bool) {
	if o == nil || o.CloudManaged == nil {
		return nil, false
	}
	return o.CloudManaged, true
}

// HasCloudManaged returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementSummary) HasCloudManaged() bool {
	if o != nil && o.CloudManaged != nil {
		return true
	}

	return false
}

// SetCloudManaged gets a reference to the given bool and assigns it to the CloudManaged field.
func (o *GlobalDesktopEntitlementSummary) SetCloudManaged(v bool) {
	o.CloudManaged = &v
}

// GetCsRestrictionTags returns the CsRestrictionTags field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementSummary) GetCsRestrictionTags() []string {
	if o == nil || o.CsRestrictionTags == nil {
		var ret []string
		return ret
	}
	return *o.CsRestrictionTags
}

// GetCsRestrictionTagsOk returns a tuple with the CsRestrictionTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementSummary) GetCsRestrictionTagsOk() (*[]string, bool) {
	if o == nil || o.CsRestrictionTags == nil {
		return nil, false
	}
	return o.CsRestrictionTags, true
}

// HasCsRestrictionTags returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementSummary) HasCsRestrictionTags() bool {
	if o != nil && o.CsRestrictionTags != nil {
		return true
	}

	return false
}

// SetCsRestrictionTags gets a reference to the given []string and assigns it to the CsRestrictionTags field.
func (o *GlobalDesktopEntitlementSummary) SetCsRestrictionTags(v []string) {
	o.CsRestrictionTags = &v
}

// GetDedicated returns the Dedicated field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementSummary) GetDedicated() bool {
	if o == nil || o.Dedicated == nil {
		var ret bool
		return ret
	}
	return *o.Dedicated
}

// GetDedicatedOk returns a tuple with the Dedicated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementSummary) GetDedicatedOk() (*bool, bool) {
	if o == nil || o.Dedicated == nil {
		return nil, false
	}
	return o.Dedicated, true
}

// HasDedicated returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementSummary) HasDedicated() bool {
	if o != nil && o.Dedicated != nil {
		return true
	}

	return false
}

// SetDedicated gets a reference to the given bool and assigns it to the Dedicated field.
func (o *GlobalDesktopEntitlementSummary) SetDedicated(v bool) {
	o.Dedicated = &v
}

// GetDefaultDisplayProtocol returns the DefaultDisplayProtocol field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementSummary) GetDefaultDisplayProtocol() string {
	if o == nil || o.DefaultDisplayProtocol == nil {
		var ret string
		return ret
	}
	return *o.DefaultDisplayProtocol
}

// GetDefaultDisplayProtocolOk returns a tuple with the DefaultDisplayProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementSummary) GetDefaultDisplayProtocolOk() (*string, bool) {
	if o == nil || o.DefaultDisplayProtocol == nil {
		return nil, false
	}
	return o.DefaultDisplayProtocol, true
}

// HasDefaultDisplayProtocol returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementSummary) HasDefaultDisplayProtocol() bool {
	if o != nil && o.DefaultDisplayProtocol != nil {
		return true
	}

	return false
}

// SetDefaultDisplayProtocol gets a reference to the given string and assigns it to the DefaultDisplayProtocol field.
func (o *GlobalDesktopEntitlementSummary) SetDefaultDisplayProtocol(v string) {
	o.DefaultDisplayProtocol = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementSummary) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementSummary) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementSummary) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GlobalDesktopEntitlementSummary) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayAssignedMachineName returns the DisplayAssignedMachineName field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementSummary) GetDisplayAssignedMachineName() bool {
	if o == nil || o.DisplayAssignedMachineName == nil {
		var ret bool
		return ret
	}
	return *o.DisplayAssignedMachineName
}

// GetDisplayAssignedMachineNameOk returns a tuple with the DisplayAssignedMachineName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementSummary) GetDisplayAssignedMachineNameOk() (*bool, bool) {
	if o == nil || o.DisplayAssignedMachineName == nil {
		return nil, false
	}
	return o.DisplayAssignedMachineName, true
}

// HasDisplayAssignedMachineName returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementSummary) HasDisplayAssignedMachineName() bool {
	if o != nil && o.DisplayAssignedMachineName != nil {
		return true
	}

	return false
}

// SetDisplayAssignedMachineName gets a reference to the given bool and assigns it to the DisplayAssignedMachineName field.
func (o *GlobalDesktopEntitlementSummary) SetDisplayAssignedMachineName(v bool) {
	o.DisplayAssignedMachineName = &v
}

// GetDisplayMachineAlias returns the DisplayMachineAlias field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementSummary) GetDisplayMachineAlias() bool {
	if o == nil || o.DisplayMachineAlias == nil {
		var ret bool
		return ret
	}
	return *o.DisplayMachineAlias
}

// GetDisplayMachineAliasOk returns a tuple with the DisplayMachineAlias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementSummary) GetDisplayMachineAliasOk() (*bool, bool) {
	if o == nil || o.DisplayMachineAlias == nil {
		return nil, false
	}
	return o.DisplayMachineAlias, true
}

// HasDisplayMachineAlias returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementSummary) HasDisplayMachineAlias() bool {
	if o != nil && o.DisplayMachineAlias != nil {
		return true
	}

	return false
}

// SetDisplayMachineAlias gets a reference to the given bool and assigns it to the DisplayMachineAlias field.
func (o *GlobalDesktopEntitlementSummary) SetDisplayMachineAlias(v bool) {
	o.DisplayMachineAlias = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementSummary) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementSummary) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementSummary) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *GlobalDesktopEntitlementSummary) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEnableClientRestrictions returns the EnableClientRestrictions field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementSummary) GetEnableClientRestrictions() bool {
	if o == nil || o.EnableClientRestrictions == nil {
		var ret bool
		return ret
	}
	return *o.EnableClientRestrictions
}

// GetEnableClientRestrictionsOk returns a tuple with the EnableClientRestrictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementSummary) GetEnableClientRestrictionsOk() (*bool, bool) {
	if o == nil || o.EnableClientRestrictions == nil {
		return nil, false
	}
	return o.EnableClientRestrictions, true
}

// HasEnableClientRestrictions returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementSummary) HasEnableClientRestrictions() bool {
	if o != nil && o.EnableClientRestrictions != nil {
		return true
	}

	return false
}

// SetEnableClientRestrictions gets a reference to the given bool and assigns it to the EnableClientRestrictions field.
func (o *GlobalDesktopEntitlementSummary) SetEnableClientRestrictions(v bool) {
	o.EnableClientRestrictions = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementSummary) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementSummary) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementSummary) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *GlobalDesktopEntitlementSummary) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementSummary) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementSummary) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementSummary) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GlobalDesktopEntitlementSummary) SetId(v string) {
	o.Id = &v
}

// GetMultipleSessionAutoClean returns the MultipleSessionAutoClean field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementSummary) GetMultipleSessionAutoClean() bool {
	if o == nil || o.MultipleSessionAutoClean == nil {
		var ret bool
		return ret
	}
	return *o.MultipleSessionAutoClean
}

// GetMultipleSessionAutoCleanOk returns a tuple with the MultipleSessionAutoClean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementSummary) GetMultipleSessionAutoCleanOk() (*bool, bool) {
	if o == nil || o.MultipleSessionAutoClean == nil {
		return nil, false
	}
	return o.MultipleSessionAutoClean, true
}

// HasMultipleSessionAutoClean returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementSummary) HasMultipleSessionAutoClean() bool {
	if o != nil && o.MultipleSessionAutoClean != nil {
		return true
	}

	return false
}

// SetMultipleSessionAutoClean gets a reference to the given bool and assigns it to the MultipleSessionAutoClean field.
func (o *GlobalDesktopEntitlementSummary) SetMultipleSessionAutoClean(v bool) {
	o.MultipleSessionAutoClean = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementSummary) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementSummary) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementSummary) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GlobalDesktopEntitlementSummary) SetName(v string) {
	o.Name = &v
}

// GetPrimaryGdeId returns the PrimaryGdeId field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementSummary) GetPrimaryGdeId() string {
	if o == nil || o.PrimaryGdeId == nil {
		var ret string
		return ret
	}
	return *o.PrimaryGdeId
}

// GetPrimaryGdeIdOk returns a tuple with the PrimaryGdeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementSummary) GetPrimaryGdeIdOk() (*string, bool) {
	if o == nil || o.PrimaryGdeId == nil {
		return nil, false
	}
	return o.PrimaryGdeId, true
}

// HasPrimaryGdeId returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementSummary) HasPrimaryGdeId() bool {
	if o != nil && o.PrimaryGdeId != nil {
		return true
	}

	return false
}

// SetPrimaryGdeId gets a reference to the given string and assigns it to the PrimaryGdeId field.
func (o *GlobalDesktopEntitlementSummary) SetPrimaryGdeId(v string) {
	o.PrimaryGdeId = &v
}

// GetRequireHomeSite returns the RequireHomeSite field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementSummary) GetRequireHomeSite() bool {
	if o == nil || o.RequireHomeSite == nil {
		var ret bool
		return ret
	}
	return *o.RequireHomeSite
}

// GetRequireHomeSiteOk returns a tuple with the RequireHomeSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementSummary) GetRequireHomeSiteOk() (*bool, bool) {
	if o == nil || o.RequireHomeSite == nil {
		return nil, false
	}
	return o.RequireHomeSite, true
}

// HasRequireHomeSite returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementSummary) HasRequireHomeSite() bool {
	if o != nil && o.RequireHomeSite != nil {
		return true
	}

	return false
}

// SetRequireHomeSite gets a reference to the given bool and assigns it to the RequireHomeSite field.
func (o *GlobalDesktopEntitlementSummary) SetRequireHomeSite(v bool) {
	o.RequireHomeSite = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementSummary) GetScope() string {
	if o == nil || o.Scope == nil {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementSummary) GetScopeOk() (*string, bool) {
	if o == nil || o.Scope == nil {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementSummary) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *GlobalDesktopEntitlementSummary) SetScope(v string) {
	o.Scope = &v
}

// GetSessionCollaborationEnabled returns the SessionCollaborationEnabled field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementSummary) GetSessionCollaborationEnabled() bool {
	if o == nil || o.SessionCollaborationEnabled == nil {
		var ret bool
		return ret
	}
	return *o.SessionCollaborationEnabled
}

// GetSessionCollaborationEnabledOk returns a tuple with the SessionCollaborationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementSummary) GetSessionCollaborationEnabledOk() (*bool, bool) {
	if o == nil || o.SessionCollaborationEnabled == nil {
		return nil, false
	}
	return o.SessionCollaborationEnabled, true
}

// HasSessionCollaborationEnabled returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementSummary) HasSessionCollaborationEnabled() bool {
	if o != nil && o.SessionCollaborationEnabled != nil {
		return true
	}

	return false
}

// SetSessionCollaborationEnabled gets a reference to the given bool and assigns it to the SessionCollaborationEnabled field.
func (o *GlobalDesktopEntitlementSummary) SetSessionCollaborationEnabled(v bool) {
	o.SessionCollaborationEnabled = &v
}

// GetShortcutLocations returns the ShortcutLocations field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementSummary) GetShortcutLocations() []string {
	if o == nil || o.ShortcutLocations == nil {
		var ret []string
		return ret
	}
	return *o.ShortcutLocations
}

// GetShortcutLocationsOk returns a tuple with the ShortcutLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementSummary) GetShortcutLocationsOk() (*[]string, bool) {
	if o == nil || o.ShortcutLocations == nil {
		return nil, false
	}
	return o.ShortcutLocations, true
}

// HasShortcutLocations returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementSummary) HasShortcutLocations() bool {
	if o != nil && o.ShortcutLocations != nil {
		return true
	}

	return false
}

// SetShortcutLocations gets a reference to the given []string and assigns it to the ShortcutLocations field.
func (o *GlobalDesktopEntitlementSummary) SetShortcutLocations(v []string) {
	o.ShortcutLocations = &v
}

// GetSupportedDisplayProtocols returns the SupportedDisplayProtocols field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementSummary) GetSupportedDisplayProtocols() []string {
	if o == nil || o.SupportedDisplayProtocols == nil {
		var ret []string
		return ret
	}
	return *o.SupportedDisplayProtocols
}

// GetSupportedDisplayProtocolsOk returns a tuple with the SupportedDisplayProtocols field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementSummary) GetSupportedDisplayProtocolsOk() (*[]string, bool) {
	if o == nil || o.SupportedDisplayProtocols == nil {
		return nil, false
	}
	return o.SupportedDisplayProtocols, true
}

// HasSupportedDisplayProtocols returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementSummary) HasSupportedDisplayProtocols() bool {
	if o != nil && o.SupportedDisplayProtocols != nil {
		return true
	}

	return false
}

// SetSupportedDisplayProtocols gets a reference to the given []string and assigns it to the SupportedDisplayProtocols field.
func (o *GlobalDesktopEntitlementSummary) SetSupportedDisplayProtocols(v []string) {
	o.SupportedDisplayProtocols = &v
}

// GetUseHomeSite returns the UseHomeSite field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementSummary) GetUseHomeSite() bool {
	if o == nil || o.UseHomeSite == nil {
		var ret bool
		return ret
	}
	return *o.UseHomeSite
}

// GetUseHomeSiteOk returns a tuple with the UseHomeSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementSummary) GetUseHomeSiteOk() (*bool, bool) {
	if o == nil || o.UseHomeSite == nil {
		return nil, false
	}
	return o.UseHomeSite, true
}

// HasUseHomeSite returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementSummary) HasUseHomeSite() bool {
	if o != nil && o.UseHomeSite != nil {
		return true
	}

	return false
}

// SetUseHomeSite gets a reference to the given bool and assigns it to the UseHomeSite field.
func (o *GlobalDesktopEntitlementSummary) SetUseHomeSite(v bool) {
	o.UseHomeSite = &v
}

func (o GlobalDesktopEntitlementSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowMultipleSessionsPerUser != nil {
		toSerialize["allow_multiple_sessions_per_user"] = o.AllowMultipleSessionsPerUser
	}
	if o.AllowUsersToChooseProtocol != nil {
		toSerialize["allow_users_to_choose_protocol"] = o.AllowUsersToChooseProtocol
	}
	if o.AllowUsersToResetMachines != nil {
		toSerialize["allow_users_to_reset_machines"] = o.AllowUsersToResetMachines
	}
	if o.BackupGdeId != nil {
		toSerialize["backup_gde_id"] = o.BackupGdeId
	}
	if o.CategoryFolderName != nil {
		toSerialize["category_folder_name"] = o.CategoryFolderName
	}
	if o.CloudManaged != nil {
		toSerialize["cloud_managed"] = o.CloudManaged
	}
	if o.CsRestrictionTags != nil {
		toSerialize["cs_restriction_tags"] = o.CsRestrictionTags
	}
	if o.Dedicated != nil {
		toSerialize["dedicated"] = o.Dedicated
	}
	if o.DefaultDisplayProtocol != nil {
		toSerialize["default_display_protocol"] = o.DefaultDisplayProtocol
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayAssignedMachineName != nil {
		toSerialize["display_assigned_machine_name"] = o.DisplayAssignedMachineName
	}
	if o.DisplayMachineAlias != nil {
		toSerialize["display_machine_alias"] = o.DisplayMachineAlias
	}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.EnableClientRestrictions != nil {
		toSerialize["enable_client_restrictions"] = o.EnableClientRestrictions
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.MultipleSessionAutoClean != nil {
		toSerialize["multiple_session_auto_clean"] = o.MultipleSessionAutoClean
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.PrimaryGdeId != nil {
		toSerialize["primary_gde_id"] = o.PrimaryGdeId
	}
	if o.RequireHomeSite != nil {
		toSerialize["require_home_site"] = o.RequireHomeSite
	}
	if o.Scope != nil {
		toSerialize["scope"] = o.Scope
	}
	if o.SessionCollaborationEnabled != nil {
		toSerialize["session_collaboration_enabled"] = o.SessionCollaborationEnabled
	}
	if o.ShortcutLocations != nil {
		toSerialize["shortcut_locations"] = o.ShortcutLocations
	}
	if o.SupportedDisplayProtocols != nil {
		toSerialize["supported_display_protocols"] = o.SupportedDisplayProtocols
	}
	if o.UseHomeSite != nil {
		toSerialize["use_home_site"] = o.UseHomeSite
	}
	return json.Marshal(toSerialize)
}

type NullableGlobalDesktopEntitlementSummary struct {
	value *GlobalDesktopEntitlementSummary
	isSet bool
}

func (v NullableGlobalDesktopEntitlementSummary) Get() *GlobalDesktopEntitlementSummary {
	return v.value
}

func (v *NullableGlobalDesktopEntitlementSummary) Set(val *GlobalDesktopEntitlementSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalDesktopEntitlementSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalDesktopEntitlementSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalDesktopEntitlementSummary(val *GlobalDesktopEntitlementSummary) *NullableGlobalDesktopEntitlementSummary {
	return &NullableGlobalDesktopEntitlementSummary{value: val, isSet: true}
}

func (v NullableGlobalDesktopEntitlementSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalDesktopEntitlementSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
