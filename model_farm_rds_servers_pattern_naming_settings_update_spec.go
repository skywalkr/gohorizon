/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// FarmRDSServersPatternNamingSettingsUpdateSpec RDS server naming Pattern settings for the farm.
type FarmRDSServersPatternNamingSettingsUpdateSpec struct {
	// Maximum number of RDS Servers in the farm.
	MaxNumberOfRdsServers int32 `json:"max_number_of_rds_servers"`
	// RDS Servers will be named according to the specified naming pattern. By default, Horizon appends a unique number to the specified pattern to provide a unique name for each RDS Server. To place this unique number elsewhere in the pattern, use '{n}'. (For example: rds-{n}-sales.) The unique number can also be made a fixed length. (For example: rds-{n:fixed=3}-sales will name RDS Servers from rds-001-sales to rds-999-sales).<br>RDS Server names are constrained to a maximum size of 15 characters including the unique number. Therefore, care must be taken when choosing a pattern. If the maximum farm size is 9 RDS servers, the pattern must be at most 14 characters. For 99 RDS servers, 13 characters, for 999 RDS servers, 12 characters. For 9999 RDS servers, 11 characters. If using a fixed size token, use a maximum of 14 characters for \"n=1\", 13 characters for \"n=2\", 12 characters for \"n=3\", and 11 characters for \"n=4\". If {n} is specified with no size, a size of 2 is automatically used and if no {} is specified, {n=2} is automatically appended to the end of the pattern.<br>This property must contain only alphanumerics and dashes. It must contain at least one alpha character. It may also optionally contain a numeric placement token {n} or {n:fixed=#}. If the pattern does not specify the numeric placement token, the maximum length is 14 characters.
	NamingPattern string `json:"naming_pattern"`
}

// NewFarmRDSServersPatternNamingSettingsUpdateSpec instantiates a new FarmRDSServersPatternNamingSettingsUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFarmRDSServersPatternNamingSettingsUpdateSpec(maxNumberOfRdsServers int32, namingPattern string) *FarmRDSServersPatternNamingSettingsUpdateSpec {
	this := FarmRDSServersPatternNamingSettingsUpdateSpec{}
	this.MaxNumberOfRdsServers = maxNumberOfRdsServers
	this.NamingPattern = namingPattern
	return &this
}

// NewFarmRDSServersPatternNamingSettingsUpdateSpecWithDefaults instantiates a new FarmRDSServersPatternNamingSettingsUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFarmRDSServersPatternNamingSettingsUpdateSpecWithDefaults() *FarmRDSServersPatternNamingSettingsUpdateSpec {
	this := FarmRDSServersPatternNamingSettingsUpdateSpec{}
	return &this
}

// GetMaxNumberOfRdsServers returns the MaxNumberOfRdsServers field value
func (o *FarmRDSServersPatternNamingSettingsUpdateSpec) GetMaxNumberOfRdsServers() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxNumberOfRdsServers
}

// GetMaxNumberOfRdsServersOk returns a tuple with the MaxNumberOfRdsServers field value
// and a boolean to check if the value has been set.
func (o *FarmRDSServersPatternNamingSettingsUpdateSpec) GetMaxNumberOfRdsServersOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxNumberOfRdsServers, true
}

// SetMaxNumberOfRdsServers sets field value
func (o *FarmRDSServersPatternNamingSettingsUpdateSpec) SetMaxNumberOfRdsServers(v int32) {
	o.MaxNumberOfRdsServers = v
}

// GetNamingPattern returns the NamingPattern field value
func (o *FarmRDSServersPatternNamingSettingsUpdateSpec) GetNamingPattern() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NamingPattern
}

// GetNamingPatternOk returns a tuple with the NamingPattern field value
// and a boolean to check if the value has been set.
func (o *FarmRDSServersPatternNamingSettingsUpdateSpec) GetNamingPatternOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NamingPattern, true
}

// SetNamingPattern sets field value
func (o *FarmRDSServersPatternNamingSettingsUpdateSpec) SetNamingPattern(v string) {
	o.NamingPattern = v
}

func (o FarmRDSServersPatternNamingSettingsUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["max_number_of_rds_servers"] = o.MaxNumberOfRdsServers
	}
	if true {
		toSerialize["naming_pattern"] = o.NamingPattern
	}
	return json.Marshal(toSerialize)
}

type NullableFarmRDSServersPatternNamingSettingsUpdateSpec struct {
	value *FarmRDSServersPatternNamingSettingsUpdateSpec
	isSet bool
}

func (v NullableFarmRDSServersPatternNamingSettingsUpdateSpec) Get() *FarmRDSServersPatternNamingSettingsUpdateSpec {
	return v.value
}

func (v *NullableFarmRDSServersPatternNamingSettingsUpdateSpec) Set(val *FarmRDSServersPatternNamingSettingsUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableFarmRDSServersPatternNamingSettingsUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableFarmRDSServersPatternNamingSettingsUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFarmRDSServersPatternNamingSettingsUpdateSpec(val *FarmRDSServersPatternNamingSettingsUpdateSpec) *NullableFarmRDSServersPatternNamingSettingsUpdateSpec {
	return &NullableFarmRDSServersPatternNamingSettingsUpdateSpec{value: val, isSet: true}
}

func (v NullableFarmRDSServersPatternNamingSettingsUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFarmRDSServersPatternNamingSettingsUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
