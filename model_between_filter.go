/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// BetweenFilter struct for BetweenFilter
type BetweenFilter struct {
	BaseFilter
	FromValue *map[string]interface{} `json:"from_value,omitempty"`
	Name      *string                 `json:"name,omitempty"`
	ToValue   *map[string]interface{} `json:"to_value,omitempty"`
	Type      *string                 `json:"type,omitempty"`
}

// NewBetweenFilter instantiates a new BetweenFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBetweenFilter() *BetweenFilter {
	this := BetweenFilter{}
	return &this
}

// NewBetweenFilterWithDefaults instantiates a new BetweenFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBetweenFilterWithDefaults() *BetweenFilter {
	this := BetweenFilter{}
	return &this
}

// GetFromValue returns the FromValue field value if set, zero value otherwise.
func (o *BetweenFilter) GetFromValue() map[string]interface{} {
	if o == nil || o.FromValue == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.FromValue
}

// GetFromValueOk returns a tuple with the FromValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BetweenFilter) GetFromValueOk() (*map[string]interface{}, bool) {
	if o == nil || o.FromValue == nil {
		return nil, false
	}
	return o.FromValue, true
}

// HasFromValue returns a boolean if a field has been set.
func (o *BetweenFilter) HasFromValue() bool {
	if o != nil && o.FromValue != nil {
		return true
	}

	return false
}

// SetFromValue gets a reference to the given map[string]interface{} and assigns it to the FromValue field.
func (o *BetweenFilter) SetFromValue(v map[string]interface{}) {
	o.FromValue = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BetweenFilter) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BetweenFilter) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BetweenFilter) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BetweenFilter) SetName(v string) {
	o.Name = &v
}

// GetToValue returns the ToValue field value if set, zero value otherwise.
func (o *BetweenFilter) GetToValue() map[string]interface{} {
	if o == nil || o.ToValue == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ToValue
}

// GetToValueOk returns a tuple with the ToValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BetweenFilter) GetToValueOk() (*map[string]interface{}, bool) {
	if o == nil || o.ToValue == nil {
		return nil, false
	}
	return o.ToValue, true
}

// HasToValue returns a boolean if a field has been set.
func (o *BetweenFilter) HasToValue() bool {
	if o != nil && o.ToValue != nil {
		return true
	}

	return false
}

// SetToValue gets a reference to the given map[string]interface{} and assigns it to the ToValue field.
func (o *BetweenFilter) SetToValue(v map[string]interface{}) {
	o.ToValue = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BetweenFilter) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BetweenFilter) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BetweenFilter) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *BetweenFilter) SetType(v string) {
	o.Type = &v
}

func (o BetweenFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBaseFilter, errBaseFilter := json.Marshal(o.BaseFilter)
	if errBaseFilter != nil {
		return []byte{}, errBaseFilter
	}
	errBaseFilter = json.Unmarshal([]byte(serializedBaseFilter), &toSerialize)
	if errBaseFilter != nil {
		return []byte{}, errBaseFilter
	}
	if o.FromValue != nil {
		toSerialize["from_value"] = o.FromValue
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ToValue != nil {
		toSerialize["to_value"] = o.ToValue
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableBetweenFilter struct {
	value *BetweenFilter
	isSet bool
}

func (v NullableBetweenFilter) Get() *BetweenFilter {
	return v.value
}

func (v *NullableBetweenFilter) Set(val *BetweenFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableBetweenFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableBetweenFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBetweenFilter(val *BetweenFilter) *NullableBetweenFilter {
	return &NullableBetweenFilter{value: val, isSet: true}
}

func (v NullableBetweenFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBetweenFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
