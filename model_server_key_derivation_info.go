/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the ServerKeyDerivationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerKeyDerivationInfo{}

// ServerKeyDerivationInfo Server key derivation information.
type ServerKeyDerivationInfo struct {
	// Client reference identifier which is required to be passed as query param to login api, to enable decryption of encrypted sensitive information.
	ClientReferenceId *string `json:"client_reference_id,omitempty"`
	// Identifier as Base64 encoded binary data.
	Identifier *string `json:"identifier,omitempty" validate:"regexp=^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$"`
	// Proof as Base64 encoded binary data.
	Proof *string `json:"proof,omitempty" validate:"regexp=^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$"`
	// Diffie Hellman public key as Base64 encoded binary data.
	PublicKey *string `json:"public_key,omitempty" validate:"regexp=^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$"`
	// Selected scheme for key derivation. * SCHEME_AES1: Diffie Hellman algo used by low power clients. * SCHEME_AES2: Diffie Hellman algo used by high power clients. * SCHEME_EC_AES1: Elliptic-curve Diffie Hellman algo used by low power clients. * SCHEME_EC_AES2: Elliptic-curve Diffie Hellman algo used by high power clients.
	Scheme *string `json:"scheme,omitempty"`
}

// NewServerKeyDerivationInfo instantiates a new ServerKeyDerivationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerKeyDerivationInfo() *ServerKeyDerivationInfo {
	this := ServerKeyDerivationInfo{}
	return &this
}

// NewServerKeyDerivationInfoWithDefaults instantiates a new ServerKeyDerivationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerKeyDerivationInfoWithDefaults() *ServerKeyDerivationInfo {
	this := ServerKeyDerivationInfo{}
	return &this
}

// GetClientReferenceId returns the ClientReferenceId field value if set, zero value otherwise.
func (o *ServerKeyDerivationInfo) GetClientReferenceId() string {
	if o == nil || IsNil(o.ClientReferenceId) {
		var ret string
		return ret
	}
	return *o.ClientReferenceId
}

// GetClientReferenceIdOk returns a tuple with the ClientReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerKeyDerivationInfo) GetClientReferenceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientReferenceId) {
		return nil, false
	}
	return o.ClientReferenceId, true
}

// HasClientReferenceId returns a boolean if a field has been set.
func (o *ServerKeyDerivationInfo) HasClientReferenceId() bool {
	if o != nil && !IsNil(o.ClientReferenceId) {
		return true
	}

	return false
}

// SetClientReferenceId gets a reference to the given string and assigns it to the ClientReferenceId field.
func (o *ServerKeyDerivationInfo) SetClientReferenceId(v string) {
	o.ClientReferenceId = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *ServerKeyDerivationInfo) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerKeyDerivationInfo) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *ServerKeyDerivationInfo) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *ServerKeyDerivationInfo) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetProof returns the Proof field value if set, zero value otherwise.
func (o *ServerKeyDerivationInfo) GetProof() string {
	if o == nil || IsNil(o.Proof) {
		var ret string
		return ret
	}
	return *o.Proof
}

// GetProofOk returns a tuple with the Proof field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerKeyDerivationInfo) GetProofOk() (*string, bool) {
	if o == nil || IsNil(o.Proof) {
		return nil, false
	}
	return o.Proof, true
}

// HasProof returns a boolean if a field has been set.
func (o *ServerKeyDerivationInfo) HasProof() bool {
	if o != nil && !IsNil(o.Proof) {
		return true
	}

	return false
}

// SetProof gets a reference to the given string and assigns it to the Proof field.
func (o *ServerKeyDerivationInfo) SetProof(v string) {
	o.Proof = &v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *ServerKeyDerivationInfo) GetPublicKey() string {
	if o == nil || IsNil(o.PublicKey) {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerKeyDerivationInfo) GetPublicKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PublicKey) {
		return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *ServerKeyDerivationInfo) HasPublicKey() bool {
	if o != nil && !IsNil(o.PublicKey) {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *ServerKeyDerivationInfo) SetPublicKey(v string) {
	o.PublicKey = &v
}

// GetScheme returns the Scheme field value if set, zero value otherwise.
func (o *ServerKeyDerivationInfo) GetScheme() string {
	if o == nil || IsNil(o.Scheme) {
		var ret string
		return ret
	}
	return *o.Scheme
}

// GetSchemeOk returns a tuple with the Scheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerKeyDerivationInfo) GetSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.Scheme) {
		return nil, false
	}
	return o.Scheme, true
}

// HasScheme returns a boolean if a field has been set.
func (o *ServerKeyDerivationInfo) HasScheme() bool {
	if o != nil && !IsNil(o.Scheme) {
		return true
	}

	return false
}

// SetScheme gets a reference to the given string and assigns it to the Scheme field.
func (o *ServerKeyDerivationInfo) SetScheme(v string) {
	o.Scheme = &v
}

func (o ServerKeyDerivationInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerKeyDerivationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClientReferenceId) {
		toSerialize["client_reference_id"] = o.ClientReferenceId
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Proof) {
		toSerialize["proof"] = o.Proof
	}
	if !IsNil(o.PublicKey) {
		toSerialize["public_key"] = o.PublicKey
	}
	if !IsNil(o.Scheme) {
		toSerialize["scheme"] = o.Scheme
	}
	return toSerialize, nil
}

type NullableServerKeyDerivationInfo struct {
	value *ServerKeyDerivationInfo
	isSet bool
}

func (v NullableServerKeyDerivationInfo) Get() *ServerKeyDerivationInfo {
	return v.value
}

func (v *NullableServerKeyDerivationInfo) Set(val *ServerKeyDerivationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableServerKeyDerivationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableServerKeyDerivationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerKeyDerivationInfo(val *ServerKeyDerivationInfo) *NullableServerKeyDerivationInfo {
	return &NullableServerKeyDerivationInfo{value: val, isSet: true}
}

func (v NullableServerKeyDerivationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerKeyDerivationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


