/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the ViewStorageAcceleratorBlackoutTimeSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewStorageAcceleratorBlackoutTimeSettings{}

// ViewStorageAcceleratorBlackoutTimeSettings Fields for specifying blackout time for View Storage Accelerator. Storage accelerator regeneration and VM disk space reclamation do not occur during blackout times. The same blackout policy applies to both operations.
type ViewStorageAcceleratorBlackoutTimeSettings struct {
	// List of days for a given range of time.
	Days []string `json:"days,omitempty"`
	// Ending time for the blackout in 24-hour format.
	EndTime *string `json:"end_time,omitempty"`
	// Starting time for the blackout in 24-hour format.
	StartTime *string `json:"start_time,omitempty"`
}

// NewViewStorageAcceleratorBlackoutTimeSettings instantiates a new ViewStorageAcceleratorBlackoutTimeSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewStorageAcceleratorBlackoutTimeSettings() *ViewStorageAcceleratorBlackoutTimeSettings {
	this := ViewStorageAcceleratorBlackoutTimeSettings{}
	return &this
}

// NewViewStorageAcceleratorBlackoutTimeSettingsWithDefaults instantiates a new ViewStorageAcceleratorBlackoutTimeSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewStorageAcceleratorBlackoutTimeSettingsWithDefaults() *ViewStorageAcceleratorBlackoutTimeSettings {
	this := ViewStorageAcceleratorBlackoutTimeSettings{}
	return &this
}

// GetDays returns the Days field value if set, zero value otherwise.
func (o *ViewStorageAcceleratorBlackoutTimeSettings) GetDays() []string {
	if o == nil || IsNil(o.Days) {
		var ret []string
		return ret
	}
	return o.Days
}

// GetDaysOk returns a tuple with the Days field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewStorageAcceleratorBlackoutTimeSettings) GetDaysOk() ([]string, bool) {
	if o == nil || IsNil(o.Days) {
		return nil, false
	}
	return o.Days, true
}

// HasDays returns a boolean if a field has been set.
func (o *ViewStorageAcceleratorBlackoutTimeSettings) HasDays() bool {
	if o != nil && !IsNil(o.Days) {
		return true
	}

	return false
}

// SetDays gets a reference to the given []string and assigns it to the Days field.
func (o *ViewStorageAcceleratorBlackoutTimeSettings) SetDays(v []string) {
	o.Days = v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *ViewStorageAcceleratorBlackoutTimeSettings) GetEndTime() string {
	if o == nil || IsNil(o.EndTime) {
		var ret string
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewStorageAcceleratorBlackoutTimeSettings) GetEndTimeOk() (*string, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *ViewStorageAcceleratorBlackoutTimeSettings) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given string and assigns it to the EndTime field.
func (o *ViewStorageAcceleratorBlackoutTimeSettings) SetEndTime(v string) {
	o.EndTime = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *ViewStorageAcceleratorBlackoutTimeSettings) GetStartTime() string {
	if o == nil || IsNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewStorageAcceleratorBlackoutTimeSettings) GetStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *ViewStorageAcceleratorBlackoutTimeSettings) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *ViewStorageAcceleratorBlackoutTimeSettings) SetStartTime(v string) {
	o.StartTime = &v
}

func (o ViewStorageAcceleratorBlackoutTimeSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewStorageAcceleratorBlackoutTimeSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Days) {
		toSerialize["days"] = o.Days
	}
	if !IsNil(o.EndTime) {
		toSerialize["end_time"] = o.EndTime
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	return toSerialize, nil
}

type NullableViewStorageAcceleratorBlackoutTimeSettings struct {
	value *ViewStorageAcceleratorBlackoutTimeSettings
	isSet bool
}

func (v NullableViewStorageAcceleratorBlackoutTimeSettings) Get() *ViewStorageAcceleratorBlackoutTimeSettings {
	return v.value
}

func (v *NullableViewStorageAcceleratorBlackoutTimeSettings) Set(val *ViewStorageAcceleratorBlackoutTimeSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableViewStorageAcceleratorBlackoutTimeSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableViewStorageAcceleratorBlackoutTimeSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewStorageAcceleratorBlackoutTimeSettings(val *ViewStorageAcceleratorBlackoutTimeSettings) *NullableViewStorageAcceleratorBlackoutTimeSettings {
	return &NullableViewStorageAcceleratorBlackoutTimeSettings{value: val, isSet: true}
}

func (v NullableViewStorageAcceleratorBlackoutTimeSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewStorageAcceleratorBlackoutTimeSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


