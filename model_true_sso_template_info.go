/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the TrueSSOTemplateInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrueSSOTemplateInfo{}

// TrueSSOTemplateInfo Certificate template data available to certificate servers on this domain.
type TrueSSOTemplateInfo struct {
	// Hash algorithm used in the certificate signing request. * SHA1: SHA-1 hashing algorithm. * SHA256: SHA-256 hashing algorithm. * SHA384: SHA-384 hashing algorithm. * SHA512: SHA-512 hashing algorithm.
	HashAlgorithm *string `json:"hash_algorithm,omitempty"`
	// Minimum key-length of the private/public key associated with the certificate.
	MinimumKeyLength *int32 `json:"minimum_key_length,omitempty"`
	// Unique name for this template.
	TemplateName *string `json:"template_name,omitempty"`
	// The status of this template. * SUPPORTED_OPTIMAL: This template has the optimal properties for TrueSSO. * SUPPORTED_NOT_OPTIMAL: This template does not have the ideal properties for TrueSSO. * UNKNOWN: This status of this template is unknown. A template with this status cannot be used in connector creation. * NO_CAPABILITY: This template is not configured to perform TrueSSO. A template with this status cannot be used in connector creation. * INVALID: This template is smart card logon enabled, but some setting is invalid. A template with this status cannot be used in connector creation. * MANUAL: This template is smart card logon enabled, but manual enrollment is needed. A template with this status cannot be used in connector creation. * UNSUITABLE: This template is smart card logon enabled, but is unsuitable. A template with this status cannot be used in connector creation.
	TemplateStatus *string `json:"template_status,omitempty"`
	// Additional non-localized explanation of the status.
	TemplateStatusReason *string `json:"template_status_reason,omitempty"`
	// Length of time, in seconds, that certificates issues with this template remain valid.
	ValiditySeconds *int64 `json:"validity_seconds,omitempty"`
}

// NewTrueSSOTemplateInfo instantiates a new TrueSSOTemplateInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrueSSOTemplateInfo() *TrueSSOTemplateInfo {
	this := TrueSSOTemplateInfo{}
	return &this
}

// NewTrueSSOTemplateInfoWithDefaults instantiates a new TrueSSOTemplateInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrueSSOTemplateInfoWithDefaults() *TrueSSOTemplateInfo {
	this := TrueSSOTemplateInfo{}
	return &this
}

// GetHashAlgorithm returns the HashAlgorithm field value if set, zero value otherwise.
func (o *TrueSSOTemplateInfo) GetHashAlgorithm() string {
	if o == nil || IsNil(o.HashAlgorithm) {
		var ret string
		return ret
	}
	return *o.HashAlgorithm
}

// GetHashAlgorithmOk returns a tuple with the HashAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrueSSOTemplateInfo) GetHashAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.HashAlgorithm) {
		return nil, false
	}
	return o.HashAlgorithm, true
}

// HasHashAlgorithm returns a boolean if a field has been set.
func (o *TrueSSOTemplateInfo) HasHashAlgorithm() bool {
	if o != nil && !IsNil(o.HashAlgorithm) {
		return true
	}

	return false
}

// SetHashAlgorithm gets a reference to the given string and assigns it to the HashAlgorithm field.
func (o *TrueSSOTemplateInfo) SetHashAlgorithm(v string) {
	o.HashAlgorithm = &v
}

// GetMinimumKeyLength returns the MinimumKeyLength field value if set, zero value otherwise.
func (o *TrueSSOTemplateInfo) GetMinimumKeyLength() int32 {
	if o == nil || IsNil(o.MinimumKeyLength) {
		var ret int32
		return ret
	}
	return *o.MinimumKeyLength
}

// GetMinimumKeyLengthOk returns a tuple with the MinimumKeyLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrueSSOTemplateInfo) GetMinimumKeyLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MinimumKeyLength) {
		return nil, false
	}
	return o.MinimumKeyLength, true
}

// HasMinimumKeyLength returns a boolean if a field has been set.
func (o *TrueSSOTemplateInfo) HasMinimumKeyLength() bool {
	if o != nil && !IsNil(o.MinimumKeyLength) {
		return true
	}

	return false
}

// SetMinimumKeyLength gets a reference to the given int32 and assigns it to the MinimumKeyLength field.
func (o *TrueSSOTemplateInfo) SetMinimumKeyLength(v int32) {
	o.MinimumKeyLength = &v
}

// GetTemplateName returns the TemplateName field value if set, zero value otherwise.
func (o *TrueSSOTemplateInfo) GetTemplateName() string {
	if o == nil || IsNil(o.TemplateName) {
		var ret string
		return ret
	}
	return *o.TemplateName
}

// GetTemplateNameOk returns a tuple with the TemplateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrueSSOTemplateInfo) GetTemplateNameOk() (*string, bool) {
	if o == nil || IsNil(o.TemplateName) {
		return nil, false
	}
	return o.TemplateName, true
}

// HasTemplateName returns a boolean if a field has been set.
func (o *TrueSSOTemplateInfo) HasTemplateName() bool {
	if o != nil && !IsNil(o.TemplateName) {
		return true
	}

	return false
}

// SetTemplateName gets a reference to the given string and assigns it to the TemplateName field.
func (o *TrueSSOTemplateInfo) SetTemplateName(v string) {
	o.TemplateName = &v
}

// GetTemplateStatus returns the TemplateStatus field value if set, zero value otherwise.
func (o *TrueSSOTemplateInfo) GetTemplateStatus() string {
	if o == nil || IsNil(o.TemplateStatus) {
		var ret string
		return ret
	}
	return *o.TemplateStatus
}

// GetTemplateStatusOk returns a tuple with the TemplateStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrueSSOTemplateInfo) GetTemplateStatusOk() (*string, bool) {
	if o == nil || IsNil(o.TemplateStatus) {
		return nil, false
	}
	return o.TemplateStatus, true
}

// HasTemplateStatus returns a boolean if a field has been set.
func (o *TrueSSOTemplateInfo) HasTemplateStatus() bool {
	if o != nil && !IsNil(o.TemplateStatus) {
		return true
	}

	return false
}

// SetTemplateStatus gets a reference to the given string and assigns it to the TemplateStatus field.
func (o *TrueSSOTemplateInfo) SetTemplateStatus(v string) {
	o.TemplateStatus = &v
}

// GetTemplateStatusReason returns the TemplateStatusReason field value if set, zero value otherwise.
func (o *TrueSSOTemplateInfo) GetTemplateStatusReason() string {
	if o == nil || IsNil(o.TemplateStatusReason) {
		var ret string
		return ret
	}
	return *o.TemplateStatusReason
}

// GetTemplateStatusReasonOk returns a tuple with the TemplateStatusReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrueSSOTemplateInfo) GetTemplateStatusReasonOk() (*string, bool) {
	if o == nil || IsNil(o.TemplateStatusReason) {
		return nil, false
	}
	return o.TemplateStatusReason, true
}

// HasTemplateStatusReason returns a boolean if a field has been set.
func (o *TrueSSOTemplateInfo) HasTemplateStatusReason() bool {
	if o != nil && !IsNil(o.TemplateStatusReason) {
		return true
	}

	return false
}

// SetTemplateStatusReason gets a reference to the given string and assigns it to the TemplateStatusReason field.
func (o *TrueSSOTemplateInfo) SetTemplateStatusReason(v string) {
	o.TemplateStatusReason = &v
}

// GetValiditySeconds returns the ValiditySeconds field value if set, zero value otherwise.
func (o *TrueSSOTemplateInfo) GetValiditySeconds() int64 {
	if o == nil || IsNil(o.ValiditySeconds) {
		var ret int64
		return ret
	}
	return *o.ValiditySeconds
}

// GetValiditySecondsOk returns a tuple with the ValiditySeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrueSSOTemplateInfo) GetValiditySecondsOk() (*int64, bool) {
	if o == nil || IsNil(o.ValiditySeconds) {
		return nil, false
	}
	return o.ValiditySeconds, true
}

// HasValiditySeconds returns a boolean if a field has been set.
func (o *TrueSSOTemplateInfo) HasValiditySeconds() bool {
	if o != nil && !IsNil(o.ValiditySeconds) {
		return true
	}

	return false
}

// SetValiditySeconds gets a reference to the given int64 and assigns it to the ValiditySeconds field.
func (o *TrueSSOTemplateInfo) SetValiditySeconds(v int64) {
	o.ValiditySeconds = &v
}

func (o TrueSSOTemplateInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrueSSOTemplateInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HashAlgorithm) {
		toSerialize["hash_algorithm"] = o.HashAlgorithm
	}
	if !IsNil(o.MinimumKeyLength) {
		toSerialize["minimum_key_length"] = o.MinimumKeyLength
	}
	if !IsNil(o.TemplateName) {
		toSerialize["template_name"] = o.TemplateName
	}
	if !IsNil(o.TemplateStatus) {
		toSerialize["template_status"] = o.TemplateStatus
	}
	if !IsNil(o.TemplateStatusReason) {
		toSerialize["template_status_reason"] = o.TemplateStatusReason
	}
	if !IsNil(o.ValiditySeconds) {
		toSerialize["validity_seconds"] = o.ValiditySeconds
	}
	return toSerialize, nil
}

type NullableTrueSSOTemplateInfo struct {
	value *TrueSSOTemplateInfo
	isSet bool
}

func (v NullableTrueSSOTemplateInfo) Get() *TrueSSOTemplateInfo {
	return v.value
}

func (v *NullableTrueSSOTemplateInfo) Set(val *TrueSSOTemplateInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTrueSSOTemplateInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTrueSSOTemplateInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrueSSOTemplateInfo(val *TrueSSOTemplateInfo) *NullableTrueSSOTemplateInfo {
	return &NullableTrueSSOTemplateInfo{value: val, isSet: true}
}

func (v NullableTrueSSOTemplateInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrueSSOTemplateInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


