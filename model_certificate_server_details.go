/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// CertificateServerDetails struct for CertificateServerDetails
type CertificateServerDetails struct {
	// Certificate Server name.
	Name string `json:"name"`
	// Certificate Server status. * OK: The state of the certificate server is OK as reported by the enrollment servers. * WARN: At least one enrollment server reports a warning on this certificate server. * ERROR: At least one enrollment server reports an error on this certificate server.
	Status string `json:"status"`
}

// NewCertificateServerDetails instantiates a new CertificateServerDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateServerDetails(name string, status string) *CertificateServerDetails {
	this := CertificateServerDetails{}
	this.Name = name
	this.Status = status
	return &this
}

// NewCertificateServerDetailsWithDefaults instantiates a new CertificateServerDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateServerDetailsWithDefaults() *CertificateServerDetails {
	this := CertificateServerDetails{}
	return &this
}

// GetName returns the Name field value
func (o *CertificateServerDetails) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CertificateServerDetails) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CertificateServerDetails) SetName(v string) {
	o.Name = v
}

// GetStatus returns the Status field value
func (o *CertificateServerDetails) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *CertificateServerDetails) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *CertificateServerDetails) SetStatus(v string) {
	o.Status = v
}

func (o CertificateServerDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableCertificateServerDetails struct {
	value *CertificateServerDetails
	isSet bool
}

func (v NullableCertificateServerDetails) Get() *CertificateServerDetails {
	return v.value
}

func (v *NullableCertificateServerDetails) Set(val *CertificateServerDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateServerDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateServerDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateServerDetails(val *CertificateServerDetails) *NullableCertificateServerDetails {
	return &NullableCertificateServerDetails{value: val, isSet: true}
}

func (v NullableCertificateServerDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateServerDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
