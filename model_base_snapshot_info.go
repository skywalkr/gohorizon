/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the BaseSnapshotInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseSnapshotInfo{}

// BaseSnapshotInfo Information related to VM snapshot.
type BaseSnapshotInfo struct {
	// Epoch time in milli seconds, when the VM snapshot was created.
	CreatedTimestamp *int64 `json:"created_timestamp,omitempty"`
	// Description of the VM snapshot.
	Description *string `json:"description,omitempty"`
	// Sum of capacities of all the virtual disks in the VM snapshot, in MB.
	DiskSizeMb *int64 `json:"disk_size_mb,omitempty"`
	// VM snapshot hardware version
	HardwareVersion *int32 `json:"hardware_version,omitempty"`
	// Unique ID representing the VM snapshot.
	Id *string `json:"id,omitempty"`
	// Reasons that may preclude this VM snapshot from being used in linked/instant clone desktop pool or farm creation.
	IncompatibleReasons []string `json:"incompatible_reasons,omitempty"`
	// Maximum number of monitors set in SVGA settings for the VM snapshot in vCenter.
	MaxNumberOfMonitors *int32 `json:"max_number_of_monitors,omitempty"`
	// Maximum resolution of any one monitor set in SVGA settings for the VM snapshot in vCenter.
	MaxResolutionOfAnyOneMonitor *string `json:"max_resolution_of_any_one_monitor,omitempty"`
	// The physical memory size of VM snapshot, in MB
	MemoryMb *int32 `json:"memory_mb,omitempty"`
	// Amount of memory that is guaranteed available to the virtual machine, in MB.
	MemoryReservationMb *int64 `json:"memory_reservation_mb,omitempty"`
	// VM snapshot name.
	Name *string `json:"name,omitempty"`
	// VM snapshot path.
	Path *string `json:"path,omitempty"`
	// Indicate how the virtual video device for the VM snapshot renders 3D graphics. Will be set only if VM snapshot supports 3D functions. * MANAGE_BY_VSPHERE_CLIENT: 3D rendering managed by vSphere Client. * AUTOMATIC: 3D rendering is automatic. * SOFTWARE: 3D rendering is software dependent. The software renderer is supported (at minimum) on virtual hardware version 8 in a vSphere 5.0 environment. * HARDWARE: 3D rendering is hardware dependent. The hardware-based renderer is supported (at minimum) on virtual hardware version 9 in a vSphere 5.1 environment. * DISABLED: 3D rendering is disabled.
	Renderer3d *string `json:"renderer3d,omitempty"`
	// Total video memory in MB set in SVGA settings for the VM snapshot in vCenter.
	TotalVideoMemoryMb *float64 `json:"total_video_memory_mb,omitempty"`
	// Virtual Center id for this VM snapshot.
	VcenterId *string `json:"vcenter_id,omitempty"`
	// NVIDIA GRID vGPU type configured on this VM snapshot.
	VgpuType *string `json:"vgpu_type,omitempty"`
}

// NewBaseSnapshotInfo instantiates a new BaseSnapshotInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseSnapshotInfo() *BaseSnapshotInfo {
	this := BaseSnapshotInfo{}
	return &this
}

// NewBaseSnapshotInfoWithDefaults instantiates a new BaseSnapshotInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseSnapshotInfoWithDefaults() *BaseSnapshotInfo {
	this := BaseSnapshotInfo{}
	return &this
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise.
func (o *BaseSnapshotInfo) GetCreatedTimestamp() int64 {
	if o == nil || IsNil(o.CreatedTimestamp) {
		var ret int64
		return ret
	}
	return *o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSnapshotInfo) GetCreatedTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.CreatedTimestamp) {
		return nil, false
	}
	return o.CreatedTimestamp, true
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *BaseSnapshotInfo) HasCreatedTimestamp() bool {
	if o != nil && !IsNil(o.CreatedTimestamp) {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given int64 and assigns it to the CreatedTimestamp field.
func (o *BaseSnapshotInfo) SetCreatedTimestamp(v int64) {
	o.CreatedTimestamp = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BaseSnapshotInfo) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSnapshotInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BaseSnapshotInfo) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BaseSnapshotInfo) SetDescription(v string) {
	o.Description = &v
}

// GetDiskSizeMb returns the DiskSizeMb field value if set, zero value otherwise.
func (o *BaseSnapshotInfo) GetDiskSizeMb() int64 {
	if o == nil || IsNil(o.DiskSizeMb) {
		var ret int64
		return ret
	}
	return *o.DiskSizeMb
}

// GetDiskSizeMbOk returns a tuple with the DiskSizeMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSnapshotInfo) GetDiskSizeMbOk() (*int64, bool) {
	if o == nil || IsNil(o.DiskSizeMb) {
		return nil, false
	}
	return o.DiskSizeMb, true
}

// HasDiskSizeMb returns a boolean if a field has been set.
func (o *BaseSnapshotInfo) HasDiskSizeMb() bool {
	if o != nil && !IsNil(o.DiskSizeMb) {
		return true
	}

	return false
}

// SetDiskSizeMb gets a reference to the given int64 and assigns it to the DiskSizeMb field.
func (o *BaseSnapshotInfo) SetDiskSizeMb(v int64) {
	o.DiskSizeMb = &v
}

// GetHardwareVersion returns the HardwareVersion field value if set, zero value otherwise.
func (o *BaseSnapshotInfo) GetHardwareVersion() int32 {
	if o == nil || IsNil(o.HardwareVersion) {
		var ret int32
		return ret
	}
	return *o.HardwareVersion
}

// GetHardwareVersionOk returns a tuple with the HardwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSnapshotInfo) GetHardwareVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.HardwareVersion) {
		return nil, false
	}
	return o.HardwareVersion, true
}

// HasHardwareVersion returns a boolean if a field has been set.
func (o *BaseSnapshotInfo) HasHardwareVersion() bool {
	if o != nil && !IsNil(o.HardwareVersion) {
		return true
	}

	return false
}

// SetHardwareVersion gets a reference to the given int32 and assigns it to the HardwareVersion field.
func (o *BaseSnapshotInfo) SetHardwareVersion(v int32) {
	o.HardwareVersion = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BaseSnapshotInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSnapshotInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BaseSnapshotInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BaseSnapshotInfo) SetId(v string) {
	o.Id = &v
}

// GetIncompatibleReasons returns the IncompatibleReasons field value if set, zero value otherwise.
func (o *BaseSnapshotInfo) GetIncompatibleReasons() []string {
	if o == nil || IsNil(o.IncompatibleReasons) {
		var ret []string
		return ret
	}
	return o.IncompatibleReasons
}

// GetIncompatibleReasonsOk returns a tuple with the IncompatibleReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSnapshotInfo) GetIncompatibleReasonsOk() ([]string, bool) {
	if o == nil || IsNil(o.IncompatibleReasons) {
		return nil, false
	}
	return o.IncompatibleReasons, true
}

// HasIncompatibleReasons returns a boolean if a field has been set.
func (o *BaseSnapshotInfo) HasIncompatibleReasons() bool {
	if o != nil && !IsNil(o.IncompatibleReasons) {
		return true
	}

	return false
}

// SetIncompatibleReasons gets a reference to the given []string and assigns it to the IncompatibleReasons field.
func (o *BaseSnapshotInfo) SetIncompatibleReasons(v []string) {
	o.IncompatibleReasons = v
}

// GetMaxNumberOfMonitors returns the MaxNumberOfMonitors field value if set, zero value otherwise.
func (o *BaseSnapshotInfo) GetMaxNumberOfMonitors() int32 {
	if o == nil || IsNil(o.MaxNumberOfMonitors) {
		var ret int32
		return ret
	}
	return *o.MaxNumberOfMonitors
}

// GetMaxNumberOfMonitorsOk returns a tuple with the MaxNumberOfMonitors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSnapshotInfo) GetMaxNumberOfMonitorsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxNumberOfMonitors) {
		return nil, false
	}
	return o.MaxNumberOfMonitors, true
}

// HasMaxNumberOfMonitors returns a boolean if a field has been set.
func (o *BaseSnapshotInfo) HasMaxNumberOfMonitors() bool {
	if o != nil && !IsNil(o.MaxNumberOfMonitors) {
		return true
	}

	return false
}

// SetMaxNumberOfMonitors gets a reference to the given int32 and assigns it to the MaxNumberOfMonitors field.
func (o *BaseSnapshotInfo) SetMaxNumberOfMonitors(v int32) {
	o.MaxNumberOfMonitors = &v
}

// GetMaxResolutionOfAnyOneMonitor returns the MaxResolutionOfAnyOneMonitor field value if set, zero value otherwise.
func (o *BaseSnapshotInfo) GetMaxResolutionOfAnyOneMonitor() string {
	if o == nil || IsNil(o.MaxResolutionOfAnyOneMonitor) {
		var ret string
		return ret
	}
	return *o.MaxResolutionOfAnyOneMonitor
}

// GetMaxResolutionOfAnyOneMonitorOk returns a tuple with the MaxResolutionOfAnyOneMonitor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSnapshotInfo) GetMaxResolutionOfAnyOneMonitorOk() (*string, bool) {
	if o == nil || IsNil(o.MaxResolutionOfAnyOneMonitor) {
		return nil, false
	}
	return o.MaxResolutionOfAnyOneMonitor, true
}

// HasMaxResolutionOfAnyOneMonitor returns a boolean if a field has been set.
func (o *BaseSnapshotInfo) HasMaxResolutionOfAnyOneMonitor() bool {
	if o != nil && !IsNil(o.MaxResolutionOfAnyOneMonitor) {
		return true
	}

	return false
}

// SetMaxResolutionOfAnyOneMonitor gets a reference to the given string and assigns it to the MaxResolutionOfAnyOneMonitor field.
func (o *BaseSnapshotInfo) SetMaxResolutionOfAnyOneMonitor(v string) {
	o.MaxResolutionOfAnyOneMonitor = &v
}

// GetMemoryMb returns the MemoryMb field value if set, zero value otherwise.
func (o *BaseSnapshotInfo) GetMemoryMb() int32 {
	if o == nil || IsNil(o.MemoryMb) {
		var ret int32
		return ret
	}
	return *o.MemoryMb
}

// GetMemoryMbOk returns a tuple with the MemoryMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSnapshotInfo) GetMemoryMbOk() (*int32, bool) {
	if o == nil || IsNil(o.MemoryMb) {
		return nil, false
	}
	return o.MemoryMb, true
}

// HasMemoryMb returns a boolean if a field has been set.
func (o *BaseSnapshotInfo) HasMemoryMb() bool {
	if o != nil && !IsNil(o.MemoryMb) {
		return true
	}

	return false
}

// SetMemoryMb gets a reference to the given int32 and assigns it to the MemoryMb field.
func (o *BaseSnapshotInfo) SetMemoryMb(v int32) {
	o.MemoryMb = &v
}

// GetMemoryReservationMb returns the MemoryReservationMb field value if set, zero value otherwise.
func (o *BaseSnapshotInfo) GetMemoryReservationMb() int64 {
	if o == nil || IsNil(o.MemoryReservationMb) {
		var ret int64
		return ret
	}
	return *o.MemoryReservationMb
}

// GetMemoryReservationMbOk returns a tuple with the MemoryReservationMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSnapshotInfo) GetMemoryReservationMbOk() (*int64, bool) {
	if o == nil || IsNil(o.MemoryReservationMb) {
		return nil, false
	}
	return o.MemoryReservationMb, true
}

// HasMemoryReservationMb returns a boolean if a field has been set.
func (o *BaseSnapshotInfo) HasMemoryReservationMb() bool {
	if o != nil && !IsNil(o.MemoryReservationMb) {
		return true
	}

	return false
}

// SetMemoryReservationMb gets a reference to the given int64 and assigns it to the MemoryReservationMb field.
func (o *BaseSnapshotInfo) SetMemoryReservationMb(v int64) {
	o.MemoryReservationMb = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BaseSnapshotInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSnapshotInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BaseSnapshotInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BaseSnapshotInfo) SetName(v string) {
	o.Name = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *BaseSnapshotInfo) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSnapshotInfo) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *BaseSnapshotInfo) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *BaseSnapshotInfo) SetPath(v string) {
	o.Path = &v
}

// GetRenderer3d returns the Renderer3d field value if set, zero value otherwise.
func (o *BaseSnapshotInfo) GetRenderer3d() string {
	if o == nil || IsNil(o.Renderer3d) {
		var ret string
		return ret
	}
	return *o.Renderer3d
}

// GetRenderer3dOk returns a tuple with the Renderer3d field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSnapshotInfo) GetRenderer3dOk() (*string, bool) {
	if o == nil || IsNil(o.Renderer3d) {
		return nil, false
	}
	return o.Renderer3d, true
}

// HasRenderer3d returns a boolean if a field has been set.
func (o *BaseSnapshotInfo) HasRenderer3d() bool {
	if o != nil && !IsNil(o.Renderer3d) {
		return true
	}

	return false
}

// SetRenderer3d gets a reference to the given string and assigns it to the Renderer3d field.
func (o *BaseSnapshotInfo) SetRenderer3d(v string) {
	o.Renderer3d = &v
}

// GetTotalVideoMemoryMb returns the TotalVideoMemoryMb field value if set, zero value otherwise.
func (o *BaseSnapshotInfo) GetTotalVideoMemoryMb() float64 {
	if o == nil || IsNil(o.TotalVideoMemoryMb) {
		var ret float64
		return ret
	}
	return *o.TotalVideoMemoryMb
}

// GetTotalVideoMemoryMbOk returns a tuple with the TotalVideoMemoryMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSnapshotInfo) GetTotalVideoMemoryMbOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalVideoMemoryMb) {
		return nil, false
	}
	return o.TotalVideoMemoryMb, true
}

// HasTotalVideoMemoryMb returns a boolean if a field has been set.
func (o *BaseSnapshotInfo) HasTotalVideoMemoryMb() bool {
	if o != nil && !IsNil(o.TotalVideoMemoryMb) {
		return true
	}

	return false
}

// SetTotalVideoMemoryMb gets a reference to the given float64 and assigns it to the TotalVideoMemoryMb field.
func (o *BaseSnapshotInfo) SetTotalVideoMemoryMb(v float64) {
	o.TotalVideoMemoryMb = &v
}

// GetVcenterId returns the VcenterId field value if set, zero value otherwise.
func (o *BaseSnapshotInfo) GetVcenterId() string {
	if o == nil || IsNil(o.VcenterId) {
		var ret string
		return ret
	}
	return *o.VcenterId
}

// GetVcenterIdOk returns a tuple with the VcenterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSnapshotInfo) GetVcenterIdOk() (*string, bool) {
	if o == nil || IsNil(o.VcenterId) {
		return nil, false
	}
	return o.VcenterId, true
}

// HasVcenterId returns a boolean if a field has been set.
func (o *BaseSnapshotInfo) HasVcenterId() bool {
	if o != nil && !IsNil(o.VcenterId) {
		return true
	}

	return false
}

// SetVcenterId gets a reference to the given string and assigns it to the VcenterId field.
func (o *BaseSnapshotInfo) SetVcenterId(v string) {
	o.VcenterId = &v
}

// GetVgpuType returns the VgpuType field value if set, zero value otherwise.
func (o *BaseSnapshotInfo) GetVgpuType() string {
	if o == nil || IsNil(o.VgpuType) {
		var ret string
		return ret
	}
	return *o.VgpuType
}

// GetVgpuTypeOk returns a tuple with the VgpuType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseSnapshotInfo) GetVgpuTypeOk() (*string, bool) {
	if o == nil || IsNil(o.VgpuType) {
		return nil, false
	}
	return o.VgpuType, true
}

// HasVgpuType returns a boolean if a field has been set.
func (o *BaseSnapshotInfo) HasVgpuType() bool {
	if o != nil && !IsNil(o.VgpuType) {
		return true
	}

	return false
}

// SetVgpuType gets a reference to the given string and assigns it to the VgpuType field.
func (o *BaseSnapshotInfo) SetVgpuType(v string) {
	o.VgpuType = &v
}

func (o BaseSnapshotInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseSnapshotInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedTimestamp) {
		toSerialize["created_timestamp"] = o.CreatedTimestamp
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DiskSizeMb) {
		toSerialize["disk_size_mb"] = o.DiskSizeMb
	}
	if !IsNil(o.HardwareVersion) {
		toSerialize["hardware_version"] = o.HardwareVersion
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IncompatibleReasons) {
		toSerialize["incompatible_reasons"] = o.IncompatibleReasons
	}
	if !IsNil(o.MaxNumberOfMonitors) {
		toSerialize["max_number_of_monitors"] = o.MaxNumberOfMonitors
	}
	if !IsNil(o.MaxResolutionOfAnyOneMonitor) {
		toSerialize["max_resolution_of_any_one_monitor"] = o.MaxResolutionOfAnyOneMonitor
	}
	if !IsNil(o.MemoryMb) {
		toSerialize["memory_mb"] = o.MemoryMb
	}
	if !IsNil(o.MemoryReservationMb) {
		toSerialize["memory_reservation_mb"] = o.MemoryReservationMb
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Renderer3d) {
		toSerialize["renderer3d"] = o.Renderer3d
	}
	if !IsNil(o.TotalVideoMemoryMb) {
		toSerialize["total_video_memory_mb"] = o.TotalVideoMemoryMb
	}
	if !IsNil(o.VcenterId) {
		toSerialize["vcenter_id"] = o.VcenterId
	}
	if !IsNil(o.VgpuType) {
		toSerialize["vgpu_type"] = o.VgpuType
	}
	return toSerialize, nil
}

type NullableBaseSnapshotInfo struct {
	value *BaseSnapshotInfo
	isSet bool
}

func (v NullableBaseSnapshotInfo) Get() *BaseSnapshotInfo {
	return v.value
}

func (v *NullableBaseSnapshotInfo) Set(val *BaseSnapshotInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseSnapshotInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseSnapshotInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseSnapshotInfo(val *BaseSnapshotInfo) *NullableBaseSnapshotInfo {
	return &NullableBaseSnapshotInfo{value: val, isSet: true}
}

func (v NullableBaseSnapshotInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseSnapshotInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


