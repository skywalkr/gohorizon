/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the FarmMonitorInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FarmMonitorInfo{}

// FarmMonitorInfo Monitoring information related to Farm.
type FarmMonitorInfo struct {
	// Number of Applications published from the farm.
	ApplicationCount *int32 `json:"application_count,omitempty"`
	Details *FarmMonitorDetails `json:"details,omitempty"`
	// Unique ID of the Farm.
	Id *string `json:"id,omitempty"`
	// Farm name.
	Name *string `json:"name,omitempty"`
	// Number of RDS Servers in the farm.
	RdsServerCount *int32 `json:"rds_server_count,omitempty"`
	// Status of Farm. * OK: Farm is enabled and no servers are in WARNING or ERROR state. One or more server(s) may be DISABLED (including the case where all of them are DISABLED). * WARNING: Farm is enabled. One or more of the following is true: 1) One or more server(s) is either in WARNING or ERROR (not exceeding the predefined threshold) state. 2) The RDS Servers in this Farm present a mix of both known and unknown load preferences. * ERROR: Farm is enabled. One or more server(s) (exceeding the predefined threshold) is in ERROR state, or, for Automated Farms, there could be a provisioning error. * DISABLED: Farm is disabled.
	Status *string `json:"status,omitempty"`
}

// NewFarmMonitorInfo instantiates a new FarmMonitorInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFarmMonitorInfo() *FarmMonitorInfo {
	this := FarmMonitorInfo{}
	return &this
}

// NewFarmMonitorInfoWithDefaults instantiates a new FarmMonitorInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFarmMonitorInfoWithDefaults() *FarmMonitorInfo {
	this := FarmMonitorInfo{}
	return &this
}

// GetApplicationCount returns the ApplicationCount field value if set, zero value otherwise.
func (o *FarmMonitorInfo) GetApplicationCount() int32 {
	if o == nil || IsNil(o.ApplicationCount) {
		var ret int32
		return ret
	}
	return *o.ApplicationCount
}

// GetApplicationCountOk returns a tuple with the ApplicationCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmMonitorInfo) GetApplicationCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ApplicationCount) {
		return nil, false
	}
	return o.ApplicationCount, true
}

// HasApplicationCount returns a boolean if a field has been set.
func (o *FarmMonitorInfo) HasApplicationCount() bool {
	if o != nil && !IsNil(o.ApplicationCount) {
		return true
	}

	return false
}

// SetApplicationCount gets a reference to the given int32 and assigns it to the ApplicationCount field.
func (o *FarmMonitorInfo) SetApplicationCount(v int32) {
	o.ApplicationCount = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *FarmMonitorInfo) GetDetails() FarmMonitorDetails {
	if o == nil || IsNil(o.Details) {
		var ret FarmMonitorDetails
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmMonitorInfo) GetDetailsOk() (*FarmMonitorDetails, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *FarmMonitorInfo) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given FarmMonitorDetails and assigns it to the Details field.
func (o *FarmMonitorInfo) SetDetails(v FarmMonitorDetails) {
	o.Details = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FarmMonitorInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmMonitorInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FarmMonitorInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FarmMonitorInfo) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FarmMonitorInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmMonitorInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FarmMonitorInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FarmMonitorInfo) SetName(v string) {
	o.Name = &v
}

// GetRdsServerCount returns the RdsServerCount field value if set, zero value otherwise.
func (o *FarmMonitorInfo) GetRdsServerCount() int32 {
	if o == nil || IsNil(o.RdsServerCount) {
		var ret int32
		return ret
	}
	return *o.RdsServerCount
}

// GetRdsServerCountOk returns a tuple with the RdsServerCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmMonitorInfo) GetRdsServerCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RdsServerCount) {
		return nil, false
	}
	return o.RdsServerCount, true
}

// HasRdsServerCount returns a boolean if a field has been set.
func (o *FarmMonitorInfo) HasRdsServerCount() bool {
	if o != nil && !IsNil(o.RdsServerCount) {
		return true
	}

	return false
}

// SetRdsServerCount gets a reference to the given int32 and assigns it to the RdsServerCount field.
func (o *FarmMonitorInfo) SetRdsServerCount(v int32) {
	o.RdsServerCount = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *FarmMonitorInfo) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmMonitorInfo) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *FarmMonitorInfo) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *FarmMonitorInfo) SetStatus(v string) {
	o.Status = &v
}

func (o FarmMonitorInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FarmMonitorInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplicationCount) {
		toSerialize["application_count"] = o.ApplicationCount
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RdsServerCount) {
		toSerialize["rds_server_count"] = o.RdsServerCount
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableFarmMonitorInfo struct {
	value *FarmMonitorInfo
	isSet bool
}

func (v NullableFarmMonitorInfo) Get() *FarmMonitorInfo {
	return v.value
}

func (v *NullableFarmMonitorInfo) Set(val *FarmMonitorInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableFarmMonitorInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableFarmMonitorInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFarmMonitorInfo(val *FarmMonitorInfo) *NullableFarmMonitorInfo {
	return &NullableFarmMonitorInfo{value: val, isSet: true}
}

func (v NullableFarmMonitorInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFarmMonitorInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


