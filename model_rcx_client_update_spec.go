/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RCXClientUpdateSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RCXClientUpdateSpec{}

// RCXClientUpdateSpec Update specification for the RCX client.
type RCXClientUpdateSpec struct {
	// IP address of the RCX client.
	IpAddress *string `json:"ip_address,omitempty"`
	// Thumbprints of the RCX client certificate.
	Thumbprints []CertificateThumbprint `json:"thumbprints"`
}

type _RCXClientUpdateSpec RCXClientUpdateSpec

// NewRCXClientUpdateSpec instantiates a new RCXClientUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRCXClientUpdateSpec(thumbprints []CertificateThumbprint) *RCXClientUpdateSpec {
	this := RCXClientUpdateSpec{}
	this.Thumbprints = thumbprints
	return &this
}

// NewRCXClientUpdateSpecWithDefaults instantiates a new RCXClientUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRCXClientUpdateSpecWithDefaults() *RCXClientUpdateSpec {
	this := RCXClientUpdateSpec{}
	return &this
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *RCXClientUpdateSpec) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCXClientUpdateSpec) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *RCXClientUpdateSpec) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *RCXClientUpdateSpec) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetThumbprints returns the Thumbprints field value
func (o *RCXClientUpdateSpec) GetThumbprints() []CertificateThumbprint {
	if o == nil {
		var ret []CertificateThumbprint
		return ret
	}

	return o.Thumbprints
}

// GetThumbprintsOk returns a tuple with the Thumbprints field value
// and a boolean to check if the value has been set.
func (o *RCXClientUpdateSpec) GetThumbprintsOk() ([]CertificateThumbprint, bool) {
	if o == nil {
		return nil, false
	}
	return o.Thumbprints, true
}

// SetThumbprints sets field value
func (o *RCXClientUpdateSpec) SetThumbprints(v []CertificateThumbprint) {
	o.Thumbprints = v
}

func (o RCXClientUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RCXClientUpdateSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IpAddress) {
		toSerialize["ip_address"] = o.IpAddress
	}
	toSerialize["thumbprints"] = o.Thumbprints
	return toSerialize, nil
}

func (o *RCXClientUpdateSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"thumbprints",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRCXClientUpdateSpec := _RCXClientUpdateSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRCXClientUpdateSpec)

	if err != nil {
		return err
	}

	*o = RCXClientUpdateSpec(varRCXClientUpdateSpec)

	return err
}

type NullableRCXClientUpdateSpec struct {
	value *RCXClientUpdateSpec
	isSet bool
}

func (v NullableRCXClientUpdateSpec) Get() *RCXClientUpdateSpec {
	return v.value
}

func (v *NullableRCXClientUpdateSpec) Set(val *RCXClientUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableRCXClientUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableRCXClientUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRCXClientUpdateSpec(val *RCXClientUpdateSpec) *NullableRCXClientUpdateSpec {
	return &NullableRCXClientUpdateSpec{value: val, isSet: true}
}

func (v NullableRCXClientUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRCXClientUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


