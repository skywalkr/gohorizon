/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2111
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// RCXClientUpdateSpec Update specification for the RCX client.
type RCXClientUpdateSpec struct {
	// IP address of the RCX client.
	IpAddress *string `json:"ip_address,omitempty"`
	// Thumbprints of the RCX client certificate.
	Thumbprints []CertificateThumbprint `json:"thumbprints"`
}

// NewRCXClientUpdateSpec instantiates a new RCXClientUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRCXClientUpdateSpec(thumbprints []CertificateThumbprint) *RCXClientUpdateSpec {
	this := RCXClientUpdateSpec{}
	this.Thumbprints = thumbprints
	return &this
}

// NewRCXClientUpdateSpecWithDefaults instantiates a new RCXClientUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRCXClientUpdateSpecWithDefaults() *RCXClientUpdateSpec {
	this := RCXClientUpdateSpec{}
	return &this
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *RCXClientUpdateSpec) GetIpAddress() string {
	if o == nil || o.IpAddress == nil {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCXClientUpdateSpec) GetIpAddressOk() (*string, bool) {
	if o == nil || o.IpAddress == nil {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *RCXClientUpdateSpec) HasIpAddress() bool {
	if o != nil && o.IpAddress != nil {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *RCXClientUpdateSpec) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetThumbprints returns the Thumbprints field value
func (o *RCXClientUpdateSpec) GetThumbprints() []CertificateThumbprint {
	if o == nil {
		var ret []CertificateThumbprint
		return ret
	}

	return o.Thumbprints
}

// GetThumbprintsOk returns a tuple with the Thumbprints field value
// and a boolean to check if the value has been set.
func (o *RCXClientUpdateSpec) GetThumbprintsOk() (*[]CertificateThumbprint, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Thumbprints, true
}

// SetThumbprints sets field value
func (o *RCXClientUpdateSpec) SetThumbprints(v []CertificateThumbprint) {
	o.Thumbprints = v
}

func (o RCXClientUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IpAddress != nil {
		toSerialize["ip_address"] = o.IpAddress
	}
	if true {
		toSerialize["thumbprints"] = o.Thumbprints
	}
	return json.Marshal(toSerialize)
}

type NullableRCXClientUpdateSpec struct {
	value *RCXClientUpdateSpec
	isSet bool
}

func (v NullableRCXClientUpdateSpec) Get() *RCXClientUpdateSpec {
	return v.value
}

func (v *NullableRCXClientUpdateSpec) Set(val *RCXClientUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableRCXClientUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableRCXClientUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRCXClientUpdateSpec(val *RCXClientUpdateSpec) *NullableRCXClientUpdateSpec {
	return &NullableRCXClientUpdateSpec{value: val, isSet: true}
}

func (v NullableRCXClientUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRCXClientUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
