/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the CEIPInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CEIPInfo{}

// CEIPInfo Configuration information for the customer experience improvement program.
type CEIPInfo struct {
	// The size of the company. * SIZE_1_100: Company size between 1 and 100. * SIZE_101_500: Company size between 101 and 500. * SIZE_501_1000: Company size between 501 and 1000. * SIZE_1001_5000: Company size between 1001 and 5000. * SIZE_5001_10000: Company size between 5001 and 10000. * SIZE_10001: Company size greater than 10000.
	CompanySize *string `json:"company_size,omitempty"`
	// Indicates whether to send information to VMware.
	Enabled *bool `json:"enabled,omitempty"`
	// The geolocation of the company.
	Geolocation *string `json:"geolocation,omitempty"`
	// The vertical of the company.
	Vertical *string `json:"vertical,omitempty"`
}

// NewCEIPInfo instantiates a new CEIPInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCEIPInfo() *CEIPInfo {
	this := CEIPInfo{}
	return &this
}

// NewCEIPInfoWithDefaults instantiates a new CEIPInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCEIPInfoWithDefaults() *CEIPInfo {
	this := CEIPInfo{}
	return &this
}

// GetCompanySize returns the CompanySize field value if set, zero value otherwise.
func (o *CEIPInfo) GetCompanySize() string {
	if o == nil || IsNil(o.CompanySize) {
		var ret string
		return ret
	}
	return *o.CompanySize
}

// GetCompanySizeOk returns a tuple with the CompanySize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CEIPInfo) GetCompanySizeOk() (*string, bool) {
	if o == nil || IsNil(o.CompanySize) {
		return nil, false
	}
	return o.CompanySize, true
}

// HasCompanySize returns a boolean if a field has been set.
func (o *CEIPInfo) HasCompanySize() bool {
	if o != nil && !IsNil(o.CompanySize) {
		return true
	}

	return false
}

// SetCompanySize gets a reference to the given string and assigns it to the CompanySize field.
func (o *CEIPInfo) SetCompanySize(v string) {
	o.CompanySize = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CEIPInfo) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CEIPInfo) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CEIPInfo) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CEIPInfo) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetGeolocation returns the Geolocation field value if set, zero value otherwise.
func (o *CEIPInfo) GetGeolocation() string {
	if o == nil || IsNil(o.Geolocation) {
		var ret string
		return ret
	}
	return *o.Geolocation
}

// GetGeolocationOk returns a tuple with the Geolocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CEIPInfo) GetGeolocationOk() (*string, bool) {
	if o == nil || IsNil(o.Geolocation) {
		return nil, false
	}
	return o.Geolocation, true
}

// HasGeolocation returns a boolean if a field has been set.
func (o *CEIPInfo) HasGeolocation() bool {
	if o != nil && !IsNil(o.Geolocation) {
		return true
	}

	return false
}

// SetGeolocation gets a reference to the given string and assigns it to the Geolocation field.
func (o *CEIPInfo) SetGeolocation(v string) {
	o.Geolocation = &v
}

// GetVertical returns the Vertical field value if set, zero value otherwise.
func (o *CEIPInfo) GetVertical() string {
	if o == nil || IsNil(o.Vertical) {
		var ret string
		return ret
	}
	return *o.Vertical
}

// GetVerticalOk returns a tuple with the Vertical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CEIPInfo) GetVerticalOk() (*string, bool) {
	if o == nil || IsNil(o.Vertical) {
		return nil, false
	}
	return o.Vertical, true
}

// HasVertical returns a boolean if a field has been set.
func (o *CEIPInfo) HasVertical() bool {
	if o != nil && !IsNil(o.Vertical) {
		return true
	}

	return false
}

// SetVertical gets a reference to the given string and assigns it to the Vertical field.
func (o *CEIPInfo) SetVertical(v string) {
	o.Vertical = &v
}

func (o CEIPInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CEIPInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompanySize) {
		toSerialize["company_size"] = o.CompanySize
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Geolocation) {
		toSerialize["geolocation"] = o.Geolocation
	}
	if !IsNil(o.Vertical) {
		toSerialize["vertical"] = o.Vertical
	}
	return toSerialize, nil
}

type NullableCEIPInfo struct {
	value *CEIPInfo
	isSet bool
}

func (v NullableCEIPInfo) Get() *CEIPInfo {
	return v.value
}

func (v *NullableCEIPInfo) Set(val *CEIPInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCEIPInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCEIPInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCEIPInfo(val *CEIPInfo) *NullableCEIPInfo {
	return &NullableCEIPInfo{value: val, isSet: true}
}

func (v NullableCEIPInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCEIPInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


