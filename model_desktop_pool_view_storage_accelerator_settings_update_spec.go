/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the DesktopPoolViewStorageAcceleratorSettingsUpdateSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DesktopPoolViewStorageAcceleratorSettingsUpdateSpec{}

// DesktopPoolViewStorageAcceleratorSettingsUpdateSpec Applicable To: Managed desktop pool. <br>Settings related to the View Storage Accelerator for Managed desktop pool. 
type DesktopPoolViewStorageAcceleratorSettingsUpdateSpec struct {
	// A list of blackout times.
	BlackoutTimes []ViewStorageAcceleratorBlackoutTimeSettingsUpdateSpec `json:"blackout_times,omitempty"`
	// How often to regenerate the View Storage Accelerator cache. Measured in Days. This property has a default value of 7.
	RegenerateViewStorageAcceleratorDays *int32 `json:"regenerate_view_storage_accelerator_days,omitempty"`
	// Indicates whether to use View Storage Accelerator.
	UseViewStorageAccelerator *bool `json:"use_view_storage_accelerator,omitempty"`
}

// NewDesktopPoolViewStorageAcceleratorSettingsUpdateSpec instantiates a new DesktopPoolViewStorageAcceleratorSettingsUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDesktopPoolViewStorageAcceleratorSettingsUpdateSpec() *DesktopPoolViewStorageAcceleratorSettingsUpdateSpec {
	this := DesktopPoolViewStorageAcceleratorSettingsUpdateSpec{}
	return &this
}

// NewDesktopPoolViewStorageAcceleratorSettingsUpdateSpecWithDefaults instantiates a new DesktopPoolViewStorageAcceleratorSettingsUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDesktopPoolViewStorageAcceleratorSettingsUpdateSpecWithDefaults() *DesktopPoolViewStorageAcceleratorSettingsUpdateSpec {
	this := DesktopPoolViewStorageAcceleratorSettingsUpdateSpec{}
	return &this
}

// GetBlackoutTimes returns the BlackoutTimes field value if set, zero value otherwise.
func (o *DesktopPoolViewStorageAcceleratorSettingsUpdateSpec) GetBlackoutTimes() []ViewStorageAcceleratorBlackoutTimeSettingsUpdateSpec {
	if o == nil || IsNil(o.BlackoutTimes) {
		var ret []ViewStorageAcceleratorBlackoutTimeSettingsUpdateSpec
		return ret
	}
	return o.BlackoutTimes
}

// GetBlackoutTimesOk returns a tuple with the BlackoutTimes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolViewStorageAcceleratorSettingsUpdateSpec) GetBlackoutTimesOk() ([]ViewStorageAcceleratorBlackoutTimeSettingsUpdateSpec, bool) {
	if o == nil || IsNil(o.BlackoutTimes) {
		return nil, false
	}
	return o.BlackoutTimes, true
}

// HasBlackoutTimes returns a boolean if a field has been set.
func (o *DesktopPoolViewStorageAcceleratorSettingsUpdateSpec) HasBlackoutTimes() bool {
	if o != nil && !IsNil(o.BlackoutTimes) {
		return true
	}

	return false
}

// SetBlackoutTimes gets a reference to the given []ViewStorageAcceleratorBlackoutTimeSettingsUpdateSpec and assigns it to the BlackoutTimes field.
func (o *DesktopPoolViewStorageAcceleratorSettingsUpdateSpec) SetBlackoutTimes(v []ViewStorageAcceleratorBlackoutTimeSettingsUpdateSpec) {
	o.BlackoutTimes = v
}

// GetRegenerateViewStorageAcceleratorDays returns the RegenerateViewStorageAcceleratorDays field value if set, zero value otherwise.
func (o *DesktopPoolViewStorageAcceleratorSettingsUpdateSpec) GetRegenerateViewStorageAcceleratorDays() int32 {
	if o == nil || IsNil(o.RegenerateViewStorageAcceleratorDays) {
		var ret int32
		return ret
	}
	return *o.RegenerateViewStorageAcceleratorDays
}

// GetRegenerateViewStorageAcceleratorDaysOk returns a tuple with the RegenerateViewStorageAcceleratorDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolViewStorageAcceleratorSettingsUpdateSpec) GetRegenerateViewStorageAcceleratorDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.RegenerateViewStorageAcceleratorDays) {
		return nil, false
	}
	return o.RegenerateViewStorageAcceleratorDays, true
}

// HasRegenerateViewStorageAcceleratorDays returns a boolean if a field has been set.
func (o *DesktopPoolViewStorageAcceleratorSettingsUpdateSpec) HasRegenerateViewStorageAcceleratorDays() bool {
	if o != nil && !IsNil(o.RegenerateViewStorageAcceleratorDays) {
		return true
	}

	return false
}

// SetRegenerateViewStorageAcceleratorDays gets a reference to the given int32 and assigns it to the RegenerateViewStorageAcceleratorDays field.
func (o *DesktopPoolViewStorageAcceleratorSettingsUpdateSpec) SetRegenerateViewStorageAcceleratorDays(v int32) {
	o.RegenerateViewStorageAcceleratorDays = &v
}

// GetUseViewStorageAccelerator returns the UseViewStorageAccelerator field value if set, zero value otherwise.
func (o *DesktopPoolViewStorageAcceleratorSettingsUpdateSpec) GetUseViewStorageAccelerator() bool {
	if o == nil || IsNil(o.UseViewStorageAccelerator) {
		var ret bool
		return ret
	}
	return *o.UseViewStorageAccelerator
}

// GetUseViewStorageAcceleratorOk returns a tuple with the UseViewStorageAccelerator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolViewStorageAcceleratorSettingsUpdateSpec) GetUseViewStorageAcceleratorOk() (*bool, bool) {
	if o == nil || IsNil(o.UseViewStorageAccelerator) {
		return nil, false
	}
	return o.UseViewStorageAccelerator, true
}

// HasUseViewStorageAccelerator returns a boolean if a field has been set.
func (o *DesktopPoolViewStorageAcceleratorSettingsUpdateSpec) HasUseViewStorageAccelerator() bool {
	if o != nil && !IsNil(o.UseViewStorageAccelerator) {
		return true
	}

	return false
}

// SetUseViewStorageAccelerator gets a reference to the given bool and assigns it to the UseViewStorageAccelerator field.
func (o *DesktopPoolViewStorageAcceleratorSettingsUpdateSpec) SetUseViewStorageAccelerator(v bool) {
	o.UseViewStorageAccelerator = &v
}

func (o DesktopPoolViewStorageAcceleratorSettingsUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DesktopPoolViewStorageAcceleratorSettingsUpdateSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlackoutTimes) {
		toSerialize["blackout_times"] = o.BlackoutTimes
	}
	if !IsNil(o.RegenerateViewStorageAcceleratorDays) {
		toSerialize["regenerate_view_storage_accelerator_days"] = o.RegenerateViewStorageAcceleratorDays
	}
	if !IsNil(o.UseViewStorageAccelerator) {
		toSerialize["use_view_storage_accelerator"] = o.UseViewStorageAccelerator
	}
	return toSerialize, nil
}

type NullableDesktopPoolViewStorageAcceleratorSettingsUpdateSpec struct {
	value *DesktopPoolViewStorageAcceleratorSettingsUpdateSpec
	isSet bool
}

func (v NullableDesktopPoolViewStorageAcceleratorSettingsUpdateSpec) Get() *DesktopPoolViewStorageAcceleratorSettingsUpdateSpec {
	return v.value
}

func (v *NullableDesktopPoolViewStorageAcceleratorSettingsUpdateSpec) Set(val *DesktopPoolViewStorageAcceleratorSettingsUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableDesktopPoolViewStorageAcceleratorSettingsUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableDesktopPoolViewStorageAcceleratorSettingsUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDesktopPoolViewStorageAcceleratorSettingsUpdateSpec(val *DesktopPoolViewStorageAcceleratorSettingsUpdateSpec) *NullableDesktopPoolViewStorageAcceleratorSettingsUpdateSpec {
	return &NullableDesktopPoolViewStorageAcceleratorSettingsUpdateSpec{value: val, isSet: true}
}

func (v NullableDesktopPoolViewStorageAcceleratorSettingsUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDesktopPoolViewStorageAcceleratorSettingsUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


