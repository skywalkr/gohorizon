/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// NetworkInterfaceCardInfo Information related to network interface card.
type NetworkInterfaceCardInfo struct {
	// Unique ID representing the network interface card.
	Id *string `json:"id,omitempty"`
	// Network interface card MAC address.
	MacAddress *string `json:"mac_address,omitempty"`
	// Network interface card name.
	Name *string `json:"name,omitempty"`
}

// NewNetworkInterfaceCardInfo instantiates a new NetworkInterfaceCardInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkInterfaceCardInfo() *NetworkInterfaceCardInfo {
	this := NetworkInterfaceCardInfo{}
	return &this
}

// NewNetworkInterfaceCardInfoWithDefaults instantiates a new NetworkInterfaceCardInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkInterfaceCardInfoWithDefaults() *NetworkInterfaceCardInfo {
	this := NetworkInterfaceCardInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NetworkInterfaceCardInfo) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceCardInfo) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NetworkInterfaceCardInfo) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NetworkInterfaceCardInfo) SetId(v string) {
	o.Id = &v
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *NetworkInterfaceCardInfo) GetMacAddress() string {
	if o == nil || o.MacAddress == nil {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceCardInfo) GetMacAddressOk() (*string, bool) {
	if o == nil || o.MacAddress == nil {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *NetworkInterfaceCardInfo) HasMacAddress() bool {
	if o != nil && o.MacAddress != nil {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *NetworkInterfaceCardInfo) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NetworkInterfaceCardInfo) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceCardInfo) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NetworkInterfaceCardInfo) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NetworkInterfaceCardInfo) SetName(v string) {
	o.Name = &v
}

func (o NetworkInterfaceCardInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.MacAddress != nil {
		toSerialize["mac_address"] = o.MacAddress
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkInterfaceCardInfo struct {
	value *NetworkInterfaceCardInfo
	isSet bool
}

func (v NullableNetworkInterfaceCardInfo) Get() *NetworkInterfaceCardInfo {
	return v.value
}

func (v *NullableNetworkInterfaceCardInfo) Set(val *NetworkInterfaceCardInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkInterfaceCardInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkInterfaceCardInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkInterfaceCardInfo(val *NetworkInterfaceCardInfo) *NullableNetworkInterfaceCardInfo {
	return &NullableNetworkInterfaceCardInfo{value: val, isSet: true}
}

func (v NullableNetworkInterfaceCardInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkInterfaceCardInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
