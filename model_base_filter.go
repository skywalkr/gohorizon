/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the BaseFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseFilter{}

// BaseFilter struct for BaseFilter
type BaseFilter struct {
	Type *string `json:"type,omitempty"`
}

// NewBaseFilter instantiates a new BaseFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseFilter() *BaseFilter {
	this := BaseFilter{}
	return &this
}

// NewBaseFilterWithDefaults instantiates a new BaseFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseFilterWithDefaults() *BaseFilter {
	this := BaseFilter{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BaseFilter) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseFilter) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BaseFilter) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *BaseFilter) SetType(v string) {
	o.Type = &v
}

func (o BaseFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableBaseFilter struct {
	value *BaseFilter
	isSet bool
}

func (v NullableBaseFilter) Get() *BaseFilter {
	return v.value
}

func (v *NullableBaseFilter) Set(val *BaseFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseFilter(val *BaseFilter) *NullableBaseFilter {
	return &NullableBaseFilter{value: val, isSet: true}
}

func (v NullableBaseFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


