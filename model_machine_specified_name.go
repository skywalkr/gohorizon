/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// MachineSpecifiedName Information required to add a machine to a desktop pool.
type MachineSpecifiedName struct {
	// Name of the machine.
	Name string `json:"name"`
	// The unique SID of the user assigned to the machine.
	UserId *string `json:"user_id,omitempty"`
}

// NewMachineSpecifiedName instantiates a new MachineSpecifiedName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMachineSpecifiedName(name string) *MachineSpecifiedName {
	this := MachineSpecifiedName{}
	this.Name = name
	return &this
}

// NewMachineSpecifiedNameWithDefaults instantiates a new MachineSpecifiedName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMachineSpecifiedNameWithDefaults() *MachineSpecifiedName {
	this := MachineSpecifiedName{}
	return &this
}

// GetName returns the Name field value
func (o *MachineSpecifiedName) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MachineSpecifiedName) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MachineSpecifiedName) SetName(v string) {
	o.Name = v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *MachineSpecifiedName) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineSpecifiedName) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *MachineSpecifiedName) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *MachineSpecifiedName) SetUserId(v string) {
	o.UserId = &v
}

func (o MachineSpecifiedName) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.UserId != nil {
		toSerialize["user_id"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableMachineSpecifiedName struct {
	value *MachineSpecifiedName
	isSet bool
}

func (v NullableMachineSpecifiedName) Get() *MachineSpecifiedName {
	return v.value
}

func (v *NullableMachineSpecifiedName) Set(val *MachineSpecifiedName) {
	v.value = val
	v.isSet = true
}

func (v NullableMachineSpecifiedName) IsSet() bool {
	return v.isSet
}

func (v *NullableMachineSpecifiedName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMachineSpecifiedName(val *MachineSpecifiedName) *NullableMachineSpecifiedName {
	return &NullableMachineSpecifiedName{value: val, isSet: true}
}

func (v NullableMachineSpecifiedName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMachineSpecifiedName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
