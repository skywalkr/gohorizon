/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the ConnectionServerJWTInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionServerJWTInfo{}

// ConnectionServerJWTInfo Information related to connection server JWT authentication settings.
type ConnectionServerJWTInfo struct {
	// List of configured JWT authenticators for this Connection Server.
	JwtAuthenticatorIds []string `json:"jwt_authenticator_ids,omitempty"`
	// JWT support option. * DISABLED: Indicates that the JWT support is disabled. * MULTI_ENABLED: Indicates that the JWT multi-auth support is enabled. * MULTI_REQUIRED: Indicates that the JWT multi-auth support is mandatory.
	JwtSupport *string `json:"jwt_support,omitempty"`
}

// NewConnectionServerJWTInfo instantiates a new ConnectionServerJWTInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionServerJWTInfo() *ConnectionServerJWTInfo {
	this := ConnectionServerJWTInfo{}
	return &this
}

// NewConnectionServerJWTInfoWithDefaults instantiates a new ConnectionServerJWTInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionServerJWTInfoWithDefaults() *ConnectionServerJWTInfo {
	this := ConnectionServerJWTInfo{}
	return &this
}

// GetJwtAuthenticatorIds returns the JwtAuthenticatorIds field value if set, zero value otherwise.
func (o *ConnectionServerJWTInfo) GetJwtAuthenticatorIds() []string {
	if o == nil || IsNil(o.JwtAuthenticatorIds) {
		var ret []string
		return ret
	}
	return o.JwtAuthenticatorIds
}

// GetJwtAuthenticatorIdsOk returns a tuple with the JwtAuthenticatorIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerJWTInfo) GetJwtAuthenticatorIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.JwtAuthenticatorIds) {
		return nil, false
	}
	return o.JwtAuthenticatorIds, true
}

// HasJwtAuthenticatorIds returns a boolean if a field has been set.
func (o *ConnectionServerJWTInfo) HasJwtAuthenticatorIds() bool {
	if o != nil && !IsNil(o.JwtAuthenticatorIds) {
		return true
	}

	return false
}

// SetJwtAuthenticatorIds gets a reference to the given []string and assigns it to the JwtAuthenticatorIds field.
func (o *ConnectionServerJWTInfo) SetJwtAuthenticatorIds(v []string) {
	o.JwtAuthenticatorIds = v
}

// GetJwtSupport returns the JwtSupport field value if set, zero value otherwise.
func (o *ConnectionServerJWTInfo) GetJwtSupport() string {
	if o == nil || IsNil(o.JwtSupport) {
		var ret string
		return ret
	}
	return *o.JwtSupport
}

// GetJwtSupportOk returns a tuple with the JwtSupport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerJWTInfo) GetJwtSupportOk() (*string, bool) {
	if o == nil || IsNil(o.JwtSupport) {
		return nil, false
	}
	return o.JwtSupport, true
}

// HasJwtSupport returns a boolean if a field has been set.
func (o *ConnectionServerJWTInfo) HasJwtSupport() bool {
	if o != nil && !IsNil(o.JwtSupport) {
		return true
	}

	return false
}

// SetJwtSupport gets a reference to the given string and assigns it to the JwtSupport field.
func (o *ConnectionServerJWTInfo) SetJwtSupport(v string) {
	o.JwtSupport = &v
}

func (o ConnectionServerJWTInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionServerJWTInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.JwtAuthenticatorIds) {
		toSerialize["jwt_authenticator_ids"] = o.JwtAuthenticatorIds
	}
	if !IsNil(o.JwtSupport) {
		toSerialize["jwt_support"] = o.JwtSupport
	}
	return toSerialize, nil
}

type NullableConnectionServerJWTInfo struct {
	value *ConnectionServerJWTInfo
	isSet bool
}

func (v NullableConnectionServerJWTInfo) Get() *ConnectionServerJWTInfo {
	return v.value
}

func (v *NullableConnectionServerJWTInfo) Set(val *ConnectionServerJWTInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionServerJWTInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionServerJWTInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionServerJWTInfo(val *ConnectionServerJWTInfo) *NullableConnectionServerJWTInfo {
	return &NullableConnectionServerJWTInfo{value: val, isSet: true}
}

func (v NullableConnectionServerJWTInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionServerJWTInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


