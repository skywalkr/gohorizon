/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the ConnectionServerInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionServerInfo{}

// ConnectionServerInfo Information related to Connection Server.
type ConnectionServerInfo struct {
	// Unique Id of the Connection Server.
	Id *string `json:"id,omitempty"`
	JwtInfo *ConnectionServerJWTInfo `json:"jwt_info,omitempty"`
}

// NewConnectionServerInfo instantiates a new ConnectionServerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionServerInfo() *ConnectionServerInfo {
	this := ConnectionServerInfo{}
	return &this
}

// NewConnectionServerInfoWithDefaults instantiates a new ConnectionServerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionServerInfoWithDefaults() *ConnectionServerInfo {
	this := ConnectionServerInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConnectionServerInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConnectionServerInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ConnectionServerInfo) SetId(v string) {
	o.Id = &v
}

// GetJwtInfo returns the JwtInfo field value if set, zero value otherwise.
func (o *ConnectionServerInfo) GetJwtInfo() ConnectionServerJWTInfo {
	if o == nil || IsNil(o.JwtInfo) {
		var ret ConnectionServerJWTInfo
		return ret
	}
	return *o.JwtInfo
}

// GetJwtInfoOk returns a tuple with the JwtInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfo) GetJwtInfoOk() (*ConnectionServerJWTInfo, bool) {
	if o == nil || IsNil(o.JwtInfo) {
		return nil, false
	}
	return o.JwtInfo, true
}

// HasJwtInfo returns a boolean if a field has been set.
func (o *ConnectionServerInfo) HasJwtInfo() bool {
	if o != nil && !IsNil(o.JwtInfo) {
		return true
	}

	return false
}

// SetJwtInfo gets a reference to the given ConnectionServerJWTInfo and assigns it to the JwtInfo field.
func (o *ConnectionServerInfo) SetJwtInfo(v ConnectionServerJWTInfo) {
	o.JwtInfo = &v
}

func (o ConnectionServerInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionServerInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.JwtInfo) {
		toSerialize["jwt_info"] = o.JwtInfo
	}
	return toSerialize, nil
}

type NullableConnectionServerInfo struct {
	value *ConnectionServerInfo
	isSet bool
}

func (v NullableConnectionServerInfo) Get() *ConnectionServerInfo {
	return v.value
}

func (v *NullableConnectionServerInfo) Set(val *ConnectionServerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionServerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionServerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionServerInfo(val *ConnectionServerInfo) *NullableConnectionServerInfo {
	return &NullableConnectionServerInfo{value: val, isSet: true}
}

func (v NullableConnectionServerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionServerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


