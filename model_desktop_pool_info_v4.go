/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// DesktopPoolInfoV4 Information related to Desktop Pool.<br>List API returning this information can use search filter query to filter on specific fields supported by filters.<br>Supported Filters: 'And', 'Or', 'Equals', 'StartsWith', 'Contains' and 'EndsWith'.<br>See the field description to know the filter types it supports.
type DesktopPoolInfoV4 struct {
	// Access groups can organize the entities (like application pools, desktop pools) in the organization. They can also be used for delegated administration.<br>Supported Filters: 'Equals'.
	AccessGroupId *string `json:"access_group_id,omitempty"`
	// Applicable To: Dedicated manual and automated desktop pools (except linked clone pools) with manual user assignment.<br>Whether assignment of multiple users to a single machine is allowed.<br>Supported Filters: 'Equals'.
	AllowMultipleUserAssignments *bool `json:"allow_multiple_user_assignments,omitempty"`
	// Applicable To: RDS desktop pools.<br>Whether multiple sessions are allowed per user for this pool.For other desktop pools, allow_multiple_sessions_per_user in sessionSettings will be applicable.
	AllowRdsPoolMultiSessionPerUser *bool `json:"allow_rds_pool_multi_session_per_user,omitempty"`
	// Applicable To: Dedicated manual and automated desktop pools.<br>Automatic assignment of a user the first time they access the machine.<br>Supported Filters: 'Equals'.
	AutomaticUserAssignment *bool `json:"automatic_user_assignment,omitempty"`
	// Name of the category folder in the user's OS containing a shortcut to the desktop pool.Will be unset if the desktop does not belong to a category.This property defines valid folder names with a max length of 64 characters and up to 4 subdirectory levels.The subdirectories can be specified using a backslash, e.g. (dir1\\dir2\\dir3\\dir4). Folder names can't start orend with a backslash nor can there be 2 or more backslashes together. Combinations such as(\\dir1, dir1\\dir2\\, dir1\\\\dir2, dir1\\\\\\dir2) are invalid. The windows reserved keywords(CON, PRN, NUL, AUX, COM1 - COM9, LPT1 - LPT9 etc.) are not allowed in subdirectory names.
	CategoryFolderName *string `json:"category_folder_name,omitempty"`
	// Indicates whether this desktop is assigned to a workspace in Horizon Cloud Services.<br>Supported Filters: 'Equals'.
	CloudAssigned *bool `json:"cloud_assigned,omitempty"`
	// Indicates whether the RDS desktop pool is cloud brokered. This property will be unset for non RDS desktop pools.<br>Supported Filters: 'Equals'.
	CloudBrokered *bool `json:"cloud_brokered,omitempty"`
	// Indicates whether this desktop is managed by Horizon Cloud Services.This can be false only when cloud_assigned is false.<br>Supported Filters: 'Equals'.
	CloudManaged *bool `json:"cloud_managed,omitempty"`
	// List of tags for which the access to the desktop pool is restricted to.No list indicates that desktop pool can be accessed from any connection server.
	CsRestrictionTags     *[]string                         `json:"cs_restriction_tags,omitempty"`
	CustomizationSettings *DesktopPoolCustomizationSettings `json:"customization_settings,omitempty"`
	// Indicates whether the desktop pool is in the process of being deleted.Default value is false.<br>Supported Filters: 'Equals'.
	DeleteInProgress *bool `json:"delete_in_progress,omitempty"`
	// Description of the Desktop Pool. The maximum length is 1024 characters.<br>Supported Filters: 'Equals', 'StartsWith' and 'Contains'.
	Description *string `json:"description,omitempty"`
	// Applicable To: Dedicated manual and automated desktop pools.<br>Indicates whether users should see the hostname of the machine assigned to them instead of displayName when they connect using View Client. If no machine is assigned to the user then \"displayName (No machine assigned)\" will be displayed in the client.<br>Supported Filters: 'Equals'.
	DisplayAssignedMachineName *bool `json:"display_assigned_machine_name,omitempty"`
	// Decides the visibility of the machine alias to the user.
	DisplayMachineAlias *bool `json:"display_machine_alias,omitempty"`
	// Display name of the Desktop Pool. The maximum length is 256 characters.<br>Supported Filters: 'Equals', 'StartsWith' and 'Contains'.
	DisplayName             *string                             `json:"display_name,omitempty"`
	DisplayProtocolSettings *DesktopPoolDisplayProtocolSettings `json:"display_protocol_settings,omitempty"`
	// Client restrictions to be applied to the desktop pool.<br>Supported Filters: 'Equals'.
	EnableClientRestrictions *bool `json:"enable_client_restrictions,omitempty"`
	// Applicable To: Automated desktop pools.<br>Whether provisioning is enabled.<br>Supported Filters: 'Equals'.
	EnableProvisioning *bool `json:"enable_provisioning,omitempty"`
	// Indicates whether the Desktop Pool is enabled for brokering.<br>Supported Filters: 'Equals'.
	Enabled *bool `json:"enabled,omitempty"`
	// Applicable To: RDS desktop pools.<br>Farm needed to create RDS desktop pool.<br>Supported Filters: 'Equals'.
	FarmId *string `json:"farm_id,omitempty"`
	// Global desktop entitlement for this desktop pool. Caller should have permission to FEDERATED_LDAP_VIEW privilege for this field to be populated or to use in filter.<br>Supported Filters: 'Equals'.
	GlobalDesktopEntitlementId *string `json:"global_desktop_entitlement_id,omitempty"`
	// Unique ID representing Desktop Pool.<br>Supported Filters: 'Equals'.
	Id *string `json:"id,omitempty"`
	// Applicable To: Automated desktop pools.<br>Source of image used in the desktop pool.<br>Supported Filters: 'Equals'. * VIRTUAL_CENTER: Image was created in virtual center. * IMAGE_CATALOG: Image was created in image catalog.
	ImageSource *string `json:"image_source,omitempty"`
	// Name of the Desktop Pool. The maximum length is 64 characters.<br>Supported Filters: 'Equals', 'StartsWith' and 'Contains'.
	Name *string `json:"name,omitempty"`
	// Applicable To: Automated desktop pools.<br>Network interface card settings for machines provisioned for this desktop. A NIC may appear at most once in these settings and must be present on this desktop pool's parent's snapshot or template. Not all NICs need be configured. Any that are not will use default settings.
	Nics                   *[]DesktopPoolNetworkInterfaceCardSettings      `json:"nics,omitempty"`
	PatternNamingSettings  *DesktopPoolVirtualMachinePatternNamingSettings `json:"pattern_naming_settings,omitempty"`
	ProvisioningSettings   *DesktopPoolProvisioningSettings                `json:"provisioning_settings,omitempty"`
	ProvisioningStatusData *DesktopPoolProvisioningStatusData              `json:"provisioning_status_data,omitempty"`
	SessionSettings        *DesktopPoolSessionSettingsV2                   `json:"session_settings,omitempty"`
	// Supported session types for this desktop pool. If application sessions are selected to besupported then this desktop pool can be used for application pool creation. This will beuseful when the machines in the pool support application remoting. Default value of DESKTOP.<br>Supported Filters: 'Equals'. * DESKTOP: Only desktop sessions are supported. * APPLICATION: Only application sessions are supported. * DESKTOP_AND_APPLICATION: Both desktop and application sessions are supported.
	SessionType *string `json:"session_type,omitempty"`
	// Locations of the category folder in the user's OS containing a shortcut to the desktop pool.The value will be present if categoryFolderName is set.
	ShortcutLocations *[]string `json:"shortcut_locations,omitempty"`
	// Source of the Machines in this Desktop Pool.<br>Supported Filters: 'Equals'. * INSTANT_CLONE: The Desktop Pool uses instant clone technology for provisioning the machines.Applicable for AUTOMATED type desktop pools. * LINKED_CLONE: The Desktop Pool uses linked clone technology for provisioning the machines.Applicable for AUTOMATED type desktop pools. * VIRTUAL_CENTER: The Desktop Pool uses Virtual Center as source for provisioning the machines.Applicable for AUTOMATED and MANUAL type desktop pools. * RDS: The Desktop Pool is backed by Farm. The Farm used in this Desktop Pool can be of any Source. * UNMANAGED: The Desktop Pool holds the non-vCenter source machines that includes physical computers,blade PCs and non-vCenter servers. Applicable for MANUAL type desktop pools.
	Source                 *string                                           `json:"source,omitempty"`
	SpecificNamingSettings *DesktopPoolVirtualMachineSpecifiedNamingSettings `json:"specific_naming_settings,omitempty"`
	// Applicable To: Automated desktop pools.<br>Whether provisioning on all machines stops on error.
	StopProvisioningOnError *bool                       `json:"stop_provisioning_on_error,omitempty"`
	StorageSettings         *DesktopPoolStorageSettings `json:"storage_settings,omitempty"`
	// Applicable To: Manual and automated desktop pools.<br>The transparent page sharing scope. * VM: Inter-VM page sharing is not permitted. * DESKTOP_POOL: Inter-VM page sharing among VMs belonging to the same Desktop pool is permitted. * POD: Inter-VM page sharing among VMs belonging to the same Pod is permitted. * GLOBAL: Inter-VM page sharing among all VMs on the same host is permitted.
	TransparentPageSharingScope *string `json:"transparent_page_sharing_scope,omitempty"`
	// Type of the desktop pool.<br>Supported Filters: 'Equals'. * AUTOMATED: Automated Desktop Pool. * MANUAL: Manual Desktop Pool. * RDS: RDS Desktop Pool.
	Type *string `json:"type,omitempty"`
	// Applicable To: Manual and automated desktop pools.<br>User assignment scheme.<br>Supported Filters: 'Equals'. * DEDICATED: With dedicated assignment, a user returns to the same machine at each session. * FLOATING: With floating assignment, a user may return to one of the available machines for the next session.
	UserAssignment *string `json:"user_assignment,omitempty"`
	// Applicable To: Manual and automated desktop pools.<br>Virtual Center that manages the machines of the desktop pool.<br>Supported Filters: 'Equals'.
	VcenterId                      *string                                    `json:"vcenter_id,omitempty"`
	ViewStorageAcceleratorSettings *DesktopPoolViewStorageAcceleratorSettings `json:"view_storage_accelerator_settings,omitempty"`
}

// NewDesktopPoolInfoV4 instantiates a new DesktopPoolInfoV4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDesktopPoolInfoV4() *DesktopPoolInfoV4 {
	this := DesktopPoolInfoV4{}
	return &this
}

// NewDesktopPoolInfoV4WithDefaults instantiates a new DesktopPoolInfoV4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDesktopPoolInfoV4WithDefaults() *DesktopPoolInfoV4 {
	this := DesktopPoolInfoV4{}
	return &this
}

// GetAccessGroupId returns the AccessGroupId field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetAccessGroupId() string {
	if o == nil || o.AccessGroupId == nil {
		var ret string
		return ret
	}
	return *o.AccessGroupId
}

// GetAccessGroupIdOk returns a tuple with the AccessGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetAccessGroupIdOk() (*string, bool) {
	if o == nil || o.AccessGroupId == nil {
		return nil, false
	}
	return o.AccessGroupId, true
}

// HasAccessGroupId returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasAccessGroupId() bool {
	if o != nil && o.AccessGroupId != nil {
		return true
	}

	return false
}

// SetAccessGroupId gets a reference to the given string and assigns it to the AccessGroupId field.
func (o *DesktopPoolInfoV4) SetAccessGroupId(v string) {
	o.AccessGroupId = &v
}

// GetAllowMultipleUserAssignments returns the AllowMultipleUserAssignments field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetAllowMultipleUserAssignments() bool {
	if o == nil || o.AllowMultipleUserAssignments == nil {
		var ret bool
		return ret
	}
	return *o.AllowMultipleUserAssignments
}

// GetAllowMultipleUserAssignmentsOk returns a tuple with the AllowMultipleUserAssignments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetAllowMultipleUserAssignmentsOk() (*bool, bool) {
	if o == nil || o.AllowMultipleUserAssignments == nil {
		return nil, false
	}
	return o.AllowMultipleUserAssignments, true
}

// HasAllowMultipleUserAssignments returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasAllowMultipleUserAssignments() bool {
	if o != nil && o.AllowMultipleUserAssignments != nil {
		return true
	}

	return false
}

// SetAllowMultipleUserAssignments gets a reference to the given bool and assigns it to the AllowMultipleUserAssignments field.
func (o *DesktopPoolInfoV4) SetAllowMultipleUserAssignments(v bool) {
	o.AllowMultipleUserAssignments = &v
}

// GetAllowRdsPoolMultiSessionPerUser returns the AllowRdsPoolMultiSessionPerUser field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetAllowRdsPoolMultiSessionPerUser() bool {
	if o == nil || o.AllowRdsPoolMultiSessionPerUser == nil {
		var ret bool
		return ret
	}
	return *o.AllowRdsPoolMultiSessionPerUser
}

// GetAllowRdsPoolMultiSessionPerUserOk returns a tuple with the AllowRdsPoolMultiSessionPerUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetAllowRdsPoolMultiSessionPerUserOk() (*bool, bool) {
	if o == nil || o.AllowRdsPoolMultiSessionPerUser == nil {
		return nil, false
	}
	return o.AllowRdsPoolMultiSessionPerUser, true
}

// HasAllowRdsPoolMultiSessionPerUser returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasAllowRdsPoolMultiSessionPerUser() bool {
	if o != nil && o.AllowRdsPoolMultiSessionPerUser != nil {
		return true
	}

	return false
}

// SetAllowRdsPoolMultiSessionPerUser gets a reference to the given bool and assigns it to the AllowRdsPoolMultiSessionPerUser field.
func (o *DesktopPoolInfoV4) SetAllowRdsPoolMultiSessionPerUser(v bool) {
	o.AllowRdsPoolMultiSessionPerUser = &v
}

// GetAutomaticUserAssignment returns the AutomaticUserAssignment field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetAutomaticUserAssignment() bool {
	if o == nil || o.AutomaticUserAssignment == nil {
		var ret bool
		return ret
	}
	return *o.AutomaticUserAssignment
}

// GetAutomaticUserAssignmentOk returns a tuple with the AutomaticUserAssignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetAutomaticUserAssignmentOk() (*bool, bool) {
	if o == nil || o.AutomaticUserAssignment == nil {
		return nil, false
	}
	return o.AutomaticUserAssignment, true
}

// HasAutomaticUserAssignment returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasAutomaticUserAssignment() bool {
	if o != nil && o.AutomaticUserAssignment != nil {
		return true
	}

	return false
}

// SetAutomaticUserAssignment gets a reference to the given bool and assigns it to the AutomaticUserAssignment field.
func (o *DesktopPoolInfoV4) SetAutomaticUserAssignment(v bool) {
	o.AutomaticUserAssignment = &v
}

// GetCategoryFolderName returns the CategoryFolderName field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetCategoryFolderName() string {
	if o == nil || o.CategoryFolderName == nil {
		var ret string
		return ret
	}
	return *o.CategoryFolderName
}

// GetCategoryFolderNameOk returns a tuple with the CategoryFolderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetCategoryFolderNameOk() (*string, bool) {
	if o == nil || o.CategoryFolderName == nil {
		return nil, false
	}
	return o.CategoryFolderName, true
}

// HasCategoryFolderName returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasCategoryFolderName() bool {
	if o != nil && o.CategoryFolderName != nil {
		return true
	}

	return false
}

// SetCategoryFolderName gets a reference to the given string and assigns it to the CategoryFolderName field.
func (o *DesktopPoolInfoV4) SetCategoryFolderName(v string) {
	o.CategoryFolderName = &v
}

// GetCloudAssigned returns the CloudAssigned field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetCloudAssigned() bool {
	if o == nil || o.CloudAssigned == nil {
		var ret bool
		return ret
	}
	return *o.CloudAssigned
}

// GetCloudAssignedOk returns a tuple with the CloudAssigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetCloudAssignedOk() (*bool, bool) {
	if o == nil || o.CloudAssigned == nil {
		return nil, false
	}
	return o.CloudAssigned, true
}

// HasCloudAssigned returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasCloudAssigned() bool {
	if o != nil && o.CloudAssigned != nil {
		return true
	}

	return false
}

// SetCloudAssigned gets a reference to the given bool and assigns it to the CloudAssigned field.
func (o *DesktopPoolInfoV4) SetCloudAssigned(v bool) {
	o.CloudAssigned = &v
}

// GetCloudBrokered returns the CloudBrokered field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetCloudBrokered() bool {
	if o == nil || o.CloudBrokered == nil {
		var ret bool
		return ret
	}
	return *o.CloudBrokered
}

// GetCloudBrokeredOk returns a tuple with the CloudBrokered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetCloudBrokeredOk() (*bool, bool) {
	if o == nil || o.CloudBrokered == nil {
		return nil, false
	}
	return o.CloudBrokered, true
}

// HasCloudBrokered returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasCloudBrokered() bool {
	if o != nil && o.CloudBrokered != nil {
		return true
	}

	return false
}

// SetCloudBrokered gets a reference to the given bool and assigns it to the CloudBrokered field.
func (o *DesktopPoolInfoV4) SetCloudBrokered(v bool) {
	o.CloudBrokered = &v
}

// GetCloudManaged returns the CloudManaged field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetCloudManaged() bool {
	if o == nil || o.CloudManaged == nil {
		var ret bool
		return ret
	}
	return *o.CloudManaged
}

// GetCloudManagedOk returns a tuple with the CloudManaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetCloudManagedOk() (*bool, bool) {
	if o == nil || o.CloudManaged == nil {
		return nil, false
	}
	return o.CloudManaged, true
}

// HasCloudManaged returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasCloudManaged() bool {
	if o != nil && o.CloudManaged != nil {
		return true
	}

	return false
}

// SetCloudManaged gets a reference to the given bool and assigns it to the CloudManaged field.
func (o *DesktopPoolInfoV4) SetCloudManaged(v bool) {
	o.CloudManaged = &v
}

// GetCsRestrictionTags returns the CsRestrictionTags field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetCsRestrictionTags() []string {
	if o == nil || o.CsRestrictionTags == nil {
		var ret []string
		return ret
	}
	return *o.CsRestrictionTags
}

// GetCsRestrictionTagsOk returns a tuple with the CsRestrictionTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetCsRestrictionTagsOk() (*[]string, bool) {
	if o == nil || o.CsRestrictionTags == nil {
		return nil, false
	}
	return o.CsRestrictionTags, true
}

// HasCsRestrictionTags returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasCsRestrictionTags() bool {
	if o != nil && o.CsRestrictionTags != nil {
		return true
	}

	return false
}

// SetCsRestrictionTags gets a reference to the given []string and assigns it to the CsRestrictionTags field.
func (o *DesktopPoolInfoV4) SetCsRestrictionTags(v []string) {
	o.CsRestrictionTags = &v
}

// GetCustomizationSettings returns the CustomizationSettings field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetCustomizationSettings() DesktopPoolCustomizationSettings {
	if o == nil || o.CustomizationSettings == nil {
		var ret DesktopPoolCustomizationSettings
		return ret
	}
	return *o.CustomizationSettings
}

// GetCustomizationSettingsOk returns a tuple with the CustomizationSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetCustomizationSettingsOk() (*DesktopPoolCustomizationSettings, bool) {
	if o == nil || o.CustomizationSettings == nil {
		return nil, false
	}
	return o.CustomizationSettings, true
}

// HasCustomizationSettings returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasCustomizationSettings() bool {
	if o != nil && o.CustomizationSettings != nil {
		return true
	}

	return false
}

// SetCustomizationSettings gets a reference to the given DesktopPoolCustomizationSettings and assigns it to the CustomizationSettings field.
func (o *DesktopPoolInfoV4) SetCustomizationSettings(v DesktopPoolCustomizationSettings) {
	o.CustomizationSettings = &v
}

// GetDeleteInProgress returns the DeleteInProgress field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetDeleteInProgress() bool {
	if o == nil || o.DeleteInProgress == nil {
		var ret bool
		return ret
	}
	return *o.DeleteInProgress
}

// GetDeleteInProgressOk returns a tuple with the DeleteInProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetDeleteInProgressOk() (*bool, bool) {
	if o == nil || o.DeleteInProgress == nil {
		return nil, false
	}
	return o.DeleteInProgress, true
}

// HasDeleteInProgress returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasDeleteInProgress() bool {
	if o != nil && o.DeleteInProgress != nil {
		return true
	}

	return false
}

// SetDeleteInProgress gets a reference to the given bool and assigns it to the DeleteInProgress field.
func (o *DesktopPoolInfoV4) SetDeleteInProgress(v bool) {
	o.DeleteInProgress = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DesktopPoolInfoV4) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayAssignedMachineName returns the DisplayAssignedMachineName field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetDisplayAssignedMachineName() bool {
	if o == nil || o.DisplayAssignedMachineName == nil {
		var ret bool
		return ret
	}
	return *o.DisplayAssignedMachineName
}

// GetDisplayAssignedMachineNameOk returns a tuple with the DisplayAssignedMachineName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetDisplayAssignedMachineNameOk() (*bool, bool) {
	if o == nil || o.DisplayAssignedMachineName == nil {
		return nil, false
	}
	return o.DisplayAssignedMachineName, true
}

// HasDisplayAssignedMachineName returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasDisplayAssignedMachineName() bool {
	if o != nil && o.DisplayAssignedMachineName != nil {
		return true
	}

	return false
}

// SetDisplayAssignedMachineName gets a reference to the given bool and assigns it to the DisplayAssignedMachineName field.
func (o *DesktopPoolInfoV4) SetDisplayAssignedMachineName(v bool) {
	o.DisplayAssignedMachineName = &v
}

// GetDisplayMachineAlias returns the DisplayMachineAlias field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetDisplayMachineAlias() bool {
	if o == nil || o.DisplayMachineAlias == nil {
		var ret bool
		return ret
	}
	return *o.DisplayMachineAlias
}

// GetDisplayMachineAliasOk returns a tuple with the DisplayMachineAlias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetDisplayMachineAliasOk() (*bool, bool) {
	if o == nil || o.DisplayMachineAlias == nil {
		return nil, false
	}
	return o.DisplayMachineAlias, true
}

// HasDisplayMachineAlias returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasDisplayMachineAlias() bool {
	if o != nil && o.DisplayMachineAlias != nil {
		return true
	}

	return false
}

// SetDisplayMachineAlias gets a reference to the given bool and assigns it to the DisplayMachineAlias field.
func (o *DesktopPoolInfoV4) SetDisplayMachineAlias(v bool) {
	o.DisplayMachineAlias = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *DesktopPoolInfoV4) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDisplayProtocolSettings returns the DisplayProtocolSettings field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetDisplayProtocolSettings() DesktopPoolDisplayProtocolSettings {
	if o == nil || o.DisplayProtocolSettings == nil {
		var ret DesktopPoolDisplayProtocolSettings
		return ret
	}
	return *o.DisplayProtocolSettings
}

// GetDisplayProtocolSettingsOk returns a tuple with the DisplayProtocolSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetDisplayProtocolSettingsOk() (*DesktopPoolDisplayProtocolSettings, bool) {
	if o == nil || o.DisplayProtocolSettings == nil {
		return nil, false
	}
	return o.DisplayProtocolSettings, true
}

// HasDisplayProtocolSettings returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasDisplayProtocolSettings() bool {
	if o != nil && o.DisplayProtocolSettings != nil {
		return true
	}

	return false
}

// SetDisplayProtocolSettings gets a reference to the given DesktopPoolDisplayProtocolSettings and assigns it to the DisplayProtocolSettings field.
func (o *DesktopPoolInfoV4) SetDisplayProtocolSettings(v DesktopPoolDisplayProtocolSettings) {
	o.DisplayProtocolSettings = &v
}

// GetEnableClientRestrictions returns the EnableClientRestrictions field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetEnableClientRestrictions() bool {
	if o == nil || o.EnableClientRestrictions == nil {
		var ret bool
		return ret
	}
	return *o.EnableClientRestrictions
}

// GetEnableClientRestrictionsOk returns a tuple with the EnableClientRestrictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetEnableClientRestrictionsOk() (*bool, bool) {
	if o == nil || o.EnableClientRestrictions == nil {
		return nil, false
	}
	return o.EnableClientRestrictions, true
}

// HasEnableClientRestrictions returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasEnableClientRestrictions() bool {
	if o != nil && o.EnableClientRestrictions != nil {
		return true
	}

	return false
}

// SetEnableClientRestrictions gets a reference to the given bool and assigns it to the EnableClientRestrictions field.
func (o *DesktopPoolInfoV4) SetEnableClientRestrictions(v bool) {
	o.EnableClientRestrictions = &v
}

// GetEnableProvisioning returns the EnableProvisioning field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetEnableProvisioning() bool {
	if o == nil || o.EnableProvisioning == nil {
		var ret bool
		return ret
	}
	return *o.EnableProvisioning
}

// GetEnableProvisioningOk returns a tuple with the EnableProvisioning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetEnableProvisioningOk() (*bool, bool) {
	if o == nil || o.EnableProvisioning == nil {
		return nil, false
	}
	return o.EnableProvisioning, true
}

// HasEnableProvisioning returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasEnableProvisioning() bool {
	if o != nil && o.EnableProvisioning != nil {
		return true
	}

	return false
}

// SetEnableProvisioning gets a reference to the given bool and assigns it to the EnableProvisioning field.
func (o *DesktopPoolInfoV4) SetEnableProvisioning(v bool) {
	o.EnableProvisioning = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *DesktopPoolInfoV4) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetFarmId returns the FarmId field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetFarmId() string {
	if o == nil || o.FarmId == nil {
		var ret string
		return ret
	}
	return *o.FarmId
}

// GetFarmIdOk returns a tuple with the FarmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetFarmIdOk() (*string, bool) {
	if o == nil || o.FarmId == nil {
		return nil, false
	}
	return o.FarmId, true
}

// HasFarmId returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasFarmId() bool {
	if o != nil && o.FarmId != nil {
		return true
	}

	return false
}

// SetFarmId gets a reference to the given string and assigns it to the FarmId field.
func (o *DesktopPoolInfoV4) SetFarmId(v string) {
	o.FarmId = &v
}

// GetGlobalDesktopEntitlementId returns the GlobalDesktopEntitlementId field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetGlobalDesktopEntitlementId() string {
	if o == nil || o.GlobalDesktopEntitlementId == nil {
		var ret string
		return ret
	}
	return *o.GlobalDesktopEntitlementId
}

// GetGlobalDesktopEntitlementIdOk returns a tuple with the GlobalDesktopEntitlementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetGlobalDesktopEntitlementIdOk() (*string, bool) {
	if o == nil || o.GlobalDesktopEntitlementId == nil {
		return nil, false
	}
	return o.GlobalDesktopEntitlementId, true
}

// HasGlobalDesktopEntitlementId returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasGlobalDesktopEntitlementId() bool {
	if o != nil && o.GlobalDesktopEntitlementId != nil {
		return true
	}

	return false
}

// SetGlobalDesktopEntitlementId gets a reference to the given string and assigns it to the GlobalDesktopEntitlementId field.
func (o *DesktopPoolInfoV4) SetGlobalDesktopEntitlementId(v string) {
	o.GlobalDesktopEntitlementId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DesktopPoolInfoV4) SetId(v string) {
	o.Id = &v
}

// GetImageSource returns the ImageSource field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetImageSource() string {
	if o == nil || o.ImageSource == nil {
		var ret string
		return ret
	}
	return *o.ImageSource
}

// GetImageSourceOk returns a tuple with the ImageSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetImageSourceOk() (*string, bool) {
	if o == nil || o.ImageSource == nil {
		return nil, false
	}
	return o.ImageSource, true
}

// HasImageSource returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasImageSource() bool {
	if o != nil && o.ImageSource != nil {
		return true
	}

	return false
}

// SetImageSource gets a reference to the given string and assigns it to the ImageSource field.
func (o *DesktopPoolInfoV4) SetImageSource(v string) {
	o.ImageSource = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DesktopPoolInfoV4) SetName(v string) {
	o.Name = &v
}

// GetNics returns the Nics field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetNics() []DesktopPoolNetworkInterfaceCardSettings {
	if o == nil || o.Nics == nil {
		var ret []DesktopPoolNetworkInterfaceCardSettings
		return ret
	}
	return *o.Nics
}

// GetNicsOk returns a tuple with the Nics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetNicsOk() (*[]DesktopPoolNetworkInterfaceCardSettings, bool) {
	if o == nil || o.Nics == nil {
		return nil, false
	}
	return o.Nics, true
}

// HasNics returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasNics() bool {
	if o != nil && o.Nics != nil {
		return true
	}

	return false
}

// SetNics gets a reference to the given []DesktopPoolNetworkInterfaceCardSettings and assigns it to the Nics field.
func (o *DesktopPoolInfoV4) SetNics(v []DesktopPoolNetworkInterfaceCardSettings) {
	o.Nics = &v
}

// GetPatternNamingSettings returns the PatternNamingSettings field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetPatternNamingSettings() DesktopPoolVirtualMachinePatternNamingSettings {
	if o == nil || o.PatternNamingSettings == nil {
		var ret DesktopPoolVirtualMachinePatternNamingSettings
		return ret
	}
	return *o.PatternNamingSettings
}

// GetPatternNamingSettingsOk returns a tuple with the PatternNamingSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetPatternNamingSettingsOk() (*DesktopPoolVirtualMachinePatternNamingSettings, bool) {
	if o == nil || o.PatternNamingSettings == nil {
		return nil, false
	}
	return o.PatternNamingSettings, true
}

// HasPatternNamingSettings returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasPatternNamingSettings() bool {
	if o != nil && o.PatternNamingSettings != nil {
		return true
	}

	return false
}

// SetPatternNamingSettings gets a reference to the given DesktopPoolVirtualMachinePatternNamingSettings and assigns it to the PatternNamingSettings field.
func (o *DesktopPoolInfoV4) SetPatternNamingSettings(v DesktopPoolVirtualMachinePatternNamingSettings) {
	o.PatternNamingSettings = &v
}

// GetProvisioningSettings returns the ProvisioningSettings field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetProvisioningSettings() DesktopPoolProvisioningSettings {
	if o == nil || o.ProvisioningSettings == nil {
		var ret DesktopPoolProvisioningSettings
		return ret
	}
	return *o.ProvisioningSettings
}

// GetProvisioningSettingsOk returns a tuple with the ProvisioningSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetProvisioningSettingsOk() (*DesktopPoolProvisioningSettings, bool) {
	if o == nil || o.ProvisioningSettings == nil {
		return nil, false
	}
	return o.ProvisioningSettings, true
}

// HasProvisioningSettings returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasProvisioningSettings() bool {
	if o != nil && o.ProvisioningSettings != nil {
		return true
	}

	return false
}

// SetProvisioningSettings gets a reference to the given DesktopPoolProvisioningSettings and assigns it to the ProvisioningSettings field.
func (o *DesktopPoolInfoV4) SetProvisioningSettings(v DesktopPoolProvisioningSettings) {
	o.ProvisioningSettings = &v
}

// GetProvisioningStatusData returns the ProvisioningStatusData field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetProvisioningStatusData() DesktopPoolProvisioningStatusData {
	if o == nil || o.ProvisioningStatusData == nil {
		var ret DesktopPoolProvisioningStatusData
		return ret
	}
	return *o.ProvisioningStatusData
}

// GetProvisioningStatusDataOk returns a tuple with the ProvisioningStatusData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetProvisioningStatusDataOk() (*DesktopPoolProvisioningStatusData, bool) {
	if o == nil || o.ProvisioningStatusData == nil {
		return nil, false
	}
	return o.ProvisioningStatusData, true
}

// HasProvisioningStatusData returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasProvisioningStatusData() bool {
	if o != nil && o.ProvisioningStatusData != nil {
		return true
	}

	return false
}

// SetProvisioningStatusData gets a reference to the given DesktopPoolProvisioningStatusData and assigns it to the ProvisioningStatusData field.
func (o *DesktopPoolInfoV4) SetProvisioningStatusData(v DesktopPoolProvisioningStatusData) {
	o.ProvisioningStatusData = &v
}

// GetSessionSettings returns the SessionSettings field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetSessionSettings() DesktopPoolSessionSettingsV2 {
	if o == nil || o.SessionSettings == nil {
		var ret DesktopPoolSessionSettingsV2
		return ret
	}
	return *o.SessionSettings
}

// GetSessionSettingsOk returns a tuple with the SessionSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetSessionSettingsOk() (*DesktopPoolSessionSettingsV2, bool) {
	if o == nil || o.SessionSettings == nil {
		return nil, false
	}
	return o.SessionSettings, true
}

// HasSessionSettings returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasSessionSettings() bool {
	if o != nil && o.SessionSettings != nil {
		return true
	}

	return false
}

// SetSessionSettings gets a reference to the given DesktopPoolSessionSettingsV2 and assigns it to the SessionSettings field.
func (o *DesktopPoolInfoV4) SetSessionSettings(v DesktopPoolSessionSettingsV2) {
	o.SessionSettings = &v
}

// GetSessionType returns the SessionType field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetSessionType() string {
	if o == nil || o.SessionType == nil {
		var ret string
		return ret
	}
	return *o.SessionType
}

// GetSessionTypeOk returns a tuple with the SessionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetSessionTypeOk() (*string, bool) {
	if o == nil || o.SessionType == nil {
		return nil, false
	}
	return o.SessionType, true
}

// HasSessionType returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasSessionType() bool {
	if o != nil && o.SessionType != nil {
		return true
	}

	return false
}

// SetSessionType gets a reference to the given string and assigns it to the SessionType field.
func (o *DesktopPoolInfoV4) SetSessionType(v string) {
	o.SessionType = &v
}

// GetShortcutLocations returns the ShortcutLocations field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetShortcutLocations() []string {
	if o == nil || o.ShortcutLocations == nil {
		var ret []string
		return ret
	}
	return *o.ShortcutLocations
}

// GetShortcutLocationsOk returns a tuple with the ShortcutLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetShortcutLocationsOk() (*[]string, bool) {
	if o == nil || o.ShortcutLocations == nil {
		return nil, false
	}
	return o.ShortcutLocations, true
}

// HasShortcutLocations returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasShortcutLocations() bool {
	if o != nil && o.ShortcutLocations != nil {
		return true
	}

	return false
}

// SetShortcutLocations gets a reference to the given []string and assigns it to the ShortcutLocations field.
func (o *DesktopPoolInfoV4) SetShortcutLocations(v []string) {
	o.ShortcutLocations = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *DesktopPoolInfoV4) SetSource(v string) {
	o.Source = &v
}

// GetSpecificNamingSettings returns the SpecificNamingSettings field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetSpecificNamingSettings() DesktopPoolVirtualMachineSpecifiedNamingSettings {
	if o == nil || o.SpecificNamingSettings == nil {
		var ret DesktopPoolVirtualMachineSpecifiedNamingSettings
		return ret
	}
	return *o.SpecificNamingSettings
}

// GetSpecificNamingSettingsOk returns a tuple with the SpecificNamingSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetSpecificNamingSettingsOk() (*DesktopPoolVirtualMachineSpecifiedNamingSettings, bool) {
	if o == nil || o.SpecificNamingSettings == nil {
		return nil, false
	}
	return o.SpecificNamingSettings, true
}

// HasSpecificNamingSettings returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasSpecificNamingSettings() bool {
	if o != nil && o.SpecificNamingSettings != nil {
		return true
	}

	return false
}

// SetSpecificNamingSettings gets a reference to the given DesktopPoolVirtualMachineSpecifiedNamingSettings and assigns it to the SpecificNamingSettings field.
func (o *DesktopPoolInfoV4) SetSpecificNamingSettings(v DesktopPoolVirtualMachineSpecifiedNamingSettings) {
	o.SpecificNamingSettings = &v
}

// GetStopProvisioningOnError returns the StopProvisioningOnError field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetStopProvisioningOnError() bool {
	if o == nil || o.StopProvisioningOnError == nil {
		var ret bool
		return ret
	}
	return *o.StopProvisioningOnError
}

// GetStopProvisioningOnErrorOk returns a tuple with the StopProvisioningOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetStopProvisioningOnErrorOk() (*bool, bool) {
	if o == nil || o.StopProvisioningOnError == nil {
		return nil, false
	}
	return o.StopProvisioningOnError, true
}

// HasStopProvisioningOnError returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasStopProvisioningOnError() bool {
	if o != nil && o.StopProvisioningOnError != nil {
		return true
	}

	return false
}

// SetStopProvisioningOnError gets a reference to the given bool and assigns it to the StopProvisioningOnError field.
func (o *DesktopPoolInfoV4) SetStopProvisioningOnError(v bool) {
	o.StopProvisioningOnError = &v
}

// GetStorageSettings returns the StorageSettings field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetStorageSettings() DesktopPoolStorageSettings {
	if o == nil || o.StorageSettings == nil {
		var ret DesktopPoolStorageSettings
		return ret
	}
	return *o.StorageSettings
}

// GetStorageSettingsOk returns a tuple with the StorageSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetStorageSettingsOk() (*DesktopPoolStorageSettings, bool) {
	if o == nil || o.StorageSettings == nil {
		return nil, false
	}
	return o.StorageSettings, true
}

// HasStorageSettings returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasStorageSettings() bool {
	if o != nil && o.StorageSettings != nil {
		return true
	}

	return false
}

// SetStorageSettings gets a reference to the given DesktopPoolStorageSettings and assigns it to the StorageSettings field.
func (o *DesktopPoolInfoV4) SetStorageSettings(v DesktopPoolStorageSettings) {
	o.StorageSettings = &v
}

// GetTransparentPageSharingScope returns the TransparentPageSharingScope field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetTransparentPageSharingScope() string {
	if o == nil || o.TransparentPageSharingScope == nil {
		var ret string
		return ret
	}
	return *o.TransparentPageSharingScope
}

// GetTransparentPageSharingScopeOk returns a tuple with the TransparentPageSharingScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetTransparentPageSharingScopeOk() (*string, bool) {
	if o == nil || o.TransparentPageSharingScope == nil {
		return nil, false
	}
	return o.TransparentPageSharingScope, true
}

// HasTransparentPageSharingScope returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasTransparentPageSharingScope() bool {
	if o != nil && o.TransparentPageSharingScope != nil {
		return true
	}

	return false
}

// SetTransparentPageSharingScope gets a reference to the given string and assigns it to the TransparentPageSharingScope field.
func (o *DesktopPoolInfoV4) SetTransparentPageSharingScope(v string) {
	o.TransparentPageSharingScope = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DesktopPoolInfoV4) SetType(v string) {
	o.Type = &v
}

// GetUserAssignment returns the UserAssignment field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetUserAssignment() string {
	if o == nil || o.UserAssignment == nil {
		var ret string
		return ret
	}
	return *o.UserAssignment
}

// GetUserAssignmentOk returns a tuple with the UserAssignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetUserAssignmentOk() (*string, bool) {
	if o == nil || o.UserAssignment == nil {
		return nil, false
	}
	return o.UserAssignment, true
}

// HasUserAssignment returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasUserAssignment() bool {
	if o != nil && o.UserAssignment != nil {
		return true
	}

	return false
}

// SetUserAssignment gets a reference to the given string and assigns it to the UserAssignment field.
func (o *DesktopPoolInfoV4) SetUserAssignment(v string) {
	o.UserAssignment = &v
}

// GetVcenterId returns the VcenterId field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetVcenterId() string {
	if o == nil || o.VcenterId == nil {
		var ret string
		return ret
	}
	return *o.VcenterId
}

// GetVcenterIdOk returns a tuple with the VcenterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetVcenterIdOk() (*string, bool) {
	if o == nil || o.VcenterId == nil {
		return nil, false
	}
	return o.VcenterId, true
}

// HasVcenterId returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasVcenterId() bool {
	if o != nil && o.VcenterId != nil {
		return true
	}

	return false
}

// SetVcenterId gets a reference to the given string and assigns it to the VcenterId field.
func (o *DesktopPoolInfoV4) SetVcenterId(v string) {
	o.VcenterId = &v
}

// GetViewStorageAcceleratorSettings returns the ViewStorageAcceleratorSettings field value if set, zero value otherwise.
func (o *DesktopPoolInfoV4) GetViewStorageAcceleratorSettings() DesktopPoolViewStorageAcceleratorSettings {
	if o == nil || o.ViewStorageAcceleratorSettings == nil {
		var ret DesktopPoolViewStorageAcceleratorSettings
		return ret
	}
	return *o.ViewStorageAcceleratorSettings
}

// GetViewStorageAcceleratorSettingsOk returns a tuple with the ViewStorageAcceleratorSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolInfoV4) GetViewStorageAcceleratorSettingsOk() (*DesktopPoolViewStorageAcceleratorSettings, bool) {
	if o == nil || o.ViewStorageAcceleratorSettings == nil {
		return nil, false
	}
	return o.ViewStorageAcceleratorSettings, true
}

// HasViewStorageAcceleratorSettings returns a boolean if a field has been set.
func (o *DesktopPoolInfoV4) HasViewStorageAcceleratorSettings() bool {
	if o != nil && o.ViewStorageAcceleratorSettings != nil {
		return true
	}

	return false
}

// SetViewStorageAcceleratorSettings gets a reference to the given DesktopPoolViewStorageAcceleratorSettings and assigns it to the ViewStorageAcceleratorSettings field.
func (o *DesktopPoolInfoV4) SetViewStorageAcceleratorSettings(v DesktopPoolViewStorageAcceleratorSettings) {
	o.ViewStorageAcceleratorSettings = &v
}

func (o DesktopPoolInfoV4) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessGroupId != nil {
		toSerialize["access_group_id"] = o.AccessGroupId
	}
	if o.AllowMultipleUserAssignments != nil {
		toSerialize["allow_multiple_user_assignments"] = o.AllowMultipleUserAssignments
	}
	if o.AllowRdsPoolMultiSessionPerUser != nil {
		toSerialize["allow_rds_pool_multi_session_per_user"] = o.AllowRdsPoolMultiSessionPerUser
	}
	if o.AutomaticUserAssignment != nil {
		toSerialize["automatic_user_assignment"] = o.AutomaticUserAssignment
	}
	if o.CategoryFolderName != nil {
		toSerialize["category_folder_name"] = o.CategoryFolderName
	}
	if o.CloudAssigned != nil {
		toSerialize["cloud_assigned"] = o.CloudAssigned
	}
	if o.CloudBrokered != nil {
		toSerialize["cloud_brokered"] = o.CloudBrokered
	}
	if o.CloudManaged != nil {
		toSerialize["cloud_managed"] = o.CloudManaged
	}
	if o.CsRestrictionTags != nil {
		toSerialize["cs_restriction_tags"] = o.CsRestrictionTags
	}
	if o.CustomizationSettings != nil {
		toSerialize["customization_settings"] = o.CustomizationSettings
	}
	if o.DeleteInProgress != nil {
		toSerialize["delete_in_progress"] = o.DeleteInProgress
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayAssignedMachineName != nil {
		toSerialize["display_assigned_machine_name"] = o.DisplayAssignedMachineName
	}
	if o.DisplayMachineAlias != nil {
		toSerialize["display_machine_alias"] = o.DisplayMachineAlias
	}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.DisplayProtocolSettings != nil {
		toSerialize["display_protocol_settings"] = o.DisplayProtocolSettings
	}
	if o.EnableClientRestrictions != nil {
		toSerialize["enable_client_restrictions"] = o.EnableClientRestrictions
	}
	if o.EnableProvisioning != nil {
		toSerialize["enable_provisioning"] = o.EnableProvisioning
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.FarmId != nil {
		toSerialize["farm_id"] = o.FarmId
	}
	if o.GlobalDesktopEntitlementId != nil {
		toSerialize["global_desktop_entitlement_id"] = o.GlobalDesktopEntitlementId
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ImageSource != nil {
		toSerialize["image_source"] = o.ImageSource
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Nics != nil {
		toSerialize["nics"] = o.Nics
	}
	if o.PatternNamingSettings != nil {
		toSerialize["pattern_naming_settings"] = o.PatternNamingSettings
	}
	if o.ProvisioningSettings != nil {
		toSerialize["provisioning_settings"] = o.ProvisioningSettings
	}
	if o.ProvisioningStatusData != nil {
		toSerialize["provisioning_status_data"] = o.ProvisioningStatusData
	}
	if o.SessionSettings != nil {
		toSerialize["session_settings"] = o.SessionSettings
	}
	if o.SessionType != nil {
		toSerialize["session_type"] = o.SessionType
	}
	if o.ShortcutLocations != nil {
		toSerialize["shortcut_locations"] = o.ShortcutLocations
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.SpecificNamingSettings != nil {
		toSerialize["specific_naming_settings"] = o.SpecificNamingSettings
	}
	if o.StopProvisioningOnError != nil {
		toSerialize["stop_provisioning_on_error"] = o.StopProvisioningOnError
	}
	if o.StorageSettings != nil {
		toSerialize["storage_settings"] = o.StorageSettings
	}
	if o.TransparentPageSharingScope != nil {
		toSerialize["transparent_page_sharing_scope"] = o.TransparentPageSharingScope
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.UserAssignment != nil {
		toSerialize["user_assignment"] = o.UserAssignment
	}
	if o.VcenterId != nil {
		toSerialize["vcenter_id"] = o.VcenterId
	}
	if o.ViewStorageAcceleratorSettings != nil {
		toSerialize["view_storage_accelerator_settings"] = o.ViewStorageAcceleratorSettings
	}
	return json.Marshal(toSerialize)
}

type NullableDesktopPoolInfoV4 struct {
	value *DesktopPoolInfoV4
	isSet bool
}

func (v NullableDesktopPoolInfoV4) Get() *DesktopPoolInfoV4 {
	return v.value
}

func (v *NullableDesktopPoolInfoV4) Set(val *DesktopPoolInfoV4) {
	v.value = val
	v.isSet = true
}

func (v NullableDesktopPoolInfoV4) IsSet() bool {
	return v.isSet
}

func (v *NullableDesktopPoolInfoV4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDesktopPoolInfoV4(val *DesktopPoolInfoV4) *NullableDesktopPoolInfoV4 {
	return &NullableDesktopPoolInfoV4{value: val, isSet: true}
}

func (v NullableDesktopPoolInfoV4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDesktopPoolInfoV4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
