/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2111
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// OrFilter struct for OrFilter
type OrFilter struct {
	BaseFilter
	Filters *[]BaseFilter `json:"filters,omitempty"`
	Type    *string       `json:"type,omitempty"`
}

// NewOrFilter instantiates a new OrFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrFilter() *OrFilter {
	this := OrFilter{}
	return &this
}

// NewOrFilterWithDefaults instantiates a new OrFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrFilterWithDefaults() *OrFilter {
	this := OrFilter{}
	return &this
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *OrFilter) GetFilters() []BaseFilter {
	if o == nil || o.Filters == nil {
		var ret []BaseFilter
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrFilter) GetFiltersOk() (*[]BaseFilter, bool) {
	if o == nil || o.Filters == nil {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *OrFilter) HasFilters() bool {
	if o != nil && o.Filters != nil {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []BaseFilter and assigns it to the Filters field.
func (o *OrFilter) SetFilters(v []BaseFilter) {
	o.Filters = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OrFilter) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrFilter) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OrFilter) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *OrFilter) SetType(v string) {
	o.Type = &v
}

func (o OrFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBaseFilter, errBaseFilter := json.Marshal(o.BaseFilter)
	if errBaseFilter != nil {
		return []byte{}, errBaseFilter
	}
	errBaseFilter = json.Unmarshal([]byte(serializedBaseFilter), &toSerialize)
	if errBaseFilter != nil {
		return []byte{}, errBaseFilter
	}
	if o.Filters != nil {
		toSerialize["filters"] = o.Filters
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableOrFilter struct {
	value *OrFilter
	isSet bool
}

func (v NullableOrFilter) Get() *OrFilter {
	return v.value
}

func (v *NullableOrFilter) Set(val *OrFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableOrFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableOrFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrFilter(val *OrFilter) *NullableOrFilter {
	return &NullableOrFilter{value: val, isSet: true}
}

func (v NullableOrFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
