/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CertificateThumbprint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateThumbprint{}

// CertificateThumbprint Information about the SSL Certificate thumbprints
type CertificateThumbprint struct {
	// A digest of the certificate.
	SslCertThumbprint string `json:"ssl_cert_thumbprint"`
	// Algorithm used to compute the thumbprint. * SHA_1: SHA-1 hashing algorithm. * SHA_256: SHA-256 hashing algorithm.
	SslCertThumbprintAlgorithm string `json:"ssl_cert_thumbprint_algorithm"`
}

type _CertificateThumbprint CertificateThumbprint

// NewCertificateThumbprint instantiates a new CertificateThumbprint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateThumbprint(sslCertThumbprint string, sslCertThumbprintAlgorithm string) *CertificateThumbprint {
	this := CertificateThumbprint{}
	this.SslCertThumbprint = sslCertThumbprint
	this.SslCertThumbprintAlgorithm = sslCertThumbprintAlgorithm
	return &this
}

// NewCertificateThumbprintWithDefaults instantiates a new CertificateThumbprint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateThumbprintWithDefaults() *CertificateThumbprint {
	this := CertificateThumbprint{}
	return &this
}

// GetSslCertThumbprint returns the SslCertThumbprint field value
func (o *CertificateThumbprint) GetSslCertThumbprint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SslCertThumbprint
}

// GetSslCertThumbprintOk returns a tuple with the SslCertThumbprint field value
// and a boolean to check if the value has been set.
func (o *CertificateThumbprint) GetSslCertThumbprintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SslCertThumbprint, true
}

// SetSslCertThumbprint sets field value
func (o *CertificateThumbprint) SetSslCertThumbprint(v string) {
	o.SslCertThumbprint = v
}

// GetSslCertThumbprintAlgorithm returns the SslCertThumbprintAlgorithm field value
func (o *CertificateThumbprint) GetSslCertThumbprintAlgorithm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SslCertThumbprintAlgorithm
}

// GetSslCertThumbprintAlgorithmOk returns a tuple with the SslCertThumbprintAlgorithm field value
// and a boolean to check if the value has been set.
func (o *CertificateThumbprint) GetSslCertThumbprintAlgorithmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SslCertThumbprintAlgorithm, true
}

// SetSslCertThumbprintAlgorithm sets field value
func (o *CertificateThumbprint) SetSslCertThumbprintAlgorithm(v string) {
	o.SslCertThumbprintAlgorithm = v
}

func (o CertificateThumbprint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateThumbprint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ssl_cert_thumbprint"] = o.SslCertThumbprint
	toSerialize["ssl_cert_thumbprint_algorithm"] = o.SslCertThumbprintAlgorithm
	return toSerialize, nil
}

func (o *CertificateThumbprint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ssl_cert_thumbprint",
		"ssl_cert_thumbprint_algorithm",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCertificateThumbprint := _CertificateThumbprint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCertificateThumbprint)

	if err != nil {
		return err
	}

	*o = CertificateThumbprint(varCertificateThumbprint)

	return err
}

type NullableCertificateThumbprint struct {
	value *CertificateThumbprint
	isSet bool
}

func (v NullableCertificateThumbprint) Get() *CertificateThumbprint {
	return v.value
}

func (v *NullableCertificateThumbprint) Set(val *CertificateThumbprint) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateThumbprint) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateThumbprint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateThumbprint(val *CertificateThumbprint) *NullableCertificateThumbprint {
	return &NullableCertificateThumbprint{value: val, isSet: true}
}

func (v NullableCertificateThumbprint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateThumbprint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


