/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the ConnectionServerRADIUSInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionServerRADIUSInfo{}

// ConnectionServerRADIUSInfo Information related to connection server RADIUS authentication settings.
type ConnectionServerRADIUSInfo struct {
	// The RADIUS Authenticator to use.
	RadiusAuthenticatorId *string `json:"radius_authenticator_id,omitempty"`
	// Flag to specify if RADIUS authentication is enabled.
	RadiusEnabled *bool `json:"radius_enabled,omitempty"`
	// Flag to specify if RADIUS name mapping is enabled.
	RadiusNameMapping *bool `json:"radius_name_mapping,omitempty"`
	// Flag to specify if RADIUS Windows Single Sign-On is enabled.
	RadiusSso *bool `json:"radius_sso,omitempty"`
}

// NewConnectionServerRADIUSInfo instantiates a new ConnectionServerRADIUSInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionServerRADIUSInfo() *ConnectionServerRADIUSInfo {
	this := ConnectionServerRADIUSInfo{}
	return &this
}

// NewConnectionServerRADIUSInfoWithDefaults instantiates a new ConnectionServerRADIUSInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionServerRADIUSInfoWithDefaults() *ConnectionServerRADIUSInfo {
	this := ConnectionServerRADIUSInfo{}
	return &this
}

// GetRadiusAuthenticatorId returns the RadiusAuthenticatorId field value if set, zero value otherwise.
func (o *ConnectionServerRADIUSInfo) GetRadiusAuthenticatorId() string {
	if o == nil || IsNil(o.RadiusAuthenticatorId) {
		var ret string
		return ret
	}
	return *o.RadiusAuthenticatorId
}

// GetRadiusAuthenticatorIdOk returns a tuple with the RadiusAuthenticatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerRADIUSInfo) GetRadiusAuthenticatorIdOk() (*string, bool) {
	if o == nil || IsNil(o.RadiusAuthenticatorId) {
		return nil, false
	}
	return o.RadiusAuthenticatorId, true
}

// HasRadiusAuthenticatorId returns a boolean if a field has been set.
func (o *ConnectionServerRADIUSInfo) HasRadiusAuthenticatorId() bool {
	if o != nil && !IsNil(o.RadiusAuthenticatorId) {
		return true
	}

	return false
}

// SetRadiusAuthenticatorId gets a reference to the given string and assigns it to the RadiusAuthenticatorId field.
func (o *ConnectionServerRADIUSInfo) SetRadiusAuthenticatorId(v string) {
	o.RadiusAuthenticatorId = &v
}

// GetRadiusEnabled returns the RadiusEnabled field value if set, zero value otherwise.
func (o *ConnectionServerRADIUSInfo) GetRadiusEnabled() bool {
	if o == nil || IsNil(o.RadiusEnabled) {
		var ret bool
		return ret
	}
	return *o.RadiusEnabled
}

// GetRadiusEnabledOk returns a tuple with the RadiusEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerRADIUSInfo) GetRadiusEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RadiusEnabled) {
		return nil, false
	}
	return o.RadiusEnabled, true
}

// HasRadiusEnabled returns a boolean if a field has been set.
func (o *ConnectionServerRADIUSInfo) HasRadiusEnabled() bool {
	if o != nil && !IsNil(o.RadiusEnabled) {
		return true
	}

	return false
}

// SetRadiusEnabled gets a reference to the given bool and assigns it to the RadiusEnabled field.
func (o *ConnectionServerRADIUSInfo) SetRadiusEnabled(v bool) {
	o.RadiusEnabled = &v
}

// GetRadiusNameMapping returns the RadiusNameMapping field value if set, zero value otherwise.
func (o *ConnectionServerRADIUSInfo) GetRadiusNameMapping() bool {
	if o == nil || IsNil(o.RadiusNameMapping) {
		var ret bool
		return ret
	}
	return *o.RadiusNameMapping
}

// GetRadiusNameMappingOk returns a tuple with the RadiusNameMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerRADIUSInfo) GetRadiusNameMappingOk() (*bool, bool) {
	if o == nil || IsNil(o.RadiusNameMapping) {
		return nil, false
	}
	return o.RadiusNameMapping, true
}

// HasRadiusNameMapping returns a boolean if a field has been set.
func (o *ConnectionServerRADIUSInfo) HasRadiusNameMapping() bool {
	if o != nil && !IsNil(o.RadiusNameMapping) {
		return true
	}

	return false
}

// SetRadiusNameMapping gets a reference to the given bool and assigns it to the RadiusNameMapping field.
func (o *ConnectionServerRADIUSInfo) SetRadiusNameMapping(v bool) {
	o.RadiusNameMapping = &v
}

// GetRadiusSso returns the RadiusSso field value if set, zero value otherwise.
func (o *ConnectionServerRADIUSInfo) GetRadiusSso() bool {
	if o == nil || IsNil(o.RadiusSso) {
		var ret bool
		return ret
	}
	return *o.RadiusSso
}

// GetRadiusSsoOk returns a tuple with the RadiusSso field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerRADIUSInfo) GetRadiusSsoOk() (*bool, bool) {
	if o == nil || IsNil(o.RadiusSso) {
		return nil, false
	}
	return o.RadiusSso, true
}

// HasRadiusSso returns a boolean if a field has been set.
func (o *ConnectionServerRADIUSInfo) HasRadiusSso() bool {
	if o != nil && !IsNil(o.RadiusSso) {
		return true
	}

	return false
}

// SetRadiusSso gets a reference to the given bool and assigns it to the RadiusSso field.
func (o *ConnectionServerRADIUSInfo) SetRadiusSso(v bool) {
	o.RadiusSso = &v
}

func (o ConnectionServerRADIUSInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionServerRADIUSInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RadiusAuthenticatorId) {
		toSerialize["radius_authenticator_id"] = o.RadiusAuthenticatorId
	}
	if !IsNil(o.RadiusEnabled) {
		toSerialize["radius_enabled"] = o.RadiusEnabled
	}
	if !IsNil(o.RadiusNameMapping) {
		toSerialize["radius_name_mapping"] = o.RadiusNameMapping
	}
	if !IsNil(o.RadiusSso) {
		toSerialize["radius_sso"] = o.RadiusSso
	}
	return toSerialize, nil
}

type NullableConnectionServerRADIUSInfo struct {
	value *ConnectionServerRADIUSInfo
	isSet bool
}

func (v NullableConnectionServerRADIUSInfo) Get() *ConnectionServerRADIUSInfo {
	return v.value
}

func (v *NullableConnectionServerRADIUSInfo) Set(val *ConnectionServerRADIUSInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionServerRADIUSInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionServerRADIUSInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionServerRADIUSInfo(val *ConnectionServerRADIUSInfo) *NullableConnectionServerRADIUSInfo {
	return &NullableConnectionServerRADIUSInfo{value: val, isSet: true}
}

func (v NullableConnectionServerRADIUSInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionServerRADIUSInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


