/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConnectionServerUpdateSpecV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionServerUpdateSpecV2{}

// ConnectionServerUpdateSpecV2 Information related to Connection server.
type ConnectionServerUpdateSpecV2 struct {
	// This can be set only if external_pcoip_url is set and contains a host part that represents an IPv6 address or DNS name.  As legacy clients may not support IPv6 or DNS names for external PCoIP URLs, this IPv4 address, if set, will be presented to them as an alternative. The same port will be used and should not be specified.  If bypass_pcoip_gateway is set to true, this property will be ignored.
	AuxillaryExternalPcoipIpv4Address *string `json:"auxillary_external_pcoip_ipv4_address,omitempty"`
	// Indicates whether a bypassing blast secure gateway is enabled for this connection server instance.  If this is set to true, web browsers make direct connections to Horizon machines bypassing connection server.
	BypassAppBlastGateway bool `json:"bypass_app_blast_gateway"`
	// Indicates whether the PCoIP traffic bypasses the secure gateway.
	BypassPcoipGateway bool `json:"bypass_pcoip_gateway"`
	// Indicates whether a secure tunnel on this connection server instance is enabled.  If this is set to false, a secure tunnel on this Connection Server instance is enabled and horizon clents can connect to desktop pools through the secure tunnel,  which carries RDP and other data over HTTPS. PCoIP and HTML Access connections use separate secure gateways.
	BypassTunnel *bool `json:"bypass_tunnel,omitempty"`
	// Indicates whether only HTML clients use blast secure gateway for this connection server instance.  This property will not be set if bypass_appblast_gateway is set to false.
	DirectHtmlabsg *bool `json:"direct_htmlabsg,omitempty"`
	// Indicates whether the connection server's service principal name will be sent to the client prior to the user authentication.When set to true Connection Server discloses its service principal name to the client.
	DiscloseServicePrincipalName bool `json:"disclose_service_principal_name"`
	// Indicates whether username hints for smart card is enabled.
	EnableSmartCardUserNameHint *bool `json:"enable_smart_card_user_name_hint,omitempty"`
	// Indicate whether the connection server is enabled. A disabled connection server will not accept connection requests from Horizon Clients.
	Enabled bool `json:"enabled"`
	// The Blast External URL enables browser access to Horizon machines through this connection server instance.  To enable Blast, you must install HTML Access.  The Blast External URL must not be load balanced.  If bypass_appblast_gateway is set to true, this property will be ignored.
	ExternalAppblastUrl *string `json:"external_appblast_url,omitempty"`
	// Horizon Clients use the PCoIP External URL to establish a PCoIP connection through this Connection Server instance.  The PCoIP External URL must not be load balanced.  If bypass_pcoip_gateway is set to true, this property will be ignored.
	ExternalPcoipUrl *string `json:"external_pcoip_url,omitempty"`
	// Horizon Clients use the External URL to establish a secure tunnel to this Connection Server instance.  If a server name is specified, it must be resolvable by each Horizon Client.  The External URL must not be load balanced.  If bypass_tunnel is set to true, this property will be ignored.
	ExternalUrl *string `json:"external_url,omitempty"`
	GssApiinfo ConnectionServerGSSAPISpec `json:"gss_apiinfo"`
	// Indicates whether connection server supports HTTP host redirection.
	HostRedirection bool `json:"host_redirection"`
	JwtInfo *ConnectionServerJWTSpec `json:"jwt_info,omitempty"`
	LdapBackupInfo *ConnectionServerLdapBackupSpec `json:"ldap_backup_info,omitempty"`
	// Indicates whether user is logged off on removal of Smart Card.
	LogoffWhenRemoveSmartCard *bool `json:"logoff_when_remove_smart_card,omitempty"`
	RadiusInfo ConnectionServerRADIUSSpec `json:"radius_info"`
	RsaSecureIdInfo ConnectionServerRSASecureIdSpec `json:"rsa_secure_id_info"`
	SamlInfo ConnectionServerSAMLSpec `json:"saml_info"`
	// Indicates whether the smart card is supported for client or not * OPTIONAL: Indicates that the SmartCard usage is optional. * REQUIRED: Indicates that the SmartCard usage is necessary. * OFF: Indicates that the SmartCard usage is not allowed.
	SmartCardSupport string `json:"smart_card_support"`
	// Indicates Smart card authentication configuration for administrators to login. * OPTIONAL: Indicates that the SmartCard usage is optional. * REQUIRED: Indicates that the SmartCard usage is necessary. * OFF: Indicates that the SmartCard usage is not allowed.
	SmartCardSupportForAdmin string `json:"smart_card_support_for_admin"`
	// Tags to restrict accessibility to desktop pools through this server.
	Tags []string `json:"tags,omitempty"`
	UnauthenticatedAccessInfo ConnectionServerUnauthenticatedAccessSpec `json:"unauthenticated_access_info"`
}

type _ConnectionServerUpdateSpecV2 ConnectionServerUpdateSpecV2

// NewConnectionServerUpdateSpecV2 instantiates a new ConnectionServerUpdateSpecV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionServerUpdateSpecV2(bypassAppBlastGateway bool, bypassPcoipGateway bool, discloseServicePrincipalName bool, enabled bool, gssApiinfo ConnectionServerGSSAPISpec, hostRedirection bool, radiusInfo ConnectionServerRADIUSSpec, rsaSecureIdInfo ConnectionServerRSASecureIdSpec, samlInfo ConnectionServerSAMLSpec, smartCardSupport string, smartCardSupportForAdmin string, unauthenticatedAccessInfo ConnectionServerUnauthenticatedAccessSpec) *ConnectionServerUpdateSpecV2 {
	this := ConnectionServerUpdateSpecV2{}
	this.BypassAppBlastGateway = bypassAppBlastGateway
	this.BypassPcoipGateway = bypassPcoipGateway
	this.DiscloseServicePrincipalName = discloseServicePrincipalName
	this.Enabled = enabled
	this.GssApiinfo = gssApiinfo
	this.HostRedirection = hostRedirection
	this.RadiusInfo = radiusInfo
	this.RsaSecureIdInfo = rsaSecureIdInfo
	this.SamlInfo = samlInfo
	this.SmartCardSupport = smartCardSupport
	this.SmartCardSupportForAdmin = smartCardSupportForAdmin
	this.UnauthenticatedAccessInfo = unauthenticatedAccessInfo
	return &this
}

// NewConnectionServerUpdateSpecV2WithDefaults instantiates a new ConnectionServerUpdateSpecV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionServerUpdateSpecV2WithDefaults() *ConnectionServerUpdateSpecV2 {
	this := ConnectionServerUpdateSpecV2{}
	return &this
}

// GetAuxillaryExternalPcoipIpv4Address returns the AuxillaryExternalPcoipIpv4Address field value if set, zero value otherwise.
func (o *ConnectionServerUpdateSpecV2) GetAuxillaryExternalPcoipIpv4Address() string {
	if o == nil || IsNil(o.AuxillaryExternalPcoipIpv4Address) {
		var ret string
		return ret
	}
	return *o.AuxillaryExternalPcoipIpv4Address
}

// GetAuxillaryExternalPcoipIpv4AddressOk returns a tuple with the AuxillaryExternalPcoipIpv4Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerUpdateSpecV2) GetAuxillaryExternalPcoipIpv4AddressOk() (*string, bool) {
	if o == nil || IsNil(o.AuxillaryExternalPcoipIpv4Address) {
		return nil, false
	}
	return o.AuxillaryExternalPcoipIpv4Address, true
}

// HasAuxillaryExternalPcoipIpv4Address returns a boolean if a field has been set.
func (o *ConnectionServerUpdateSpecV2) HasAuxillaryExternalPcoipIpv4Address() bool {
	if o != nil && !IsNil(o.AuxillaryExternalPcoipIpv4Address) {
		return true
	}

	return false
}

// SetAuxillaryExternalPcoipIpv4Address gets a reference to the given string and assigns it to the AuxillaryExternalPcoipIpv4Address field.
func (o *ConnectionServerUpdateSpecV2) SetAuxillaryExternalPcoipIpv4Address(v string) {
	o.AuxillaryExternalPcoipIpv4Address = &v
}

// GetBypassAppBlastGateway returns the BypassAppBlastGateway field value
func (o *ConnectionServerUpdateSpecV2) GetBypassAppBlastGateway() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BypassAppBlastGateway
}

// GetBypassAppBlastGatewayOk returns a tuple with the BypassAppBlastGateway field value
// and a boolean to check if the value has been set.
func (o *ConnectionServerUpdateSpecV2) GetBypassAppBlastGatewayOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BypassAppBlastGateway, true
}

// SetBypassAppBlastGateway sets field value
func (o *ConnectionServerUpdateSpecV2) SetBypassAppBlastGateway(v bool) {
	o.BypassAppBlastGateway = v
}

// GetBypassPcoipGateway returns the BypassPcoipGateway field value
func (o *ConnectionServerUpdateSpecV2) GetBypassPcoipGateway() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BypassPcoipGateway
}

// GetBypassPcoipGatewayOk returns a tuple with the BypassPcoipGateway field value
// and a boolean to check if the value has been set.
func (o *ConnectionServerUpdateSpecV2) GetBypassPcoipGatewayOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BypassPcoipGateway, true
}

// SetBypassPcoipGateway sets field value
func (o *ConnectionServerUpdateSpecV2) SetBypassPcoipGateway(v bool) {
	o.BypassPcoipGateway = v
}

// GetBypassTunnel returns the BypassTunnel field value if set, zero value otherwise.
func (o *ConnectionServerUpdateSpecV2) GetBypassTunnel() bool {
	if o == nil || IsNil(o.BypassTunnel) {
		var ret bool
		return ret
	}
	return *o.BypassTunnel
}

// GetBypassTunnelOk returns a tuple with the BypassTunnel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerUpdateSpecV2) GetBypassTunnelOk() (*bool, bool) {
	if o == nil || IsNil(o.BypassTunnel) {
		return nil, false
	}
	return o.BypassTunnel, true
}

// HasBypassTunnel returns a boolean if a field has been set.
func (o *ConnectionServerUpdateSpecV2) HasBypassTunnel() bool {
	if o != nil && !IsNil(o.BypassTunnel) {
		return true
	}

	return false
}

// SetBypassTunnel gets a reference to the given bool and assigns it to the BypassTunnel field.
func (o *ConnectionServerUpdateSpecV2) SetBypassTunnel(v bool) {
	o.BypassTunnel = &v
}

// GetDirectHtmlabsg returns the DirectHtmlabsg field value if set, zero value otherwise.
func (o *ConnectionServerUpdateSpecV2) GetDirectHtmlabsg() bool {
	if o == nil || IsNil(o.DirectHtmlabsg) {
		var ret bool
		return ret
	}
	return *o.DirectHtmlabsg
}

// GetDirectHtmlabsgOk returns a tuple with the DirectHtmlabsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerUpdateSpecV2) GetDirectHtmlabsgOk() (*bool, bool) {
	if o == nil || IsNil(o.DirectHtmlabsg) {
		return nil, false
	}
	return o.DirectHtmlabsg, true
}

// HasDirectHtmlabsg returns a boolean if a field has been set.
func (o *ConnectionServerUpdateSpecV2) HasDirectHtmlabsg() bool {
	if o != nil && !IsNil(o.DirectHtmlabsg) {
		return true
	}

	return false
}

// SetDirectHtmlabsg gets a reference to the given bool and assigns it to the DirectHtmlabsg field.
func (o *ConnectionServerUpdateSpecV2) SetDirectHtmlabsg(v bool) {
	o.DirectHtmlabsg = &v
}

// GetDiscloseServicePrincipalName returns the DiscloseServicePrincipalName field value
func (o *ConnectionServerUpdateSpecV2) GetDiscloseServicePrincipalName() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DiscloseServicePrincipalName
}

// GetDiscloseServicePrincipalNameOk returns a tuple with the DiscloseServicePrincipalName field value
// and a boolean to check if the value has been set.
func (o *ConnectionServerUpdateSpecV2) GetDiscloseServicePrincipalNameOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiscloseServicePrincipalName, true
}

// SetDiscloseServicePrincipalName sets field value
func (o *ConnectionServerUpdateSpecV2) SetDiscloseServicePrincipalName(v bool) {
	o.DiscloseServicePrincipalName = v
}

// GetEnableSmartCardUserNameHint returns the EnableSmartCardUserNameHint field value if set, zero value otherwise.
func (o *ConnectionServerUpdateSpecV2) GetEnableSmartCardUserNameHint() bool {
	if o == nil || IsNil(o.EnableSmartCardUserNameHint) {
		var ret bool
		return ret
	}
	return *o.EnableSmartCardUserNameHint
}

// GetEnableSmartCardUserNameHintOk returns a tuple with the EnableSmartCardUserNameHint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerUpdateSpecV2) GetEnableSmartCardUserNameHintOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSmartCardUserNameHint) {
		return nil, false
	}
	return o.EnableSmartCardUserNameHint, true
}

// HasEnableSmartCardUserNameHint returns a boolean if a field has been set.
func (o *ConnectionServerUpdateSpecV2) HasEnableSmartCardUserNameHint() bool {
	if o != nil && !IsNil(o.EnableSmartCardUserNameHint) {
		return true
	}

	return false
}

// SetEnableSmartCardUserNameHint gets a reference to the given bool and assigns it to the EnableSmartCardUserNameHint field.
func (o *ConnectionServerUpdateSpecV2) SetEnableSmartCardUserNameHint(v bool) {
	o.EnableSmartCardUserNameHint = &v
}

// GetEnabled returns the Enabled field value
func (o *ConnectionServerUpdateSpecV2) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ConnectionServerUpdateSpecV2) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ConnectionServerUpdateSpecV2) SetEnabled(v bool) {
	o.Enabled = v
}

// GetExternalAppblastUrl returns the ExternalAppblastUrl field value if set, zero value otherwise.
func (o *ConnectionServerUpdateSpecV2) GetExternalAppblastUrl() string {
	if o == nil || IsNil(o.ExternalAppblastUrl) {
		var ret string
		return ret
	}
	return *o.ExternalAppblastUrl
}

// GetExternalAppblastUrlOk returns a tuple with the ExternalAppblastUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerUpdateSpecV2) GetExternalAppblastUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalAppblastUrl) {
		return nil, false
	}
	return o.ExternalAppblastUrl, true
}

// HasExternalAppblastUrl returns a boolean if a field has been set.
func (o *ConnectionServerUpdateSpecV2) HasExternalAppblastUrl() bool {
	if o != nil && !IsNil(o.ExternalAppblastUrl) {
		return true
	}

	return false
}

// SetExternalAppblastUrl gets a reference to the given string and assigns it to the ExternalAppblastUrl field.
func (o *ConnectionServerUpdateSpecV2) SetExternalAppblastUrl(v string) {
	o.ExternalAppblastUrl = &v
}

// GetExternalPcoipUrl returns the ExternalPcoipUrl field value if set, zero value otherwise.
func (o *ConnectionServerUpdateSpecV2) GetExternalPcoipUrl() string {
	if o == nil || IsNil(o.ExternalPcoipUrl) {
		var ret string
		return ret
	}
	return *o.ExternalPcoipUrl
}

// GetExternalPcoipUrlOk returns a tuple with the ExternalPcoipUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerUpdateSpecV2) GetExternalPcoipUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalPcoipUrl) {
		return nil, false
	}
	return o.ExternalPcoipUrl, true
}

// HasExternalPcoipUrl returns a boolean if a field has been set.
func (o *ConnectionServerUpdateSpecV2) HasExternalPcoipUrl() bool {
	if o != nil && !IsNil(o.ExternalPcoipUrl) {
		return true
	}

	return false
}

// SetExternalPcoipUrl gets a reference to the given string and assigns it to the ExternalPcoipUrl field.
func (o *ConnectionServerUpdateSpecV2) SetExternalPcoipUrl(v string) {
	o.ExternalPcoipUrl = &v
}

// GetExternalUrl returns the ExternalUrl field value if set, zero value otherwise.
func (o *ConnectionServerUpdateSpecV2) GetExternalUrl() string {
	if o == nil || IsNil(o.ExternalUrl) {
		var ret string
		return ret
	}
	return *o.ExternalUrl
}

// GetExternalUrlOk returns a tuple with the ExternalUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerUpdateSpecV2) GetExternalUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalUrl) {
		return nil, false
	}
	return o.ExternalUrl, true
}

// HasExternalUrl returns a boolean if a field has been set.
func (o *ConnectionServerUpdateSpecV2) HasExternalUrl() bool {
	if o != nil && !IsNil(o.ExternalUrl) {
		return true
	}

	return false
}

// SetExternalUrl gets a reference to the given string and assigns it to the ExternalUrl field.
func (o *ConnectionServerUpdateSpecV2) SetExternalUrl(v string) {
	o.ExternalUrl = &v
}

// GetGssApiinfo returns the GssApiinfo field value
func (o *ConnectionServerUpdateSpecV2) GetGssApiinfo() ConnectionServerGSSAPISpec {
	if o == nil {
		var ret ConnectionServerGSSAPISpec
		return ret
	}

	return o.GssApiinfo
}

// GetGssApiinfoOk returns a tuple with the GssApiinfo field value
// and a boolean to check if the value has been set.
func (o *ConnectionServerUpdateSpecV2) GetGssApiinfoOk() (*ConnectionServerGSSAPISpec, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GssApiinfo, true
}

// SetGssApiinfo sets field value
func (o *ConnectionServerUpdateSpecV2) SetGssApiinfo(v ConnectionServerGSSAPISpec) {
	o.GssApiinfo = v
}

// GetHostRedirection returns the HostRedirection field value
func (o *ConnectionServerUpdateSpecV2) GetHostRedirection() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HostRedirection
}

// GetHostRedirectionOk returns a tuple with the HostRedirection field value
// and a boolean to check if the value has been set.
func (o *ConnectionServerUpdateSpecV2) GetHostRedirectionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HostRedirection, true
}

// SetHostRedirection sets field value
func (o *ConnectionServerUpdateSpecV2) SetHostRedirection(v bool) {
	o.HostRedirection = v
}

// GetJwtInfo returns the JwtInfo field value if set, zero value otherwise.
func (o *ConnectionServerUpdateSpecV2) GetJwtInfo() ConnectionServerJWTSpec {
	if o == nil || IsNil(o.JwtInfo) {
		var ret ConnectionServerJWTSpec
		return ret
	}
	return *o.JwtInfo
}

// GetJwtInfoOk returns a tuple with the JwtInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerUpdateSpecV2) GetJwtInfoOk() (*ConnectionServerJWTSpec, bool) {
	if o == nil || IsNil(o.JwtInfo) {
		return nil, false
	}
	return o.JwtInfo, true
}

// HasJwtInfo returns a boolean if a field has been set.
func (o *ConnectionServerUpdateSpecV2) HasJwtInfo() bool {
	if o != nil && !IsNil(o.JwtInfo) {
		return true
	}

	return false
}

// SetJwtInfo gets a reference to the given ConnectionServerJWTSpec and assigns it to the JwtInfo field.
func (o *ConnectionServerUpdateSpecV2) SetJwtInfo(v ConnectionServerJWTSpec) {
	o.JwtInfo = &v
}

// GetLdapBackupInfo returns the LdapBackupInfo field value if set, zero value otherwise.
func (o *ConnectionServerUpdateSpecV2) GetLdapBackupInfo() ConnectionServerLdapBackupSpec {
	if o == nil || IsNil(o.LdapBackupInfo) {
		var ret ConnectionServerLdapBackupSpec
		return ret
	}
	return *o.LdapBackupInfo
}

// GetLdapBackupInfoOk returns a tuple with the LdapBackupInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerUpdateSpecV2) GetLdapBackupInfoOk() (*ConnectionServerLdapBackupSpec, bool) {
	if o == nil || IsNil(o.LdapBackupInfo) {
		return nil, false
	}
	return o.LdapBackupInfo, true
}

// HasLdapBackupInfo returns a boolean if a field has been set.
func (o *ConnectionServerUpdateSpecV2) HasLdapBackupInfo() bool {
	if o != nil && !IsNil(o.LdapBackupInfo) {
		return true
	}

	return false
}

// SetLdapBackupInfo gets a reference to the given ConnectionServerLdapBackupSpec and assigns it to the LdapBackupInfo field.
func (o *ConnectionServerUpdateSpecV2) SetLdapBackupInfo(v ConnectionServerLdapBackupSpec) {
	o.LdapBackupInfo = &v
}

// GetLogoffWhenRemoveSmartCard returns the LogoffWhenRemoveSmartCard field value if set, zero value otherwise.
func (o *ConnectionServerUpdateSpecV2) GetLogoffWhenRemoveSmartCard() bool {
	if o == nil || IsNil(o.LogoffWhenRemoveSmartCard) {
		var ret bool
		return ret
	}
	return *o.LogoffWhenRemoveSmartCard
}

// GetLogoffWhenRemoveSmartCardOk returns a tuple with the LogoffWhenRemoveSmartCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerUpdateSpecV2) GetLogoffWhenRemoveSmartCardOk() (*bool, bool) {
	if o == nil || IsNil(o.LogoffWhenRemoveSmartCard) {
		return nil, false
	}
	return o.LogoffWhenRemoveSmartCard, true
}

// HasLogoffWhenRemoveSmartCard returns a boolean if a field has been set.
func (o *ConnectionServerUpdateSpecV2) HasLogoffWhenRemoveSmartCard() bool {
	if o != nil && !IsNil(o.LogoffWhenRemoveSmartCard) {
		return true
	}

	return false
}

// SetLogoffWhenRemoveSmartCard gets a reference to the given bool and assigns it to the LogoffWhenRemoveSmartCard field.
func (o *ConnectionServerUpdateSpecV2) SetLogoffWhenRemoveSmartCard(v bool) {
	o.LogoffWhenRemoveSmartCard = &v
}

// GetRadiusInfo returns the RadiusInfo field value
func (o *ConnectionServerUpdateSpecV2) GetRadiusInfo() ConnectionServerRADIUSSpec {
	if o == nil {
		var ret ConnectionServerRADIUSSpec
		return ret
	}

	return o.RadiusInfo
}

// GetRadiusInfoOk returns a tuple with the RadiusInfo field value
// and a boolean to check if the value has been set.
func (o *ConnectionServerUpdateSpecV2) GetRadiusInfoOk() (*ConnectionServerRADIUSSpec, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RadiusInfo, true
}

// SetRadiusInfo sets field value
func (o *ConnectionServerUpdateSpecV2) SetRadiusInfo(v ConnectionServerRADIUSSpec) {
	o.RadiusInfo = v
}

// GetRsaSecureIdInfo returns the RsaSecureIdInfo field value
func (o *ConnectionServerUpdateSpecV2) GetRsaSecureIdInfo() ConnectionServerRSASecureIdSpec {
	if o == nil {
		var ret ConnectionServerRSASecureIdSpec
		return ret
	}

	return o.RsaSecureIdInfo
}

// GetRsaSecureIdInfoOk returns a tuple with the RsaSecureIdInfo field value
// and a boolean to check if the value has been set.
func (o *ConnectionServerUpdateSpecV2) GetRsaSecureIdInfoOk() (*ConnectionServerRSASecureIdSpec, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RsaSecureIdInfo, true
}

// SetRsaSecureIdInfo sets field value
func (o *ConnectionServerUpdateSpecV2) SetRsaSecureIdInfo(v ConnectionServerRSASecureIdSpec) {
	o.RsaSecureIdInfo = v
}

// GetSamlInfo returns the SamlInfo field value
func (o *ConnectionServerUpdateSpecV2) GetSamlInfo() ConnectionServerSAMLSpec {
	if o == nil {
		var ret ConnectionServerSAMLSpec
		return ret
	}

	return o.SamlInfo
}

// GetSamlInfoOk returns a tuple with the SamlInfo field value
// and a boolean to check if the value has been set.
func (o *ConnectionServerUpdateSpecV2) GetSamlInfoOk() (*ConnectionServerSAMLSpec, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SamlInfo, true
}

// SetSamlInfo sets field value
func (o *ConnectionServerUpdateSpecV2) SetSamlInfo(v ConnectionServerSAMLSpec) {
	o.SamlInfo = v
}

// GetSmartCardSupport returns the SmartCardSupport field value
func (o *ConnectionServerUpdateSpecV2) GetSmartCardSupport() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SmartCardSupport
}

// GetSmartCardSupportOk returns a tuple with the SmartCardSupport field value
// and a boolean to check if the value has been set.
func (o *ConnectionServerUpdateSpecV2) GetSmartCardSupportOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SmartCardSupport, true
}

// SetSmartCardSupport sets field value
func (o *ConnectionServerUpdateSpecV2) SetSmartCardSupport(v string) {
	o.SmartCardSupport = v
}

// GetSmartCardSupportForAdmin returns the SmartCardSupportForAdmin field value
func (o *ConnectionServerUpdateSpecV2) GetSmartCardSupportForAdmin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SmartCardSupportForAdmin
}

// GetSmartCardSupportForAdminOk returns a tuple with the SmartCardSupportForAdmin field value
// and a boolean to check if the value has been set.
func (o *ConnectionServerUpdateSpecV2) GetSmartCardSupportForAdminOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SmartCardSupportForAdmin, true
}

// SetSmartCardSupportForAdmin sets field value
func (o *ConnectionServerUpdateSpecV2) SetSmartCardSupportForAdmin(v string) {
	o.SmartCardSupportForAdmin = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ConnectionServerUpdateSpecV2) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerUpdateSpecV2) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ConnectionServerUpdateSpecV2) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ConnectionServerUpdateSpecV2) SetTags(v []string) {
	o.Tags = v
}

// GetUnauthenticatedAccessInfo returns the UnauthenticatedAccessInfo field value
func (o *ConnectionServerUpdateSpecV2) GetUnauthenticatedAccessInfo() ConnectionServerUnauthenticatedAccessSpec {
	if o == nil {
		var ret ConnectionServerUnauthenticatedAccessSpec
		return ret
	}

	return o.UnauthenticatedAccessInfo
}

// GetUnauthenticatedAccessInfoOk returns a tuple with the UnauthenticatedAccessInfo field value
// and a boolean to check if the value has been set.
func (o *ConnectionServerUpdateSpecV2) GetUnauthenticatedAccessInfoOk() (*ConnectionServerUnauthenticatedAccessSpec, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnauthenticatedAccessInfo, true
}

// SetUnauthenticatedAccessInfo sets field value
func (o *ConnectionServerUpdateSpecV2) SetUnauthenticatedAccessInfo(v ConnectionServerUnauthenticatedAccessSpec) {
	o.UnauthenticatedAccessInfo = v
}

func (o ConnectionServerUpdateSpecV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionServerUpdateSpecV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuxillaryExternalPcoipIpv4Address) {
		toSerialize["auxillary_external_pcoip_ipv4_address"] = o.AuxillaryExternalPcoipIpv4Address
	}
	toSerialize["bypass_app_blast_gateway"] = o.BypassAppBlastGateway
	toSerialize["bypass_pcoip_gateway"] = o.BypassPcoipGateway
	if !IsNil(o.BypassTunnel) {
		toSerialize["bypass_tunnel"] = o.BypassTunnel
	}
	if !IsNil(o.DirectHtmlabsg) {
		toSerialize["direct_htmlabsg"] = o.DirectHtmlabsg
	}
	toSerialize["disclose_service_principal_name"] = o.DiscloseServicePrincipalName
	if !IsNil(o.EnableSmartCardUserNameHint) {
		toSerialize["enable_smart_card_user_name_hint"] = o.EnableSmartCardUserNameHint
	}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.ExternalAppblastUrl) {
		toSerialize["external_appblast_url"] = o.ExternalAppblastUrl
	}
	if !IsNil(o.ExternalPcoipUrl) {
		toSerialize["external_pcoip_url"] = o.ExternalPcoipUrl
	}
	if !IsNil(o.ExternalUrl) {
		toSerialize["external_url"] = o.ExternalUrl
	}
	toSerialize["gss_apiinfo"] = o.GssApiinfo
	toSerialize["host_redirection"] = o.HostRedirection
	if !IsNil(o.JwtInfo) {
		toSerialize["jwt_info"] = o.JwtInfo
	}
	if !IsNil(o.LdapBackupInfo) {
		toSerialize["ldap_backup_info"] = o.LdapBackupInfo
	}
	if !IsNil(o.LogoffWhenRemoveSmartCard) {
		toSerialize["logoff_when_remove_smart_card"] = o.LogoffWhenRemoveSmartCard
	}
	toSerialize["radius_info"] = o.RadiusInfo
	toSerialize["rsa_secure_id_info"] = o.RsaSecureIdInfo
	toSerialize["saml_info"] = o.SamlInfo
	toSerialize["smart_card_support"] = o.SmartCardSupport
	toSerialize["smart_card_support_for_admin"] = o.SmartCardSupportForAdmin
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["unauthenticated_access_info"] = o.UnauthenticatedAccessInfo
	return toSerialize, nil
}

func (o *ConnectionServerUpdateSpecV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bypass_app_blast_gateway",
		"bypass_pcoip_gateway",
		"disclose_service_principal_name",
		"enabled",
		"gss_apiinfo",
		"host_redirection",
		"radius_info",
		"rsa_secure_id_info",
		"saml_info",
		"smart_card_support",
		"smart_card_support_for_admin",
		"unauthenticated_access_info",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnectionServerUpdateSpecV2 := _ConnectionServerUpdateSpecV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConnectionServerUpdateSpecV2)

	if err != nil {
		return err
	}

	*o = ConnectionServerUpdateSpecV2(varConnectionServerUpdateSpecV2)

	return err
}

type NullableConnectionServerUpdateSpecV2 struct {
	value *ConnectionServerUpdateSpecV2
	isSet bool
}

func (v NullableConnectionServerUpdateSpecV2) Get() *ConnectionServerUpdateSpecV2 {
	return v.value
}

func (v *NullableConnectionServerUpdateSpecV2) Set(val *ConnectionServerUpdateSpecV2) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionServerUpdateSpecV2) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionServerUpdateSpecV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionServerUpdateSpecV2(val *ConnectionServerUpdateSpecV2) *NullableConnectionServerUpdateSpecV2 {
	return &NullableConnectionServerUpdateSpecV2{value: val, isSet: true}
}

func (v NullableConnectionServerUpdateSpecV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionServerUpdateSpecV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


