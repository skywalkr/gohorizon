/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// VCMonitorDatastore Information about the datastore of the host(s) connected to the given Virtual Center.
type VCMonitorDatastore struct {
	// The capacity of the datastore in megabytes.
	CapacityMb int32                     `json:"capacity_mb"`
	Details    VCMonitorDatastoreDetails `json:"details"`
	// The free space on the datastore in megabytes.
	FreeSpaceMb int32 `json:"free_space_mb"`
	// Status of the datastore. * ACCESSIBLE: The datastore is accessible. * NOT_ACCESSIBLE: The datastore is not accessible.
	Status string `json:"status"`
	// Type of the datastore. * VMFS: VMFS datastore. * VSAN: VSAN datastore. * VVOL: VVOL datastore.
	Type string `json:"type"`
}

// NewVCMonitorDatastore instantiates a new VCMonitorDatastore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVCMonitorDatastore(capacityMb int32, details VCMonitorDatastoreDetails, freeSpaceMb int32, status string, type_ string) *VCMonitorDatastore {
	this := VCMonitorDatastore{}
	this.CapacityMb = capacityMb
	this.Details = details
	this.FreeSpaceMb = freeSpaceMb
	this.Status = status
	this.Type = type_
	return &this
}

// NewVCMonitorDatastoreWithDefaults instantiates a new VCMonitorDatastore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVCMonitorDatastoreWithDefaults() *VCMonitorDatastore {
	this := VCMonitorDatastore{}
	return &this
}

// GetCapacityMb returns the CapacityMb field value
func (o *VCMonitorDatastore) GetCapacityMb() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CapacityMb
}

// GetCapacityMbOk returns a tuple with the CapacityMb field value
// and a boolean to check if the value has been set.
func (o *VCMonitorDatastore) GetCapacityMbOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CapacityMb, true
}

// SetCapacityMb sets field value
func (o *VCMonitorDatastore) SetCapacityMb(v int32) {
	o.CapacityMb = v
}

// GetDetails returns the Details field value
func (o *VCMonitorDatastore) GetDetails() VCMonitorDatastoreDetails {
	if o == nil {
		var ret VCMonitorDatastoreDetails
		return ret
	}

	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value
// and a boolean to check if the value has been set.
func (o *VCMonitorDatastore) GetDetailsOk() (*VCMonitorDatastoreDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Details, true
}

// SetDetails sets field value
func (o *VCMonitorDatastore) SetDetails(v VCMonitorDatastoreDetails) {
	o.Details = v
}

// GetFreeSpaceMb returns the FreeSpaceMb field value
func (o *VCMonitorDatastore) GetFreeSpaceMb() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FreeSpaceMb
}

// GetFreeSpaceMbOk returns a tuple with the FreeSpaceMb field value
// and a boolean to check if the value has been set.
func (o *VCMonitorDatastore) GetFreeSpaceMbOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FreeSpaceMb, true
}

// SetFreeSpaceMb sets field value
func (o *VCMonitorDatastore) SetFreeSpaceMb(v int32) {
	o.FreeSpaceMb = v
}

// GetStatus returns the Status field value
func (o *VCMonitorDatastore) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *VCMonitorDatastore) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *VCMonitorDatastore) SetStatus(v string) {
	o.Status = v
}

// GetType returns the Type field value
func (o *VCMonitorDatastore) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VCMonitorDatastore) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VCMonitorDatastore) SetType(v string) {
	o.Type = v
}

func (o VCMonitorDatastore) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["capacity_mb"] = o.CapacityMb
	}
	if true {
		toSerialize["details"] = o.Details
	}
	if true {
		toSerialize["free_space_mb"] = o.FreeSpaceMb
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableVCMonitorDatastore struct {
	value *VCMonitorDatastore
	isSet bool
}

func (v NullableVCMonitorDatastore) Get() *VCMonitorDatastore {
	return v.value
}

func (v *NullableVCMonitorDatastore) Set(val *VCMonitorDatastore) {
	v.value = val
	v.isSet = true
}

func (v NullableVCMonitorDatastore) IsSet() bool {
	return v.isSet
}

func (v *NullableVCMonitorDatastore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVCMonitorDatastore(val *VCMonitorDatastore) *NullableVCMonitorDatastore {
	return &NullableVCMonitorDatastore{value: val, isSet: true}
}

func (v NullableVCMonitorDatastore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVCMonitorDatastore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
