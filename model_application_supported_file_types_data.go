/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// ApplicationSupportedFileTypesData Information about the file types supported by the application.
type ApplicationSupportedFileTypesData struct {
	// Whether or not the file types supported by this application should be allowed to automatically update to reflect changes reported by the agent. Typically this should be set to false if the application has manually configured supported file types. Default is true.
	EnableAutoUpdateFileTypes bool `json:"enable_auto_update_file_types"`
	// Whether or not the other file types supported by this application should be allowed to automatically update to reflect changes reported by the agent. Typically this should be set to false if the application has manually configured supported file types.
	EnableAutoUpdateOtherFileTypes bool `json:"enable_auto_update_other_file_types"`
	// Set of file types reported by the application as supported (if this application is discovered) or as specified by the administrator (if this application is manually configured). If unset, this application does not present any file type support.
	FileTypes *[]ApplicationFileTypeData `json:"file_types,omitempty"`
	// This represents the different file types reported by Application that can be passed from agent to client via broker or as specified by the administrator (if this application is manually configured). If unset, this application does not present any other file type support.
	OtherFileTypes *[]ApplicationOtherFileTypeData `json:"other_file_types,omitempty"`
}

// NewApplicationSupportedFileTypesData instantiates a new ApplicationSupportedFileTypesData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationSupportedFileTypesData(enableAutoUpdateFileTypes bool, enableAutoUpdateOtherFileTypes bool) *ApplicationSupportedFileTypesData {
	this := ApplicationSupportedFileTypesData{}
	this.EnableAutoUpdateFileTypes = enableAutoUpdateFileTypes
	this.EnableAutoUpdateOtherFileTypes = enableAutoUpdateOtherFileTypes
	return &this
}

// NewApplicationSupportedFileTypesDataWithDefaults instantiates a new ApplicationSupportedFileTypesData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationSupportedFileTypesDataWithDefaults() *ApplicationSupportedFileTypesData {
	this := ApplicationSupportedFileTypesData{}
	return &this
}

// GetEnableAutoUpdateFileTypes returns the EnableAutoUpdateFileTypes field value
func (o *ApplicationSupportedFileTypesData) GetEnableAutoUpdateFileTypes() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EnableAutoUpdateFileTypes
}

// GetEnableAutoUpdateFileTypesOk returns a tuple with the EnableAutoUpdateFileTypes field value
// and a boolean to check if the value has been set.
func (o *ApplicationSupportedFileTypesData) GetEnableAutoUpdateFileTypesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnableAutoUpdateFileTypes, true
}

// SetEnableAutoUpdateFileTypes sets field value
func (o *ApplicationSupportedFileTypesData) SetEnableAutoUpdateFileTypes(v bool) {
	o.EnableAutoUpdateFileTypes = v
}

// GetEnableAutoUpdateOtherFileTypes returns the EnableAutoUpdateOtherFileTypes field value
func (o *ApplicationSupportedFileTypesData) GetEnableAutoUpdateOtherFileTypes() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EnableAutoUpdateOtherFileTypes
}

// GetEnableAutoUpdateOtherFileTypesOk returns a tuple with the EnableAutoUpdateOtherFileTypes field value
// and a boolean to check if the value has been set.
func (o *ApplicationSupportedFileTypesData) GetEnableAutoUpdateOtherFileTypesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnableAutoUpdateOtherFileTypes, true
}

// SetEnableAutoUpdateOtherFileTypes sets field value
func (o *ApplicationSupportedFileTypesData) SetEnableAutoUpdateOtherFileTypes(v bool) {
	o.EnableAutoUpdateOtherFileTypes = v
}

// GetFileTypes returns the FileTypes field value if set, zero value otherwise.
func (o *ApplicationSupportedFileTypesData) GetFileTypes() []ApplicationFileTypeData {
	if o == nil || o.FileTypes == nil {
		var ret []ApplicationFileTypeData
		return ret
	}
	return *o.FileTypes
}

// GetFileTypesOk returns a tuple with the FileTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSupportedFileTypesData) GetFileTypesOk() (*[]ApplicationFileTypeData, bool) {
	if o == nil || o.FileTypes == nil {
		return nil, false
	}
	return o.FileTypes, true
}

// HasFileTypes returns a boolean if a field has been set.
func (o *ApplicationSupportedFileTypesData) HasFileTypes() bool {
	if o != nil && o.FileTypes != nil {
		return true
	}

	return false
}

// SetFileTypes gets a reference to the given []ApplicationFileTypeData and assigns it to the FileTypes field.
func (o *ApplicationSupportedFileTypesData) SetFileTypes(v []ApplicationFileTypeData) {
	o.FileTypes = &v
}

// GetOtherFileTypes returns the OtherFileTypes field value if set, zero value otherwise.
func (o *ApplicationSupportedFileTypesData) GetOtherFileTypes() []ApplicationOtherFileTypeData {
	if o == nil || o.OtherFileTypes == nil {
		var ret []ApplicationOtherFileTypeData
		return ret
	}
	return *o.OtherFileTypes
}

// GetOtherFileTypesOk returns a tuple with the OtherFileTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSupportedFileTypesData) GetOtherFileTypesOk() (*[]ApplicationOtherFileTypeData, bool) {
	if o == nil || o.OtherFileTypes == nil {
		return nil, false
	}
	return o.OtherFileTypes, true
}

// HasOtherFileTypes returns a boolean if a field has been set.
func (o *ApplicationSupportedFileTypesData) HasOtherFileTypes() bool {
	if o != nil && o.OtherFileTypes != nil {
		return true
	}

	return false
}

// SetOtherFileTypes gets a reference to the given []ApplicationOtherFileTypeData and assigns it to the OtherFileTypes field.
func (o *ApplicationSupportedFileTypesData) SetOtherFileTypes(v []ApplicationOtherFileTypeData) {
	o.OtherFileTypes = &v
}

func (o ApplicationSupportedFileTypesData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["enable_auto_update_file_types"] = o.EnableAutoUpdateFileTypes
	}
	if true {
		toSerialize["enable_auto_update_other_file_types"] = o.EnableAutoUpdateOtherFileTypes
	}
	if o.FileTypes != nil {
		toSerialize["file_types"] = o.FileTypes
	}
	if o.OtherFileTypes != nil {
		toSerialize["other_file_types"] = o.OtherFileTypes
	}
	return json.Marshal(toSerialize)
}

type NullableApplicationSupportedFileTypesData struct {
	value *ApplicationSupportedFileTypesData
	isSet bool
}

func (v NullableApplicationSupportedFileTypesData) Get() *ApplicationSupportedFileTypesData {
	return v.value
}

func (v *NullableApplicationSupportedFileTypesData) Set(val *ApplicationSupportedFileTypesData) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationSupportedFileTypesData) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationSupportedFileTypesData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationSupportedFileTypesData(val *ApplicationSupportedFileTypesData) *NullableApplicationSupportedFileTypesData {
	return &NullableApplicationSupportedFileTypesData{value: val, isSet: true}
}

func (v NullableApplicationSupportedFileTypesData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationSupportedFileTypesData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
