/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FarmDisplayProtocolSettingsUpdateSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FarmDisplayProtocolSettingsUpdateSpec{}

// FarmDisplayProtocolSettingsUpdateSpec Display protocol settings for the farm.
type FarmDisplayProtocolSettingsUpdateSpec struct {
	// Indicates whether the users can choose the protocol.
	AllowUsersToChooseProtocol bool `json:"allow_users_to_choose_protocol"`
	// Indicates default server display protocol, when user is not allowed to choose protocol.Farms support PCOIP, RDP and BLAST. * RDP: Microsoft Remote Desktop Protocol. * PCOIP: PCoIP protocol. * BLAST: BLAST protocol.
	DefaultDisplayProtocol string `json:"default_display_protocol"`
	// Indicates whether session collaboration feature is enabled. Session collaboration allows a user to share their remote session with other users.
	SessionCollaborationEnabled bool `json:"session_collaboration_enabled"`
}

type _FarmDisplayProtocolSettingsUpdateSpec FarmDisplayProtocolSettingsUpdateSpec

// NewFarmDisplayProtocolSettingsUpdateSpec instantiates a new FarmDisplayProtocolSettingsUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFarmDisplayProtocolSettingsUpdateSpec(allowUsersToChooseProtocol bool, defaultDisplayProtocol string, sessionCollaborationEnabled bool) *FarmDisplayProtocolSettingsUpdateSpec {
	this := FarmDisplayProtocolSettingsUpdateSpec{}
	this.AllowUsersToChooseProtocol = allowUsersToChooseProtocol
	this.DefaultDisplayProtocol = defaultDisplayProtocol
	this.SessionCollaborationEnabled = sessionCollaborationEnabled
	return &this
}

// NewFarmDisplayProtocolSettingsUpdateSpecWithDefaults instantiates a new FarmDisplayProtocolSettingsUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFarmDisplayProtocolSettingsUpdateSpecWithDefaults() *FarmDisplayProtocolSettingsUpdateSpec {
	this := FarmDisplayProtocolSettingsUpdateSpec{}
	return &this
}

// GetAllowUsersToChooseProtocol returns the AllowUsersToChooseProtocol field value
func (o *FarmDisplayProtocolSettingsUpdateSpec) GetAllowUsersToChooseProtocol() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowUsersToChooseProtocol
}

// GetAllowUsersToChooseProtocolOk returns a tuple with the AllowUsersToChooseProtocol field value
// and a boolean to check if the value has been set.
func (o *FarmDisplayProtocolSettingsUpdateSpec) GetAllowUsersToChooseProtocolOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowUsersToChooseProtocol, true
}

// SetAllowUsersToChooseProtocol sets field value
func (o *FarmDisplayProtocolSettingsUpdateSpec) SetAllowUsersToChooseProtocol(v bool) {
	o.AllowUsersToChooseProtocol = v
}

// GetDefaultDisplayProtocol returns the DefaultDisplayProtocol field value
func (o *FarmDisplayProtocolSettingsUpdateSpec) GetDefaultDisplayProtocol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultDisplayProtocol
}

// GetDefaultDisplayProtocolOk returns a tuple with the DefaultDisplayProtocol field value
// and a boolean to check if the value has been set.
func (o *FarmDisplayProtocolSettingsUpdateSpec) GetDefaultDisplayProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultDisplayProtocol, true
}

// SetDefaultDisplayProtocol sets field value
func (o *FarmDisplayProtocolSettingsUpdateSpec) SetDefaultDisplayProtocol(v string) {
	o.DefaultDisplayProtocol = v
}

// GetSessionCollaborationEnabled returns the SessionCollaborationEnabled field value
func (o *FarmDisplayProtocolSettingsUpdateSpec) GetSessionCollaborationEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SessionCollaborationEnabled
}

// GetSessionCollaborationEnabledOk returns a tuple with the SessionCollaborationEnabled field value
// and a boolean to check if the value has been set.
func (o *FarmDisplayProtocolSettingsUpdateSpec) GetSessionCollaborationEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SessionCollaborationEnabled, true
}

// SetSessionCollaborationEnabled sets field value
func (o *FarmDisplayProtocolSettingsUpdateSpec) SetSessionCollaborationEnabled(v bool) {
	o.SessionCollaborationEnabled = v
}

func (o FarmDisplayProtocolSettingsUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FarmDisplayProtocolSettingsUpdateSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["allow_users_to_choose_protocol"] = o.AllowUsersToChooseProtocol
	toSerialize["default_display_protocol"] = o.DefaultDisplayProtocol
	toSerialize["session_collaboration_enabled"] = o.SessionCollaborationEnabled
	return toSerialize, nil
}

func (o *FarmDisplayProtocolSettingsUpdateSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"allow_users_to_choose_protocol",
		"default_display_protocol",
		"session_collaboration_enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFarmDisplayProtocolSettingsUpdateSpec := _FarmDisplayProtocolSettingsUpdateSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFarmDisplayProtocolSettingsUpdateSpec)

	if err != nil {
		return err
	}

	*o = FarmDisplayProtocolSettingsUpdateSpec(varFarmDisplayProtocolSettingsUpdateSpec)

	return err
}

type NullableFarmDisplayProtocolSettingsUpdateSpec struct {
	value *FarmDisplayProtocolSettingsUpdateSpec
	isSet bool
}

func (v NullableFarmDisplayProtocolSettingsUpdateSpec) Get() *FarmDisplayProtocolSettingsUpdateSpec {
	return v.value
}

func (v *NullableFarmDisplayProtocolSettingsUpdateSpec) Set(val *FarmDisplayProtocolSettingsUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableFarmDisplayProtocolSettingsUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableFarmDisplayProtocolSettingsUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFarmDisplayProtocolSettingsUpdateSpec(val *FarmDisplayProtocolSettingsUpdateSpec) *NullableFarmDisplayProtocolSettingsUpdateSpec {
	return &NullableFarmDisplayProtocolSettingsUpdateSpec{value: val, isSet: true}
}

func (v NullableFarmDisplayProtocolSettingsUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFarmDisplayProtocolSettingsUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


