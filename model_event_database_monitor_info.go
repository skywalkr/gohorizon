/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the EventDatabaseMonitorInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventDatabaseMonitorInfo{}

// EventDatabaseMonitorInfo Event Database Monitor Information
type EventDatabaseMonitorInfo struct {
	Details *EventDatabaseMonitorDetails `json:"details,omitempty"`
	// Number of events recorded in the database
	EventCount *int32 `json:"event_count,omitempty"`
	// State of the database. * CONNECTED: Connection Server is connected to the database. * CONNECTING: Connection Server is connecting to the database. * DISCONNECTED: Connection Server is disconnected from the database. * RECONNECTING: Connection Server is reconnecting to the database. * ERROR: Error in connecting to the database from Connection Server. * NOT_CONFIGURED: Database is not configured. * UNKNOWN: Unknown state.
	Status *string `json:"status,omitempty"`
}

// NewEventDatabaseMonitorInfo instantiates a new EventDatabaseMonitorInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventDatabaseMonitorInfo() *EventDatabaseMonitorInfo {
	this := EventDatabaseMonitorInfo{}
	return &this
}

// NewEventDatabaseMonitorInfoWithDefaults instantiates a new EventDatabaseMonitorInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventDatabaseMonitorInfoWithDefaults() *EventDatabaseMonitorInfo {
	this := EventDatabaseMonitorInfo{}
	return &this
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *EventDatabaseMonitorInfo) GetDetails() EventDatabaseMonitorDetails {
	if o == nil || IsNil(o.Details) {
		var ret EventDatabaseMonitorDetails
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDatabaseMonitorInfo) GetDetailsOk() (*EventDatabaseMonitorDetails, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *EventDatabaseMonitorInfo) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given EventDatabaseMonitorDetails and assigns it to the Details field.
func (o *EventDatabaseMonitorInfo) SetDetails(v EventDatabaseMonitorDetails) {
	o.Details = &v
}

// GetEventCount returns the EventCount field value if set, zero value otherwise.
func (o *EventDatabaseMonitorInfo) GetEventCount() int32 {
	if o == nil || IsNil(o.EventCount) {
		var ret int32
		return ret
	}
	return *o.EventCount
}

// GetEventCountOk returns a tuple with the EventCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDatabaseMonitorInfo) GetEventCountOk() (*int32, bool) {
	if o == nil || IsNil(o.EventCount) {
		return nil, false
	}
	return o.EventCount, true
}

// HasEventCount returns a boolean if a field has been set.
func (o *EventDatabaseMonitorInfo) HasEventCount() bool {
	if o != nil && !IsNil(o.EventCount) {
		return true
	}

	return false
}

// SetEventCount gets a reference to the given int32 and assigns it to the EventCount field.
func (o *EventDatabaseMonitorInfo) SetEventCount(v int32) {
	o.EventCount = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *EventDatabaseMonitorInfo) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDatabaseMonitorInfo) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *EventDatabaseMonitorInfo) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *EventDatabaseMonitorInfo) SetStatus(v string) {
	o.Status = &v
}

func (o EventDatabaseMonitorInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventDatabaseMonitorInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.EventCount) {
		toSerialize["event_count"] = o.EventCount
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableEventDatabaseMonitorInfo struct {
	value *EventDatabaseMonitorInfo
	isSet bool
}

func (v NullableEventDatabaseMonitorInfo) Get() *EventDatabaseMonitorInfo {
	return v.value
}

func (v *NullableEventDatabaseMonitorInfo) Set(val *EventDatabaseMonitorInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableEventDatabaseMonitorInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableEventDatabaseMonitorInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventDatabaseMonitorInfo(val *EventDatabaseMonitorInfo) *NullableEventDatabaseMonitorInfo {
	return &NullableEventDatabaseMonitorInfo{value: val, isSet: true}
}

func (v NullableEventDatabaseMonitorInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventDatabaseMonitorInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


