/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// VCMonitorDetails Details about the Virtual Center.
type VCMonitorDetails struct {
	// API Version of the Virtual Center.
	ApiVersion string `json:"api_version"`
	// Build number of the Virtual Center.
	Build string `json:"build"`
	// Version of the Virtual Center.
	Version string `json:"version"`
}

// NewVCMonitorDetails instantiates a new VCMonitorDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVCMonitorDetails(apiVersion string, build string, version string) *VCMonitorDetails {
	this := VCMonitorDetails{}
	this.ApiVersion = apiVersion
	this.Build = build
	this.Version = version
	return &this
}

// NewVCMonitorDetailsWithDefaults instantiates a new VCMonitorDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVCMonitorDetailsWithDefaults() *VCMonitorDetails {
	this := VCMonitorDetails{}
	return &this
}

// GetApiVersion returns the ApiVersion field value
func (o *VCMonitorDetails) GetApiVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value
// and a boolean to check if the value has been set.
func (o *VCMonitorDetails) GetApiVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiVersion, true
}

// SetApiVersion sets field value
func (o *VCMonitorDetails) SetApiVersion(v string) {
	o.ApiVersion = v
}

// GetBuild returns the Build field value
func (o *VCMonitorDetails) GetBuild() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Build
}

// GetBuildOk returns a tuple with the Build field value
// and a boolean to check if the value has been set.
func (o *VCMonitorDetails) GetBuildOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Build, true
}

// SetBuild sets field value
func (o *VCMonitorDetails) SetBuild(v string) {
	o.Build = v
}

// GetVersion returns the Version field value
func (o *VCMonitorDetails) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *VCMonitorDetails) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *VCMonitorDetails) SetVersion(v string) {
	o.Version = v
}

func (o VCMonitorDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["api_version"] = o.ApiVersion
	}
	if true {
		toSerialize["build"] = o.Build
	}
	if true {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableVCMonitorDetails struct {
	value *VCMonitorDetails
	isSet bool
}

func (v NullableVCMonitorDetails) Get() *VCMonitorDetails {
	return v.value
}

func (v *NullableVCMonitorDetails) Set(val *VCMonitorDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableVCMonitorDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableVCMonitorDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVCMonitorDetails(val *VCMonitorDetails) *NullableVCMonitorDetails {
	return &NullableVCMonitorDetails{value: val, isSet: true}
}

func (v NullableVCMonitorDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVCMonitorDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
