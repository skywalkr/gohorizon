/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SAMLAuthenticatorUpdateSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SAMLAuthenticatorUpdateSpec{}

// SAMLAuthenticatorUpdateSpec Information required to update SAML authenticator.
type SAMLAuthenticatorUpdateSpec struct {
	// The administrator URL for this SAML authenticator. This must specify a protocol (scheme) of http or https.
	AdministratorUrl *string `json:"administrator_url,omitempty"`
	// SAML Authenticator certificate.
	Certificate *string `json:"certificate,omitempty"`
	// Type of Certificate. * PEM: PEM encoded certificate type * UNKNOWN: Unknown certificate type
	CertificateType *string `json:"certificate_type,omitempty"`
	// The description of this SAML authenticator.
	Description *string `json:"description,omitempty"`
	// The label for this SAML authenticator. It must be unique among all other SAML authenticators.
	Label string `json:"label"`
	// The metadata URL that this SAML authenticator uses to fetch metadata. This must specify a protocol (scheme) of https. It must be unique among all other SAML authenticators. This is required if authenticator_type is set to DYNAMIC.
	MetadataUrl *string `json:"metadata_url,omitempty"`
	// Indicates how password present in SAML assertion is handled if True SSO is triggered. This is required if the trigger_mode is set to ENABLE_ALWAYS or REQUIRE_ALWAYS. * REMOVE: Remove any passwords. * PASSTHRU: Pass through any passwords. * ERROR: Error if there is a password.
	PasswordMode *string `json:"password_mode,omitempty"`
	// The static metadata of a SAML authenticator which contains an entity id, signing keys, and encryption keys for processing SAML authentication. This property is required if authenticator_type is set to STATIC.
	StaticMetadata *string `json:"static_metadata,omitempty"`
	// Indicates how True SSO is triggered on sessions using this authenticator. * DISABLED: Do not use True SSO. * ENABLE_IF_NO_PASSWORD: If no password is supplied, use a valid (domain matching) connector if it exists. * REQUIRE_IF_NO_PASSWORD: If no password is supplied, use and require a valid (domain matching) connector. * ENABLE_ALWAYS: Regardless of a password, use a valid (domain matching) connector if it exists. * REQUIRE_ALWAYS: Regardless of a password, use and require a valid (domain matching) connector.
	TriggerMode string `json:"trigger_mode"`
}

type _SAMLAuthenticatorUpdateSpec SAMLAuthenticatorUpdateSpec

// NewSAMLAuthenticatorUpdateSpec instantiates a new SAMLAuthenticatorUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSAMLAuthenticatorUpdateSpec(label string, triggerMode string) *SAMLAuthenticatorUpdateSpec {
	this := SAMLAuthenticatorUpdateSpec{}
	this.Label = label
	this.TriggerMode = triggerMode
	return &this
}

// NewSAMLAuthenticatorUpdateSpecWithDefaults instantiates a new SAMLAuthenticatorUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSAMLAuthenticatorUpdateSpecWithDefaults() *SAMLAuthenticatorUpdateSpec {
	this := SAMLAuthenticatorUpdateSpec{}
	return &this
}

// GetAdministratorUrl returns the AdministratorUrl field value if set, zero value otherwise.
func (o *SAMLAuthenticatorUpdateSpec) GetAdministratorUrl() string {
	if o == nil || IsNil(o.AdministratorUrl) {
		var ret string
		return ret
	}
	return *o.AdministratorUrl
}

// GetAdministratorUrlOk returns a tuple with the AdministratorUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAMLAuthenticatorUpdateSpec) GetAdministratorUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AdministratorUrl) {
		return nil, false
	}
	return o.AdministratorUrl, true
}

// HasAdministratorUrl returns a boolean if a field has been set.
func (o *SAMLAuthenticatorUpdateSpec) HasAdministratorUrl() bool {
	if o != nil && !IsNil(o.AdministratorUrl) {
		return true
	}

	return false
}

// SetAdministratorUrl gets a reference to the given string and assigns it to the AdministratorUrl field.
func (o *SAMLAuthenticatorUpdateSpec) SetAdministratorUrl(v string) {
	o.AdministratorUrl = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *SAMLAuthenticatorUpdateSpec) GetCertificate() string {
	if o == nil || IsNil(o.Certificate) {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAMLAuthenticatorUpdateSpec) GetCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *SAMLAuthenticatorUpdateSpec) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *SAMLAuthenticatorUpdateSpec) SetCertificate(v string) {
	o.Certificate = &v
}

// GetCertificateType returns the CertificateType field value if set, zero value otherwise.
func (o *SAMLAuthenticatorUpdateSpec) GetCertificateType() string {
	if o == nil || IsNil(o.CertificateType) {
		var ret string
		return ret
	}
	return *o.CertificateType
}

// GetCertificateTypeOk returns a tuple with the CertificateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAMLAuthenticatorUpdateSpec) GetCertificateTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateType) {
		return nil, false
	}
	return o.CertificateType, true
}

// HasCertificateType returns a boolean if a field has been set.
func (o *SAMLAuthenticatorUpdateSpec) HasCertificateType() bool {
	if o != nil && !IsNil(o.CertificateType) {
		return true
	}

	return false
}

// SetCertificateType gets a reference to the given string and assigns it to the CertificateType field.
func (o *SAMLAuthenticatorUpdateSpec) SetCertificateType(v string) {
	o.CertificateType = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SAMLAuthenticatorUpdateSpec) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAMLAuthenticatorUpdateSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SAMLAuthenticatorUpdateSpec) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SAMLAuthenticatorUpdateSpec) SetDescription(v string) {
	o.Description = &v
}

// GetLabel returns the Label field value
func (o *SAMLAuthenticatorUpdateSpec) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *SAMLAuthenticatorUpdateSpec) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *SAMLAuthenticatorUpdateSpec) SetLabel(v string) {
	o.Label = v
}

// GetMetadataUrl returns the MetadataUrl field value if set, zero value otherwise.
func (o *SAMLAuthenticatorUpdateSpec) GetMetadataUrl() string {
	if o == nil || IsNil(o.MetadataUrl) {
		var ret string
		return ret
	}
	return *o.MetadataUrl
}

// GetMetadataUrlOk returns a tuple with the MetadataUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAMLAuthenticatorUpdateSpec) GetMetadataUrlOk() (*string, bool) {
	if o == nil || IsNil(o.MetadataUrl) {
		return nil, false
	}
	return o.MetadataUrl, true
}

// HasMetadataUrl returns a boolean if a field has been set.
func (o *SAMLAuthenticatorUpdateSpec) HasMetadataUrl() bool {
	if o != nil && !IsNil(o.MetadataUrl) {
		return true
	}

	return false
}

// SetMetadataUrl gets a reference to the given string and assigns it to the MetadataUrl field.
func (o *SAMLAuthenticatorUpdateSpec) SetMetadataUrl(v string) {
	o.MetadataUrl = &v
}

// GetPasswordMode returns the PasswordMode field value if set, zero value otherwise.
func (o *SAMLAuthenticatorUpdateSpec) GetPasswordMode() string {
	if o == nil || IsNil(o.PasswordMode) {
		var ret string
		return ret
	}
	return *o.PasswordMode
}

// GetPasswordModeOk returns a tuple with the PasswordMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAMLAuthenticatorUpdateSpec) GetPasswordModeOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordMode) {
		return nil, false
	}
	return o.PasswordMode, true
}

// HasPasswordMode returns a boolean if a field has been set.
func (o *SAMLAuthenticatorUpdateSpec) HasPasswordMode() bool {
	if o != nil && !IsNil(o.PasswordMode) {
		return true
	}

	return false
}

// SetPasswordMode gets a reference to the given string and assigns it to the PasswordMode field.
func (o *SAMLAuthenticatorUpdateSpec) SetPasswordMode(v string) {
	o.PasswordMode = &v
}

// GetStaticMetadata returns the StaticMetadata field value if set, zero value otherwise.
func (o *SAMLAuthenticatorUpdateSpec) GetStaticMetadata() string {
	if o == nil || IsNil(o.StaticMetadata) {
		var ret string
		return ret
	}
	return *o.StaticMetadata
}

// GetStaticMetadataOk returns a tuple with the StaticMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAMLAuthenticatorUpdateSpec) GetStaticMetadataOk() (*string, bool) {
	if o == nil || IsNil(o.StaticMetadata) {
		return nil, false
	}
	return o.StaticMetadata, true
}

// HasStaticMetadata returns a boolean if a field has been set.
func (o *SAMLAuthenticatorUpdateSpec) HasStaticMetadata() bool {
	if o != nil && !IsNil(o.StaticMetadata) {
		return true
	}

	return false
}

// SetStaticMetadata gets a reference to the given string and assigns it to the StaticMetadata field.
func (o *SAMLAuthenticatorUpdateSpec) SetStaticMetadata(v string) {
	o.StaticMetadata = &v
}

// GetTriggerMode returns the TriggerMode field value
func (o *SAMLAuthenticatorUpdateSpec) GetTriggerMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TriggerMode
}

// GetTriggerModeOk returns a tuple with the TriggerMode field value
// and a boolean to check if the value has been set.
func (o *SAMLAuthenticatorUpdateSpec) GetTriggerModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TriggerMode, true
}

// SetTriggerMode sets field value
func (o *SAMLAuthenticatorUpdateSpec) SetTriggerMode(v string) {
	o.TriggerMode = v
}

func (o SAMLAuthenticatorUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SAMLAuthenticatorUpdateSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdministratorUrl) {
		toSerialize["administrator_url"] = o.AdministratorUrl
	}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.CertificateType) {
		toSerialize["certificate_type"] = o.CertificateType
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["label"] = o.Label
	if !IsNil(o.MetadataUrl) {
		toSerialize["metadata_url"] = o.MetadataUrl
	}
	if !IsNil(o.PasswordMode) {
		toSerialize["password_mode"] = o.PasswordMode
	}
	if !IsNil(o.StaticMetadata) {
		toSerialize["static_metadata"] = o.StaticMetadata
	}
	toSerialize["trigger_mode"] = o.TriggerMode
	return toSerialize, nil
}

func (o *SAMLAuthenticatorUpdateSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"label",
		"trigger_mode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSAMLAuthenticatorUpdateSpec := _SAMLAuthenticatorUpdateSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSAMLAuthenticatorUpdateSpec)

	if err != nil {
		return err
	}

	*o = SAMLAuthenticatorUpdateSpec(varSAMLAuthenticatorUpdateSpec)

	return err
}

type NullableSAMLAuthenticatorUpdateSpec struct {
	value *SAMLAuthenticatorUpdateSpec
	isSet bool
}

func (v NullableSAMLAuthenticatorUpdateSpec) Get() *SAMLAuthenticatorUpdateSpec {
	return v.value
}

func (v *NullableSAMLAuthenticatorUpdateSpec) Set(val *SAMLAuthenticatorUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableSAMLAuthenticatorUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableSAMLAuthenticatorUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSAMLAuthenticatorUpdateSpec(val *SAMLAuthenticatorUpdateSpec) *NullableSAMLAuthenticatorUpdateSpec {
	return &NullableSAMLAuthenticatorUpdateSpec{value: val, isSet: true}
}

func (v NullableSAMLAuthenticatorUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSAMLAuthenticatorUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


