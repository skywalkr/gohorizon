/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the TrueSSOCertificateServerInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrueSSOCertificateServerInfo{}

// TrueSSOCertificateServerInfo Certificate server data available to this domain. 
type TrueSSOCertificateServerInfo struct {
	// Unique (common) name of this certificate server.
	CertificateServerName *string `json:"certificate_server_name,omitempty"`
	// DNS name network address of this certificate server.
	CertificateServerNetworkAddress *string `json:"certificate_server_network_address,omitempty"`
	// The status of the certificate server's certificate. * VALID: The certificate is valid. * NOT_YET_VALID: The certificate is not yet valid. * UNKNOWN: The certificate status is unknown. A certificate server with a certificate with this status cannot be used in connector creation. * INVALID: The certificate is corrupt or unable to be used. A certificate server with a certificate with this status cannot be used in connector creation. * EXPIRED: The certificate has expired. A certificate server with a certificate with this status cannot be used in connector creation. * NOT_TRUSTED: The certificate is not in the NTAuth (Enterprise) store. A certificate server with a certificate with this status cannot be used in connector creation.
	CertificateStatus *string `json:"certificate_status,omitempty"`
	// The status of the enrollment server's connection to the certificate server. * CONNECTED: The enrollment server is connected to the certificate server. * CONNECTED_DEGRADED: The enrollment server has connected to the certificate server, but the certificate server is in a degraded state. Either the database is loading and it can't yet issue certificates (for up to 20 seconds) OR the last request took an excessive time to complete (more than 1000 milliseconds). * SERVICE_UNAVAILABLE: The enrollment server can connect to the certificate server, but the service is unavailable. A certificate server with a service in this status cannot be used in connector creation. * DISCONNECTED: The enrollment server is not connected to the certificate server.
	ConnectionStatus *string `json:"connection_status,omitempty"`
	// Additional non-localized explanation of the connection status.
	ConnectionStatusReason *string `json:"connection_status_reason,omitempty"`
	// Collection of certificate template names available to this certificate server.
	TemplateNames []string `json:"template_names,omitempty"`
}

// NewTrueSSOCertificateServerInfo instantiates a new TrueSSOCertificateServerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrueSSOCertificateServerInfo() *TrueSSOCertificateServerInfo {
	this := TrueSSOCertificateServerInfo{}
	return &this
}

// NewTrueSSOCertificateServerInfoWithDefaults instantiates a new TrueSSOCertificateServerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrueSSOCertificateServerInfoWithDefaults() *TrueSSOCertificateServerInfo {
	this := TrueSSOCertificateServerInfo{}
	return &this
}

// GetCertificateServerName returns the CertificateServerName field value if set, zero value otherwise.
func (o *TrueSSOCertificateServerInfo) GetCertificateServerName() string {
	if o == nil || IsNil(o.CertificateServerName) {
		var ret string
		return ret
	}
	return *o.CertificateServerName
}

// GetCertificateServerNameOk returns a tuple with the CertificateServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrueSSOCertificateServerInfo) GetCertificateServerNameOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateServerName) {
		return nil, false
	}
	return o.CertificateServerName, true
}

// HasCertificateServerName returns a boolean if a field has been set.
func (o *TrueSSOCertificateServerInfo) HasCertificateServerName() bool {
	if o != nil && !IsNil(o.CertificateServerName) {
		return true
	}

	return false
}

// SetCertificateServerName gets a reference to the given string and assigns it to the CertificateServerName field.
func (o *TrueSSOCertificateServerInfo) SetCertificateServerName(v string) {
	o.CertificateServerName = &v
}

// GetCertificateServerNetworkAddress returns the CertificateServerNetworkAddress field value if set, zero value otherwise.
func (o *TrueSSOCertificateServerInfo) GetCertificateServerNetworkAddress() string {
	if o == nil || IsNil(o.CertificateServerNetworkAddress) {
		var ret string
		return ret
	}
	return *o.CertificateServerNetworkAddress
}

// GetCertificateServerNetworkAddressOk returns a tuple with the CertificateServerNetworkAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrueSSOCertificateServerInfo) GetCertificateServerNetworkAddressOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateServerNetworkAddress) {
		return nil, false
	}
	return o.CertificateServerNetworkAddress, true
}

// HasCertificateServerNetworkAddress returns a boolean if a field has been set.
func (o *TrueSSOCertificateServerInfo) HasCertificateServerNetworkAddress() bool {
	if o != nil && !IsNil(o.CertificateServerNetworkAddress) {
		return true
	}

	return false
}

// SetCertificateServerNetworkAddress gets a reference to the given string and assigns it to the CertificateServerNetworkAddress field.
func (o *TrueSSOCertificateServerInfo) SetCertificateServerNetworkAddress(v string) {
	o.CertificateServerNetworkAddress = &v
}

// GetCertificateStatus returns the CertificateStatus field value if set, zero value otherwise.
func (o *TrueSSOCertificateServerInfo) GetCertificateStatus() string {
	if o == nil || IsNil(o.CertificateStatus) {
		var ret string
		return ret
	}
	return *o.CertificateStatus
}

// GetCertificateStatusOk returns a tuple with the CertificateStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrueSSOCertificateServerInfo) GetCertificateStatusOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateStatus) {
		return nil, false
	}
	return o.CertificateStatus, true
}

// HasCertificateStatus returns a boolean if a field has been set.
func (o *TrueSSOCertificateServerInfo) HasCertificateStatus() bool {
	if o != nil && !IsNil(o.CertificateStatus) {
		return true
	}

	return false
}

// SetCertificateStatus gets a reference to the given string and assigns it to the CertificateStatus field.
func (o *TrueSSOCertificateServerInfo) SetCertificateStatus(v string) {
	o.CertificateStatus = &v
}

// GetConnectionStatus returns the ConnectionStatus field value if set, zero value otherwise.
func (o *TrueSSOCertificateServerInfo) GetConnectionStatus() string {
	if o == nil || IsNil(o.ConnectionStatus) {
		var ret string
		return ret
	}
	return *o.ConnectionStatus
}

// GetConnectionStatusOk returns a tuple with the ConnectionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrueSSOCertificateServerInfo) GetConnectionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionStatus) {
		return nil, false
	}
	return o.ConnectionStatus, true
}

// HasConnectionStatus returns a boolean if a field has been set.
func (o *TrueSSOCertificateServerInfo) HasConnectionStatus() bool {
	if o != nil && !IsNil(o.ConnectionStatus) {
		return true
	}

	return false
}

// SetConnectionStatus gets a reference to the given string and assigns it to the ConnectionStatus field.
func (o *TrueSSOCertificateServerInfo) SetConnectionStatus(v string) {
	o.ConnectionStatus = &v
}

// GetConnectionStatusReason returns the ConnectionStatusReason field value if set, zero value otherwise.
func (o *TrueSSOCertificateServerInfo) GetConnectionStatusReason() string {
	if o == nil || IsNil(o.ConnectionStatusReason) {
		var ret string
		return ret
	}
	return *o.ConnectionStatusReason
}

// GetConnectionStatusReasonOk returns a tuple with the ConnectionStatusReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrueSSOCertificateServerInfo) GetConnectionStatusReasonOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionStatusReason) {
		return nil, false
	}
	return o.ConnectionStatusReason, true
}

// HasConnectionStatusReason returns a boolean if a field has been set.
func (o *TrueSSOCertificateServerInfo) HasConnectionStatusReason() bool {
	if o != nil && !IsNil(o.ConnectionStatusReason) {
		return true
	}

	return false
}

// SetConnectionStatusReason gets a reference to the given string and assigns it to the ConnectionStatusReason field.
func (o *TrueSSOCertificateServerInfo) SetConnectionStatusReason(v string) {
	o.ConnectionStatusReason = &v
}

// GetTemplateNames returns the TemplateNames field value if set, zero value otherwise.
func (o *TrueSSOCertificateServerInfo) GetTemplateNames() []string {
	if o == nil || IsNil(o.TemplateNames) {
		var ret []string
		return ret
	}
	return o.TemplateNames
}

// GetTemplateNamesOk returns a tuple with the TemplateNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrueSSOCertificateServerInfo) GetTemplateNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.TemplateNames) {
		return nil, false
	}
	return o.TemplateNames, true
}

// HasTemplateNames returns a boolean if a field has been set.
func (o *TrueSSOCertificateServerInfo) HasTemplateNames() bool {
	if o != nil && !IsNil(o.TemplateNames) {
		return true
	}

	return false
}

// SetTemplateNames gets a reference to the given []string and assigns it to the TemplateNames field.
func (o *TrueSSOCertificateServerInfo) SetTemplateNames(v []string) {
	o.TemplateNames = v
}

func (o TrueSSOCertificateServerInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrueSSOCertificateServerInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CertificateServerName) {
		toSerialize["certificate_server_name"] = o.CertificateServerName
	}
	if !IsNil(o.CertificateServerNetworkAddress) {
		toSerialize["certificate_server_network_address"] = o.CertificateServerNetworkAddress
	}
	if !IsNil(o.CertificateStatus) {
		toSerialize["certificate_status"] = o.CertificateStatus
	}
	if !IsNil(o.ConnectionStatus) {
		toSerialize["connection_status"] = o.ConnectionStatus
	}
	if !IsNil(o.ConnectionStatusReason) {
		toSerialize["connection_status_reason"] = o.ConnectionStatusReason
	}
	if !IsNil(o.TemplateNames) {
		toSerialize["template_names"] = o.TemplateNames
	}
	return toSerialize, nil
}

type NullableTrueSSOCertificateServerInfo struct {
	value *TrueSSOCertificateServerInfo
	isSet bool
}

func (v NullableTrueSSOCertificateServerInfo) Get() *TrueSSOCertificateServerInfo {
	return v.value
}

func (v *NullableTrueSSOCertificateServerInfo) Set(val *TrueSSOCertificateServerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTrueSSOCertificateServerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTrueSSOCertificateServerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrueSSOCertificateServerInfo(val *TrueSSOCertificateServerInfo) *NullableTrueSSOCertificateServerInfo {
	return &NullableTrueSSOCertificateServerInfo{value: val, isSet: true}
}

func (v NullableTrueSSOCertificateServerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrueSSOCertificateServerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


