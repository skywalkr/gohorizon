/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the DesktopPoolViewStorageAcceleratorSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DesktopPoolViewStorageAcceleratorSettings{}

// DesktopPoolViewStorageAcceleratorSettings Settings related to the View Storage Accelerator feature.
type DesktopPoolViewStorageAcceleratorSettings struct {
	// A list of blackout times. Storage accelerator regeneration and machine disk space reclamation do not occur during blackout times. The same blackout policy applies to both operations. If unset, no blackout times are used.
	BlackoutTimes []ViewStorageAcceleratorBlackoutTimeSettings `json:"blackout_times,omitempty"`
	// How often to regenerate the View Storage Accelerator cache. Measured in Days.
	RegenerateViewStorageAcceleratorDays *int32 `json:"regenerate_view_storage_accelerator_days,omitempty"`
	// Whether to use View Storage Accelerator.
	UseViewStorageAccelerator *bool `json:"use_view_storage_accelerator,omitempty"`
	// Disk types to enable for the View Storage Accelerator feature. This is only applicable to linked clone desktop pools. * OS_DISKS: OS disks. * OS_AND_PERSISTENT_DISKS: OS and persistent disks.
	ViewStorageAcceleratorDiskTypes *string `json:"view_storage_accelerator_disk_types,omitempty"`
}

// NewDesktopPoolViewStorageAcceleratorSettings instantiates a new DesktopPoolViewStorageAcceleratorSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDesktopPoolViewStorageAcceleratorSettings() *DesktopPoolViewStorageAcceleratorSettings {
	this := DesktopPoolViewStorageAcceleratorSettings{}
	return &this
}

// NewDesktopPoolViewStorageAcceleratorSettingsWithDefaults instantiates a new DesktopPoolViewStorageAcceleratorSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDesktopPoolViewStorageAcceleratorSettingsWithDefaults() *DesktopPoolViewStorageAcceleratorSettings {
	this := DesktopPoolViewStorageAcceleratorSettings{}
	return &this
}

// GetBlackoutTimes returns the BlackoutTimes field value if set, zero value otherwise.
func (o *DesktopPoolViewStorageAcceleratorSettings) GetBlackoutTimes() []ViewStorageAcceleratorBlackoutTimeSettings {
	if o == nil || IsNil(o.BlackoutTimes) {
		var ret []ViewStorageAcceleratorBlackoutTimeSettings
		return ret
	}
	return o.BlackoutTimes
}

// GetBlackoutTimesOk returns a tuple with the BlackoutTimes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolViewStorageAcceleratorSettings) GetBlackoutTimesOk() ([]ViewStorageAcceleratorBlackoutTimeSettings, bool) {
	if o == nil || IsNil(o.BlackoutTimes) {
		return nil, false
	}
	return o.BlackoutTimes, true
}

// HasBlackoutTimes returns a boolean if a field has been set.
func (o *DesktopPoolViewStorageAcceleratorSettings) HasBlackoutTimes() bool {
	if o != nil && !IsNil(o.BlackoutTimes) {
		return true
	}

	return false
}

// SetBlackoutTimes gets a reference to the given []ViewStorageAcceleratorBlackoutTimeSettings and assigns it to the BlackoutTimes field.
func (o *DesktopPoolViewStorageAcceleratorSettings) SetBlackoutTimes(v []ViewStorageAcceleratorBlackoutTimeSettings) {
	o.BlackoutTimes = v
}

// GetRegenerateViewStorageAcceleratorDays returns the RegenerateViewStorageAcceleratorDays field value if set, zero value otherwise.
func (o *DesktopPoolViewStorageAcceleratorSettings) GetRegenerateViewStorageAcceleratorDays() int32 {
	if o == nil || IsNil(o.RegenerateViewStorageAcceleratorDays) {
		var ret int32
		return ret
	}
	return *o.RegenerateViewStorageAcceleratorDays
}

// GetRegenerateViewStorageAcceleratorDaysOk returns a tuple with the RegenerateViewStorageAcceleratorDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolViewStorageAcceleratorSettings) GetRegenerateViewStorageAcceleratorDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.RegenerateViewStorageAcceleratorDays) {
		return nil, false
	}
	return o.RegenerateViewStorageAcceleratorDays, true
}

// HasRegenerateViewStorageAcceleratorDays returns a boolean if a field has been set.
func (o *DesktopPoolViewStorageAcceleratorSettings) HasRegenerateViewStorageAcceleratorDays() bool {
	if o != nil && !IsNil(o.RegenerateViewStorageAcceleratorDays) {
		return true
	}

	return false
}

// SetRegenerateViewStorageAcceleratorDays gets a reference to the given int32 and assigns it to the RegenerateViewStorageAcceleratorDays field.
func (o *DesktopPoolViewStorageAcceleratorSettings) SetRegenerateViewStorageAcceleratorDays(v int32) {
	o.RegenerateViewStorageAcceleratorDays = &v
}

// GetUseViewStorageAccelerator returns the UseViewStorageAccelerator field value if set, zero value otherwise.
func (o *DesktopPoolViewStorageAcceleratorSettings) GetUseViewStorageAccelerator() bool {
	if o == nil || IsNil(o.UseViewStorageAccelerator) {
		var ret bool
		return ret
	}
	return *o.UseViewStorageAccelerator
}

// GetUseViewStorageAcceleratorOk returns a tuple with the UseViewStorageAccelerator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolViewStorageAcceleratorSettings) GetUseViewStorageAcceleratorOk() (*bool, bool) {
	if o == nil || IsNil(o.UseViewStorageAccelerator) {
		return nil, false
	}
	return o.UseViewStorageAccelerator, true
}

// HasUseViewStorageAccelerator returns a boolean if a field has been set.
func (o *DesktopPoolViewStorageAcceleratorSettings) HasUseViewStorageAccelerator() bool {
	if o != nil && !IsNil(o.UseViewStorageAccelerator) {
		return true
	}

	return false
}

// SetUseViewStorageAccelerator gets a reference to the given bool and assigns it to the UseViewStorageAccelerator field.
func (o *DesktopPoolViewStorageAcceleratorSettings) SetUseViewStorageAccelerator(v bool) {
	o.UseViewStorageAccelerator = &v
}

// GetViewStorageAcceleratorDiskTypes returns the ViewStorageAcceleratorDiskTypes field value if set, zero value otherwise.
func (o *DesktopPoolViewStorageAcceleratorSettings) GetViewStorageAcceleratorDiskTypes() string {
	if o == nil || IsNil(o.ViewStorageAcceleratorDiskTypes) {
		var ret string
		return ret
	}
	return *o.ViewStorageAcceleratorDiskTypes
}

// GetViewStorageAcceleratorDiskTypesOk returns a tuple with the ViewStorageAcceleratorDiskTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolViewStorageAcceleratorSettings) GetViewStorageAcceleratorDiskTypesOk() (*string, bool) {
	if o == nil || IsNil(o.ViewStorageAcceleratorDiskTypes) {
		return nil, false
	}
	return o.ViewStorageAcceleratorDiskTypes, true
}

// HasViewStorageAcceleratorDiskTypes returns a boolean if a field has been set.
func (o *DesktopPoolViewStorageAcceleratorSettings) HasViewStorageAcceleratorDiskTypes() bool {
	if o != nil && !IsNil(o.ViewStorageAcceleratorDiskTypes) {
		return true
	}

	return false
}

// SetViewStorageAcceleratorDiskTypes gets a reference to the given string and assigns it to the ViewStorageAcceleratorDiskTypes field.
func (o *DesktopPoolViewStorageAcceleratorSettings) SetViewStorageAcceleratorDiskTypes(v string) {
	o.ViewStorageAcceleratorDiskTypes = &v
}

func (o DesktopPoolViewStorageAcceleratorSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DesktopPoolViewStorageAcceleratorSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlackoutTimes) {
		toSerialize["blackout_times"] = o.BlackoutTimes
	}
	if !IsNil(o.RegenerateViewStorageAcceleratorDays) {
		toSerialize["regenerate_view_storage_accelerator_days"] = o.RegenerateViewStorageAcceleratorDays
	}
	if !IsNil(o.UseViewStorageAccelerator) {
		toSerialize["use_view_storage_accelerator"] = o.UseViewStorageAccelerator
	}
	if !IsNil(o.ViewStorageAcceleratorDiskTypes) {
		toSerialize["view_storage_accelerator_disk_types"] = o.ViewStorageAcceleratorDiskTypes
	}
	return toSerialize, nil
}

type NullableDesktopPoolViewStorageAcceleratorSettings struct {
	value *DesktopPoolViewStorageAcceleratorSettings
	isSet bool
}

func (v NullableDesktopPoolViewStorageAcceleratorSettings) Get() *DesktopPoolViewStorageAcceleratorSettings {
	return v.value
}

func (v *NullableDesktopPoolViewStorageAcceleratorSettings) Set(val *DesktopPoolViewStorageAcceleratorSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableDesktopPoolViewStorageAcceleratorSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableDesktopPoolViewStorageAcceleratorSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDesktopPoolViewStorageAcceleratorSettings(val *DesktopPoolViewStorageAcceleratorSettings) *NullableDesktopPoolViewStorageAcceleratorSettings {
	return &NullableDesktopPoolViewStorageAcceleratorSettings{value: val, isSet: true}
}

func (v NullableDesktopPoolViewStorageAcceleratorSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDesktopPoolViewStorageAcceleratorSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


