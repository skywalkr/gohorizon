/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the HeldVMInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeldVMInfo{}

// HeldVMInfo Information related to a held Virtual Machine.
type HeldVMInfo struct {
	// Unique virtual center moid representing the virtual machine.
	MachineId *string `json:"machine_id,omitempty"`
	// Machine state * PROVISIONING: The machine is being provisioned. * PROVISIONING_ERROR: An error occurred during provisioning. * WAITING_FOR_AGENT: Horizon Connection Server is waiting to establish communication with Horizon Agent for one of these cases - a virtual machine in a manual desktop pool, unmanaged machine or RDS server. * CUSTOMIZING: The machine which is from an automated desktop pool is being customized after provisioning. * DELETING: The machine is marked for deletion. * MAINTENANCE: The machine is in maintenance mode. Users cannot log in or use the machine. * ERROR: An unknown error occurred in the machine. * PROVISIONED: The machine is powered off or suspended. * AGENT_UNREACHABLE: Horizon Connection Server cannot establish communication with Horizon Agent on the machine. * UNASSIGNED_USER_CONNECTED: A user other than the assigned user is logged in to the machine in a dedicated desktop pool. * CONNECTED: The machine is in an active session and has an active connection to a Horizon client. * UNASSIGNED_USER_DISCONNECTED: A user other than the assigned user is logged in and disconnected from the machine in a dedicated desktop pool. * DISCONNECTED: The machine is in an active session, but it is disconnected from the Horizon client. * AGENT_ERROR_STARTUP_IN_PROGRESS: Horizon Agent has started on the machine, but other required services such as the display protocol are still starting. * AGENT_ERROR_DISABLED: Horizon Agent is disabled. * AGENT_ERROR_INVALID_IP: Horizon Agent has an invalid IP address. * AGENT_ERROR_NEEDS_REBOOT: Horizon Agent needs reboot. * AGENT_ERROR_PROTOCOL_FAILURE: Protocol such as BLAST, RDP or PCoIP is not enabled. * AGENT_CONFIG_ERROR: The Remote Desktop Services role is not enabled on the windows server. * AGENT_DRAIN_MODE: RDS host is configured for drain mode. New connections are currently disabled. * AGENT_DRAIN_UNTIL_RESTART: RDS host is configured for drain-until-restart mode. * ALREADY_USED: The machine is configured to have only one session which is currently in progress and cannot accept new sessions. * AVAILABLE: The machine is powered on and ready for active connections. * IN_PROGRESS: There is a machine operation in progress. * DISABLED: The machine is disabled. * DISABLE_IN_PROGRESS: Disabled Horizon Connection Server still has some Horizon brokered sessions. It can still accept re-connections. * VALIDATING: The Horizon Connection Server is synchronizing state information with the agent. * UNKNOWN: Could not determine the state of the machine.
	MachineState *string `json:"machine_state,omitempty"`
	// VM name.
	Name *string `json:"name,omitempty"`
}

// NewHeldVMInfo instantiates a new HeldVMInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeldVMInfo() *HeldVMInfo {
	this := HeldVMInfo{}
	return &this
}

// NewHeldVMInfoWithDefaults instantiates a new HeldVMInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeldVMInfoWithDefaults() *HeldVMInfo {
	this := HeldVMInfo{}
	return &this
}

// GetMachineId returns the MachineId field value if set, zero value otherwise.
func (o *HeldVMInfo) GetMachineId() string {
	if o == nil || IsNil(o.MachineId) {
		var ret string
		return ret
	}
	return *o.MachineId
}

// GetMachineIdOk returns a tuple with the MachineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeldVMInfo) GetMachineIdOk() (*string, bool) {
	if o == nil || IsNil(o.MachineId) {
		return nil, false
	}
	return o.MachineId, true
}

// HasMachineId returns a boolean if a field has been set.
func (o *HeldVMInfo) HasMachineId() bool {
	if o != nil && !IsNil(o.MachineId) {
		return true
	}

	return false
}

// SetMachineId gets a reference to the given string and assigns it to the MachineId field.
func (o *HeldVMInfo) SetMachineId(v string) {
	o.MachineId = &v
}

// GetMachineState returns the MachineState field value if set, zero value otherwise.
func (o *HeldVMInfo) GetMachineState() string {
	if o == nil || IsNil(o.MachineState) {
		var ret string
		return ret
	}
	return *o.MachineState
}

// GetMachineStateOk returns a tuple with the MachineState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeldVMInfo) GetMachineStateOk() (*string, bool) {
	if o == nil || IsNil(o.MachineState) {
		return nil, false
	}
	return o.MachineState, true
}

// HasMachineState returns a boolean if a field has been set.
func (o *HeldVMInfo) HasMachineState() bool {
	if o != nil && !IsNil(o.MachineState) {
		return true
	}

	return false
}

// SetMachineState gets a reference to the given string and assigns it to the MachineState field.
func (o *HeldVMInfo) SetMachineState(v string) {
	o.MachineState = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HeldVMInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeldVMInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HeldVMInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *HeldVMInfo) SetName(v string) {
	o.Name = &v
}

func (o HeldVMInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeldVMInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MachineId) {
		toSerialize["machine_id"] = o.MachineId
	}
	if !IsNil(o.MachineState) {
		toSerialize["machine_state"] = o.MachineState
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableHeldVMInfo struct {
	value *HeldVMInfo
	isSet bool
}

func (v NullableHeldVMInfo) Get() *HeldVMInfo {
	return v.value
}

func (v *NullableHeldVMInfo) Set(val *HeldVMInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableHeldVMInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableHeldVMInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeldVMInfo(val *HeldVMInfo) *NullableHeldVMInfo {
	return &NullableHeldVMInfo{value: val, isSet: true}
}

func (v NullableHeldVMInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeldVMInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


