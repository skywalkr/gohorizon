/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// RDSServerMonitorDetails Details of RDS Server.
type RDSServerMonitorDetails struct {
	// Agent build number.
	AgentBuild string `json:"agent_build"`
	// Agent version.
	AgentVersion string `json:"agent_version"`
	// Maximum number of sessions for RDS server as configured by administrator. Will be unset if the value is not configured.
	MaxSessionsCountConfigured *int32 `json:"max_sessions_count_configured,omitempty"`
	// Operating System version. * UNKNOWN: Unknown * WINDOWS_SERVER_2003: Windows Server 2003 * WINDOWS_SERVER_2008: Windows Server 2008 * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2 * WINDOWS_SERVER_2012: Windows Server 2012 * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2 * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above * LINUX_SERVER_OTHER: Linux Server (other)
	OperatingSystem string `json:"operating_system"`
	// State of RDS Server. * WAIT_FOR_AGENT: Connection Server is waiting to establish communication with View Agent on a RDS Server. * AGENT_UNREACHABLE: Connection Server cannot establish communication with View Agent on a RDS Server. * AGENT_CONFIG_ERROR: The RDS Server has configuration error. Ex: Remote Desktop Service role is not enabled. * AVAILABLE: The RDS Server is powered on and ready for an active connection. * DISABLED: The RDS Server is disabled. * DISABLE_IN_PROGRESS: Disabled RDS server still has some brokered sessions. It can still accept re-connections. * PROVISIONING: The RDS Server is being provisioned. * PROVISIONING_ERROR: An error occurred during provisioning. * CUSTOMIZING: The RDS Server is being customized. * DELETING: The RDS Server is marked for deletion. It will be deleted soon. * MAINTENANCE: The RDS Server is in maintenance mode. * ERROR: An unknown error occurred in the RDS Server. * PROVISIONED: The RDS Server has been provisioned. * CONNECTED: The RDS Server is in an active session. * DISCONNECTED: The RDS Server is in an active session but is disconnected. * AGENT_ERR_STARTUP_IN_PROGRESS: The Horizon Agent has started on the virtual machine, but other required services such as the display protocol are still starting. * AGENT_ERR_DISABLED: The Horizon Agent is disabled. * AGENT_ERR_INVALID_IP: The Horizon Agent has an invalid IP. * AGENT_ERR_NEED_REBOOT: The Horizon Agent needs reboot. * AGENT_ERR_PROTOCOL_FAILURE: Protocol such as RDP or PCoIP is not enabled. * AGENT_ERR_DOMAIN_FAILURE: The RDS Server has an invalid domain. * AGENT_DRAIN_MODE: The RDS Server is configured for drain mode. * AGENT_DRAIN_UNTIL_RESTART: The RDS Server is configured a mode to drain until restart. * ALREADY_USED: The RDS Server cannot accept new sessions. * IN_PROGRESS: There is a RDS Server operation in progress. * VALIDATING: The connection server is synchronizing state information with the agent. * UNKNOWN: Could not determine the state of the RDS Server.
	State string `json:"state"`
}

// NewRDSServerMonitorDetails instantiates a new RDSServerMonitorDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRDSServerMonitorDetails(agentBuild string, agentVersion string, operatingSystem string, state string) *RDSServerMonitorDetails {
	this := RDSServerMonitorDetails{}
	this.AgentBuild = agentBuild
	this.AgentVersion = agentVersion
	this.OperatingSystem = operatingSystem
	this.State = state
	return &this
}

// NewRDSServerMonitorDetailsWithDefaults instantiates a new RDSServerMonitorDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRDSServerMonitorDetailsWithDefaults() *RDSServerMonitorDetails {
	this := RDSServerMonitorDetails{}
	return &this
}

// GetAgentBuild returns the AgentBuild field value
func (o *RDSServerMonitorDetails) GetAgentBuild() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AgentBuild
}

// GetAgentBuildOk returns a tuple with the AgentBuild field value
// and a boolean to check if the value has been set.
func (o *RDSServerMonitorDetails) GetAgentBuildOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AgentBuild, true
}

// SetAgentBuild sets field value
func (o *RDSServerMonitorDetails) SetAgentBuild(v string) {
	o.AgentBuild = v
}

// GetAgentVersion returns the AgentVersion field value
func (o *RDSServerMonitorDetails) GetAgentVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AgentVersion
}

// GetAgentVersionOk returns a tuple with the AgentVersion field value
// and a boolean to check if the value has been set.
func (o *RDSServerMonitorDetails) GetAgentVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AgentVersion, true
}

// SetAgentVersion sets field value
func (o *RDSServerMonitorDetails) SetAgentVersion(v string) {
	o.AgentVersion = v
}

// GetMaxSessionsCountConfigured returns the MaxSessionsCountConfigured field value if set, zero value otherwise.
func (o *RDSServerMonitorDetails) GetMaxSessionsCountConfigured() int32 {
	if o == nil || o.MaxSessionsCountConfigured == nil {
		var ret int32
		return ret
	}
	return *o.MaxSessionsCountConfigured
}

// GetMaxSessionsCountConfiguredOk returns a tuple with the MaxSessionsCountConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RDSServerMonitorDetails) GetMaxSessionsCountConfiguredOk() (*int32, bool) {
	if o == nil || o.MaxSessionsCountConfigured == nil {
		return nil, false
	}
	return o.MaxSessionsCountConfigured, true
}

// HasMaxSessionsCountConfigured returns a boolean if a field has been set.
func (o *RDSServerMonitorDetails) HasMaxSessionsCountConfigured() bool {
	if o != nil && o.MaxSessionsCountConfigured != nil {
		return true
	}

	return false
}

// SetMaxSessionsCountConfigured gets a reference to the given int32 and assigns it to the MaxSessionsCountConfigured field.
func (o *RDSServerMonitorDetails) SetMaxSessionsCountConfigured(v int32) {
	o.MaxSessionsCountConfigured = &v
}

// GetOperatingSystem returns the OperatingSystem field value
func (o *RDSServerMonitorDetails) GetOperatingSystem() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OperatingSystem
}

// GetOperatingSystemOk returns a tuple with the OperatingSystem field value
// and a boolean to check if the value has been set.
func (o *RDSServerMonitorDetails) GetOperatingSystemOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OperatingSystem, true
}

// SetOperatingSystem sets field value
func (o *RDSServerMonitorDetails) SetOperatingSystem(v string) {
	o.OperatingSystem = v
}

// GetState returns the State field value
func (o *RDSServerMonitorDetails) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *RDSServerMonitorDetails) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *RDSServerMonitorDetails) SetState(v string) {
	o.State = v
}

func (o RDSServerMonitorDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["agent_build"] = o.AgentBuild
	}
	if true {
		toSerialize["agent_version"] = o.AgentVersion
	}
	if o.MaxSessionsCountConfigured != nil {
		toSerialize["max_sessions_count_configured"] = o.MaxSessionsCountConfigured
	}
	if true {
		toSerialize["operating_system"] = o.OperatingSystem
	}
	if true {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}

type NullableRDSServerMonitorDetails struct {
	value *RDSServerMonitorDetails
	isSet bool
}

func (v NullableRDSServerMonitorDetails) Get() *RDSServerMonitorDetails {
	return v.value
}

func (v *NullableRDSServerMonitorDetails) Set(val *RDSServerMonitorDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableRDSServerMonitorDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableRDSServerMonitorDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRDSServerMonitorDetails(val *RDSServerMonitorDetails) *NullableRDSServerMonitorDetails {
	return &NullableRDSServerMonitorDetails{value: val, isSet: true}
}

func (v NullableRDSServerMonitorDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRDSServerMonitorDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
