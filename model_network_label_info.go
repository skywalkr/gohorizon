/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// NetworkLabelInfo Information related to network label.
type NetworkLabelInfo struct {
	// Available ports in network label.
	AvailablePorts *int32 `json:"available_ports,omitempty"`
	// Unique ID representing the network label.
	Id *string `json:"id,omitempty"`
	// Reasons that may preclude this Network Label from being used in desktoppool/farm configuration.
	IncompatibleReasons *[]string `json:"incompatible_reasons,omitempty"`
	// Network label type. * EARLY_BINDING: A free Distributed Virtual Port will be selected and assigned to a Virtual Machine when the Virtual Machine is reconfigured to connect to the portgroup. Instant clones desktop pools/farms only support port group type of early binding. * EPHEMERAL: A Distributed Virtual Port will be created and assigned to a Virtual Machine when the Virtual Machine is powered on, and will be deleted when the Virtual Machine is powered off. An ephemeral portgroup has no limit on the number of ports that can be a part of this portgroup. In cases where the vCenter Server is unavailable the host can create conflict ports in this portgroup to be used by a Virtual Machine at power on. * LATE_BINDING: Deprecated as of vSphere API 5.0 A free DistributedVirtualPort will be selected and assigned to a Virtual Machine when the Virtual Machine is powered on.
	LabelType *string `json:"label_type,omitempty"`
	// The total number of ports present.
	MaxPorts *int32 `json:"max_ports,omitempty"`
	// Network label name.
	Name *string `json:"name,omitempty"`
	// Network label switch type. * STANDARD_SWITCH: Standard Switch. * DISTRIBUTED_VIRTUAL_SWITCH: Distributed Virtual Switch. * NSX_NETWORK_SWITCH: NSX network Switch.
	SwitchType *string `json:"switch_type,omitempty"`
}

// NewNetworkLabelInfo instantiates a new NetworkLabelInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkLabelInfo() *NetworkLabelInfo {
	this := NetworkLabelInfo{}
	return &this
}

// NewNetworkLabelInfoWithDefaults instantiates a new NetworkLabelInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkLabelInfoWithDefaults() *NetworkLabelInfo {
	this := NetworkLabelInfo{}
	return &this
}

// GetAvailablePorts returns the AvailablePorts field value if set, zero value otherwise.
func (o *NetworkLabelInfo) GetAvailablePorts() int32 {
	if o == nil || o.AvailablePorts == nil {
		var ret int32
		return ret
	}
	return *o.AvailablePorts
}

// GetAvailablePortsOk returns a tuple with the AvailablePorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkLabelInfo) GetAvailablePortsOk() (*int32, bool) {
	if o == nil || o.AvailablePorts == nil {
		return nil, false
	}
	return o.AvailablePorts, true
}

// HasAvailablePorts returns a boolean if a field has been set.
func (o *NetworkLabelInfo) HasAvailablePorts() bool {
	if o != nil && o.AvailablePorts != nil {
		return true
	}

	return false
}

// SetAvailablePorts gets a reference to the given int32 and assigns it to the AvailablePorts field.
func (o *NetworkLabelInfo) SetAvailablePorts(v int32) {
	o.AvailablePorts = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NetworkLabelInfo) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkLabelInfo) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NetworkLabelInfo) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NetworkLabelInfo) SetId(v string) {
	o.Id = &v
}

// GetIncompatibleReasons returns the IncompatibleReasons field value if set, zero value otherwise.
func (o *NetworkLabelInfo) GetIncompatibleReasons() []string {
	if o == nil || o.IncompatibleReasons == nil {
		var ret []string
		return ret
	}
	return *o.IncompatibleReasons
}

// GetIncompatibleReasonsOk returns a tuple with the IncompatibleReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkLabelInfo) GetIncompatibleReasonsOk() (*[]string, bool) {
	if o == nil || o.IncompatibleReasons == nil {
		return nil, false
	}
	return o.IncompatibleReasons, true
}

// HasIncompatibleReasons returns a boolean if a field has been set.
func (o *NetworkLabelInfo) HasIncompatibleReasons() bool {
	if o != nil && o.IncompatibleReasons != nil {
		return true
	}

	return false
}

// SetIncompatibleReasons gets a reference to the given []string and assigns it to the IncompatibleReasons field.
func (o *NetworkLabelInfo) SetIncompatibleReasons(v []string) {
	o.IncompatibleReasons = &v
}

// GetLabelType returns the LabelType field value if set, zero value otherwise.
func (o *NetworkLabelInfo) GetLabelType() string {
	if o == nil || o.LabelType == nil {
		var ret string
		return ret
	}
	return *o.LabelType
}

// GetLabelTypeOk returns a tuple with the LabelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkLabelInfo) GetLabelTypeOk() (*string, bool) {
	if o == nil || o.LabelType == nil {
		return nil, false
	}
	return o.LabelType, true
}

// HasLabelType returns a boolean if a field has been set.
func (o *NetworkLabelInfo) HasLabelType() bool {
	if o != nil && o.LabelType != nil {
		return true
	}

	return false
}

// SetLabelType gets a reference to the given string and assigns it to the LabelType field.
func (o *NetworkLabelInfo) SetLabelType(v string) {
	o.LabelType = &v
}

// GetMaxPorts returns the MaxPorts field value if set, zero value otherwise.
func (o *NetworkLabelInfo) GetMaxPorts() int32 {
	if o == nil || o.MaxPorts == nil {
		var ret int32
		return ret
	}
	return *o.MaxPorts
}

// GetMaxPortsOk returns a tuple with the MaxPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkLabelInfo) GetMaxPortsOk() (*int32, bool) {
	if o == nil || o.MaxPorts == nil {
		return nil, false
	}
	return o.MaxPorts, true
}

// HasMaxPorts returns a boolean if a field has been set.
func (o *NetworkLabelInfo) HasMaxPorts() bool {
	if o != nil && o.MaxPorts != nil {
		return true
	}

	return false
}

// SetMaxPorts gets a reference to the given int32 and assigns it to the MaxPorts field.
func (o *NetworkLabelInfo) SetMaxPorts(v int32) {
	o.MaxPorts = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NetworkLabelInfo) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkLabelInfo) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NetworkLabelInfo) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NetworkLabelInfo) SetName(v string) {
	o.Name = &v
}

// GetSwitchType returns the SwitchType field value if set, zero value otherwise.
func (o *NetworkLabelInfo) GetSwitchType() string {
	if o == nil || o.SwitchType == nil {
		var ret string
		return ret
	}
	return *o.SwitchType
}

// GetSwitchTypeOk returns a tuple with the SwitchType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkLabelInfo) GetSwitchTypeOk() (*string, bool) {
	if o == nil || o.SwitchType == nil {
		return nil, false
	}
	return o.SwitchType, true
}

// HasSwitchType returns a boolean if a field has been set.
func (o *NetworkLabelInfo) HasSwitchType() bool {
	if o != nil && o.SwitchType != nil {
		return true
	}

	return false
}

// SetSwitchType gets a reference to the given string and assigns it to the SwitchType field.
func (o *NetworkLabelInfo) SetSwitchType(v string) {
	o.SwitchType = &v
}

func (o NetworkLabelInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AvailablePorts != nil {
		toSerialize["available_ports"] = o.AvailablePorts
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IncompatibleReasons != nil {
		toSerialize["incompatible_reasons"] = o.IncompatibleReasons
	}
	if o.LabelType != nil {
		toSerialize["label_type"] = o.LabelType
	}
	if o.MaxPorts != nil {
		toSerialize["max_ports"] = o.MaxPorts
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.SwitchType != nil {
		toSerialize["switch_type"] = o.SwitchType
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkLabelInfo struct {
	value *NetworkLabelInfo
	isSet bool
}

func (v NullableNetworkLabelInfo) Get() *NetworkLabelInfo {
	return v.value
}

func (v *NullableNetworkLabelInfo) Set(val *NetworkLabelInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkLabelInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkLabelInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkLabelInfo(val *NetworkLabelInfo) *NullableNetworkLabelInfo {
	return &NullableNetworkLabelInfo{value: val, isSet: true}
}

func (v NullableNetworkLabelInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkLabelInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
