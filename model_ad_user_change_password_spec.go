/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// ADUserChangePasswordSpec Specification for changing AD user's password.
type ADUserChangePasswordSpec struct {
	// The domain of user. Note that domain is optional if UPN is supplied.
	Domain *string `json:"domain,omitempty"`
	// The keyId of the cluster's SSO KeyPair used to encrypt the password key.
	KeyId string `json:"key_id"`
	// New password for the user in encrypted format.
	NewEncryptedPassword string `json:"new_encrypted_password"`
	// Old password for the user in encrypted format.
	OldEncryptedPassword string `json:"old_encrypted_password"`
	// Decryption key for the password. This key is itself encrypted with cluster's SSO keypair.
	ProtectedPasswordKey string `json:"protected_password_key"`
	// The username or UPN.
	Username string `json:"username"`
}

// NewADUserChangePasswordSpec instantiates a new ADUserChangePasswordSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewADUserChangePasswordSpec(keyId string, newEncryptedPassword string, oldEncryptedPassword string, protectedPasswordKey string, username string) *ADUserChangePasswordSpec {
	this := ADUserChangePasswordSpec{}
	this.KeyId = keyId
	this.NewEncryptedPassword = newEncryptedPassword
	this.OldEncryptedPassword = oldEncryptedPassword
	this.ProtectedPasswordKey = protectedPasswordKey
	this.Username = username
	return &this
}

// NewADUserChangePasswordSpecWithDefaults instantiates a new ADUserChangePasswordSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewADUserChangePasswordSpecWithDefaults() *ADUserChangePasswordSpec {
	this := ADUserChangePasswordSpec{}
	return &this
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *ADUserChangePasswordSpec) GetDomain() string {
	if o == nil || o.Domain == nil {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADUserChangePasswordSpec) GetDomainOk() (*string, bool) {
	if o == nil || o.Domain == nil {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *ADUserChangePasswordSpec) HasDomain() bool {
	if o != nil && o.Domain != nil {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *ADUserChangePasswordSpec) SetDomain(v string) {
	o.Domain = &v
}

// GetKeyId returns the KeyId field value
func (o *ADUserChangePasswordSpec) GetKeyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyId
}

// GetKeyIdOk returns a tuple with the KeyId field value
// and a boolean to check if the value has been set.
func (o *ADUserChangePasswordSpec) GetKeyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyId, true
}

// SetKeyId sets field value
func (o *ADUserChangePasswordSpec) SetKeyId(v string) {
	o.KeyId = v
}

// GetNewEncryptedPassword returns the NewEncryptedPassword field value
func (o *ADUserChangePasswordSpec) GetNewEncryptedPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewEncryptedPassword
}

// GetNewEncryptedPasswordOk returns a tuple with the NewEncryptedPassword field value
// and a boolean to check if the value has been set.
func (o *ADUserChangePasswordSpec) GetNewEncryptedPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewEncryptedPassword, true
}

// SetNewEncryptedPassword sets field value
func (o *ADUserChangePasswordSpec) SetNewEncryptedPassword(v string) {
	o.NewEncryptedPassword = v
}

// GetOldEncryptedPassword returns the OldEncryptedPassword field value
func (o *ADUserChangePasswordSpec) GetOldEncryptedPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OldEncryptedPassword
}

// GetOldEncryptedPasswordOk returns a tuple with the OldEncryptedPassword field value
// and a boolean to check if the value has been set.
func (o *ADUserChangePasswordSpec) GetOldEncryptedPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OldEncryptedPassword, true
}

// SetOldEncryptedPassword sets field value
func (o *ADUserChangePasswordSpec) SetOldEncryptedPassword(v string) {
	o.OldEncryptedPassword = v
}

// GetProtectedPasswordKey returns the ProtectedPasswordKey field value
func (o *ADUserChangePasswordSpec) GetProtectedPasswordKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProtectedPasswordKey
}

// GetProtectedPasswordKeyOk returns a tuple with the ProtectedPasswordKey field value
// and a boolean to check if the value has been set.
func (o *ADUserChangePasswordSpec) GetProtectedPasswordKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProtectedPasswordKey, true
}

// SetProtectedPasswordKey sets field value
func (o *ADUserChangePasswordSpec) SetProtectedPasswordKey(v string) {
	o.ProtectedPasswordKey = v
}

// GetUsername returns the Username field value
func (o *ADUserChangePasswordSpec) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *ADUserChangePasswordSpec) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *ADUserChangePasswordSpec) SetUsername(v string) {
	o.Username = v
}

func (o ADUserChangePasswordSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Domain != nil {
		toSerialize["domain"] = o.Domain
	}
	if true {
		toSerialize["key_id"] = o.KeyId
	}
	if true {
		toSerialize["new_encrypted_password"] = o.NewEncryptedPassword
	}
	if true {
		toSerialize["old_encrypted_password"] = o.OldEncryptedPassword
	}
	if true {
		toSerialize["protected_password_key"] = o.ProtectedPasswordKey
	}
	if true {
		toSerialize["username"] = o.Username
	}
	return json.Marshal(toSerialize)
}

type NullableADUserChangePasswordSpec struct {
	value *ADUserChangePasswordSpec
	isSet bool
}

func (v NullableADUserChangePasswordSpec) Get() *ADUserChangePasswordSpec {
	return v.value
}

func (v *NullableADUserChangePasswordSpec) Set(val *ADUserChangePasswordSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableADUserChangePasswordSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableADUserChangePasswordSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableADUserChangePasswordSpec(val *ADUserChangePasswordSpec) *NullableADUserChangePasswordSpec {
	return &NullableADUserChangePasswordSpec{value: val, isSet: true}
}

func (v NullableADUserChangePasswordSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableADUserChangePasswordSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
