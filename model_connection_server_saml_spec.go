/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConnectionServerSAMLSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionServerSAMLSpec{}

// ConnectionServerSAMLSpec Information related to connection server SAML authentication settings.
type ConnectionServerSAMLSpec struct {
	// List of SamlAuthenticators to use.
	SamlAuthenticatorIds []string `json:"saml_authenticator_ids,omitempty"`
	// Indicates SAML support option configuration for the end user * DISABLED: Indicates that the SAML support is disabled. * MULTI_ENABLED: Indicates that the SAML multi auth support is enabled. * MULTI_REQUIRED: Indicates that the SAML multi auth support is mandatory.
	SamlSupport string `json:"saml_support"`
	// Indicates whether old clients that don't support Workspace ONE mode are blocked.
	WorkspaceOneBlockOldClients *bool `json:"workspace_one_block_old_clients,omitempty"`
	// The hostname of the Workspace ONE Server.
	WorkspaceOneHostName *string `json:"workspace_one_host_name,omitempty"`
	// Indicates whether Workspace ONE mode is enabled.
	WorkspaceOneModeEnabled *bool `json:"workspace_one_mode_enabled,omitempty"`
}

type _ConnectionServerSAMLSpec ConnectionServerSAMLSpec

// NewConnectionServerSAMLSpec instantiates a new ConnectionServerSAMLSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionServerSAMLSpec(samlSupport string) *ConnectionServerSAMLSpec {
	this := ConnectionServerSAMLSpec{}
	this.SamlSupport = samlSupport
	return &this
}

// NewConnectionServerSAMLSpecWithDefaults instantiates a new ConnectionServerSAMLSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionServerSAMLSpecWithDefaults() *ConnectionServerSAMLSpec {
	this := ConnectionServerSAMLSpec{}
	return &this
}

// GetSamlAuthenticatorIds returns the SamlAuthenticatorIds field value if set, zero value otherwise.
func (o *ConnectionServerSAMLSpec) GetSamlAuthenticatorIds() []string {
	if o == nil || IsNil(o.SamlAuthenticatorIds) {
		var ret []string
		return ret
	}
	return o.SamlAuthenticatorIds
}

// GetSamlAuthenticatorIdsOk returns a tuple with the SamlAuthenticatorIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerSAMLSpec) GetSamlAuthenticatorIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.SamlAuthenticatorIds) {
		return nil, false
	}
	return o.SamlAuthenticatorIds, true
}

// HasSamlAuthenticatorIds returns a boolean if a field has been set.
func (o *ConnectionServerSAMLSpec) HasSamlAuthenticatorIds() bool {
	if o != nil && !IsNil(o.SamlAuthenticatorIds) {
		return true
	}

	return false
}

// SetSamlAuthenticatorIds gets a reference to the given []string and assigns it to the SamlAuthenticatorIds field.
func (o *ConnectionServerSAMLSpec) SetSamlAuthenticatorIds(v []string) {
	o.SamlAuthenticatorIds = v
}

// GetSamlSupport returns the SamlSupport field value
func (o *ConnectionServerSAMLSpec) GetSamlSupport() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SamlSupport
}

// GetSamlSupportOk returns a tuple with the SamlSupport field value
// and a boolean to check if the value has been set.
func (o *ConnectionServerSAMLSpec) GetSamlSupportOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SamlSupport, true
}

// SetSamlSupport sets field value
func (o *ConnectionServerSAMLSpec) SetSamlSupport(v string) {
	o.SamlSupport = v
}

// GetWorkspaceOneBlockOldClients returns the WorkspaceOneBlockOldClients field value if set, zero value otherwise.
func (o *ConnectionServerSAMLSpec) GetWorkspaceOneBlockOldClients() bool {
	if o == nil || IsNil(o.WorkspaceOneBlockOldClients) {
		var ret bool
		return ret
	}
	return *o.WorkspaceOneBlockOldClients
}

// GetWorkspaceOneBlockOldClientsOk returns a tuple with the WorkspaceOneBlockOldClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerSAMLSpec) GetWorkspaceOneBlockOldClientsOk() (*bool, bool) {
	if o == nil || IsNil(o.WorkspaceOneBlockOldClients) {
		return nil, false
	}
	return o.WorkspaceOneBlockOldClients, true
}

// HasWorkspaceOneBlockOldClients returns a boolean if a field has been set.
func (o *ConnectionServerSAMLSpec) HasWorkspaceOneBlockOldClients() bool {
	if o != nil && !IsNil(o.WorkspaceOneBlockOldClients) {
		return true
	}

	return false
}

// SetWorkspaceOneBlockOldClients gets a reference to the given bool and assigns it to the WorkspaceOneBlockOldClients field.
func (o *ConnectionServerSAMLSpec) SetWorkspaceOneBlockOldClients(v bool) {
	o.WorkspaceOneBlockOldClients = &v
}

// GetWorkspaceOneHostName returns the WorkspaceOneHostName field value if set, zero value otherwise.
func (o *ConnectionServerSAMLSpec) GetWorkspaceOneHostName() string {
	if o == nil || IsNil(o.WorkspaceOneHostName) {
		var ret string
		return ret
	}
	return *o.WorkspaceOneHostName
}

// GetWorkspaceOneHostNameOk returns a tuple with the WorkspaceOneHostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerSAMLSpec) GetWorkspaceOneHostNameOk() (*string, bool) {
	if o == nil || IsNil(o.WorkspaceOneHostName) {
		return nil, false
	}
	return o.WorkspaceOneHostName, true
}

// HasWorkspaceOneHostName returns a boolean if a field has been set.
func (o *ConnectionServerSAMLSpec) HasWorkspaceOneHostName() bool {
	if o != nil && !IsNil(o.WorkspaceOneHostName) {
		return true
	}

	return false
}

// SetWorkspaceOneHostName gets a reference to the given string and assigns it to the WorkspaceOneHostName field.
func (o *ConnectionServerSAMLSpec) SetWorkspaceOneHostName(v string) {
	o.WorkspaceOneHostName = &v
}

// GetWorkspaceOneModeEnabled returns the WorkspaceOneModeEnabled field value if set, zero value otherwise.
func (o *ConnectionServerSAMLSpec) GetWorkspaceOneModeEnabled() bool {
	if o == nil || IsNil(o.WorkspaceOneModeEnabled) {
		var ret bool
		return ret
	}
	return *o.WorkspaceOneModeEnabled
}

// GetWorkspaceOneModeEnabledOk returns a tuple with the WorkspaceOneModeEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerSAMLSpec) GetWorkspaceOneModeEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.WorkspaceOneModeEnabled) {
		return nil, false
	}
	return o.WorkspaceOneModeEnabled, true
}

// HasWorkspaceOneModeEnabled returns a boolean if a field has been set.
func (o *ConnectionServerSAMLSpec) HasWorkspaceOneModeEnabled() bool {
	if o != nil && !IsNil(o.WorkspaceOneModeEnabled) {
		return true
	}

	return false
}

// SetWorkspaceOneModeEnabled gets a reference to the given bool and assigns it to the WorkspaceOneModeEnabled field.
func (o *ConnectionServerSAMLSpec) SetWorkspaceOneModeEnabled(v bool) {
	o.WorkspaceOneModeEnabled = &v
}

func (o ConnectionServerSAMLSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionServerSAMLSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SamlAuthenticatorIds) {
		toSerialize["saml_authenticator_ids"] = o.SamlAuthenticatorIds
	}
	toSerialize["saml_support"] = o.SamlSupport
	if !IsNil(o.WorkspaceOneBlockOldClients) {
		toSerialize["workspace_one_block_old_clients"] = o.WorkspaceOneBlockOldClients
	}
	if !IsNil(o.WorkspaceOneHostName) {
		toSerialize["workspace_one_host_name"] = o.WorkspaceOneHostName
	}
	if !IsNil(o.WorkspaceOneModeEnabled) {
		toSerialize["workspace_one_mode_enabled"] = o.WorkspaceOneModeEnabled
	}
	return toSerialize, nil
}

func (o *ConnectionServerSAMLSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"saml_support",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnectionServerSAMLSpec := _ConnectionServerSAMLSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConnectionServerSAMLSpec)

	if err != nil {
		return err
	}

	*o = ConnectionServerSAMLSpec(varConnectionServerSAMLSpec)

	return err
}

type NullableConnectionServerSAMLSpec struct {
	value *ConnectionServerSAMLSpec
	isSet bool
}

func (v NullableConnectionServerSAMLSpec) Get() *ConnectionServerSAMLSpec {
	return v.value
}

func (v *NullableConnectionServerSAMLSpec) Set(val *ConnectionServerSAMLSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionServerSAMLSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionServerSAMLSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionServerSAMLSpec(val *ConnectionServerSAMLSpec) *NullableConnectionServerSAMLSpec {
	return &NullableConnectionServerSAMLSpec{value: val, isSet: true}
}

func (v NullableConnectionServerSAMLSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionServerSAMLSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


