/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the VCMonitorDatastoreDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VCMonitorDatastoreDetails{}

// VCMonitorDatastoreDetails Details about the datastore.
type VCMonitorDatastoreDetails struct {
	// Datastore name.
	Name *string `json:"name,omitempty"`
	// Path to the datastore.
	Path *string `json:"path,omitempty"`
	// Unique locator for datastore.
	Url *string `json:"url,omitempty"`
}

// NewVCMonitorDatastoreDetails instantiates a new VCMonitorDatastoreDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVCMonitorDatastoreDetails() *VCMonitorDatastoreDetails {
	this := VCMonitorDatastoreDetails{}
	return &this
}

// NewVCMonitorDatastoreDetailsWithDefaults instantiates a new VCMonitorDatastoreDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVCMonitorDatastoreDetailsWithDefaults() *VCMonitorDatastoreDetails {
	this := VCMonitorDatastoreDetails{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VCMonitorDatastoreDetails) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCMonitorDatastoreDetails) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VCMonitorDatastoreDetails) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VCMonitorDatastoreDetails) SetName(v string) {
	o.Name = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *VCMonitorDatastoreDetails) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCMonitorDatastoreDetails) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *VCMonitorDatastoreDetails) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *VCMonitorDatastoreDetails) SetPath(v string) {
	o.Path = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *VCMonitorDatastoreDetails) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCMonitorDatastoreDetails) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *VCMonitorDatastoreDetails) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *VCMonitorDatastoreDetails) SetUrl(v string) {
	o.Url = &v
}

func (o VCMonitorDatastoreDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VCMonitorDatastoreDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableVCMonitorDatastoreDetails struct {
	value *VCMonitorDatastoreDetails
	isSet bool
}

func (v NullableVCMonitorDatastoreDetails) Get() *VCMonitorDatastoreDetails {
	return v.value
}

func (v *NullableVCMonitorDatastoreDetails) Set(val *VCMonitorDatastoreDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableVCMonitorDatastoreDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableVCMonitorDatastoreDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVCMonitorDatastoreDetails(val *VCMonitorDatastoreDetails) *NullableVCMonitorDatastoreDetails {
	return &NullableVCMonitorDatastoreDetails{value: val, isSet: true}
}

func (v NullableVCMonitorDatastoreDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVCMonitorDatastoreDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


