/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RADIUSServerUpdateSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RADIUSServerUpdateSpec{}

// RADIUSServerUpdateSpec Information required to create a RADIUS authentication server.
type RADIUSServerUpdateSpec struct {
	// The accounting port of the RADIUS authentication server.
	AccountingPort int32 `json:"accounting_port"`
	// The authentication port of the RADIUS authentication server. Primary and secondary servers should not have both hostname and authentication port same.
	AuthenticationPort int32 `json:"authentication_port"`
	// The authentication type of the RADIUS authentication server. * PAP: Password authentication protocol. * CHAP: Challenge-handshake authentication protocol. * MSCHAP1: Microsoft challenge-handshake authentication protocol, version 1. * MSCHAP2: Microsoft challenge-handshake authentication protocol, version 2. * UNKNOWN: Indicates Auth type is unkonwn.
	AuthenticationType string `json:"authentication_type"`
	// The hostname of the RADIUS authentication server. Primary and secondary servers should not have both hostname and authentication port same.
	Hostname string `json:"hostname"`
	// The maximum number of authentication attempts for the RADIUS authentication server.
	MaxAttempts int32 `json:"max_attempts"`
	// Indicates whether it is a primary RADIUS authentication server. There must be exactly one primary RADIUS server i.e. with primary_radius_server set to true.
	PrimaryRadiusServer bool `json:"primary_radius_server"`
	// The realm prefix of the RADIUS authentication server.
	RealmPrefix *string `json:"realm_prefix,omitempty"`
	// The realm suffix of the RADIUS authentication server.
	RealmSuffix *string `json:"realm_suffix,omitempty"`
	// The server timeout (in seconds) of the RADIUS authentication server.
	ServerTimeoutSeconds int32 `json:"server_timeout_seconds"`
	// The shared secret of the RADIUS authentication server.
	SharedSecret []string `json:"shared_secret"`
}

type _RADIUSServerUpdateSpec RADIUSServerUpdateSpec

// NewRADIUSServerUpdateSpec instantiates a new RADIUSServerUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRADIUSServerUpdateSpec(accountingPort int32, authenticationPort int32, authenticationType string, hostname string, maxAttempts int32, primaryRadiusServer bool, serverTimeoutSeconds int32, sharedSecret []string) *RADIUSServerUpdateSpec {
	this := RADIUSServerUpdateSpec{}
	this.AccountingPort = accountingPort
	this.AuthenticationPort = authenticationPort
	this.AuthenticationType = authenticationType
	this.Hostname = hostname
	this.MaxAttempts = maxAttempts
	this.PrimaryRadiusServer = primaryRadiusServer
	this.ServerTimeoutSeconds = serverTimeoutSeconds
	this.SharedSecret = sharedSecret
	return &this
}

// NewRADIUSServerUpdateSpecWithDefaults instantiates a new RADIUSServerUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRADIUSServerUpdateSpecWithDefaults() *RADIUSServerUpdateSpec {
	this := RADIUSServerUpdateSpec{}
	return &this
}

// GetAccountingPort returns the AccountingPort field value
func (o *RADIUSServerUpdateSpec) GetAccountingPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AccountingPort
}

// GetAccountingPortOk returns a tuple with the AccountingPort field value
// and a boolean to check if the value has been set.
func (o *RADIUSServerUpdateSpec) GetAccountingPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountingPort, true
}

// SetAccountingPort sets field value
func (o *RADIUSServerUpdateSpec) SetAccountingPort(v int32) {
	o.AccountingPort = v
}

// GetAuthenticationPort returns the AuthenticationPort field value
func (o *RADIUSServerUpdateSpec) GetAuthenticationPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AuthenticationPort
}

// GetAuthenticationPortOk returns a tuple with the AuthenticationPort field value
// and a boolean to check if the value has been set.
func (o *RADIUSServerUpdateSpec) GetAuthenticationPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthenticationPort, true
}

// SetAuthenticationPort sets field value
func (o *RADIUSServerUpdateSpec) SetAuthenticationPort(v int32) {
	o.AuthenticationPort = v
}

// GetAuthenticationType returns the AuthenticationType field value
func (o *RADIUSServerUpdateSpec) GetAuthenticationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthenticationType
}

// GetAuthenticationTypeOk returns a tuple with the AuthenticationType field value
// and a boolean to check if the value has been set.
func (o *RADIUSServerUpdateSpec) GetAuthenticationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthenticationType, true
}

// SetAuthenticationType sets field value
func (o *RADIUSServerUpdateSpec) SetAuthenticationType(v string) {
	o.AuthenticationType = v
}

// GetHostname returns the Hostname field value
func (o *RADIUSServerUpdateSpec) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *RADIUSServerUpdateSpec) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *RADIUSServerUpdateSpec) SetHostname(v string) {
	o.Hostname = v
}

// GetMaxAttempts returns the MaxAttempts field value
func (o *RADIUSServerUpdateSpec) GetMaxAttempts() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxAttempts
}

// GetMaxAttemptsOk returns a tuple with the MaxAttempts field value
// and a boolean to check if the value has been set.
func (o *RADIUSServerUpdateSpec) GetMaxAttemptsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxAttempts, true
}

// SetMaxAttempts sets field value
func (o *RADIUSServerUpdateSpec) SetMaxAttempts(v int32) {
	o.MaxAttempts = v
}

// GetPrimaryRadiusServer returns the PrimaryRadiusServer field value
func (o *RADIUSServerUpdateSpec) GetPrimaryRadiusServer() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.PrimaryRadiusServer
}

// GetPrimaryRadiusServerOk returns a tuple with the PrimaryRadiusServer field value
// and a boolean to check if the value has been set.
func (o *RADIUSServerUpdateSpec) GetPrimaryRadiusServerOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrimaryRadiusServer, true
}

// SetPrimaryRadiusServer sets field value
func (o *RADIUSServerUpdateSpec) SetPrimaryRadiusServer(v bool) {
	o.PrimaryRadiusServer = v
}

// GetRealmPrefix returns the RealmPrefix field value if set, zero value otherwise.
func (o *RADIUSServerUpdateSpec) GetRealmPrefix() string {
	if o == nil || IsNil(o.RealmPrefix) {
		var ret string
		return ret
	}
	return *o.RealmPrefix
}

// GetRealmPrefixOk returns a tuple with the RealmPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RADIUSServerUpdateSpec) GetRealmPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.RealmPrefix) {
		return nil, false
	}
	return o.RealmPrefix, true
}

// HasRealmPrefix returns a boolean if a field has been set.
func (o *RADIUSServerUpdateSpec) HasRealmPrefix() bool {
	if o != nil && !IsNil(o.RealmPrefix) {
		return true
	}

	return false
}

// SetRealmPrefix gets a reference to the given string and assigns it to the RealmPrefix field.
func (o *RADIUSServerUpdateSpec) SetRealmPrefix(v string) {
	o.RealmPrefix = &v
}

// GetRealmSuffix returns the RealmSuffix field value if set, zero value otherwise.
func (o *RADIUSServerUpdateSpec) GetRealmSuffix() string {
	if o == nil || IsNil(o.RealmSuffix) {
		var ret string
		return ret
	}
	return *o.RealmSuffix
}

// GetRealmSuffixOk returns a tuple with the RealmSuffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RADIUSServerUpdateSpec) GetRealmSuffixOk() (*string, bool) {
	if o == nil || IsNil(o.RealmSuffix) {
		return nil, false
	}
	return o.RealmSuffix, true
}

// HasRealmSuffix returns a boolean if a field has been set.
func (o *RADIUSServerUpdateSpec) HasRealmSuffix() bool {
	if o != nil && !IsNil(o.RealmSuffix) {
		return true
	}

	return false
}

// SetRealmSuffix gets a reference to the given string and assigns it to the RealmSuffix field.
func (o *RADIUSServerUpdateSpec) SetRealmSuffix(v string) {
	o.RealmSuffix = &v
}

// GetServerTimeoutSeconds returns the ServerTimeoutSeconds field value
func (o *RADIUSServerUpdateSpec) GetServerTimeoutSeconds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ServerTimeoutSeconds
}

// GetServerTimeoutSecondsOk returns a tuple with the ServerTimeoutSeconds field value
// and a boolean to check if the value has been set.
func (o *RADIUSServerUpdateSpec) GetServerTimeoutSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerTimeoutSeconds, true
}

// SetServerTimeoutSeconds sets field value
func (o *RADIUSServerUpdateSpec) SetServerTimeoutSeconds(v int32) {
	o.ServerTimeoutSeconds = v
}

// GetSharedSecret returns the SharedSecret field value
func (o *RADIUSServerUpdateSpec) GetSharedSecret() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SharedSecret
}

// GetSharedSecretOk returns a tuple with the SharedSecret field value
// and a boolean to check if the value has been set.
func (o *RADIUSServerUpdateSpec) GetSharedSecretOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SharedSecret, true
}

// SetSharedSecret sets field value
func (o *RADIUSServerUpdateSpec) SetSharedSecret(v []string) {
	o.SharedSecret = v
}

func (o RADIUSServerUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RADIUSServerUpdateSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accounting_port"] = o.AccountingPort
	toSerialize["authentication_port"] = o.AuthenticationPort
	toSerialize["authentication_type"] = o.AuthenticationType
	toSerialize["hostname"] = o.Hostname
	toSerialize["max_attempts"] = o.MaxAttempts
	toSerialize["primary_radius_server"] = o.PrimaryRadiusServer
	if !IsNil(o.RealmPrefix) {
		toSerialize["realm_prefix"] = o.RealmPrefix
	}
	if !IsNil(o.RealmSuffix) {
		toSerialize["realm_suffix"] = o.RealmSuffix
	}
	toSerialize["server_timeout_seconds"] = o.ServerTimeoutSeconds
	toSerialize["shared_secret"] = o.SharedSecret
	return toSerialize, nil
}

func (o *RADIUSServerUpdateSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accounting_port",
		"authentication_port",
		"authentication_type",
		"hostname",
		"max_attempts",
		"primary_radius_server",
		"server_timeout_seconds",
		"shared_secret",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRADIUSServerUpdateSpec := _RADIUSServerUpdateSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRADIUSServerUpdateSpec)

	if err != nil {
		return err
	}

	*o = RADIUSServerUpdateSpec(varRADIUSServerUpdateSpec)

	return err
}

type NullableRADIUSServerUpdateSpec struct {
	value *RADIUSServerUpdateSpec
	isSet bool
}

func (v NullableRADIUSServerUpdateSpec) Get() *RADIUSServerUpdateSpec {
	return v.value
}

func (v *NullableRADIUSServerUpdateSpec) Set(val *RADIUSServerUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableRADIUSServerUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableRADIUSServerUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRADIUSServerUpdateSpec(val *RADIUSServerUpdateSpec) *NullableRADIUSServerUpdateSpec {
	return &NullableRADIUSServerUpdateSpec{value: val, isSet: true}
}

func (v NullableRADIUSServerUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRADIUSServerUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


