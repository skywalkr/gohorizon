/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FarmMaintenanceSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FarmMaintenanceSpec{}

// FarmMaintenanceSpec Information required to schedule maintenance operation on farm.
type FarmMaintenanceSpec struct {
	// New image management stream for the farm. Either parent_vm_id and snapshot_id or im_stream_id and im_tag_id are to be specified.
	ImStreamId *string `json:"im_stream_id,omitempty"`
	// New image management tag for the farm. This tag must be within the im_stream_id. Either parent_vm_id and snapshot_id or im_stream_id and im_tag_id are to be specified.
	ImTagId *string `json:"im_tag_id,omitempty"`
	// Determines when to perform the operation on RDS servers which have an active session. * FORCE_LOGOFF: Users will be forced to log off when the system is ready to execute the operation. Before being forcibly logged off, users may have a grace period in which to save their work which can be configured in Global Settings. * WAIT_FOR_LOGOFF: Wait for connected users to disconnect before the task starts. The operation starts immediately when there are no active sessions.
	LogoffPolicy string `json:"logoff_policy"`
	// The mode of schedule maintenance for Instant Clone Farm. * IMMEDIATE: All server VMs will be refreshed once, immediately or at user scheduled time. * RECURRING: All server VMs will be periodically refreshed based on FarmInstantCloneRecurringMaintenancePeriod and StartTime
	MaintenanceMode string `json:"maintenance_mode"`
	// Time when next scheduled maintenance would happen. If maintenance_mode is set to IMMEDIATE and next_scheduled_time is not set, maintenance will begin immediately. If maintenance_mode is set to RECURRING and next_scheduled_time is not set, it will be calculated based on current recurring maintenance configuration. If the value is in the past, maintenance will begin immediately. Measured as epoch time.
	NextScheduledTime *int64 `json:"next_scheduled_time,omitempty"`
	// New base image VM for the instant clone farm. This must be in the same datacenter as the base image of the farm. Either parent_vm_id and snapshot_id or im_stream_id and im_tag_id are to be specified.
	ParentVmId *string `json:"parent_vm_id,omitempty"`
	RecurringMaintenanceSettings *FarmRecurringMaintenanceSettingsSpec `json:"recurring_maintenance_settings,omitempty"`
	// New base image snapshot for the instant clone farm. This must be a snapshot of the parent_vm_id. Either parent_vm_id and snapshot_id or im_stream_id and im_tag_id are to be specified.
	SnapshotId *string `json:"snapshot_id,omitempty"`
	// Indicates whether the operation should stop on first error. Default value is true.
	StopOnFirstError *bool `json:"stop_on_first_error,omitempty"`
}

type _FarmMaintenanceSpec FarmMaintenanceSpec

// NewFarmMaintenanceSpec instantiates a new FarmMaintenanceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFarmMaintenanceSpec(logoffPolicy string, maintenanceMode string) *FarmMaintenanceSpec {
	this := FarmMaintenanceSpec{}
	this.LogoffPolicy = logoffPolicy
	this.MaintenanceMode = maintenanceMode
	return &this
}

// NewFarmMaintenanceSpecWithDefaults instantiates a new FarmMaintenanceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFarmMaintenanceSpecWithDefaults() *FarmMaintenanceSpec {
	this := FarmMaintenanceSpec{}
	return &this
}

// GetImStreamId returns the ImStreamId field value if set, zero value otherwise.
func (o *FarmMaintenanceSpec) GetImStreamId() string {
	if o == nil || IsNil(o.ImStreamId) {
		var ret string
		return ret
	}
	return *o.ImStreamId
}

// GetImStreamIdOk returns a tuple with the ImStreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmMaintenanceSpec) GetImStreamIdOk() (*string, bool) {
	if o == nil || IsNil(o.ImStreamId) {
		return nil, false
	}
	return o.ImStreamId, true
}

// HasImStreamId returns a boolean if a field has been set.
func (o *FarmMaintenanceSpec) HasImStreamId() bool {
	if o != nil && !IsNil(o.ImStreamId) {
		return true
	}

	return false
}

// SetImStreamId gets a reference to the given string and assigns it to the ImStreamId field.
func (o *FarmMaintenanceSpec) SetImStreamId(v string) {
	o.ImStreamId = &v
}

// GetImTagId returns the ImTagId field value if set, zero value otherwise.
func (o *FarmMaintenanceSpec) GetImTagId() string {
	if o == nil || IsNil(o.ImTagId) {
		var ret string
		return ret
	}
	return *o.ImTagId
}

// GetImTagIdOk returns a tuple with the ImTagId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmMaintenanceSpec) GetImTagIdOk() (*string, bool) {
	if o == nil || IsNil(o.ImTagId) {
		return nil, false
	}
	return o.ImTagId, true
}

// HasImTagId returns a boolean if a field has been set.
func (o *FarmMaintenanceSpec) HasImTagId() bool {
	if o != nil && !IsNil(o.ImTagId) {
		return true
	}

	return false
}

// SetImTagId gets a reference to the given string and assigns it to the ImTagId field.
func (o *FarmMaintenanceSpec) SetImTagId(v string) {
	o.ImTagId = &v
}

// GetLogoffPolicy returns the LogoffPolicy field value
func (o *FarmMaintenanceSpec) GetLogoffPolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LogoffPolicy
}

// GetLogoffPolicyOk returns a tuple with the LogoffPolicy field value
// and a boolean to check if the value has been set.
func (o *FarmMaintenanceSpec) GetLogoffPolicyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogoffPolicy, true
}

// SetLogoffPolicy sets field value
func (o *FarmMaintenanceSpec) SetLogoffPolicy(v string) {
	o.LogoffPolicy = v
}

// GetMaintenanceMode returns the MaintenanceMode field value
func (o *FarmMaintenanceSpec) GetMaintenanceMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MaintenanceMode
}

// GetMaintenanceModeOk returns a tuple with the MaintenanceMode field value
// and a boolean to check if the value has been set.
func (o *FarmMaintenanceSpec) GetMaintenanceModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaintenanceMode, true
}

// SetMaintenanceMode sets field value
func (o *FarmMaintenanceSpec) SetMaintenanceMode(v string) {
	o.MaintenanceMode = v
}

// GetNextScheduledTime returns the NextScheduledTime field value if set, zero value otherwise.
func (o *FarmMaintenanceSpec) GetNextScheduledTime() int64 {
	if o == nil || IsNil(o.NextScheduledTime) {
		var ret int64
		return ret
	}
	return *o.NextScheduledTime
}

// GetNextScheduledTimeOk returns a tuple with the NextScheduledTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmMaintenanceSpec) GetNextScheduledTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.NextScheduledTime) {
		return nil, false
	}
	return o.NextScheduledTime, true
}

// HasNextScheduledTime returns a boolean if a field has been set.
func (o *FarmMaintenanceSpec) HasNextScheduledTime() bool {
	if o != nil && !IsNil(o.NextScheduledTime) {
		return true
	}

	return false
}

// SetNextScheduledTime gets a reference to the given int64 and assigns it to the NextScheduledTime field.
func (o *FarmMaintenanceSpec) SetNextScheduledTime(v int64) {
	o.NextScheduledTime = &v
}

// GetParentVmId returns the ParentVmId field value if set, zero value otherwise.
func (o *FarmMaintenanceSpec) GetParentVmId() string {
	if o == nil || IsNil(o.ParentVmId) {
		var ret string
		return ret
	}
	return *o.ParentVmId
}

// GetParentVmIdOk returns a tuple with the ParentVmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmMaintenanceSpec) GetParentVmIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentVmId) {
		return nil, false
	}
	return o.ParentVmId, true
}

// HasParentVmId returns a boolean if a field has been set.
func (o *FarmMaintenanceSpec) HasParentVmId() bool {
	if o != nil && !IsNil(o.ParentVmId) {
		return true
	}

	return false
}

// SetParentVmId gets a reference to the given string and assigns it to the ParentVmId field.
func (o *FarmMaintenanceSpec) SetParentVmId(v string) {
	o.ParentVmId = &v
}

// GetRecurringMaintenanceSettings returns the RecurringMaintenanceSettings field value if set, zero value otherwise.
func (o *FarmMaintenanceSpec) GetRecurringMaintenanceSettings() FarmRecurringMaintenanceSettingsSpec {
	if o == nil || IsNil(o.RecurringMaintenanceSettings) {
		var ret FarmRecurringMaintenanceSettingsSpec
		return ret
	}
	return *o.RecurringMaintenanceSettings
}

// GetRecurringMaintenanceSettingsOk returns a tuple with the RecurringMaintenanceSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmMaintenanceSpec) GetRecurringMaintenanceSettingsOk() (*FarmRecurringMaintenanceSettingsSpec, bool) {
	if o == nil || IsNil(o.RecurringMaintenanceSettings) {
		return nil, false
	}
	return o.RecurringMaintenanceSettings, true
}

// HasRecurringMaintenanceSettings returns a boolean if a field has been set.
func (o *FarmMaintenanceSpec) HasRecurringMaintenanceSettings() bool {
	if o != nil && !IsNil(o.RecurringMaintenanceSettings) {
		return true
	}

	return false
}

// SetRecurringMaintenanceSettings gets a reference to the given FarmRecurringMaintenanceSettingsSpec and assigns it to the RecurringMaintenanceSettings field.
func (o *FarmMaintenanceSpec) SetRecurringMaintenanceSettings(v FarmRecurringMaintenanceSettingsSpec) {
	o.RecurringMaintenanceSettings = &v
}

// GetSnapshotId returns the SnapshotId field value if set, zero value otherwise.
func (o *FarmMaintenanceSpec) GetSnapshotId() string {
	if o == nil || IsNil(o.SnapshotId) {
		var ret string
		return ret
	}
	return *o.SnapshotId
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmMaintenanceSpec) GetSnapshotIdOk() (*string, bool) {
	if o == nil || IsNil(o.SnapshotId) {
		return nil, false
	}
	return o.SnapshotId, true
}

// HasSnapshotId returns a boolean if a field has been set.
func (o *FarmMaintenanceSpec) HasSnapshotId() bool {
	if o != nil && !IsNil(o.SnapshotId) {
		return true
	}

	return false
}

// SetSnapshotId gets a reference to the given string and assigns it to the SnapshotId field.
func (o *FarmMaintenanceSpec) SetSnapshotId(v string) {
	o.SnapshotId = &v
}

// GetStopOnFirstError returns the StopOnFirstError field value if set, zero value otherwise.
func (o *FarmMaintenanceSpec) GetStopOnFirstError() bool {
	if o == nil || IsNil(o.StopOnFirstError) {
		var ret bool
		return ret
	}
	return *o.StopOnFirstError
}

// GetStopOnFirstErrorOk returns a tuple with the StopOnFirstError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmMaintenanceSpec) GetStopOnFirstErrorOk() (*bool, bool) {
	if o == nil || IsNil(o.StopOnFirstError) {
		return nil, false
	}
	return o.StopOnFirstError, true
}

// HasStopOnFirstError returns a boolean if a field has been set.
func (o *FarmMaintenanceSpec) HasStopOnFirstError() bool {
	if o != nil && !IsNil(o.StopOnFirstError) {
		return true
	}

	return false
}

// SetStopOnFirstError gets a reference to the given bool and assigns it to the StopOnFirstError field.
func (o *FarmMaintenanceSpec) SetStopOnFirstError(v bool) {
	o.StopOnFirstError = &v
}

func (o FarmMaintenanceSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FarmMaintenanceSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ImStreamId) {
		toSerialize["im_stream_id"] = o.ImStreamId
	}
	if !IsNil(o.ImTagId) {
		toSerialize["im_tag_id"] = o.ImTagId
	}
	toSerialize["logoff_policy"] = o.LogoffPolicy
	toSerialize["maintenance_mode"] = o.MaintenanceMode
	if !IsNil(o.NextScheduledTime) {
		toSerialize["next_scheduled_time"] = o.NextScheduledTime
	}
	if !IsNil(o.ParentVmId) {
		toSerialize["parent_vm_id"] = o.ParentVmId
	}
	if !IsNil(o.RecurringMaintenanceSettings) {
		toSerialize["recurring_maintenance_settings"] = o.RecurringMaintenanceSettings
	}
	if !IsNil(o.SnapshotId) {
		toSerialize["snapshot_id"] = o.SnapshotId
	}
	if !IsNil(o.StopOnFirstError) {
		toSerialize["stop_on_first_error"] = o.StopOnFirstError
	}
	return toSerialize, nil
}

func (o *FarmMaintenanceSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"logoff_policy",
		"maintenance_mode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFarmMaintenanceSpec := _FarmMaintenanceSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFarmMaintenanceSpec)

	if err != nil {
		return err
	}

	*o = FarmMaintenanceSpec(varFarmMaintenanceSpec)

	return err
}

type NullableFarmMaintenanceSpec struct {
	value *FarmMaintenanceSpec
	isSet bool
}

func (v NullableFarmMaintenanceSpec) Get() *FarmMaintenanceSpec {
	return v.value
}

func (v *NullableFarmMaintenanceSpec) Set(val *FarmMaintenanceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableFarmMaintenanceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableFarmMaintenanceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFarmMaintenanceSpec(val *FarmMaintenanceSpec) *NullableFarmMaintenanceSpec {
	return &NullableFarmMaintenanceSpec{value: val, isSet: true}
}

func (v NullableFarmMaintenanceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFarmMaintenanceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


