/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the NetworkLabelData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkLabelData{}

// NetworkLabelData Information related to a network label.
type NetworkLabelData struct {
	// The network label name.
	NetworkLabelName *string `json:"network_label_name,omitempty"`
	// The network interface name
	NicName *string `json:"nic_name,omitempty"`
}

// NewNetworkLabelData instantiates a new NetworkLabelData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkLabelData() *NetworkLabelData {
	this := NetworkLabelData{}
	return &this
}

// NewNetworkLabelDataWithDefaults instantiates a new NetworkLabelData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkLabelDataWithDefaults() *NetworkLabelData {
	this := NetworkLabelData{}
	return &this
}

// GetNetworkLabelName returns the NetworkLabelName field value if set, zero value otherwise.
func (o *NetworkLabelData) GetNetworkLabelName() string {
	if o == nil || IsNil(o.NetworkLabelName) {
		var ret string
		return ret
	}
	return *o.NetworkLabelName
}

// GetNetworkLabelNameOk returns a tuple with the NetworkLabelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkLabelData) GetNetworkLabelNameOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkLabelName) {
		return nil, false
	}
	return o.NetworkLabelName, true
}

// HasNetworkLabelName returns a boolean if a field has been set.
func (o *NetworkLabelData) HasNetworkLabelName() bool {
	if o != nil && !IsNil(o.NetworkLabelName) {
		return true
	}

	return false
}

// SetNetworkLabelName gets a reference to the given string and assigns it to the NetworkLabelName field.
func (o *NetworkLabelData) SetNetworkLabelName(v string) {
	o.NetworkLabelName = &v
}

// GetNicName returns the NicName field value if set, zero value otherwise.
func (o *NetworkLabelData) GetNicName() string {
	if o == nil || IsNil(o.NicName) {
		var ret string
		return ret
	}
	return *o.NicName
}

// GetNicNameOk returns a tuple with the NicName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkLabelData) GetNicNameOk() (*string, bool) {
	if o == nil || IsNil(o.NicName) {
		return nil, false
	}
	return o.NicName, true
}

// HasNicName returns a boolean if a field has been set.
func (o *NetworkLabelData) HasNicName() bool {
	if o != nil && !IsNil(o.NicName) {
		return true
	}

	return false
}

// SetNicName gets a reference to the given string and assigns it to the NicName field.
func (o *NetworkLabelData) SetNicName(v string) {
	o.NicName = &v
}

func (o NetworkLabelData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkLabelData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NetworkLabelName) {
		toSerialize["network_label_name"] = o.NetworkLabelName
	}
	if !IsNil(o.NicName) {
		toSerialize["nic_name"] = o.NicName
	}
	return toSerialize, nil
}

type NullableNetworkLabelData struct {
	value *NetworkLabelData
	isSet bool
}

func (v NullableNetworkLabelData) Get() *NetworkLabelData {
	return v.value
}

func (v *NullableNetworkLabelData) Set(val *NetworkLabelData) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkLabelData) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkLabelData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkLabelData(val *NetworkLabelData) *NullableNetworkLabelData {
	return &NullableNetworkLabelData{value: val, isSet: true}
}

func (v NullableNetworkLabelData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkLabelData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


