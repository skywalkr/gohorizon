/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the GeneralSettingsV3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeneralSettingsV3{}

// GeneralSettingsV3 Information related to General Settings.
type GeneralSettingsV3 struct {
	// Determines how long (in minutes) a refresh token is valid for and an idle View API session continues before the session times out. Setting the API session timeout to a high number of minutes increases the risk of unauthorized use of View API. Use caution when you allow an idle session to persist for a long time.
	ApiSessionTimeoutMinutes *int32 `json:"api_session_timeout_minutes,omitempty"`
	// The time allowed to elapse after a user has authenticated before the application SSO credentials are locked unless the user's Horizon client supports idle sessions and the user remains active.
	ApplicationSsoTimeoutMinutes *int32 `json:"application_sso_timeout_minutes,omitempty"`
	// Specifies the policy for the maximum time after which single sign on will be disabled for application sessions. * DISABLED_AFTER: Single sign on will be disabled after the specified number of minutes has elapsed since the user connected to Horizon Connection Server. * DISABLED: Single sign on is disabled. * ENABLED: Single sign on is enabled.
	ApplicationSsoTimeoutPolicy *string `json:"application_sso_timeout_policy,omitempty"`
	// Indicates whether Horizon Client Connections are to be blocked if client is not part of restricted_client_data.
	BlockRestrictedClients *bool `json:"block_restricted_clients,omitempty"`
	// Determines how long a user can be idle before the Connection Server takes measure to protect the session.
	ClientIdleSessionTimeoutMinutes *int32 `json:"client_idle_session_timeout_minutes,omitempty"`
	// Specifies the policy for the maximum time that a that a user can be idle before the Connection Server takes measure to protect the session. * TIMEOUT_AFTER: The timeout is set for a configurable time. * NEVER: The timeout has been disabled.
	ClientIdleSessionTimeoutPolicy *string `json:"client_idle_session_timeout_policy,omitempty"`
	// Determines how long a user can keep a session open after logging in to the Connection Server. When a session times out, the session is terminated and the Horizon client is disconnected from the resource. This property has a default value of 600 and a minimum value of 5. This property is required if clientMaxSessionTimeoutPolicy is set to TIMEOUT_AFTER.
	ClientMaxSessionTimeoutMinutes *int32 `json:"client_max_session_timeout_minutes,omitempty"`
	// Client max session lifetime policy. This property has a default value of TIMEOUT_AFTER. A value of TIMEOUT_AFTER indicates that the Horizon client session times out after a configurable session length. A value of NEVER indicates that the Horizon client session will not time out and will only end due to inactivity. * TIMEOUT_AFTER: The timeout is set for a configurable time. * NEVER: The timeout has been disabled.
	ClientMaxSessionTimeoutPolicy *string `json:"client_max_session_timeout_policy,omitempty"`
	// Determines the maximum length of time that a session will be kept active if there is no traffic between the Horizon client and the Connection Server.
	ClientSessionTimeoutMinutes *int32 `json:"client_session_timeout_minutes,omitempty"`
	// Determines how long an idle admin console session continues before the session times out.
	ConsoleSessionTimeoutMinutes *int32 `json:"console_session_timeout_minutes,omitempty"`
	// Enable/disable pre login message pop up before logging into Horizon admin console
	DisplayPreLoginAdminBanner *bool `json:"display_pre_login_admin_banner,omitempty"`
	// Indicates whether to show a disclaimer or other message when the Horizon Client user logs in. This change will take effect on next login for each user.
	DisplayPreLoginMessage *bool `json:"display_pre_login_message,omitempty"`
	// Indicates whether to display a warning message when users are forced to log off because a scheduled or immediate update such as a machine-refresh operation is about to start.
	DisplayWarningBeforeForcedLogoff *bool `json:"display_warning_before_forced_logoff,omitempty"`
	// Enable updation of the global status of the application periodically. The Dashboard Information is also updated at regular intervals when Dashboard page is active.
	EnableAutomaticStatusUpdates *bool `json:"enable_automatic_status_updates,omitempty"`
	// Indicates whether to clean up session credentials when one tab connecting to remote machine/application is closed.
	EnableCredentialCleanupForHtmlaccess *bool `json:"enable_credential_cleanup_for_htmlaccess,omitempty"`
	// Enables 2 factor re-authentication after idle session timeout.
	EnableMultiFactorReAuthentication *bool `json:"enable_multi_factor_re_authentication,omitempty"`
	// Indicates whether the domain list will be sent to the Horizon client. Since domain list will be sent before user is authenticated with server, it could disclose domain information to external users.
	EnableSendingDomainList *bool `json:"enable_sending_domain_list,omitempty"`
	// Permits RDSServer operating systems to be used for non-RDS Machines.
	EnableServerInSingleUserMode *bool `json:"enable_server_in_single_user_mode,omitempty"`
	// The warning to be displayed before logging off the user.
	ForcedLogoffMessage *string `json:"forced_logoff_message,omitempty"`
	// The time to wait after the warning is displayed and before logging off the user.
	ForcedLogoffTimeoutMinutes *int32 `json:"forced_logoff_timeout_minutes,omitempty"`
	// Whether to hide the list of domains in the Horizon client user interface. If value set to true, the user will need to provide a UPN (e.g. user@domain) or a logon name in the format domain\\\\user when logging in.
	HideDomainListInClient *bool `json:"hide_domain_list_in_client,omitempty"`
	// Indicates whether to hide the server URL in the Horizon client user interface.
	HideServerInformationInClient *bool `json:"hide_server_information_in_client,omitempty"`
	// Single sign on will be disabled after the specified time has elapsed since the user connected to Connection Server.
	MachineSsoTimeoutMinutes *int32 `json:"machine_sso_timeout_minutes,omitempty"`
	// Specifies the policy for the maximum time after which single sign on will be disabled after a user connects to the Connection Server. * DISABLED_AFTER: Single sign on will be disabled after the specified number of minutes has elapsed since the user connected to Horizon Connection Server. * DISABLED: Single sign on is disabled. * ENABLED: Single sign on is enabled.
	MachineSsoTimeoutPolicy *string `json:"machine_sso_timeout_policy,omitempty"`
	// The warning pop up header to be displayed before logging into Horizon admin console, if pre login message pop up is activated for the same.
	PreLoginAdminBannerHeader *string `json:"pre_login_admin_banner_header,omitempty"`
	// The warning pop up message to be displayed before logging into Horizon admin console, if pre login message pop up is activated for the same.
	PreLoginAdminBannerMessage *string `json:"pre_login_admin_banner_message,omitempty"`
	// Displays a disclaimer or another message to Horizon Client users when they log in. No message will be displayed if this is not set.
	PreLoginMessage *string `json:"pre_login_message,omitempty"`
	// List of restricted Horizon Clients.
	RestrictedClientDataV2 []RestrictedClientDataV2 `json:"restricted_client_data_v2,omitempty"`
	// The message to be displayed to Horizon clients which are blocked by the Connection Server.
	RestrictedClientMessage *string `json:"restricted_client_message,omitempty"`
	// The message to be displayed to Horizon clients which are not recommended by the Connection Server.
	RestrictedClientWarnMessage *string `json:"restricted_client_warn_message,omitempty"`
	// Determines whether or not to store the RDS Per Device Client Access License on Horizon client devices. This value can be true only if Store Client Access License on Connection Server is true.
	StoreCalOnClient *bool `json:"store_cal_on_client,omitempty"`
	// Determines whether or not to store the RDS Per Device Client Access License on Connection Server.
	StoreCalOnConnectionServer *bool `json:"store_cal_on_connection_server,omitempty"`
}

// NewGeneralSettingsV3 instantiates a new GeneralSettingsV3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeneralSettingsV3() *GeneralSettingsV3 {
	this := GeneralSettingsV3{}
	return &this
}

// NewGeneralSettingsV3WithDefaults instantiates a new GeneralSettingsV3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeneralSettingsV3WithDefaults() *GeneralSettingsV3 {
	this := GeneralSettingsV3{}
	return &this
}

// GetApiSessionTimeoutMinutes returns the ApiSessionTimeoutMinutes field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetApiSessionTimeoutMinutes() int32 {
	if o == nil || IsNil(o.ApiSessionTimeoutMinutes) {
		var ret int32
		return ret
	}
	return *o.ApiSessionTimeoutMinutes
}

// GetApiSessionTimeoutMinutesOk returns a tuple with the ApiSessionTimeoutMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetApiSessionTimeoutMinutesOk() (*int32, bool) {
	if o == nil || IsNil(o.ApiSessionTimeoutMinutes) {
		return nil, false
	}
	return o.ApiSessionTimeoutMinutes, true
}

// HasApiSessionTimeoutMinutes returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasApiSessionTimeoutMinutes() bool {
	if o != nil && !IsNil(o.ApiSessionTimeoutMinutes) {
		return true
	}

	return false
}

// SetApiSessionTimeoutMinutes gets a reference to the given int32 and assigns it to the ApiSessionTimeoutMinutes field.
func (o *GeneralSettingsV3) SetApiSessionTimeoutMinutes(v int32) {
	o.ApiSessionTimeoutMinutes = &v
}

// GetApplicationSsoTimeoutMinutes returns the ApplicationSsoTimeoutMinutes field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetApplicationSsoTimeoutMinutes() int32 {
	if o == nil || IsNil(o.ApplicationSsoTimeoutMinutes) {
		var ret int32
		return ret
	}
	return *o.ApplicationSsoTimeoutMinutes
}

// GetApplicationSsoTimeoutMinutesOk returns a tuple with the ApplicationSsoTimeoutMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetApplicationSsoTimeoutMinutesOk() (*int32, bool) {
	if o == nil || IsNil(o.ApplicationSsoTimeoutMinutes) {
		return nil, false
	}
	return o.ApplicationSsoTimeoutMinutes, true
}

// HasApplicationSsoTimeoutMinutes returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasApplicationSsoTimeoutMinutes() bool {
	if o != nil && !IsNil(o.ApplicationSsoTimeoutMinutes) {
		return true
	}

	return false
}

// SetApplicationSsoTimeoutMinutes gets a reference to the given int32 and assigns it to the ApplicationSsoTimeoutMinutes field.
func (o *GeneralSettingsV3) SetApplicationSsoTimeoutMinutes(v int32) {
	o.ApplicationSsoTimeoutMinutes = &v
}

// GetApplicationSsoTimeoutPolicy returns the ApplicationSsoTimeoutPolicy field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetApplicationSsoTimeoutPolicy() string {
	if o == nil || IsNil(o.ApplicationSsoTimeoutPolicy) {
		var ret string
		return ret
	}
	return *o.ApplicationSsoTimeoutPolicy
}

// GetApplicationSsoTimeoutPolicyOk returns a tuple with the ApplicationSsoTimeoutPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetApplicationSsoTimeoutPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.ApplicationSsoTimeoutPolicy) {
		return nil, false
	}
	return o.ApplicationSsoTimeoutPolicy, true
}

// HasApplicationSsoTimeoutPolicy returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasApplicationSsoTimeoutPolicy() bool {
	if o != nil && !IsNil(o.ApplicationSsoTimeoutPolicy) {
		return true
	}

	return false
}

// SetApplicationSsoTimeoutPolicy gets a reference to the given string and assigns it to the ApplicationSsoTimeoutPolicy field.
func (o *GeneralSettingsV3) SetApplicationSsoTimeoutPolicy(v string) {
	o.ApplicationSsoTimeoutPolicy = &v
}

// GetBlockRestrictedClients returns the BlockRestrictedClients field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetBlockRestrictedClients() bool {
	if o == nil || IsNil(o.BlockRestrictedClients) {
		var ret bool
		return ret
	}
	return *o.BlockRestrictedClients
}

// GetBlockRestrictedClientsOk returns a tuple with the BlockRestrictedClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetBlockRestrictedClientsOk() (*bool, bool) {
	if o == nil || IsNil(o.BlockRestrictedClients) {
		return nil, false
	}
	return o.BlockRestrictedClients, true
}

// HasBlockRestrictedClients returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasBlockRestrictedClients() bool {
	if o != nil && !IsNil(o.BlockRestrictedClients) {
		return true
	}

	return false
}

// SetBlockRestrictedClients gets a reference to the given bool and assigns it to the BlockRestrictedClients field.
func (o *GeneralSettingsV3) SetBlockRestrictedClients(v bool) {
	o.BlockRestrictedClients = &v
}

// GetClientIdleSessionTimeoutMinutes returns the ClientIdleSessionTimeoutMinutes field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetClientIdleSessionTimeoutMinutes() int32 {
	if o == nil || IsNil(o.ClientIdleSessionTimeoutMinutes) {
		var ret int32
		return ret
	}
	return *o.ClientIdleSessionTimeoutMinutes
}

// GetClientIdleSessionTimeoutMinutesOk returns a tuple with the ClientIdleSessionTimeoutMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetClientIdleSessionTimeoutMinutesOk() (*int32, bool) {
	if o == nil || IsNil(o.ClientIdleSessionTimeoutMinutes) {
		return nil, false
	}
	return o.ClientIdleSessionTimeoutMinutes, true
}

// HasClientIdleSessionTimeoutMinutes returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasClientIdleSessionTimeoutMinutes() bool {
	if o != nil && !IsNil(o.ClientIdleSessionTimeoutMinutes) {
		return true
	}

	return false
}

// SetClientIdleSessionTimeoutMinutes gets a reference to the given int32 and assigns it to the ClientIdleSessionTimeoutMinutes field.
func (o *GeneralSettingsV3) SetClientIdleSessionTimeoutMinutes(v int32) {
	o.ClientIdleSessionTimeoutMinutes = &v
}

// GetClientIdleSessionTimeoutPolicy returns the ClientIdleSessionTimeoutPolicy field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetClientIdleSessionTimeoutPolicy() string {
	if o == nil || IsNil(o.ClientIdleSessionTimeoutPolicy) {
		var ret string
		return ret
	}
	return *o.ClientIdleSessionTimeoutPolicy
}

// GetClientIdleSessionTimeoutPolicyOk returns a tuple with the ClientIdleSessionTimeoutPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetClientIdleSessionTimeoutPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.ClientIdleSessionTimeoutPolicy) {
		return nil, false
	}
	return o.ClientIdleSessionTimeoutPolicy, true
}

// HasClientIdleSessionTimeoutPolicy returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasClientIdleSessionTimeoutPolicy() bool {
	if o != nil && !IsNil(o.ClientIdleSessionTimeoutPolicy) {
		return true
	}

	return false
}

// SetClientIdleSessionTimeoutPolicy gets a reference to the given string and assigns it to the ClientIdleSessionTimeoutPolicy field.
func (o *GeneralSettingsV3) SetClientIdleSessionTimeoutPolicy(v string) {
	o.ClientIdleSessionTimeoutPolicy = &v
}

// GetClientMaxSessionTimeoutMinutes returns the ClientMaxSessionTimeoutMinutes field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetClientMaxSessionTimeoutMinutes() int32 {
	if o == nil || IsNil(o.ClientMaxSessionTimeoutMinutes) {
		var ret int32
		return ret
	}
	return *o.ClientMaxSessionTimeoutMinutes
}

// GetClientMaxSessionTimeoutMinutesOk returns a tuple with the ClientMaxSessionTimeoutMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetClientMaxSessionTimeoutMinutesOk() (*int32, bool) {
	if o == nil || IsNil(o.ClientMaxSessionTimeoutMinutes) {
		return nil, false
	}
	return o.ClientMaxSessionTimeoutMinutes, true
}

// HasClientMaxSessionTimeoutMinutes returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasClientMaxSessionTimeoutMinutes() bool {
	if o != nil && !IsNil(o.ClientMaxSessionTimeoutMinutes) {
		return true
	}

	return false
}

// SetClientMaxSessionTimeoutMinutes gets a reference to the given int32 and assigns it to the ClientMaxSessionTimeoutMinutes field.
func (o *GeneralSettingsV3) SetClientMaxSessionTimeoutMinutes(v int32) {
	o.ClientMaxSessionTimeoutMinutes = &v
}

// GetClientMaxSessionTimeoutPolicy returns the ClientMaxSessionTimeoutPolicy field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetClientMaxSessionTimeoutPolicy() string {
	if o == nil || IsNil(o.ClientMaxSessionTimeoutPolicy) {
		var ret string
		return ret
	}
	return *o.ClientMaxSessionTimeoutPolicy
}

// GetClientMaxSessionTimeoutPolicyOk returns a tuple with the ClientMaxSessionTimeoutPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetClientMaxSessionTimeoutPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.ClientMaxSessionTimeoutPolicy) {
		return nil, false
	}
	return o.ClientMaxSessionTimeoutPolicy, true
}

// HasClientMaxSessionTimeoutPolicy returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasClientMaxSessionTimeoutPolicy() bool {
	if o != nil && !IsNil(o.ClientMaxSessionTimeoutPolicy) {
		return true
	}

	return false
}

// SetClientMaxSessionTimeoutPolicy gets a reference to the given string and assigns it to the ClientMaxSessionTimeoutPolicy field.
func (o *GeneralSettingsV3) SetClientMaxSessionTimeoutPolicy(v string) {
	o.ClientMaxSessionTimeoutPolicy = &v
}

// GetClientSessionTimeoutMinutes returns the ClientSessionTimeoutMinutes field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetClientSessionTimeoutMinutes() int32 {
	if o == nil || IsNil(o.ClientSessionTimeoutMinutes) {
		var ret int32
		return ret
	}
	return *o.ClientSessionTimeoutMinutes
}

// GetClientSessionTimeoutMinutesOk returns a tuple with the ClientSessionTimeoutMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetClientSessionTimeoutMinutesOk() (*int32, bool) {
	if o == nil || IsNil(o.ClientSessionTimeoutMinutes) {
		return nil, false
	}
	return o.ClientSessionTimeoutMinutes, true
}

// HasClientSessionTimeoutMinutes returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasClientSessionTimeoutMinutes() bool {
	if o != nil && !IsNil(o.ClientSessionTimeoutMinutes) {
		return true
	}

	return false
}

// SetClientSessionTimeoutMinutes gets a reference to the given int32 and assigns it to the ClientSessionTimeoutMinutes field.
func (o *GeneralSettingsV3) SetClientSessionTimeoutMinutes(v int32) {
	o.ClientSessionTimeoutMinutes = &v
}

// GetConsoleSessionTimeoutMinutes returns the ConsoleSessionTimeoutMinutes field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetConsoleSessionTimeoutMinutes() int32 {
	if o == nil || IsNil(o.ConsoleSessionTimeoutMinutes) {
		var ret int32
		return ret
	}
	return *o.ConsoleSessionTimeoutMinutes
}

// GetConsoleSessionTimeoutMinutesOk returns a tuple with the ConsoleSessionTimeoutMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetConsoleSessionTimeoutMinutesOk() (*int32, bool) {
	if o == nil || IsNil(o.ConsoleSessionTimeoutMinutes) {
		return nil, false
	}
	return o.ConsoleSessionTimeoutMinutes, true
}

// HasConsoleSessionTimeoutMinutes returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasConsoleSessionTimeoutMinutes() bool {
	if o != nil && !IsNil(o.ConsoleSessionTimeoutMinutes) {
		return true
	}

	return false
}

// SetConsoleSessionTimeoutMinutes gets a reference to the given int32 and assigns it to the ConsoleSessionTimeoutMinutes field.
func (o *GeneralSettingsV3) SetConsoleSessionTimeoutMinutes(v int32) {
	o.ConsoleSessionTimeoutMinutes = &v
}

// GetDisplayPreLoginAdminBanner returns the DisplayPreLoginAdminBanner field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetDisplayPreLoginAdminBanner() bool {
	if o == nil || IsNil(o.DisplayPreLoginAdminBanner) {
		var ret bool
		return ret
	}
	return *o.DisplayPreLoginAdminBanner
}

// GetDisplayPreLoginAdminBannerOk returns a tuple with the DisplayPreLoginAdminBanner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetDisplayPreLoginAdminBannerOk() (*bool, bool) {
	if o == nil || IsNil(o.DisplayPreLoginAdminBanner) {
		return nil, false
	}
	return o.DisplayPreLoginAdminBanner, true
}

// HasDisplayPreLoginAdminBanner returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasDisplayPreLoginAdminBanner() bool {
	if o != nil && !IsNil(o.DisplayPreLoginAdminBanner) {
		return true
	}

	return false
}

// SetDisplayPreLoginAdminBanner gets a reference to the given bool and assigns it to the DisplayPreLoginAdminBanner field.
func (o *GeneralSettingsV3) SetDisplayPreLoginAdminBanner(v bool) {
	o.DisplayPreLoginAdminBanner = &v
}

// GetDisplayPreLoginMessage returns the DisplayPreLoginMessage field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetDisplayPreLoginMessage() bool {
	if o == nil || IsNil(o.DisplayPreLoginMessage) {
		var ret bool
		return ret
	}
	return *o.DisplayPreLoginMessage
}

// GetDisplayPreLoginMessageOk returns a tuple with the DisplayPreLoginMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetDisplayPreLoginMessageOk() (*bool, bool) {
	if o == nil || IsNil(o.DisplayPreLoginMessage) {
		return nil, false
	}
	return o.DisplayPreLoginMessage, true
}

// HasDisplayPreLoginMessage returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasDisplayPreLoginMessage() bool {
	if o != nil && !IsNil(o.DisplayPreLoginMessage) {
		return true
	}

	return false
}

// SetDisplayPreLoginMessage gets a reference to the given bool and assigns it to the DisplayPreLoginMessage field.
func (o *GeneralSettingsV3) SetDisplayPreLoginMessage(v bool) {
	o.DisplayPreLoginMessage = &v
}

// GetDisplayWarningBeforeForcedLogoff returns the DisplayWarningBeforeForcedLogoff field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetDisplayWarningBeforeForcedLogoff() bool {
	if o == nil || IsNil(o.DisplayWarningBeforeForcedLogoff) {
		var ret bool
		return ret
	}
	return *o.DisplayWarningBeforeForcedLogoff
}

// GetDisplayWarningBeforeForcedLogoffOk returns a tuple with the DisplayWarningBeforeForcedLogoff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetDisplayWarningBeforeForcedLogoffOk() (*bool, bool) {
	if o == nil || IsNil(o.DisplayWarningBeforeForcedLogoff) {
		return nil, false
	}
	return o.DisplayWarningBeforeForcedLogoff, true
}

// HasDisplayWarningBeforeForcedLogoff returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasDisplayWarningBeforeForcedLogoff() bool {
	if o != nil && !IsNil(o.DisplayWarningBeforeForcedLogoff) {
		return true
	}

	return false
}

// SetDisplayWarningBeforeForcedLogoff gets a reference to the given bool and assigns it to the DisplayWarningBeforeForcedLogoff field.
func (o *GeneralSettingsV3) SetDisplayWarningBeforeForcedLogoff(v bool) {
	o.DisplayWarningBeforeForcedLogoff = &v
}

// GetEnableAutomaticStatusUpdates returns the EnableAutomaticStatusUpdates field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetEnableAutomaticStatusUpdates() bool {
	if o == nil || IsNil(o.EnableAutomaticStatusUpdates) {
		var ret bool
		return ret
	}
	return *o.EnableAutomaticStatusUpdates
}

// GetEnableAutomaticStatusUpdatesOk returns a tuple with the EnableAutomaticStatusUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetEnableAutomaticStatusUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAutomaticStatusUpdates) {
		return nil, false
	}
	return o.EnableAutomaticStatusUpdates, true
}

// HasEnableAutomaticStatusUpdates returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasEnableAutomaticStatusUpdates() bool {
	if o != nil && !IsNil(o.EnableAutomaticStatusUpdates) {
		return true
	}

	return false
}

// SetEnableAutomaticStatusUpdates gets a reference to the given bool and assigns it to the EnableAutomaticStatusUpdates field.
func (o *GeneralSettingsV3) SetEnableAutomaticStatusUpdates(v bool) {
	o.EnableAutomaticStatusUpdates = &v
}

// GetEnableCredentialCleanupForHtmlaccess returns the EnableCredentialCleanupForHtmlaccess field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetEnableCredentialCleanupForHtmlaccess() bool {
	if o == nil || IsNil(o.EnableCredentialCleanupForHtmlaccess) {
		var ret bool
		return ret
	}
	return *o.EnableCredentialCleanupForHtmlaccess
}

// GetEnableCredentialCleanupForHtmlaccessOk returns a tuple with the EnableCredentialCleanupForHtmlaccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetEnableCredentialCleanupForHtmlaccessOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableCredentialCleanupForHtmlaccess) {
		return nil, false
	}
	return o.EnableCredentialCleanupForHtmlaccess, true
}

// HasEnableCredentialCleanupForHtmlaccess returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasEnableCredentialCleanupForHtmlaccess() bool {
	if o != nil && !IsNil(o.EnableCredentialCleanupForHtmlaccess) {
		return true
	}

	return false
}

// SetEnableCredentialCleanupForHtmlaccess gets a reference to the given bool and assigns it to the EnableCredentialCleanupForHtmlaccess field.
func (o *GeneralSettingsV3) SetEnableCredentialCleanupForHtmlaccess(v bool) {
	o.EnableCredentialCleanupForHtmlaccess = &v
}

// GetEnableMultiFactorReAuthentication returns the EnableMultiFactorReAuthentication field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetEnableMultiFactorReAuthentication() bool {
	if o == nil || IsNil(o.EnableMultiFactorReAuthentication) {
		var ret bool
		return ret
	}
	return *o.EnableMultiFactorReAuthentication
}

// GetEnableMultiFactorReAuthenticationOk returns a tuple with the EnableMultiFactorReAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetEnableMultiFactorReAuthenticationOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableMultiFactorReAuthentication) {
		return nil, false
	}
	return o.EnableMultiFactorReAuthentication, true
}

// HasEnableMultiFactorReAuthentication returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasEnableMultiFactorReAuthentication() bool {
	if o != nil && !IsNil(o.EnableMultiFactorReAuthentication) {
		return true
	}

	return false
}

// SetEnableMultiFactorReAuthentication gets a reference to the given bool and assigns it to the EnableMultiFactorReAuthentication field.
func (o *GeneralSettingsV3) SetEnableMultiFactorReAuthentication(v bool) {
	o.EnableMultiFactorReAuthentication = &v
}

// GetEnableSendingDomainList returns the EnableSendingDomainList field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetEnableSendingDomainList() bool {
	if o == nil || IsNil(o.EnableSendingDomainList) {
		var ret bool
		return ret
	}
	return *o.EnableSendingDomainList
}

// GetEnableSendingDomainListOk returns a tuple with the EnableSendingDomainList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetEnableSendingDomainListOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSendingDomainList) {
		return nil, false
	}
	return o.EnableSendingDomainList, true
}

// HasEnableSendingDomainList returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasEnableSendingDomainList() bool {
	if o != nil && !IsNil(o.EnableSendingDomainList) {
		return true
	}

	return false
}

// SetEnableSendingDomainList gets a reference to the given bool and assigns it to the EnableSendingDomainList field.
func (o *GeneralSettingsV3) SetEnableSendingDomainList(v bool) {
	o.EnableSendingDomainList = &v
}

// GetEnableServerInSingleUserMode returns the EnableServerInSingleUserMode field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetEnableServerInSingleUserMode() bool {
	if o == nil || IsNil(o.EnableServerInSingleUserMode) {
		var ret bool
		return ret
	}
	return *o.EnableServerInSingleUserMode
}

// GetEnableServerInSingleUserModeOk returns a tuple with the EnableServerInSingleUserMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetEnableServerInSingleUserModeOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableServerInSingleUserMode) {
		return nil, false
	}
	return o.EnableServerInSingleUserMode, true
}

// HasEnableServerInSingleUserMode returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasEnableServerInSingleUserMode() bool {
	if o != nil && !IsNil(o.EnableServerInSingleUserMode) {
		return true
	}

	return false
}

// SetEnableServerInSingleUserMode gets a reference to the given bool and assigns it to the EnableServerInSingleUserMode field.
func (o *GeneralSettingsV3) SetEnableServerInSingleUserMode(v bool) {
	o.EnableServerInSingleUserMode = &v
}

// GetForcedLogoffMessage returns the ForcedLogoffMessage field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetForcedLogoffMessage() string {
	if o == nil || IsNil(o.ForcedLogoffMessage) {
		var ret string
		return ret
	}
	return *o.ForcedLogoffMessage
}

// GetForcedLogoffMessageOk returns a tuple with the ForcedLogoffMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetForcedLogoffMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ForcedLogoffMessage) {
		return nil, false
	}
	return o.ForcedLogoffMessage, true
}

// HasForcedLogoffMessage returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasForcedLogoffMessage() bool {
	if o != nil && !IsNil(o.ForcedLogoffMessage) {
		return true
	}

	return false
}

// SetForcedLogoffMessage gets a reference to the given string and assigns it to the ForcedLogoffMessage field.
func (o *GeneralSettingsV3) SetForcedLogoffMessage(v string) {
	o.ForcedLogoffMessage = &v
}

// GetForcedLogoffTimeoutMinutes returns the ForcedLogoffTimeoutMinutes field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetForcedLogoffTimeoutMinutes() int32 {
	if o == nil || IsNil(o.ForcedLogoffTimeoutMinutes) {
		var ret int32
		return ret
	}
	return *o.ForcedLogoffTimeoutMinutes
}

// GetForcedLogoffTimeoutMinutesOk returns a tuple with the ForcedLogoffTimeoutMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetForcedLogoffTimeoutMinutesOk() (*int32, bool) {
	if o == nil || IsNil(o.ForcedLogoffTimeoutMinutes) {
		return nil, false
	}
	return o.ForcedLogoffTimeoutMinutes, true
}

// HasForcedLogoffTimeoutMinutes returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasForcedLogoffTimeoutMinutes() bool {
	if o != nil && !IsNil(o.ForcedLogoffTimeoutMinutes) {
		return true
	}

	return false
}

// SetForcedLogoffTimeoutMinutes gets a reference to the given int32 and assigns it to the ForcedLogoffTimeoutMinutes field.
func (o *GeneralSettingsV3) SetForcedLogoffTimeoutMinutes(v int32) {
	o.ForcedLogoffTimeoutMinutes = &v
}

// GetHideDomainListInClient returns the HideDomainListInClient field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetHideDomainListInClient() bool {
	if o == nil || IsNil(o.HideDomainListInClient) {
		var ret bool
		return ret
	}
	return *o.HideDomainListInClient
}

// GetHideDomainListInClientOk returns a tuple with the HideDomainListInClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetHideDomainListInClientOk() (*bool, bool) {
	if o == nil || IsNil(o.HideDomainListInClient) {
		return nil, false
	}
	return o.HideDomainListInClient, true
}

// HasHideDomainListInClient returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasHideDomainListInClient() bool {
	if o != nil && !IsNil(o.HideDomainListInClient) {
		return true
	}

	return false
}

// SetHideDomainListInClient gets a reference to the given bool and assigns it to the HideDomainListInClient field.
func (o *GeneralSettingsV3) SetHideDomainListInClient(v bool) {
	o.HideDomainListInClient = &v
}

// GetHideServerInformationInClient returns the HideServerInformationInClient field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetHideServerInformationInClient() bool {
	if o == nil || IsNil(o.HideServerInformationInClient) {
		var ret bool
		return ret
	}
	return *o.HideServerInformationInClient
}

// GetHideServerInformationInClientOk returns a tuple with the HideServerInformationInClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetHideServerInformationInClientOk() (*bool, bool) {
	if o == nil || IsNil(o.HideServerInformationInClient) {
		return nil, false
	}
	return o.HideServerInformationInClient, true
}

// HasHideServerInformationInClient returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasHideServerInformationInClient() bool {
	if o != nil && !IsNil(o.HideServerInformationInClient) {
		return true
	}

	return false
}

// SetHideServerInformationInClient gets a reference to the given bool and assigns it to the HideServerInformationInClient field.
func (o *GeneralSettingsV3) SetHideServerInformationInClient(v bool) {
	o.HideServerInformationInClient = &v
}

// GetMachineSsoTimeoutMinutes returns the MachineSsoTimeoutMinutes field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetMachineSsoTimeoutMinutes() int32 {
	if o == nil || IsNil(o.MachineSsoTimeoutMinutes) {
		var ret int32
		return ret
	}
	return *o.MachineSsoTimeoutMinutes
}

// GetMachineSsoTimeoutMinutesOk returns a tuple with the MachineSsoTimeoutMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetMachineSsoTimeoutMinutesOk() (*int32, bool) {
	if o == nil || IsNil(o.MachineSsoTimeoutMinutes) {
		return nil, false
	}
	return o.MachineSsoTimeoutMinutes, true
}

// HasMachineSsoTimeoutMinutes returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasMachineSsoTimeoutMinutes() bool {
	if o != nil && !IsNil(o.MachineSsoTimeoutMinutes) {
		return true
	}

	return false
}

// SetMachineSsoTimeoutMinutes gets a reference to the given int32 and assigns it to the MachineSsoTimeoutMinutes field.
func (o *GeneralSettingsV3) SetMachineSsoTimeoutMinutes(v int32) {
	o.MachineSsoTimeoutMinutes = &v
}

// GetMachineSsoTimeoutPolicy returns the MachineSsoTimeoutPolicy field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetMachineSsoTimeoutPolicy() string {
	if o == nil || IsNil(o.MachineSsoTimeoutPolicy) {
		var ret string
		return ret
	}
	return *o.MachineSsoTimeoutPolicy
}

// GetMachineSsoTimeoutPolicyOk returns a tuple with the MachineSsoTimeoutPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetMachineSsoTimeoutPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.MachineSsoTimeoutPolicy) {
		return nil, false
	}
	return o.MachineSsoTimeoutPolicy, true
}

// HasMachineSsoTimeoutPolicy returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasMachineSsoTimeoutPolicy() bool {
	if o != nil && !IsNil(o.MachineSsoTimeoutPolicy) {
		return true
	}

	return false
}

// SetMachineSsoTimeoutPolicy gets a reference to the given string and assigns it to the MachineSsoTimeoutPolicy field.
func (o *GeneralSettingsV3) SetMachineSsoTimeoutPolicy(v string) {
	o.MachineSsoTimeoutPolicy = &v
}

// GetPreLoginAdminBannerHeader returns the PreLoginAdminBannerHeader field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetPreLoginAdminBannerHeader() string {
	if o == nil || IsNil(o.PreLoginAdminBannerHeader) {
		var ret string
		return ret
	}
	return *o.PreLoginAdminBannerHeader
}

// GetPreLoginAdminBannerHeaderOk returns a tuple with the PreLoginAdminBannerHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetPreLoginAdminBannerHeaderOk() (*string, bool) {
	if o == nil || IsNil(o.PreLoginAdminBannerHeader) {
		return nil, false
	}
	return o.PreLoginAdminBannerHeader, true
}

// HasPreLoginAdminBannerHeader returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasPreLoginAdminBannerHeader() bool {
	if o != nil && !IsNil(o.PreLoginAdminBannerHeader) {
		return true
	}

	return false
}

// SetPreLoginAdminBannerHeader gets a reference to the given string and assigns it to the PreLoginAdminBannerHeader field.
func (o *GeneralSettingsV3) SetPreLoginAdminBannerHeader(v string) {
	o.PreLoginAdminBannerHeader = &v
}

// GetPreLoginAdminBannerMessage returns the PreLoginAdminBannerMessage field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetPreLoginAdminBannerMessage() string {
	if o == nil || IsNil(o.PreLoginAdminBannerMessage) {
		var ret string
		return ret
	}
	return *o.PreLoginAdminBannerMessage
}

// GetPreLoginAdminBannerMessageOk returns a tuple with the PreLoginAdminBannerMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetPreLoginAdminBannerMessageOk() (*string, bool) {
	if o == nil || IsNil(o.PreLoginAdminBannerMessage) {
		return nil, false
	}
	return o.PreLoginAdminBannerMessage, true
}

// HasPreLoginAdminBannerMessage returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasPreLoginAdminBannerMessage() bool {
	if o != nil && !IsNil(o.PreLoginAdminBannerMessage) {
		return true
	}

	return false
}

// SetPreLoginAdminBannerMessage gets a reference to the given string and assigns it to the PreLoginAdminBannerMessage field.
func (o *GeneralSettingsV3) SetPreLoginAdminBannerMessage(v string) {
	o.PreLoginAdminBannerMessage = &v
}

// GetPreLoginMessage returns the PreLoginMessage field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetPreLoginMessage() string {
	if o == nil || IsNil(o.PreLoginMessage) {
		var ret string
		return ret
	}
	return *o.PreLoginMessage
}

// GetPreLoginMessageOk returns a tuple with the PreLoginMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetPreLoginMessageOk() (*string, bool) {
	if o == nil || IsNil(o.PreLoginMessage) {
		return nil, false
	}
	return o.PreLoginMessage, true
}

// HasPreLoginMessage returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasPreLoginMessage() bool {
	if o != nil && !IsNil(o.PreLoginMessage) {
		return true
	}

	return false
}

// SetPreLoginMessage gets a reference to the given string and assigns it to the PreLoginMessage field.
func (o *GeneralSettingsV3) SetPreLoginMessage(v string) {
	o.PreLoginMessage = &v
}

// GetRestrictedClientDataV2 returns the RestrictedClientDataV2 field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetRestrictedClientDataV2() []RestrictedClientDataV2 {
	if o == nil || IsNil(o.RestrictedClientDataV2) {
		var ret []RestrictedClientDataV2
		return ret
	}
	return o.RestrictedClientDataV2
}

// GetRestrictedClientDataV2Ok returns a tuple with the RestrictedClientDataV2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetRestrictedClientDataV2Ok() ([]RestrictedClientDataV2, bool) {
	if o == nil || IsNil(o.RestrictedClientDataV2) {
		return nil, false
	}
	return o.RestrictedClientDataV2, true
}

// HasRestrictedClientDataV2 returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasRestrictedClientDataV2() bool {
	if o != nil && !IsNil(o.RestrictedClientDataV2) {
		return true
	}

	return false
}

// SetRestrictedClientDataV2 gets a reference to the given []RestrictedClientDataV2 and assigns it to the RestrictedClientDataV2 field.
func (o *GeneralSettingsV3) SetRestrictedClientDataV2(v []RestrictedClientDataV2) {
	o.RestrictedClientDataV2 = v
}

// GetRestrictedClientMessage returns the RestrictedClientMessage field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetRestrictedClientMessage() string {
	if o == nil || IsNil(o.RestrictedClientMessage) {
		var ret string
		return ret
	}
	return *o.RestrictedClientMessage
}

// GetRestrictedClientMessageOk returns a tuple with the RestrictedClientMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetRestrictedClientMessageOk() (*string, bool) {
	if o == nil || IsNil(o.RestrictedClientMessage) {
		return nil, false
	}
	return o.RestrictedClientMessage, true
}

// HasRestrictedClientMessage returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasRestrictedClientMessage() bool {
	if o != nil && !IsNil(o.RestrictedClientMessage) {
		return true
	}

	return false
}

// SetRestrictedClientMessage gets a reference to the given string and assigns it to the RestrictedClientMessage field.
func (o *GeneralSettingsV3) SetRestrictedClientMessage(v string) {
	o.RestrictedClientMessage = &v
}

// GetRestrictedClientWarnMessage returns the RestrictedClientWarnMessage field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetRestrictedClientWarnMessage() string {
	if o == nil || IsNil(o.RestrictedClientWarnMessage) {
		var ret string
		return ret
	}
	return *o.RestrictedClientWarnMessage
}

// GetRestrictedClientWarnMessageOk returns a tuple with the RestrictedClientWarnMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetRestrictedClientWarnMessageOk() (*string, bool) {
	if o == nil || IsNil(o.RestrictedClientWarnMessage) {
		return nil, false
	}
	return o.RestrictedClientWarnMessage, true
}

// HasRestrictedClientWarnMessage returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasRestrictedClientWarnMessage() bool {
	if o != nil && !IsNil(o.RestrictedClientWarnMessage) {
		return true
	}

	return false
}

// SetRestrictedClientWarnMessage gets a reference to the given string and assigns it to the RestrictedClientWarnMessage field.
func (o *GeneralSettingsV3) SetRestrictedClientWarnMessage(v string) {
	o.RestrictedClientWarnMessage = &v
}

// GetStoreCalOnClient returns the StoreCalOnClient field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetStoreCalOnClient() bool {
	if o == nil || IsNil(o.StoreCalOnClient) {
		var ret bool
		return ret
	}
	return *o.StoreCalOnClient
}

// GetStoreCalOnClientOk returns a tuple with the StoreCalOnClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetStoreCalOnClientOk() (*bool, bool) {
	if o == nil || IsNil(o.StoreCalOnClient) {
		return nil, false
	}
	return o.StoreCalOnClient, true
}

// HasStoreCalOnClient returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasStoreCalOnClient() bool {
	if o != nil && !IsNil(o.StoreCalOnClient) {
		return true
	}

	return false
}

// SetStoreCalOnClient gets a reference to the given bool and assigns it to the StoreCalOnClient field.
func (o *GeneralSettingsV3) SetStoreCalOnClient(v bool) {
	o.StoreCalOnClient = &v
}

// GetStoreCalOnConnectionServer returns the StoreCalOnConnectionServer field value if set, zero value otherwise.
func (o *GeneralSettingsV3) GetStoreCalOnConnectionServer() bool {
	if o == nil || IsNil(o.StoreCalOnConnectionServer) {
		var ret bool
		return ret
	}
	return *o.StoreCalOnConnectionServer
}

// GetStoreCalOnConnectionServerOk returns a tuple with the StoreCalOnConnectionServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralSettingsV3) GetStoreCalOnConnectionServerOk() (*bool, bool) {
	if o == nil || IsNil(o.StoreCalOnConnectionServer) {
		return nil, false
	}
	return o.StoreCalOnConnectionServer, true
}

// HasStoreCalOnConnectionServer returns a boolean if a field has been set.
func (o *GeneralSettingsV3) HasStoreCalOnConnectionServer() bool {
	if o != nil && !IsNil(o.StoreCalOnConnectionServer) {
		return true
	}

	return false
}

// SetStoreCalOnConnectionServer gets a reference to the given bool and assigns it to the StoreCalOnConnectionServer field.
func (o *GeneralSettingsV3) SetStoreCalOnConnectionServer(v bool) {
	o.StoreCalOnConnectionServer = &v
}

func (o GeneralSettingsV3) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeneralSettingsV3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiSessionTimeoutMinutes) {
		toSerialize["api_session_timeout_minutes"] = o.ApiSessionTimeoutMinutes
	}
	if !IsNil(o.ApplicationSsoTimeoutMinutes) {
		toSerialize["application_sso_timeout_minutes"] = o.ApplicationSsoTimeoutMinutes
	}
	if !IsNil(o.ApplicationSsoTimeoutPolicy) {
		toSerialize["application_sso_timeout_policy"] = o.ApplicationSsoTimeoutPolicy
	}
	if !IsNil(o.BlockRestrictedClients) {
		toSerialize["block_restricted_clients"] = o.BlockRestrictedClients
	}
	if !IsNil(o.ClientIdleSessionTimeoutMinutes) {
		toSerialize["client_idle_session_timeout_minutes"] = o.ClientIdleSessionTimeoutMinutes
	}
	if !IsNil(o.ClientIdleSessionTimeoutPolicy) {
		toSerialize["client_idle_session_timeout_policy"] = o.ClientIdleSessionTimeoutPolicy
	}
	if !IsNil(o.ClientMaxSessionTimeoutMinutes) {
		toSerialize["client_max_session_timeout_minutes"] = o.ClientMaxSessionTimeoutMinutes
	}
	if !IsNil(o.ClientMaxSessionTimeoutPolicy) {
		toSerialize["client_max_session_timeout_policy"] = o.ClientMaxSessionTimeoutPolicy
	}
	if !IsNil(o.ClientSessionTimeoutMinutes) {
		toSerialize["client_session_timeout_minutes"] = o.ClientSessionTimeoutMinutes
	}
	if !IsNil(o.ConsoleSessionTimeoutMinutes) {
		toSerialize["console_session_timeout_minutes"] = o.ConsoleSessionTimeoutMinutes
	}
	if !IsNil(o.DisplayPreLoginAdminBanner) {
		toSerialize["display_pre_login_admin_banner"] = o.DisplayPreLoginAdminBanner
	}
	if !IsNil(o.DisplayPreLoginMessage) {
		toSerialize["display_pre_login_message"] = o.DisplayPreLoginMessage
	}
	if !IsNil(o.DisplayWarningBeforeForcedLogoff) {
		toSerialize["display_warning_before_forced_logoff"] = o.DisplayWarningBeforeForcedLogoff
	}
	if !IsNil(o.EnableAutomaticStatusUpdates) {
		toSerialize["enable_automatic_status_updates"] = o.EnableAutomaticStatusUpdates
	}
	if !IsNil(o.EnableCredentialCleanupForHtmlaccess) {
		toSerialize["enable_credential_cleanup_for_htmlaccess"] = o.EnableCredentialCleanupForHtmlaccess
	}
	if !IsNil(o.EnableMultiFactorReAuthentication) {
		toSerialize["enable_multi_factor_re_authentication"] = o.EnableMultiFactorReAuthentication
	}
	if !IsNil(o.EnableSendingDomainList) {
		toSerialize["enable_sending_domain_list"] = o.EnableSendingDomainList
	}
	if !IsNil(o.EnableServerInSingleUserMode) {
		toSerialize["enable_server_in_single_user_mode"] = o.EnableServerInSingleUserMode
	}
	if !IsNil(o.ForcedLogoffMessage) {
		toSerialize["forced_logoff_message"] = o.ForcedLogoffMessage
	}
	if !IsNil(o.ForcedLogoffTimeoutMinutes) {
		toSerialize["forced_logoff_timeout_minutes"] = o.ForcedLogoffTimeoutMinutes
	}
	if !IsNil(o.HideDomainListInClient) {
		toSerialize["hide_domain_list_in_client"] = o.HideDomainListInClient
	}
	if !IsNil(o.HideServerInformationInClient) {
		toSerialize["hide_server_information_in_client"] = o.HideServerInformationInClient
	}
	if !IsNil(o.MachineSsoTimeoutMinutes) {
		toSerialize["machine_sso_timeout_minutes"] = o.MachineSsoTimeoutMinutes
	}
	if !IsNil(o.MachineSsoTimeoutPolicy) {
		toSerialize["machine_sso_timeout_policy"] = o.MachineSsoTimeoutPolicy
	}
	if !IsNil(o.PreLoginAdminBannerHeader) {
		toSerialize["pre_login_admin_banner_header"] = o.PreLoginAdminBannerHeader
	}
	if !IsNil(o.PreLoginAdminBannerMessage) {
		toSerialize["pre_login_admin_banner_message"] = o.PreLoginAdminBannerMessage
	}
	if !IsNil(o.PreLoginMessage) {
		toSerialize["pre_login_message"] = o.PreLoginMessage
	}
	if !IsNil(o.RestrictedClientDataV2) {
		toSerialize["restricted_client_data_v2"] = o.RestrictedClientDataV2
	}
	if !IsNil(o.RestrictedClientMessage) {
		toSerialize["restricted_client_message"] = o.RestrictedClientMessage
	}
	if !IsNil(o.RestrictedClientWarnMessage) {
		toSerialize["restricted_client_warn_message"] = o.RestrictedClientWarnMessage
	}
	if !IsNil(o.StoreCalOnClient) {
		toSerialize["store_cal_on_client"] = o.StoreCalOnClient
	}
	if !IsNil(o.StoreCalOnConnectionServer) {
		toSerialize["store_cal_on_connection_server"] = o.StoreCalOnConnectionServer
	}
	return toSerialize, nil
}

type NullableGeneralSettingsV3 struct {
	value *GeneralSettingsV3
	isSet bool
}

func (v NullableGeneralSettingsV3) Get() *GeneralSettingsV3 {
	return v.value
}

func (v *NullableGeneralSettingsV3) Set(val *GeneralSettingsV3) {
	v.value = val
	v.isSet = true
}

func (v NullableGeneralSettingsV3) IsSet() bool {
	return v.isSet
}

func (v *NullableGeneralSettingsV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeneralSettingsV3(val *GeneralSettingsV3) *NullableGeneralSettingsV3 {
	return &NullableGeneralSettingsV3{value: val, isSet: true}
}

func (v NullableGeneralSettingsV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeneralSettingsV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


