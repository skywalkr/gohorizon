/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the ApplicationData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationData{}

// ApplicationData Information about Application.
type ApplicationData struct {
	// Path to application executable.
	ExecutablePath *string `json:"executable_path,omitempty"`
	// Application publisher.
	Publisher *string `json:"publisher,omitempty"`
	// Application version.
	Version *string `json:"version,omitempty"`
}

// NewApplicationData instantiates a new ApplicationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationData() *ApplicationData {
	this := ApplicationData{}
	return &this
}

// NewApplicationDataWithDefaults instantiates a new ApplicationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationDataWithDefaults() *ApplicationData {
	this := ApplicationData{}
	return &this
}

// GetExecutablePath returns the ExecutablePath field value if set, zero value otherwise.
func (o *ApplicationData) GetExecutablePath() string {
	if o == nil || IsNil(o.ExecutablePath) {
		var ret string
		return ret
	}
	return *o.ExecutablePath
}

// GetExecutablePathOk returns a tuple with the ExecutablePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationData) GetExecutablePathOk() (*string, bool) {
	if o == nil || IsNil(o.ExecutablePath) {
		return nil, false
	}
	return o.ExecutablePath, true
}

// HasExecutablePath returns a boolean if a field has been set.
func (o *ApplicationData) HasExecutablePath() bool {
	if o != nil && !IsNil(o.ExecutablePath) {
		return true
	}

	return false
}

// SetExecutablePath gets a reference to the given string and assigns it to the ExecutablePath field.
func (o *ApplicationData) SetExecutablePath(v string) {
	o.ExecutablePath = &v
}

// GetPublisher returns the Publisher field value if set, zero value otherwise.
func (o *ApplicationData) GetPublisher() string {
	if o == nil || IsNil(o.Publisher) {
		var ret string
		return ret
	}
	return *o.Publisher
}

// GetPublisherOk returns a tuple with the Publisher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationData) GetPublisherOk() (*string, bool) {
	if o == nil || IsNil(o.Publisher) {
		return nil, false
	}
	return o.Publisher, true
}

// HasPublisher returns a boolean if a field has been set.
func (o *ApplicationData) HasPublisher() bool {
	if o != nil && !IsNil(o.Publisher) {
		return true
	}

	return false
}

// SetPublisher gets a reference to the given string and assigns it to the Publisher field.
func (o *ApplicationData) SetPublisher(v string) {
	o.Publisher = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ApplicationData) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationData) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ApplicationData) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ApplicationData) SetVersion(v string) {
	o.Version = &v
}

func (o ApplicationData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExecutablePath) {
		toSerialize["executable_path"] = o.ExecutablePath
	}
	if !IsNil(o.Publisher) {
		toSerialize["publisher"] = o.Publisher
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableApplicationData struct {
	value *ApplicationData
	isSet bool
}

func (v NullableApplicationData) Get() *ApplicationData {
	return v.value
}

func (v *NullableApplicationData) Set(val *ApplicationData) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationData) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationData(val *ApplicationData) *NullableApplicationData {
	return &NullableApplicationData{value: val, isSet: true}
}

func (v NullableApplicationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


