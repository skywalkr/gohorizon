/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the SettingsUpdateSpecV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettingsUpdateSpecV2{}

// SettingsUpdateSpecV2 Update specification for the configuration settings.
type SettingsUpdateSpecV2 struct {
	FeatureSettings *FeatureSettingsUpdateSpec `json:"feature_settings,omitempty"`
	GeneralSettings *GeneralSettingsUpdateSpecV2 `json:"general_settings,omitempty"`
	SecuritySettings *SecuritySettingsUpdateSpec `json:"security_settings,omitempty"`
}

// NewSettingsUpdateSpecV2 instantiates a new SettingsUpdateSpecV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingsUpdateSpecV2() *SettingsUpdateSpecV2 {
	this := SettingsUpdateSpecV2{}
	return &this
}

// NewSettingsUpdateSpecV2WithDefaults instantiates a new SettingsUpdateSpecV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsUpdateSpecV2WithDefaults() *SettingsUpdateSpecV2 {
	this := SettingsUpdateSpecV2{}
	return &this
}

// GetFeatureSettings returns the FeatureSettings field value if set, zero value otherwise.
func (o *SettingsUpdateSpecV2) GetFeatureSettings() FeatureSettingsUpdateSpec {
	if o == nil || IsNil(o.FeatureSettings) {
		var ret FeatureSettingsUpdateSpec
		return ret
	}
	return *o.FeatureSettings
}

// GetFeatureSettingsOk returns a tuple with the FeatureSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsUpdateSpecV2) GetFeatureSettingsOk() (*FeatureSettingsUpdateSpec, bool) {
	if o == nil || IsNil(o.FeatureSettings) {
		return nil, false
	}
	return o.FeatureSettings, true
}

// HasFeatureSettings returns a boolean if a field has been set.
func (o *SettingsUpdateSpecV2) HasFeatureSettings() bool {
	if o != nil && !IsNil(o.FeatureSettings) {
		return true
	}

	return false
}

// SetFeatureSettings gets a reference to the given FeatureSettingsUpdateSpec and assigns it to the FeatureSettings field.
func (o *SettingsUpdateSpecV2) SetFeatureSettings(v FeatureSettingsUpdateSpec) {
	o.FeatureSettings = &v
}

// GetGeneralSettings returns the GeneralSettings field value if set, zero value otherwise.
func (o *SettingsUpdateSpecV2) GetGeneralSettings() GeneralSettingsUpdateSpecV2 {
	if o == nil || IsNil(o.GeneralSettings) {
		var ret GeneralSettingsUpdateSpecV2
		return ret
	}
	return *o.GeneralSettings
}

// GetGeneralSettingsOk returns a tuple with the GeneralSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsUpdateSpecV2) GetGeneralSettingsOk() (*GeneralSettingsUpdateSpecV2, bool) {
	if o == nil || IsNil(o.GeneralSettings) {
		return nil, false
	}
	return o.GeneralSettings, true
}

// HasGeneralSettings returns a boolean if a field has been set.
func (o *SettingsUpdateSpecV2) HasGeneralSettings() bool {
	if o != nil && !IsNil(o.GeneralSettings) {
		return true
	}

	return false
}

// SetGeneralSettings gets a reference to the given GeneralSettingsUpdateSpecV2 and assigns it to the GeneralSettings field.
func (o *SettingsUpdateSpecV2) SetGeneralSettings(v GeneralSettingsUpdateSpecV2) {
	o.GeneralSettings = &v
}

// GetSecuritySettings returns the SecuritySettings field value if set, zero value otherwise.
func (o *SettingsUpdateSpecV2) GetSecuritySettings() SecuritySettingsUpdateSpec {
	if o == nil || IsNil(o.SecuritySettings) {
		var ret SecuritySettingsUpdateSpec
		return ret
	}
	return *o.SecuritySettings
}

// GetSecuritySettingsOk returns a tuple with the SecuritySettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsUpdateSpecV2) GetSecuritySettingsOk() (*SecuritySettingsUpdateSpec, bool) {
	if o == nil || IsNil(o.SecuritySettings) {
		return nil, false
	}
	return o.SecuritySettings, true
}

// HasSecuritySettings returns a boolean if a field has been set.
func (o *SettingsUpdateSpecV2) HasSecuritySettings() bool {
	if o != nil && !IsNil(o.SecuritySettings) {
		return true
	}

	return false
}

// SetSecuritySettings gets a reference to the given SecuritySettingsUpdateSpec and assigns it to the SecuritySettings field.
func (o *SettingsUpdateSpecV2) SetSecuritySettings(v SecuritySettingsUpdateSpec) {
	o.SecuritySettings = &v
}

func (o SettingsUpdateSpecV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettingsUpdateSpecV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FeatureSettings) {
		toSerialize["feature_settings"] = o.FeatureSettings
	}
	if !IsNil(o.GeneralSettings) {
		toSerialize["general_settings"] = o.GeneralSettings
	}
	if !IsNil(o.SecuritySettings) {
		toSerialize["security_settings"] = o.SecuritySettings
	}
	return toSerialize, nil
}

type NullableSettingsUpdateSpecV2 struct {
	value *SettingsUpdateSpecV2
	isSet bool
}

func (v NullableSettingsUpdateSpecV2) Get() *SettingsUpdateSpecV2 {
	return v.value
}

func (v *NullableSettingsUpdateSpecV2) Set(val *SettingsUpdateSpecV2) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingsUpdateSpecV2) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingsUpdateSpecV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingsUpdateSpecV2(val *SettingsUpdateSpecV2) *NullableSettingsUpdateSpecV2 {
	return &NullableSettingsUpdateSpecV2{value: val, isSet: true}
}

func (v NullableSettingsUpdateSpecV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingsUpdateSpecV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


