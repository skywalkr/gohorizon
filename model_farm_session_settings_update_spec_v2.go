/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FarmSessionSettingsUpdateSpecV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FarmSessionSettingsUpdateSpecV2{}

// FarmSessionSettingsUpdateSpecV2 Session settings related to the Farm.
type FarmSessionSettingsUpdateSpecV2 struct {
	// Disconnected sessions timeout (in minutes). An empty disconnected session is logged off after the timeout. This is required if the disconnect_session_timeout_policy is set to AFTER.
	DisconnectedSessionTimeoutMinutes *int32 `json:"disconnected_session_timeout_minutes,omitempty"`
	// Log-off policy after disconnected session. * IMMEDIATELY: Immediately Logoff after user disconnect. * AFTER: Logoff after the specified number of minutes after user disconnect. * NEVER: Do not logoff after user disconnect.
	DisconnectedSessionTimeoutPolicy string `json:"disconnected_session_timeout_policy"`
	// Application empty session timeout (in minutes). An empty session (that has no remote-able window) is disconnected after the timeout. This is required if the empty_session_timeout_policy is set to AFTER.
	EmptySessionTimeoutMinutes *int32 `json:"empty_session_timeout_minutes,omitempty"`
	// Application empty session timeout policy. * IMMEDIATE: Empty session will be disconnected immediately. * NEVER: Empty session will never disconnected. * AFTER: Empty session will be disconnected after specified number of minutes.
	EmptySessionTimeoutPolicy string `json:"empty_session_timeout_policy"`
	// Indicates whether the empty application sessions are logged off (true) or disconnected (false) after timeout. Default value is false if emptySessionTimeoutPolicy is set to AFTER or IMMEDIATE 
	LogoffAfterTimeout *bool `json:"logoff_after_timeout,omitempty"`
	// Application pre-launch session timeout (in minutes). A pre-launch session is disconnected after the timeout.This is required if pre_launch_session_timeout_policy is set to AFTER.
	PreLaunchSessionTimeoutMinutes *int32 `json:"pre_launch_session_timeout_minutes,omitempty"`
	// Application pre-launch session timeout policy. * AFTER: Pre-launched session is disconnected after specified number of minutes. * NEVER: Pre-launched session is never disconnected.
	PreLaunchSessionTimeoutPolicy *string `json:"pre_launch_session_timeout_policy,omitempty"`
	// Specifies the session timeout policy for the applications published from the Farm. This policy indicates whether the launched application session is a forever application session or not. * DEFAULT: Indicates application sessions will be disconnected either on reaching the global idle timeout or on reaching the max session timeout. * NEVER: Indicates application sessions will not be disconnected either on reaching the global idle timeout or on reaching the max session timeout.
	SessionTimeoutPolicy string `json:"session_timeout_policy"`
}

type _FarmSessionSettingsUpdateSpecV2 FarmSessionSettingsUpdateSpecV2

// NewFarmSessionSettingsUpdateSpecV2 instantiates a new FarmSessionSettingsUpdateSpecV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFarmSessionSettingsUpdateSpecV2(disconnectedSessionTimeoutPolicy string, emptySessionTimeoutPolicy string, sessionTimeoutPolicy string) *FarmSessionSettingsUpdateSpecV2 {
	this := FarmSessionSettingsUpdateSpecV2{}
	this.DisconnectedSessionTimeoutPolicy = disconnectedSessionTimeoutPolicy
	this.EmptySessionTimeoutPolicy = emptySessionTimeoutPolicy
	this.SessionTimeoutPolicy = sessionTimeoutPolicy
	return &this
}

// NewFarmSessionSettingsUpdateSpecV2WithDefaults instantiates a new FarmSessionSettingsUpdateSpecV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFarmSessionSettingsUpdateSpecV2WithDefaults() *FarmSessionSettingsUpdateSpecV2 {
	this := FarmSessionSettingsUpdateSpecV2{}
	return &this
}

// GetDisconnectedSessionTimeoutMinutes returns the DisconnectedSessionTimeoutMinutes field value if set, zero value otherwise.
func (o *FarmSessionSettingsUpdateSpecV2) GetDisconnectedSessionTimeoutMinutes() int32 {
	if o == nil || IsNil(o.DisconnectedSessionTimeoutMinutes) {
		var ret int32
		return ret
	}
	return *o.DisconnectedSessionTimeoutMinutes
}

// GetDisconnectedSessionTimeoutMinutesOk returns a tuple with the DisconnectedSessionTimeoutMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmSessionSettingsUpdateSpecV2) GetDisconnectedSessionTimeoutMinutesOk() (*int32, bool) {
	if o == nil || IsNil(o.DisconnectedSessionTimeoutMinutes) {
		return nil, false
	}
	return o.DisconnectedSessionTimeoutMinutes, true
}

// HasDisconnectedSessionTimeoutMinutes returns a boolean if a field has been set.
func (o *FarmSessionSettingsUpdateSpecV2) HasDisconnectedSessionTimeoutMinutes() bool {
	if o != nil && !IsNil(o.DisconnectedSessionTimeoutMinutes) {
		return true
	}

	return false
}

// SetDisconnectedSessionTimeoutMinutes gets a reference to the given int32 and assigns it to the DisconnectedSessionTimeoutMinutes field.
func (o *FarmSessionSettingsUpdateSpecV2) SetDisconnectedSessionTimeoutMinutes(v int32) {
	o.DisconnectedSessionTimeoutMinutes = &v
}

// GetDisconnectedSessionTimeoutPolicy returns the DisconnectedSessionTimeoutPolicy field value
func (o *FarmSessionSettingsUpdateSpecV2) GetDisconnectedSessionTimeoutPolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisconnectedSessionTimeoutPolicy
}

// GetDisconnectedSessionTimeoutPolicyOk returns a tuple with the DisconnectedSessionTimeoutPolicy field value
// and a boolean to check if the value has been set.
func (o *FarmSessionSettingsUpdateSpecV2) GetDisconnectedSessionTimeoutPolicyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisconnectedSessionTimeoutPolicy, true
}

// SetDisconnectedSessionTimeoutPolicy sets field value
func (o *FarmSessionSettingsUpdateSpecV2) SetDisconnectedSessionTimeoutPolicy(v string) {
	o.DisconnectedSessionTimeoutPolicy = v
}

// GetEmptySessionTimeoutMinutes returns the EmptySessionTimeoutMinutes field value if set, zero value otherwise.
func (o *FarmSessionSettingsUpdateSpecV2) GetEmptySessionTimeoutMinutes() int32 {
	if o == nil || IsNil(o.EmptySessionTimeoutMinutes) {
		var ret int32
		return ret
	}
	return *o.EmptySessionTimeoutMinutes
}

// GetEmptySessionTimeoutMinutesOk returns a tuple with the EmptySessionTimeoutMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmSessionSettingsUpdateSpecV2) GetEmptySessionTimeoutMinutesOk() (*int32, bool) {
	if o == nil || IsNil(o.EmptySessionTimeoutMinutes) {
		return nil, false
	}
	return o.EmptySessionTimeoutMinutes, true
}

// HasEmptySessionTimeoutMinutes returns a boolean if a field has been set.
func (o *FarmSessionSettingsUpdateSpecV2) HasEmptySessionTimeoutMinutes() bool {
	if o != nil && !IsNil(o.EmptySessionTimeoutMinutes) {
		return true
	}

	return false
}

// SetEmptySessionTimeoutMinutes gets a reference to the given int32 and assigns it to the EmptySessionTimeoutMinutes field.
func (o *FarmSessionSettingsUpdateSpecV2) SetEmptySessionTimeoutMinutes(v int32) {
	o.EmptySessionTimeoutMinutes = &v
}

// GetEmptySessionTimeoutPolicy returns the EmptySessionTimeoutPolicy field value
func (o *FarmSessionSettingsUpdateSpecV2) GetEmptySessionTimeoutPolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmptySessionTimeoutPolicy
}

// GetEmptySessionTimeoutPolicyOk returns a tuple with the EmptySessionTimeoutPolicy field value
// and a boolean to check if the value has been set.
func (o *FarmSessionSettingsUpdateSpecV2) GetEmptySessionTimeoutPolicyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmptySessionTimeoutPolicy, true
}

// SetEmptySessionTimeoutPolicy sets field value
func (o *FarmSessionSettingsUpdateSpecV2) SetEmptySessionTimeoutPolicy(v string) {
	o.EmptySessionTimeoutPolicy = v
}

// GetLogoffAfterTimeout returns the LogoffAfterTimeout field value if set, zero value otherwise.
func (o *FarmSessionSettingsUpdateSpecV2) GetLogoffAfterTimeout() bool {
	if o == nil || IsNil(o.LogoffAfterTimeout) {
		var ret bool
		return ret
	}
	return *o.LogoffAfterTimeout
}

// GetLogoffAfterTimeoutOk returns a tuple with the LogoffAfterTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmSessionSettingsUpdateSpecV2) GetLogoffAfterTimeoutOk() (*bool, bool) {
	if o == nil || IsNil(o.LogoffAfterTimeout) {
		return nil, false
	}
	return o.LogoffAfterTimeout, true
}

// HasLogoffAfterTimeout returns a boolean if a field has been set.
func (o *FarmSessionSettingsUpdateSpecV2) HasLogoffAfterTimeout() bool {
	if o != nil && !IsNil(o.LogoffAfterTimeout) {
		return true
	}

	return false
}

// SetLogoffAfterTimeout gets a reference to the given bool and assigns it to the LogoffAfterTimeout field.
func (o *FarmSessionSettingsUpdateSpecV2) SetLogoffAfterTimeout(v bool) {
	o.LogoffAfterTimeout = &v
}

// GetPreLaunchSessionTimeoutMinutes returns the PreLaunchSessionTimeoutMinutes field value if set, zero value otherwise.
func (o *FarmSessionSettingsUpdateSpecV2) GetPreLaunchSessionTimeoutMinutes() int32 {
	if o == nil || IsNil(o.PreLaunchSessionTimeoutMinutes) {
		var ret int32
		return ret
	}
	return *o.PreLaunchSessionTimeoutMinutes
}

// GetPreLaunchSessionTimeoutMinutesOk returns a tuple with the PreLaunchSessionTimeoutMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmSessionSettingsUpdateSpecV2) GetPreLaunchSessionTimeoutMinutesOk() (*int32, bool) {
	if o == nil || IsNil(o.PreLaunchSessionTimeoutMinutes) {
		return nil, false
	}
	return o.PreLaunchSessionTimeoutMinutes, true
}

// HasPreLaunchSessionTimeoutMinutes returns a boolean if a field has been set.
func (o *FarmSessionSettingsUpdateSpecV2) HasPreLaunchSessionTimeoutMinutes() bool {
	if o != nil && !IsNil(o.PreLaunchSessionTimeoutMinutes) {
		return true
	}

	return false
}

// SetPreLaunchSessionTimeoutMinutes gets a reference to the given int32 and assigns it to the PreLaunchSessionTimeoutMinutes field.
func (o *FarmSessionSettingsUpdateSpecV2) SetPreLaunchSessionTimeoutMinutes(v int32) {
	o.PreLaunchSessionTimeoutMinutes = &v
}

// GetPreLaunchSessionTimeoutPolicy returns the PreLaunchSessionTimeoutPolicy field value if set, zero value otherwise.
func (o *FarmSessionSettingsUpdateSpecV2) GetPreLaunchSessionTimeoutPolicy() string {
	if o == nil || IsNil(o.PreLaunchSessionTimeoutPolicy) {
		var ret string
		return ret
	}
	return *o.PreLaunchSessionTimeoutPolicy
}

// GetPreLaunchSessionTimeoutPolicyOk returns a tuple with the PreLaunchSessionTimeoutPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmSessionSettingsUpdateSpecV2) GetPreLaunchSessionTimeoutPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.PreLaunchSessionTimeoutPolicy) {
		return nil, false
	}
	return o.PreLaunchSessionTimeoutPolicy, true
}

// HasPreLaunchSessionTimeoutPolicy returns a boolean if a field has been set.
func (o *FarmSessionSettingsUpdateSpecV2) HasPreLaunchSessionTimeoutPolicy() bool {
	if o != nil && !IsNil(o.PreLaunchSessionTimeoutPolicy) {
		return true
	}

	return false
}

// SetPreLaunchSessionTimeoutPolicy gets a reference to the given string and assigns it to the PreLaunchSessionTimeoutPolicy field.
func (o *FarmSessionSettingsUpdateSpecV2) SetPreLaunchSessionTimeoutPolicy(v string) {
	o.PreLaunchSessionTimeoutPolicy = &v
}

// GetSessionTimeoutPolicy returns the SessionTimeoutPolicy field value
func (o *FarmSessionSettingsUpdateSpecV2) GetSessionTimeoutPolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SessionTimeoutPolicy
}

// GetSessionTimeoutPolicyOk returns a tuple with the SessionTimeoutPolicy field value
// and a boolean to check if the value has been set.
func (o *FarmSessionSettingsUpdateSpecV2) GetSessionTimeoutPolicyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SessionTimeoutPolicy, true
}

// SetSessionTimeoutPolicy sets field value
func (o *FarmSessionSettingsUpdateSpecV2) SetSessionTimeoutPolicy(v string) {
	o.SessionTimeoutPolicy = v
}

func (o FarmSessionSettingsUpdateSpecV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FarmSessionSettingsUpdateSpecV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisconnectedSessionTimeoutMinutes) {
		toSerialize["disconnected_session_timeout_minutes"] = o.DisconnectedSessionTimeoutMinutes
	}
	toSerialize["disconnected_session_timeout_policy"] = o.DisconnectedSessionTimeoutPolicy
	if !IsNil(o.EmptySessionTimeoutMinutes) {
		toSerialize["empty_session_timeout_minutes"] = o.EmptySessionTimeoutMinutes
	}
	toSerialize["empty_session_timeout_policy"] = o.EmptySessionTimeoutPolicy
	if !IsNil(o.LogoffAfterTimeout) {
		toSerialize["logoff_after_timeout"] = o.LogoffAfterTimeout
	}
	if !IsNil(o.PreLaunchSessionTimeoutMinutes) {
		toSerialize["pre_launch_session_timeout_minutes"] = o.PreLaunchSessionTimeoutMinutes
	}
	if !IsNil(o.PreLaunchSessionTimeoutPolicy) {
		toSerialize["pre_launch_session_timeout_policy"] = o.PreLaunchSessionTimeoutPolicy
	}
	toSerialize["session_timeout_policy"] = o.SessionTimeoutPolicy
	return toSerialize, nil
}

func (o *FarmSessionSettingsUpdateSpecV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"disconnected_session_timeout_policy",
		"empty_session_timeout_policy",
		"session_timeout_policy",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFarmSessionSettingsUpdateSpecV2 := _FarmSessionSettingsUpdateSpecV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFarmSessionSettingsUpdateSpecV2)

	if err != nil {
		return err
	}

	*o = FarmSessionSettingsUpdateSpecV2(varFarmSessionSettingsUpdateSpecV2)

	return err
}

type NullableFarmSessionSettingsUpdateSpecV2 struct {
	value *FarmSessionSettingsUpdateSpecV2
	isSet bool
}

func (v NullableFarmSessionSettingsUpdateSpecV2) Get() *FarmSessionSettingsUpdateSpecV2 {
	return v.value
}

func (v *NullableFarmSessionSettingsUpdateSpecV2) Set(val *FarmSessionSettingsUpdateSpecV2) {
	v.value = val
	v.isSet = true
}

func (v NullableFarmSessionSettingsUpdateSpecV2) IsSet() bool {
	return v.isSet
}

func (v *NullableFarmSessionSettingsUpdateSpecV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFarmSessionSettingsUpdateSpecV2(val *FarmSessionSettingsUpdateSpecV2) *NullableFarmSessionSettingsUpdateSpecV2 {
	return &NullableFarmSessionSettingsUpdateSpecV2{value: val, isSet: true}
}

func (v NullableFarmSessionSettingsUpdateSpecV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFarmSessionSettingsUpdateSpecV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


