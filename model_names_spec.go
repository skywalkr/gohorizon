/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NamesSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NamesSpec{}

// NamesSpec Manually defined virtual machines and users.
type NamesSpec struct {
	// The virtual machine name.
	MachineName string `json:"machine_name"`
	// The name of the user entitled to the VM, used only in case of persistent desktop pools.
	UserName *string `json:"user_name,omitempty"`
}

type _NamesSpec NamesSpec

// NewNamesSpec instantiates a new NamesSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamesSpec(machineName string) *NamesSpec {
	this := NamesSpec{}
	this.MachineName = machineName
	return &this
}

// NewNamesSpecWithDefaults instantiates a new NamesSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamesSpecWithDefaults() *NamesSpec {
	this := NamesSpec{}
	return &this
}

// GetMachineName returns the MachineName field value
func (o *NamesSpec) GetMachineName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MachineName
}

// GetMachineNameOk returns a tuple with the MachineName field value
// and a boolean to check if the value has been set.
func (o *NamesSpec) GetMachineNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MachineName, true
}

// SetMachineName sets field value
func (o *NamesSpec) SetMachineName(v string) {
	o.MachineName = v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *NamesSpec) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamesSpec) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *NamesSpec) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *NamesSpec) SetUserName(v string) {
	o.UserName = &v
}

func (o NamesSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NamesSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["machine_name"] = o.MachineName
	if !IsNil(o.UserName) {
		toSerialize["user_name"] = o.UserName
	}
	return toSerialize, nil
}

func (o *NamesSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"machine_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNamesSpec := _NamesSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNamesSpec)

	if err != nil {
		return err
	}

	*o = NamesSpec(varNamesSpec)

	return err
}

type NullableNamesSpec struct {
	value *NamesSpec
	isSet bool
}

func (v NullableNamesSpec) Get() *NamesSpec {
	return v.value
}

func (v *NullableNamesSpec) Set(val *NamesSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableNamesSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableNamesSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamesSpec(val *NamesSpec) *NullableNamesSpec {
	return &NullableNamesSpec{value: val, isSet: true}
}

func (v NullableNamesSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamesSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


