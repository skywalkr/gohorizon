/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2111
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// VCMonitorHost Information about the host connected to a Virtual Center.
type VCMonitorHost struct {
	// Number of physical CPU cores on the host.
	CpuCoreCount *int32 `json:"cpu_core_count,omitempty"`
	// CPU speed per core in Mhz. This might be an averaged value if the speed is not uniform across all cores.
	CpuMhz  *int32                `json:"cpu_mhz,omitempty"`
	Details *VCMonitorHostDetails `json:"details,omitempty"`
	// The physical memory size in mega bytes.
	MemorySizeMb *int32 `json:"memory_size_mb,omitempty"`
	// Status of the host connection. * CONNECTED: The host is successfully connected to Virtual Center server. * DISCONNECTED: The host is disconnected from Virtual Center server. * NOT_RESPONDING: The host is not responding.
	Status *string `json:"status,omitempty"`
}

// NewVCMonitorHost instantiates a new VCMonitorHost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVCMonitorHost() *VCMonitorHost {
	this := VCMonitorHost{}
	return &this
}

// NewVCMonitorHostWithDefaults instantiates a new VCMonitorHost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVCMonitorHostWithDefaults() *VCMonitorHost {
	this := VCMonitorHost{}
	return &this
}

// GetCpuCoreCount returns the CpuCoreCount field value if set, zero value otherwise.
func (o *VCMonitorHost) GetCpuCoreCount() int32 {
	if o == nil || o.CpuCoreCount == nil {
		var ret int32
		return ret
	}
	return *o.CpuCoreCount
}

// GetCpuCoreCountOk returns a tuple with the CpuCoreCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCMonitorHost) GetCpuCoreCountOk() (*int32, bool) {
	if o == nil || o.CpuCoreCount == nil {
		return nil, false
	}
	return o.CpuCoreCount, true
}

// HasCpuCoreCount returns a boolean if a field has been set.
func (o *VCMonitorHost) HasCpuCoreCount() bool {
	if o != nil && o.CpuCoreCount != nil {
		return true
	}

	return false
}

// SetCpuCoreCount gets a reference to the given int32 and assigns it to the CpuCoreCount field.
func (o *VCMonitorHost) SetCpuCoreCount(v int32) {
	o.CpuCoreCount = &v
}

// GetCpuMhz returns the CpuMhz field value if set, zero value otherwise.
func (o *VCMonitorHost) GetCpuMhz() int32 {
	if o == nil || o.CpuMhz == nil {
		var ret int32
		return ret
	}
	return *o.CpuMhz
}

// GetCpuMhzOk returns a tuple with the CpuMhz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCMonitorHost) GetCpuMhzOk() (*int32, bool) {
	if o == nil || o.CpuMhz == nil {
		return nil, false
	}
	return o.CpuMhz, true
}

// HasCpuMhz returns a boolean if a field has been set.
func (o *VCMonitorHost) HasCpuMhz() bool {
	if o != nil && o.CpuMhz != nil {
		return true
	}

	return false
}

// SetCpuMhz gets a reference to the given int32 and assigns it to the CpuMhz field.
func (o *VCMonitorHost) SetCpuMhz(v int32) {
	o.CpuMhz = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *VCMonitorHost) GetDetails() VCMonitorHostDetails {
	if o == nil || o.Details == nil {
		var ret VCMonitorHostDetails
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCMonitorHost) GetDetailsOk() (*VCMonitorHostDetails, bool) {
	if o == nil || o.Details == nil {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *VCMonitorHost) HasDetails() bool {
	if o != nil && o.Details != nil {
		return true
	}

	return false
}

// SetDetails gets a reference to the given VCMonitorHostDetails and assigns it to the Details field.
func (o *VCMonitorHost) SetDetails(v VCMonitorHostDetails) {
	o.Details = &v
}

// GetMemorySizeMb returns the MemorySizeMb field value if set, zero value otherwise.
func (o *VCMonitorHost) GetMemorySizeMb() int32 {
	if o == nil || o.MemorySizeMb == nil {
		var ret int32
		return ret
	}
	return *o.MemorySizeMb
}

// GetMemorySizeMbOk returns a tuple with the MemorySizeMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCMonitorHost) GetMemorySizeMbOk() (*int32, bool) {
	if o == nil || o.MemorySizeMb == nil {
		return nil, false
	}
	return o.MemorySizeMb, true
}

// HasMemorySizeMb returns a boolean if a field has been set.
func (o *VCMonitorHost) HasMemorySizeMb() bool {
	if o != nil && o.MemorySizeMb != nil {
		return true
	}

	return false
}

// SetMemorySizeMb gets a reference to the given int32 and assigns it to the MemorySizeMb field.
func (o *VCMonitorHost) SetMemorySizeMb(v int32) {
	o.MemorySizeMb = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *VCMonitorHost) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCMonitorHost) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *VCMonitorHost) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *VCMonitorHost) SetStatus(v string) {
	o.Status = &v
}

func (o VCMonitorHost) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CpuCoreCount != nil {
		toSerialize["cpu_core_count"] = o.CpuCoreCount
	}
	if o.CpuMhz != nil {
		toSerialize["cpu_mhz"] = o.CpuMhz
	}
	if o.Details != nil {
		toSerialize["details"] = o.Details
	}
	if o.MemorySizeMb != nil {
		toSerialize["memory_size_mb"] = o.MemorySizeMb
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableVCMonitorHost struct {
	value *VCMonitorHost
	isSet bool
}

func (v NullableVCMonitorHost) Get() *VCMonitorHost {
	return v.value
}

func (v *NullableVCMonitorHost) Set(val *VCMonitorHost) {
	v.value = val
	v.isSet = true
}

func (v NullableVCMonitorHost) IsSet() bool {
	return v.isSet
}

func (v *NullableVCMonitorHost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVCMonitorHost(val *VCMonitorHost) *NullableVCMonitorHost {
	return &NullableVCMonitorHost{value: val, isSet: true}
}

func (v NullableVCMonitorHost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVCMonitorHost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
