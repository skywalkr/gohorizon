/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RADIUSAuthenticatorUpdateSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RADIUSAuthenticatorUpdateSpec{}

// RADIUSAuthenticatorUpdateSpec Information required to update a RADIUS authenticator.
type RADIUSAuthenticatorUpdateSpec struct {
	// The description for this RADIUS authenticator.
	Description *string `json:"description,omitempty"`
	// The label for this RADIUS authenticator. It must be unique among all other RADIUS authenticators.
	Label string `json:"label"`
	// The label for the RADIUS authenticator passcode.
	PasscodeLabel *string `json:"passcode_label,omitempty"`
	// List of RADIUS servers. The list must have exactly one primary RADIUS server i.e. with primary_radius_server set to true.
	RadiusServers []RADIUSServerUpdateSpec `json:"radius_servers"`
	// The label for the RADIUS authenticator user name.
	UserNameLabel *string `json:"user_name_label,omitempty"`
}

type _RADIUSAuthenticatorUpdateSpec RADIUSAuthenticatorUpdateSpec

// NewRADIUSAuthenticatorUpdateSpec instantiates a new RADIUSAuthenticatorUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRADIUSAuthenticatorUpdateSpec(label string, radiusServers []RADIUSServerUpdateSpec) *RADIUSAuthenticatorUpdateSpec {
	this := RADIUSAuthenticatorUpdateSpec{}
	this.Label = label
	this.RadiusServers = radiusServers
	return &this
}

// NewRADIUSAuthenticatorUpdateSpecWithDefaults instantiates a new RADIUSAuthenticatorUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRADIUSAuthenticatorUpdateSpecWithDefaults() *RADIUSAuthenticatorUpdateSpec {
	this := RADIUSAuthenticatorUpdateSpec{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RADIUSAuthenticatorUpdateSpec) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RADIUSAuthenticatorUpdateSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RADIUSAuthenticatorUpdateSpec) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RADIUSAuthenticatorUpdateSpec) SetDescription(v string) {
	o.Description = &v
}

// GetLabel returns the Label field value
func (o *RADIUSAuthenticatorUpdateSpec) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *RADIUSAuthenticatorUpdateSpec) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *RADIUSAuthenticatorUpdateSpec) SetLabel(v string) {
	o.Label = v
}

// GetPasscodeLabel returns the PasscodeLabel field value if set, zero value otherwise.
func (o *RADIUSAuthenticatorUpdateSpec) GetPasscodeLabel() string {
	if o == nil || IsNil(o.PasscodeLabel) {
		var ret string
		return ret
	}
	return *o.PasscodeLabel
}

// GetPasscodeLabelOk returns a tuple with the PasscodeLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RADIUSAuthenticatorUpdateSpec) GetPasscodeLabelOk() (*string, bool) {
	if o == nil || IsNil(o.PasscodeLabel) {
		return nil, false
	}
	return o.PasscodeLabel, true
}

// HasPasscodeLabel returns a boolean if a field has been set.
func (o *RADIUSAuthenticatorUpdateSpec) HasPasscodeLabel() bool {
	if o != nil && !IsNil(o.PasscodeLabel) {
		return true
	}

	return false
}

// SetPasscodeLabel gets a reference to the given string and assigns it to the PasscodeLabel field.
func (o *RADIUSAuthenticatorUpdateSpec) SetPasscodeLabel(v string) {
	o.PasscodeLabel = &v
}

// GetRadiusServers returns the RadiusServers field value
func (o *RADIUSAuthenticatorUpdateSpec) GetRadiusServers() []RADIUSServerUpdateSpec {
	if o == nil {
		var ret []RADIUSServerUpdateSpec
		return ret
	}

	return o.RadiusServers
}

// GetRadiusServersOk returns a tuple with the RadiusServers field value
// and a boolean to check if the value has been set.
func (o *RADIUSAuthenticatorUpdateSpec) GetRadiusServersOk() ([]RADIUSServerUpdateSpec, bool) {
	if o == nil {
		return nil, false
	}
	return o.RadiusServers, true
}

// SetRadiusServers sets field value
func (o *RADIUSAuthenticatorUpdateSpec) SetRadiusServers(v []RADIUSServerUpdateSpec) {
	o.RadiusServers = v
}

// GetUserNameLabel returns the UserNameLabel field value if set, zero value otherwise.
func (o *RADIUSAuthenticatorUpdateSpec) GetUserNameLabel() string {
	if o == nil || IsNil(o.UserNameLabel) {
		var ret string
		return ret
	}
	return *o.UserNameLabel
}

// GetUserNameLabelOk returns a tuple with the UserNameLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RADIUSAuthenticatorUpdateSpec) GetUserNameLabelOk() (*string, bool) {
	if o == nil || IsNil(o.UserNameLabel) {
		return nil, false
	}
	return o.UserNameLabel, true
}

// HasUserNameLabel returns a boolean if a field has been set.
func (o *RADIUSAuthenticatorUpdateSpec) HasUserNameLabel() bool {
	if o != nil && !IsNil(o.UserNameLabel) {
		return true
	}

	return false
}

// SetUserNameLabel gets a reference to the given string and assigns it to the UserNameLabel field.
func (o *RADIUSAuthenticatorUpdateSpec) SetUserNameLabel(v string) {
	o.UserNameLabel = &v
}

func (o RADIUSAuthenticatorUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RADIUSAuthenticatorUpdateSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["label"] = o.Label
	if !IsNil(o.PasscodeLabel) {
		toSerialize["passcode_label"] = o.PasscodeLabel
	}
	toSerialize["radius_servers"] = o.RadiusServers
	if !IsNil(o.UserNameLabel) {
		toSerialize["user_name_label"] = o.UserNameLabel
	}
	return toSerialize, nil
}

func (o *RADIUSAuthenticatorUpdateSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"label",
		"radius_servers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRADIUSAuthenticatorUpdateSpec := _RADIUSAuthenticatorUpdateSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRADIUSAuthenticatorUpdateSpec)

	if err != nil {
		return err
	}

	*o = RADIUSAuthenticatorUpdateSpec(varRADIUSAuthenticatorUpdateSpec)

	return err
}

type NullableRADIUSAuthenticatorUpdateSpec struct {
	value *RADIUSAuthenticatorUpdateSpec
	isSet bool
}

func (v NullableRADIUSAuthenticatorUpdateSpec) Get() *RADIUSAuthenticatorUpdateSpec {
	return v.value
}

func (v *NullableRADIUSAuthenticatorUpdateSpec) Set(val *RADIUSAuthenticatorUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableRADIUSAuthenticatorUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableRADIUSAuthenticatorUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRADIUSAuthenticatorUpdateSpec(val *RADIUSAuthenticatorUpdateSpec) *NullableRADIUSAuthenticatorUpdateSpec {
	return &NullableRADIUSAuthenticatorUpdateSpec{value: val, isSet: true}
}

func (v NullableRADIUSAuthenticatorUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRADIUSAuthenticatorUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


