/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PodUpdateSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PodUpdateSpec{}

// PodUpdateSpec Information required to update a pod in the pod federation.
type PodUpdateSpec struct {
	// Indicates whether this pod is managed from cloud. Default value is false.
	CloudManaged *bool `json:"cloud_managed,omitempty"`
	// Description of this pod.
	Description *string `json:"description,omitempty"`
	// Name of this pod.
	Name string `json:"name"`
	// ID of the site this pod belongs to.
	SiteId string `json:"site_id"`
}

type _PodUpdateSpec PodUpdateSpec

// NewPodUpdateSpec instantiates a new PodUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPodUpdateSpec(name string, siteId string) *PodUpdateSpec {
	this := PodUpdateSpec{}
	this.Name = name
	this.SiteId = siteId
	return &this
}

// NewPodUpdateSpecWithDefaults instantiates a new PodUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPodUpdateSpecWithDefaults() *PodUpdateSpec {
	this := PodUpdateSpec{}
	return &this
}

// GetCloudManaged returns the CloudManaged field value if set, zero value otherwise.
func (o *PodUpdateSpec) GetCloudManaged() bool {
	if o == nil || IsNil(o.CloudManaged) {
		var ret bool
		return ret
	}
	return *o.CloudManaged
}

// GetCloudManagedOk returns a tuple with the CloudManaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodUpdateSpec) GetCloudManagedOk() (*bool, bool) {
	if o == nil || IsNil(o.CloudManaged) {
		return nil, false
	}
	return o.CloudManaged, true
}

// HasCloudManaged returns a boolean if a field has been set.
func (o *PodUpdateSpec) HasCloudManaged() bool {
	if o != nil && !IsNil(o.CloudManaged) {
		return true
	}

	return false
}

// SetCloudManaged gets a reference to the given bool and assigns it to the CloudManaged field.
func (o *PodUpdateSpec) SetCloudManaged(v bool) {
	o.CloudManaged = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PodUpdateSpec) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodUpdateSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PodUpdateSpec) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PodUpdateSpec) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value
func (o *PodUpdateSpec) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PodUpdateSpec) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PodUpdateSpec) SetName(v string) {
	o.Name = v
}

// GetSiteId returns the SiteId field value
func (o *PodUpdateSpec) GetSiteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *PodUpdateSpec) GetSiteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *PodUpdateSpec) SetSiteId(v string) {
	o.SiteId = v
}

func (o PodUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PodUpdateSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CloudManaged) {
		toSerialize["cloud_managed"] = o.CloudManaged
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["name"] = o.Name
	toSerialize["site_id"] = o.SiteId
	return toSerialize, nil
}

func (o *PodUpdateSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"site_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPodUpdateSpec := _PodUpdateSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPodUpdateSpec)

	if err != nil {
		return err
	}

	*o = PodUpdateSpec(varPodUpdateSpec)

	return err
}

type NullablePodUpdateSpec struct {
	value *PodUpdateSpec
	isSet bool
}

func (v NullablePodUpdateSpec) Get() *PodUpdateSpec {
	return v.value
}

func (v *NullablePodUpdateSpec) Set(val *PodUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullablePodUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullablePodUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePodUpdateSpec(val *PodUpdateSpec) *NullablePodUpdateSpec {
	return &NullablePodUpdateSpec{value: val, isSet: true}
}

func (v NullablePodUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePodUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


