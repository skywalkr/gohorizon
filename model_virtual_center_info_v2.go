/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the VirtualCenterInfoV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualCenterInfoV2{}

// VirtualCenterInfoV2 Information related to Virtual Center.
type VirtualCenterInfoV2 struct {
	CertificateOverride *CertificateOverrideData `json:"certificate_override,omitempty"`
	// Indicates different environments that Horizon can be deployed into. * GENERAL: Horizon is deployed on On-premises. * AZURE: Horizon is deployed on Azure. * AWS: Horizon is deployed on AWS. * DELL_EMC: Horizon is deployed on Dell EMC. * GOOGLE: Horizon is deployed on Google Cloud. * ORACLE: Horizon is deployed on Oracle Cloud.
	DeploymentType *string `json:"deployment_type,omitempty"`
	// Human readable description of the Virtual Center instance.
	Description *string `json:"description,omitempty"`
	// Human readable name of the Virtual Center instance.
	DisplayName *string `json:"display_name,omitempty"`
	// Indicates if the virtual center is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// Indicates if there is any instant clone Desktop pool associated with this Virtual Center which has addVirtualTPM set
	HasVirtualTpmPools *bool `json:"has_virtual_tpm_pools,omitempty"`
	// Unique ID of the Virtual Center.
	Id *string `json:"id,omitempty"`
	// Virtual center's instanceUuid.
	InstanceUuid *string `json:"instance_uuid,omitempty"`
	Limits *VCLimits `json:"limits,omitempty"`
	// Indicates if maintenance or upgrade task is scheduled on Virtual center or hosts
	MaintenanceMode *bool `json:"maintenance_mode,omitempty"`
	// Port of the virtual center to connect to.
	Port *int32 `json:"port,omitempty"`
	// Indicates if Storage Efficiency Sparse (seSparse) reclamation is enabled.
	SeSparseReclamationEnabled *bool `json:"se_sparse_reclamation_enabled,omitempty"`
	// Virtual Center's server name or IP address.
	ServerName *string `json:"server_name,omitempty"`
	StorageAcceleratorData *StorageAcceleratorData `json:"storage_accelerator_data,omitempty"`
	// Indicates if SSL should be used when connecting to the server.
	UseSsl *bool `json:"use_ssl,omitempty"`
	// User name to use for the connection.
	UserName *string `json:"user_name,omitempty"`
	// Version of the Virtual Center.
	Version *string `json:"version,omitempty"`
}

// NewVirtualCenterInfoV2 instantiates a new VirtualCenterInfoV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualCenterInfoV2() *VirtualCenterInfoV2 {
	this := VirtualCenterInfoV2{}
	return &this
}

// NewVirtualCenterInfoV2WithDefaults instantiates a new VirtualCenterInfoV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualCenterInfoV2WithDefaults() *VirtualCenterInfoV2 {
	this := VirtualCenterInfoV2{}
	return &this
}

// GetCertificateOverride returns the CertificateOverride field value if set, zero value otherwise.
func (o *VirtualCenterInfoV2) GetCertificateOverride() CertificateOverrideData {
	if o == nil || IsNil(o.CertificateOverride) {
		var ret CertificateOverrideData
		return ret
	}
	return *o.CertificateOverride
}

// GetCertificateOverrideOk returns a tuple with the CertificateOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetCertificateOverrideOk() (*CertificateOverrideData, bool) {
	if o == nil || IsNil(o.CertificateOverride) {
		return nil, false
	}
	return o.CertificateOverride, true
}

// HasCertificateOverride returns a boolean if a field has been set.
func (o *VirtualCenterInfoV2) HasCertificateOverride() bool {
	if o != nil && !IsNil(o.CertificateOverride) {
		return true
	}

	return false
}

// SetCertificateOverride gets a reference to the given CertificateOverrideData and assigns it to the CertificateOverride field.
func (o *VirtualCenterInfoV2) SetCertificateOverride(v CertificateOverrideData) {
	o.CertificateOverride = &v
}

// GetDeploymentType returns the DeploymentType field value if set, zero value otherwise.
func (o *VirtualCenterInfoV2) GetDeploymentType() string {
	if o == nil || IsNil(o.DeploymentType) {
		var ret string
		return ret
	}
	return *o.DeploymentType
}

// GetDeploymentTypeOk returns a tuple with the DeploymentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetDeploymentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DeploymentType) {
		return nil, false
	}
	return o.DeploymentType, true
}

// HasDeploymentType returns a boolean if a field has been set.
func (o *VirtualCenterInfoV2) HasDeploymentType() bool {
	if o != nil && !IsNil(o.DeploymentType) {
		return true
	}

	return false
}

// SetDeploymentType gets a reference to the given string and assigns it to the DeploymentType field.
func (o *VirtualCenterInfoV2) SetDeploymentType(v string) {
	o.DeploymentType = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VirtualCenterInfoV2) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VirtualCenterInfoV2) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VirtualCenterInfoV2) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *VirtualCenterInfoV2) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *VirtualCenterInfoV2) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *VirtualCenterInfoV2) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *VirtualCenterInfoV2) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *VirtualCenterInfoV2) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *VirtualCenterInfoV2) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetHasVirtualTpmPools returns the HasVirtualTpmPools field value if set, zero value otherwise.
func (o *VirtualCenterInfoV2) GetHasVirtualTpmPools() bool {
	if o == nil || IsNil(o.HasVirtualTpmPools) {
		var ret bool
		return ret
	}
	return *o.HasVirtualTpmPools
}

// GetHasVirtualTpmPoolsOk returns a tuple with the HasVirtualTpmPools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetHasVirtualTpmPoolsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasVirtualTpmPools) {
		return nil, false
	}
	return o.HasVirtualTpmPools, true
}

// HasHasVirtualTpmPools returns a boolean if a field has been set.
func (o *VirtualCenterInfoV2) HasHasVirtualTpmPools() bool {
	if o != nil && !IsNil(o.HasVirtualTpmPools) {
		return true
	}

	return false
}

// SetHasVirtualTpmPools gets a reference to the given bool and assigns it to the HasVirtualTpmPools field.
func (o *VirtualCenterInfoV2) SetHasVirtualTpmPools(v bool) {
	o.HasVirtualTpmPools = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VirtualCenterInfoV2) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VirtualCenterInfoV2) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VirtualCenterInfoV2) SetId(v string) {
	o.Id = &v
}

// GetInstanceUuid returns the InstanceUuid field value if set, zero value otherwise.
func (o *VirtualCenterInfoV2) GetInstanceUuid() string {
	if o == nil || IsNil(o.InstanceUuid) {
		var ret string
		return ret
	}
	return *o.InstanceUuid
}

// GetInstanceUuidOk returns a tuple with the InstanceUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetInstanceUuidOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceUuid) {
		return nil, false
	}
	return o.InstanceUuid, true
}

// HasInstanceUuid returns a boolean if a field has been set.
func (o *VirtualCenterInfoV2) HasInstanceUuid() bool {
	if o != nil && !IsNil(o.InstanceUuid) {
		return true
	}

	return false
}

// SetInstanceUuid gets a reference to the given string and assigns it to the InstanceUuid field.
func (o *VirtualCenterInfoV2) SetInstanceUuid(v string) {
	o.InstanceUuid = &v
}

// GetLimits returns the Limits field value if set, zero value otherwise.
func (o *VirtualCenterInfoV2) GetLimits() VCLimits {
	if o == nil || IsNil(o.Limits) {
		var ret VCLimits
		return ret
	}
	return *o.Limits
}

// GetLimitsOk returns a tuple with the Limits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetLimitsOk() (*VCLimits, bool) {
	if o == nil || IsNil(o.Limits) {
		return nil, false
	}
	return o.Limits, true
}

// HasLimits returns a boolean if a field has been set.
func (o *VirtualCenterInfoV2) HasLimits() bool {
	if o != nil && !IsNil(o.Limits) {
		return true
	}

	return false
}

// SetLimits gets a reference to the given VCLimits and assigns it to the Limits field.
func (o *VirtualCenterInfoV2) SetLimits(v VCLimits) {
	o.Limits = &v
}

// GetMaintenanceMode returns the MaintenanceMode field value if set, zero value otherwise.
func (o *VirtualCenterInfoV2) GetMaintenanceMode() bool {
	if o == nil || IsNil(o.MaintenanceMode) {
		var ret bool
		return ret
	}
	return *o.MaintenanceMode
}

// GetMaintenanceModeOk returns a tuple with the MaintenanceMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetMaintenanceModeOk() (*bool, bool) {
	if o == nil || IsNil(o.MaintenanceMode) {
		return nil, false
	}
	return o.MaintenanceMode, true
}

// HasMaintenanceMode returns a boolean if a field has been set.
func (o *VirtualCenterInfoV2) HasMaintenanceMode() bool {
	if o != nil && !IsNil(o.MaintenanceMode) {
		return true
	}

	return false
}

// SetMaintenanceMode gets a reference to the given bool and assigns it to the MaintenanceMode field.
func (o *VirtualCenterInfoV2) SetMaintenanceMode(v bool) {
	o.MaintenanceMode = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *VirtualCenterInfoV2) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *VirtualCenterInfoV2) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *VirtualCenterInfoV2) SetPort(v int32) {
	o.Port = &v
}

// GetSeSparseReclamationEnabled returns the SeSparseReclamationEnabled field value if set, zero value otherwise.
func (o *VirtualCenterInfoV2) GetSeSparseReclamationEnabled() bool {
	if o == nil || IsNil(o.SeSparseReclamationEnabled) {
		var ret bool
		return ret
	}
	return *o.SeSparseReclamationEnabled
}

// GetSeSparseReclamationEnabledOk returns a tuple with the SeSparseReclamationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetSeSparseReclamationEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SeSparseReclamationEnabled) {
		return nil, false
	}
	return o.SeSparseReclamationEnabled, true
}

// HasSeSparseReclamationEnabled returns a boolean if a field has been set.
func (o *VirtualCenterInfoV2) HasSeSparseReclamationEnabled() bool {
	if o != nil && !IsNil(o.SeSparseReclamationEnabled) {
		return true
	}

	return false
}

// SetSeSparseReclamationEnabled gets a reference to the given bool and assigns it to the SeSparseReclamationEnabled field.
func (o *VirtualCenterInfoV2) SetSeSparseReclamationEnabled(v bool) {
	o.SeSparseReclamationEnabled = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *VirtualCenterInfoV2) GetServerName() string {
	if o == nil || IsNil(o.ServerName) {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetServerNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerName) {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *VirtualCenterInfoV2) HasServerName() bool {
	if o != nil && !IsNil(o.ServerName) {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *VirtualCenterInfoV2) SetServerName(v string) {
	o.ServerName = &v
}

// GetStorageAcceleratorData returns the StorageAcceleratorData field value if set, zero value otherwise.
func (o *VirtualCenterInfoV2) GetStorageAcceleratorData() StorageAcceleratorData {
	if o == nil || IsNil(o.StorageAcceleratorData) {
		var ret StorageAcceleratorData
		return ret
	}
	return *o.StorageAcceleratorData
}

// GetStorageAcceleratorDataOk returns a tuple with the StorageAcceleratorData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetStorageAcceleratorDataOk() (*StorageAcceleratorData, bool) {
	if o == nil || IsNil(o.StorageAcceleratorData) {
		return nil, false
	}
	return o.StorageAcceleratorData, true
}

// HasStorageAcceleratorData returns a boolean if a field has been set.
func (o *VirtualCenterInfoV2) HasStorageAcceleratorData() bool {
	if o != nil && !IsNil(o.StorageAcceleratorData) {
		return true
	}

	return false
}

// SetStorageAcceleratorData gets a reference to the given StorageAcceleratorData and assigns it to the StorageAcceleratorData field.
func (o *VirtualCenterInfoV2) SetStorageAcceleratorData(v StorageAcceleratorData) {
	o.StorageAcceleratorData = &v
}

// GetUseSsl returns the UseSsl field value if set, zero value otherwise.
func (o *VirtualCenterInfoV2) GetUseSsl() bool {
	if o == nil || IsNil(o.UseSsl) {
		var ret bool
		return ret
	}
	return *o.UseSsl
}

// GetUseSslOk returns a tuple with the UseSsl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetUseSslOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSsl) {
		return nil, false
	}
	return o.UseSsl, true
}

// HasUseSsl returns a boolean if a field has been set.
func (o *VirtualCenterInfoV2) HasUseSsl() bool {
	if o != nil && !IsNil(o.UseSsl) {
		return true
	}

	return false
}

// SetUseSsl gets a reference to the given bool and assigns it to the UseSsl field.
func (o *VirtualCenterInfoV2) SetUseSsl(v bool) {
	o.UseSsl = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *VirtualCenterInfoV2) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *VirtualCenterInfoV2) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *VirtualCenterInfoV2) SetUserName(v string) {
	o.UserName = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *VirtualCenterInfoV2) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *VirtualCenterInfoV2) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *VirtualCenterInfoV2) SetVersion(v string) {
	o.Version = &v
}

func (o VirtualCenterInfoV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualCenterInfoV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CertificateOverride) {
		toSerialize["certificate_override"] = o.CertificateOverride
	}
	if !IsNil(o.DeploymentType) {
		toSerialize["deployment_type"] = o.DeploymentType
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.HasVirtualTpmPools) {
		toSerialize["has_virtual_tpm_pools"] = o.HasVirtualTpmPools
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InstanceUuid) {
		toSerialize["instance_uuid"] = o.InstanceUuid
	}
	if !IsNil(o.Limits) {
		toSerialize["limits"] = o.Limits
	}
	if !IsNil(o.MaintenanceMode) {
		toSerialize["maintenance_mode"] = o.MaintenanceMode
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.SeSparseReclamationEnabled) {
		toSerialize["se_sparse_reclamation_enabled"] = o.SeSparseReclamationEnabled
	}
	if !IsNil(o.ServerName) {
		toSerialize["server_name"] = o.ServerName
	}
	if !IsNil(o.StorageAcceleratorData) {
		toSerialize["storage_accelerator_data"] = o.StorageAcceleratorData
	}
	if !IsNil(o.UseSsl) {
		toSerialize["use_ssl"] = o.UseSsl
	}
	if !IsNil(o.UserName) {
		toSerialize["user_name"] = o.UserName
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableVirtualCenterInfoV2 struct {
	value *VirtualCenterInfoV2
	isSet bool
}

func (v NullableVirtualCenterInfoV2) Get() *VirtualCenterInfoV2 {
	return v.value
}

func (v *NullableVirtualCenterInfoV2) Set(val *VirtualCenterInfoV2) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualCenterInfoV2) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualCenterInfoV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualCenterInfoV2(val *VirtualCenterInfoV2) *NullableVirtualCenterInfoV2 {
	return &NullableVirtualCenterInfoV2{value: val, isSet: true}
}

func (v NullableVirtualCenterInfoV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualCenterInfoV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


