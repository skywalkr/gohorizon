/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// VirtualCenterInfoV2 Information related to Virtual Center.
type VirtualCenterInfoV2 struct {
	CertificateOverride *CertificateOverrideData `json:"certificate_override,omitempty"`
	// Indicates different environments that Horizon can be deployed into. * GENERAL: Horizon is deployed on On-premises. * AZURE: Horizon is deployed on Azure. * AWS: Horizon is deployed on AWS. * DELL_EMC: Horizon is deployed on Dell EMC. * GOOGLE: Horizon is deployed on Google Cloud. * ORACLE: Horizon is deployed on Oracle Cloud.
	DeploymentType string `json:"deployment_type"`
	// Human readable description of the Virtual Center instance.
	Description *string `json:"description,omitempty"`
	// Human readable name of the Virtual Center instance.
	DisplayName *string `json:"display_name,omitempty"`
	// Indicates if the virtual center is enabled.
	Enabled bool `json:"enabled"`
	// Indicates if there is any instant clone Desktop pool associated with this Virtual Center which has addVirtualTPM set
	HasVirtualTpmPools *bool `json:"has_virtual_tpm_pools,omitempty"`
	// Unique ID of the Virtual Center.
	Id string `json:"id"`
	// Virtual center's instanceUuid.
	InstanceUuid *string  `json:"instance_uuid,omitempty"`
	Limits       VCLimits `json:"limits"`
	// Indicates if maintenance or upgrade task is scheduled on Virtual center or hosts
	MaintenanceMode *bool `json:"maintenance_mode,omitempty"`
	// Port of the virtual center to connect to.
	Port int32 `json:"port"`
	// Indicates if Storage Efficiency Sparse (seSparse) reclamation is enabled.
	SeSparseReclamationEnabled bool `json:"se_sparse_reclamation_enabled"`
	// Virtual Center's server name or IP address.
	ServerName             string                 `json:"server_name"`
	StorageAcceleratorData StorageAcceleratorData `json:"storage_accelerator_data"`
	// Indicates if SSL should be used when connecting to the server.
	UseSsl bool `json:"use_ssl"`
	// User name to use for the connection.
	UserName string `json:"user_name"`
	// Version of the Virtual Center.
	Version string `json:"version"`
}

// NewVirtualCenterInfoV2 instantiates a new VirtualCenterInfoV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualCenterInfoV2(deploymentType string, enabled bool, id string, limits VCLimits, port int32, seSparseReclamationEnabled bool, serverName string, storageAcceleratorData StorageAcceleratorData, useSsl bool, userName string, version string) *VirtualCenterInfoV2 {
	this := VirtualCenterInfoV2{}
	this.DeploymentType = deploymentType
	this.Enabled = enabled
	this.Id = id
	this.Limits = limits
	this.Port = port
	this.SeSparseReclamationEnabled = seSparseReclamationEnabled
	this.ServerName = serverName
	this.StorageAcceleratorData = storageAcceleratorData
	this.UseSsl = useSsl
	this.UserName = userName
	this.Version = version
	return &this
}

// NewVirtualCenterInfoV2WithDefaults instantiates a new VirtualCenterInfoV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualCenterInfoV2WithDefaults() *VirtualCenterInfoV2 {
	this := VirtualCenterInfoV2{}
	return &this
}

// GetCertificateOverride returns the CertificateOverride field value if set, zero value otherwise.
func (o *VirtualCenterInfoV2) GetCertificateOverride() CertificateOverrideData {
	if o == nil || o.CertificateOverride == nil {
		var ret CertificateOverrideData
		return ret
	}
	return *o.CertificateOverride
}

// GetCertificateOverrideOk returns a tuple with the CertificateOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetCertificateOverrideOk() (*CertificateOverrideData, bool) {
	if o == nil || o.CertificateOverride == nil {
		return nil, false
	}
	return o.CertificateOverride, true
}

// HasCertificateOverride returns a boolean if a field has been set.
func (o *VirtualCenterInfoV2) HasCertificateOverride() bool {
	if o != nil && o.CertificateOverride != nil {
		return true
	}

	return false
}

// SetCertificateOverride gets a reference to the given CertificateOverrideData and assigns it to the CertificateOverride field.
func (o *VirtualCenterInfoV2) SetCertificateOverride(v CertificateOverrideData) {
	o.CertificateOverride = &v
}

// GetDeploymentType returns the DeploymentType field value
func (o *VirtualCenterInfoV2) GetDeploymentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeploymentType
}

// GetDeploymentTypeOk returns a tuple with the DeploymentType field value
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetDeploymentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeploymentType, true
}

// SetDeploymentType sets field value
func (o *VirtualCenterInfoV2) SetDeploymentType(v string) {
	o.DeploymentType = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VirtualCenterInfoV2) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VirtualCenterInfoV2) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VirtualCenterInfoV2) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *VirtualCenterInfoV2) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *VirtualCenterInfoV2) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *VirtualCenterInfoV2) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEnabled returns the Enabled field value
func (o *VirtualCenterInfoV2) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *VirtualCenterInfoV2) SetEnabled(v bool) {
	o.Enabled = v
}

// GetHasVirtualTpmPools returns the HasVirtualTpmPools field value if set, zero value otherwise.
func (o *VirtualCenterInfoV2) GetHasVirtualTpmPools() bool {
	if o == nil || o.HasVirtualTpmPools == nil {
		var ret bool
		return ret
	}
	return *o.HasVirtualTpmPools
}

// GetHasVirtualTpmPoolsOk returns a tuple with the HasVirtualTpmPools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetHasVirtualTpmPoolsOk() (*bool, bool) {
	if o == nil || o.HasVirtualTpmPools == nil {
		return nil, false
	}
	return o.HasVirtualTpmPools, true
}

// HasHasVirtualTpmPools returns a boolean if a field has been set.
func (o *VirtualCenterInfoV2) HasHasVirtualTpmPools() bool {
	if o != nil && o.HasVirtualTpmPools != nil {
		return true
	}

	return false
}

// SetHasVirtualTpmPools gets a reference to the given bool and assigns it to the HasVirtualTpmPools field.
func (o *VirtualCenterInfoV2) SetHasVirtualTpmPools(v bool) {
	o.HasVirtualTpmPools = &v
}

// GetId returns the Id field value
func (o *VirtualCenterInfoV2) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VirtualCenterInfoV2) SetId(v string) {
	o.Id = v
}

// GetInstanceUuid returns the InstanceUuid field value if set, zero value otherwise.
func (o *VirtualCenterInfoV2) GetInstanceUuid() string {
	if o == nil || o.InstanceUuid == nil {
		var ret string
		return ret
	}
	return *o.InstanceUuid
}

// GetInstanceUuidOk returns a tuple with the InstanceUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetInstanceUuidOk() (*string, bool) {
	if o == nil || o.InstanceUuid == nil {
		return nil, false
	}
	return o.InstanceUuid, true
}

// HasInstanceUuid returns a boolean if a field has been set.
func (o *VirtualCenterInfoV2) HasInstanceUuid() bool {
	if o != nil && o.InstanceUuid != nil {
		return true
	}

	return false
}

// SetInstanceUuid gets a reference to the given string and assigns it to the InstanceUuid field.
func (o *VirtualCenterInfoV2) SetInstanceUuid(v string) {
	o.InstanceUuid = &v
}

// GetLimits returns the Limits field value
func (o *VirtualCenterInfoV2) GetLimits() VCLimits {
	if o == nil {
		var ret VCLimits
		return ret
	}

	return o.Limits
}

// GetLimitsOk returns a tuple with the Limits field value
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetLimitsOk() (*VCLimits, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limits, true
}

// SetLimits sets field value
func (o *VirtualCenterInfoV2) SetLimits(v VCLimits) {
	o.Limits = v
}

// GetMaintenanceMode returns the MaintenanceMode field value if set, zero value otherwise.
func (o *VirtualCenterInfoV2) GetMaintenanceMode() bool {
	if o == nil || o.MaintenanceMode == nil {
		var ret bool
		return ret
	}
	return *o.MaintenanceMode
}

// GetMaintenanceModeOk returns a tuple with the MaintenanceMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetMaintenanceModeOk() (*bool, bool) {
	if o == nil || o.MaintenanceMode == nil {
		return nil, false
	}
	return o.MaintenanceMode, true
}

// HasMaintenanceMode returns a boolean if a field has been set.
func (o *VirtualCenterInfoV2) HasMaintenanceMode() bool {
	if o != nil && o.MaintenanceMode != nil {
		return true
	}

	return false
}

// SetMaintenanceMode gets a reference to the given bool and assigns it to the MaintenanceMode field.
func (o *VirtualCenterInfoV2) SetMaintenanceMode(v bool) {
	o.MaintenanceMode = &v
}

// GetPort returns the Port field value
func (o *VirtualCenterInfoV2) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *VirtualCenterInfoV2) SetPort(v int32) {
	o.Port = v
}

// GetSeSparseReclamationEnabled returns the SeSparseReclamationEnabled field value
func (o *VirtualCenterInfoV2) GetSeSparseReclamationEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SeSparseReclamationEnabled
}

// GetSeSparseReclamationEnabledOk returns a tuple with the SeSparseReclamationEnabled field value
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetSeSparseReclamationEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SeSparseReclamationEnabled, true
}

// SetSeSparseReclamationEnabled sets field value
func (o *VirtualCenterInfoV2) SetSeSparseReclamationEnabled(v bool) {
	o.SeSparseReclamationEnabled = v
}

// GetServerName returns the ServerName field value
func (o *VirtualCenterInfoV2) GetServerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetServerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerName, true
}

// SetServerName sets field value
func (o *VirtualCenterInfoV2) SetServerName(v string) {
	o.ServerName = v
}

// GetStorageAcceleratorData returns the StorageAcceleratorData field value
func (o *VirtualCenterInfoV2) GetStorageAcceleratorData() StorageAcceleratorData {
	if o == nil {
		var ret StorageAcceleratorData
		return ret
	}

	return o.StorageAcceleratorData
}

// GetStorageAcceleratorDataOk returns a tuple with the StorageAcceleratorData field value
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetStorageAcceleratorDataOk() (*StorageAcceleratorData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageAcceleratorData, true
}

// SetStorageAcceleratorData sets field value
func (o *VirtualCenterInfoV2) SetStorageAcceleratorData(v StorageAcceleratorData) {
	o.StorageAcceleratorData = v
}

// GetUseSsl returns the UseSsl field value
func (o *VirtualCenterInfoV2) GetUseSsl() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UseSsl
}

// GetUseSslOk returns a tuple with the UseSsl field value
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetUseSslOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseSsl, true
}

// SetUseSsl sets field value
func (o *VirtualCenterInfoV2) SetUseSsl(v bool) {
	o.UseSsl = v
}

// GetUserName returns the UserName field value
func (o *VirtualCenterInfoV2) GetUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserName, true
}

// SetUserName sets field value
func (o *VirtualCenterInfoV2) SetUserName(v string) {
	o.UserName = v
}

// GetVersion returns the Version field value
func (o *VirtualCenterInfoV2) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *VirtualCenterInfoV2) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *VirtualCenterInfoV2) SetVersion(v string) {
	o.Version = v
}

func (o VirtualCenterInfoV2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CertificateOverride != nil {
		toSerialize["certificate_override"] = o.CertificateOverride
	}
	if true {
		toSerialize["deployment_type"] = o.DeploymentType
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if o.HasVirtualTpmPools != nil {
		toSerialize["has_virtual_tpm_pools"] = o.HasVirtualTpmPools
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.InstanceUuid != nil {
		toSerialize["instance_uuid"] = o.InstanceUuid
	}
	if true {
		toSerialize["limits"] = o.Limits
	}
	if o.MaintenanceMode != nil {
		toSerialize["maintenance_mode"] = o.MaintenanceMode
	}
	if true {
		toSerialize["port"] = o.Port
	}
	if true {
		toSerialize["se_sparse_reclamation_enabled"] = o.SeSparseReclamationEnabled
	}
	if true {
		toSerialize["server_name"] = o.ServerName
	}
	if true {
		toSerialize["storage_accelerator_data"] = o.StorageAcceleratorData
	}
	if true {
		toSerialize["use_ssl"] = o.UseSsl
	}
	if true {
		toSerialize["user_name"] = o.UserName
	}
	if true {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableVirtualCenterInfoV2 struct {
	value *VirtualCenterInfoV2
	isSet bool
}

func (v NullableVirtualCenterInfoV2) Get() *VirtualCenterInfoV2 {
	return v.value
}

func (v *NullableVirtualCenterInfoV2) Set(val *VirtualCenterInfoV2) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualCenterInfoV2) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualCenterInfoV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualCenterInfoV2(val *VirtualCenterInfoV2) *NullableVirtualCenterInfoV2 {
	return &NullableVirtualCenterInfoV2{value: val, isSet: true}
}

func (v NullableVirtualCenterInfoV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualCenterInfoV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
