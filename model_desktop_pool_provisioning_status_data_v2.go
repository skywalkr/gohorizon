/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the DesktopPoolProvisioningStatusDataV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DesktopPoolProvisioningStatusDataV2{}

// DesktopPoolProvisioningStatusDataV2 Provisioning status data about this automated desktop pool.
type DesktopPoolProvisioningStatusDataV2 struct {
	// Applicable To: instant clone automated desktop pools.<br>This represents the state of the current image of this instant clone desktop pool. * READY: This is the state of the current image after successful completion of creation operation. At this stage the current image is ready to be used to create the instant clones. Please note that this state is also reached from UNPUBLISHING state on successful completion of editing of cluster or editing of datastore(s) operations. * FAILED: This is the state of the current image if instant clone delete operation has failed or timed out. * PENDING_UNPUBLISH: This is the state of the current image before instant clone delete or cluster edit or datastore(s) edit operation(s) begins. * UNPUBLISHING: This is the transient state of the current image when instant clone delete or cluster edit or datastore(s) edit operation(s) is going on.
	InstantCloneCurrentImageState *string `json:"instant_clone_current_image_state,omitempty"`
	// Applicable To: instant clone automated desktop pools.<br>The operation that this instant clone desktop pool is undergoing. * NONE: There is no current operation on the desktop pool. * INITIAL_PUBLISH: The desktop pool has just been created and is undergoing initial publishing. * SCHEDULE_PUSH_IMAGE: The push operation is scheduled on the desktop pool. * CANCEL_SCHEDULED_PUSH_IMAGE: The scheduled push operation on the desktop pool is being cancelled. * INFRASTRUCTURE_CHANGE: A cluster or datastore change operation was requested for the desktop pool. * FINAL_UNPUBLISH: A desktop pool has been deleted and is undergoing final unpublishing.
	InstantCloneOperation *string `json:"instant_clone_operation,omitempty"`
	// Applicable To: instant clone automated desktop pools.<br>Pending image management stream for instant clone desktop pools.<br>Supported Filters: 'Equals'.
	InstantClonePendingImStreamId *string `json:"instant_clone_pending_im_stream_id,omitempty"`
	// Applicable To: instant clone automated desktop pools.<br>Pending image management tag for instant clone desktop pools<br>Supported Filters: 'Equals'.
	InstantClonePendingImTagId *string `json:"instant_clone_pending_im_tag_id,omitempty"`
	// Applicable To: instant clone automated desktop pools.<br>This represents the error message if publishing of push image operation is failed.
	InstantClonePendingImageError *string `json:"instant_clone_pending_image_error,omitempty"`
	// Applicable To: instant clone automated desktop pools.<br>Pending base image VM for instant clone desktop pools. This is used to return the information about the parent VM of the pending Image.
	InstantClonePendingImageParentVmId *string `json:"instant_clone_pending_image_parent_vm_id,omitempty"`
	// Applicable To: instant clone automated desktop pools.<br>This represents the pending image publish progress in percentage for an instant clone desktop pool.
	InstantClonePendingImageProgress *int32 `json:"instant_clone_pending_image_progress,omitempty"`
	// Applicable To: instant clone automated desktop pools.<br>Pending base image snapshot for instant clone desktop pools. This is used to return the information about the snapshot of the pending image.
	InstantClonePendingImageSnapshotId *string `json:"instant_clone_pending_image_snapshot_id,omitempty"`
	// Applicable To: instant clone automated desktop pools.<br>This represents the state of the pending image of this instant clone desktop pool. This will be null when there is no pending image for the desktop pool. * PENDING_PUBLISH: This is the initial transient state of the pending image before instant clone creation operation has started. * PUBLISHING: This is the transient state of the pending image when creation of instant clone operation is going on. * UNPUBLISHING: This is the transient state of the pending image when instant clone delete or cluster edit or datastore(s) edit operation(s) is going on. * READY: This is the state of the pending image after successful publish of the pending image and before that image has been upgraded to the current image. This is normally seen after successful publish for a push image which has been scheduled to trigger at a later time. * FAILED: This is the state of the pending image if creation of instant clone operation has failed or timed out. * READY_HELD: This is the state of the pending image after performing a selective resync operation, in which the image may be applied to some VMs in the desktop pool/farm.
	InstantClonePendingImageState *string `json:"instant_clone_pending_image_state,omitempty"`
	InstantClonePushImageSettings *DesktopPoolInstantClonePushImageSettings `json:"instant_clone_push_image_settings,omitempty"`
	// String message detailing the last provisioning error on this desktop pool while stop_provisioning_on_error is enabled. This will be cleared when enable_provisioning is updated to true.
	LastProvisioningError *string `json:"last_provisioning_error,omitempty"`
	// Time the last provisioning error occurred on this desktop while stop_provisioning_on_error is enabled. This will be cleared when enable_provisioning is updated to true. Measured as epoch time.
	LastProvisioningErrorTime *int64 `json:"last_provisioning_error_time,omitempty"`
	// Indicates the pending number of cores per socket for the CPU in the compute profile configured on clones.
	PendingComputeProfileNumCoresPerSocket *int32 `json:"pending_compute_profile_num_cores_per_socket,omitempty"`
	// Indicates the pending number of CPUs in the compute profile configured on clones.
	PendingComputeProfileNumCpus *int32 `json:"pending_compute_profile_num_cpus,omitempty"`
	// Indicates the pending RAM in MB in the compute profile configured on clones.
	PendingComputeProfileRamMb *int32 `json:"pending_compute_profile_ram_mb,omitempty"`
}

// NewDesktopPoolProvisioningStatusDataV2 instantiates a new DesktopPoolProvisioningStatusDataV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDesktopPoolProvisioningStatusDataV2() *DesktopPoolProvisioningStatusDataV2 {
	this := DesktopPoolProvisioningStatusDataV2{}
	return &this
}

// NewDesktopPoolProvisioningStatusDataV2WithDefaults instantiates a new DesktopPoolProvisioningStatusDataV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDesktopPoolProvisioningStatusDataV2WithDefaults() *DesktopPoolProvisioningStatusDataV2 {
	this := DesktopPoolProvisioningStatusDataV2{}
	return &this
}

// GetInstantCloneCurrentImageState returns the InstantCloneCurrentImageState field value if set, zero value otherwise.
func (o *DesktopPoolProvisioningStatusDataV2) GetInstantCloneCurrentImageState() string {
	if o == nil || IsNil(o.InstantCloneCurrentImageState) {
		var ret string
		return ret
	}
	return *o.InstantCloneCurrentImageState
}

// GetInstantCloneCurrentImageStateOk returns a tuple with the InstantCloneCurrentImageState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolProvisioningStatusDataV2) GetInstantCloneCurrentImageStateOk() (*string, bool) {
	if o == nil || IsNil(o.InstantCloneCurrentImageState) {
		return nil, false
	}
	return o.InstantCloneCurrentImageState, true
}

// HasInstantCloneCurrentImageState returns a boolean if a field has been set.
func (o *DesktopPoolProvisioningStatusDataV2) HasInstantCloneCurrentImageState() bool {
	if o != nil && !IsNil(o.InstantCloneCurrentImageState) {
		return true
	}

	return false
}

// SetInstantCloneCurrentImageState gets a reference to the given string and assigns it to the InstantCloneCurrentImageState field.
func (o *DesktopPoolProvisioningStatusDataV2) SetInstantCloneCurrentImageState(v string) {
	o.InstantCloneCurrentImageState = &v
}

// GetInstantCloneOperation returns the InstantCloneOperation field value if set, zero value otherwise.
func (o *DesktopPoolProvisioningStatusDataV2) GetInstantCloneOperation() string {
	if o == nil || IsNil(o.InstantCloneOperation) {
		var ret string
		return ret
	}
	return *o.InstantCloneOperation
}

// GetInstantCloneOperationOk returns a tuple with the InstantCloneOperation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolProvisioningStatusDataV2) GetInstantCloneOperationOk() (*string, bool) {
	if o == nil || IsNil(o.InstantCloneOperation) {
		return nil, false
	}
	return o.InstantCloneOperation, true
}

// HasInstantCloneOperation returns a boolean if a field has been set.
func (o *DesktopPoolProvisioningStatusDataV2) HasInstantCloneOperation() bool {
	if o != nil && !IsNil(o.InstantCloneOperation) {
		return true
	}

	return false
}

// SetInstantCloneOperation gets a reference to the given string and assigns it to the InstantCloneOperation field.
func (o *DesktopPoolProvisioningStatusDataV2) SetInstantCloneOperation(v string) {
	o.InstantCloneOperation = &v
}

// GetInstantClonePendingImStreamId returns the InstantClonePendingImStreamId field value if set, zero value otherwise.
func (o *DesktopPoolProvisioningStatusDataV2) GetInstantClonePendingImStreamId() string {
	if o == nil || IsNil(o.InstantClonePendingImStreamId) {
		var ret string
		return ret
	}
	return *o.InstantClonePendingImStreamId
}

// GetInstantClonePendingImStreamIdOk returns a tuple with the InstantClonePendingImStreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolProvisioningStatusDataV2) GetInstantClonePendingImStreamIdOk() (*string, bool) {
	if o == nil || IsNil(o.InstantClonePendingImStreamId) {
		return nil, false
	}
	return o.InstantClonePendingImStreamId, true
}

// HasInstantClonePendingImStreamId returns a boolean if a field has been set.
func (o *DesktopPoolProvisioningStatusDataV2) HasInstantClonePendingImStreamId() bool {
	if o != nil && !IsNil(o.InstantClonePendingImStreamId) {
		return true
	}

	return false
}

// SetInstantClonePendingImStreamId gets a reference to the given string and assigns it to the InstantClonePendingImStreamId field.
func (o *DesktopPoolProvisioningStatusDataV2) SetInstantClonePendingImStreamId(v string) {
	o.InstantClonePendingImStreamId = &v
}

// GetInstantClonePendingImTagId returns the InstantClonePendingImTagId field value if set, zero value otherwise.
func (o *DesktopPoolProvisioningStatusDataV2) GetInstantClonePendingImTagId() string {
	if o == nil || IsNil(o.InstantClonePendingImTagId) {
		var ret string
		return ret
	}
	return *o.InstantClonePendingImTagId
}

// GetInstantClonePendingImTagIdOk returns a tuple with the InstantClonePendingImTagId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolProvisioningStatusDataV2) GetInstantClonePendingImTagIdOk() (*string, bool) {
	if o == nil || IsNil(o.InstantClonePendingImTagId) {
		return nil, false
	}
	return o.InstantClonePendingImTagId, true
}

// HasInstantClonePendingImTagId returns a boolean if a field has been set.
func (o *DesktopPoolProvisioningStatusDataV2) HasInstantClonePendingImTagId() bool {
	if o != nil && !IsNil(o.InstantClonePendingImTagId) {
		return true
	}

	return false
}

// SetInstantClonePendingImTagId gets a reference to the given string and assigns it to the InstantClonePendingImTagId field.
func (o *DesktopPoolProvisioningStatusDataV2) SetInstantClonePendingImTagId(v string) {
	o.InstantClonePendingImTagId = &v
}

// GetInstantClonePendingImageError returns the InstantClonePendingImageError field value if set, zero value otherwise.
func (o *DesktopPoolProvisioningStatusDataV2) GetInstantClonePendingImageError() string {
	if o == nil || IsNil(o.InstantClonePendingImageError) {
		var ret string
		return ret
	}
	return *o.InstantClonePendingImageError
}

// GetInstantClonePendingImageErrorOk returns a tuple with the InstantClonePendingImageError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolProvisioningStatusDataV2) GetInstantClonePendingImageErrorOk() (*string, bool) {
	if o == nil || IsNil(o.InstantClonePendingImageError) {
		return nil, false
	}
	return o.InstantClonePendingImageError, true
}

// HasInstantClonePendingImageError returns a boolean if a field has been set.
func (o *DesktopPoolProvisioningStatusDataV2) HasInstantClonePendingImageError() bool {
	if o != nil && !IsNil(o.InstantClonePendingImageError) {
		return true
	}

	return false
}

// SetInstantClonePendingImageError gets a reference to the given string and assigns it to the InstantClonePendingImageError field.
func (o *DesktopPoolProvisioningStatusDataV2) SetInstantClonePendingImageError(v string) {
	o.InstantClonePendingImageError = &v
}

// GetInstantClonePendingImageParentVmId returns the InstantClonePendingImageParentVmId field value if set, zero value otherwise.
func (o *DesktopPoolProvisioningStatusDataV2) GetInstantClonePendingImageParentVmId() string {
	if o == nil || IsNil(o.InstantClonePendingImageParentVmId) {
		var ret string
		return ret
	}
	return *o.InstantClonePendingImageParentVmId
}

// GetInstantClonePendingImageParentVmIdOk returns a tuple with the InstantClonePendingImageParentVmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolProvisioningStatusDataV2) GetInstantClonePendingImageParentVmIdOk() (*string, bool) {
	if o == nil || IsNil(o.InstantClonePendingImageParentVmId) {
		return nil, false
	}
	return o.InstantClonePendingImageParentVmId, true
}

// HasInstantClonePendingImageParentVmId returns a boolean if a field has been set.
func (o *DesktopPoolProvisioningStatusDataV2) HasInstantClonePendingImageParentVmId() bool {
	if o != nil && !IsNil(o.InstantClonePendingImageParentVmId) {
		return true
	}

	return false
}

// SetInstantClonePendingImageParentVmId gets a reference to the given string and assigns it to the InstantClonePendingImageParentVmId field.
func (o *DesktopPoolProvisioningStatusDataV2) SetInstantClonePendingImageParentVmId(v string) {
	o.InstantClonePendingImageParentVmId = &v
}

// GetInstantClonePendingImageProgress returns the InstantClonePendingImageProgress field value if set, zero value otherwise.
func (o *DesktopPoolProvisioningStatusDataV2) GetInstantClonePendingImageProgress() int32 {
	if o == nil || IsNil(o.InstantClonePendingImageProgress) {
		var ret int32
		return ret
	}
	return *o.InstantClonePendingImageProgress
}

// GetInstantClonePendingImageProgressOk returns a tuple with the InstantClonePendingImageProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolProvisioningStatusDataV2) GetInstantClonePendingImageProgressOk() (*int32, bool) {
	if o == nil || IsNil(o.InstantClonePendingImageProgress) {
		return nil, false
	}
	return o.InstantClonePendingImageProgress, true
}

// HasInstantClonePendingImageProgress returns a boolean if a field has been set.
func (o *DesktopPoolProvisioningStatusDataV2) HasInstantClonePendingImageProgress() bool {
	if o != nil && !IsNil(o.InstantClonePendingImageProgress) {
		return true
	}

	return false
}

// SetInstantClonePendingImageProgress gets a reference to the given int32 and assigns it to the InstantClonePendingImageProgress field.
func (o *DesktopPoolProvisioningStatusDataV2) SetInstantClonePendingImageProgress(v int32) {
	o.InstantClonePendingImageProgress = &v
}

// GetInstantClonePendingImageSnapshotId returns the InstantClonePendingImageSnapshotId field value if set, zero value otherwise.
func (o *DesktopPoolProvisioningStatusDataV2) GetInstantClonePendingImageSnapshotId() string {
	if o == nil || IsNil(o.InstantClonePendingImageSnapshotId) {
		var ret string
		return ret
	}
	return *o.InstantClonePendingImageSnapshotId
}

// GetInstantClonePendingImageSnapshotIdOk returns a tuple with the InstantClonePendingImageSnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolProvisioningStatusDataV2) GetInstantClonePendingImageSnapshotIdOk() (*string, bool) {
	if o == nil || IsNil(o.InstantClonePendingImageSnapshotId) {
		return nil, false
	}
	return o.InstantClonePendingImageSnapshotId, true
}

// HasInstantClonePendingImageSnapshotId returns a boolean if a field has been set.
func (o *DesktopPoolProvisioningStatusDataV2) HasInstantClonePendingImageSnapshotId() bool {
	if o != nil && !IsNil(o.InstantClonePendingImageSnapshotId) {
		return true
	}

	return false
}

// SetInstantClonePendingImageSnapshotId gets a reference to the given string and assigns it to the InstantClonePendingImageSnapshotId field.
func (o *DesktopPoolProvisioningStatusDataV2) SetInstantClonePendingImageSnapshotId(v string) {
	o.InstantClonePendingImageSnapshotId = &v
}

// GetInstantClonePendingImageState returns the InstantClonePendingImageState field value if set, zero value otherwise.
func (o *DesktopPoolProvisioningStatusDataV2) GetInstantClonePendingImageState() string {
	if o == nil || IsNil(o.InstantClonePendingImageState) {
		var ret string
		return ret
	}
	return *o.InstantClonePendingImageState
}

// GetInstantClonePendingImageStateOk returns a tuple with the InstantClonePendingImageState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolProvisioningStatusDataV2) GetInstantClonePendingImageStateOk() (*string, bool) {
	if o == nil || IsNil(o.InstantClonePendingImageState) {
		return nil, false
	}
	return o.InstantClonePendingImageState, true
}

// HasInstantClonePendingImageState returns a boolean if a field has been set.
func (o *DesktopPoolProvisioningStatusDataV2) HasInstantClonePendingImageState() bool {
	if o != nil && !IsNil(o.InstantClonePendingImageState) {
		return true
	}

	return false
}

// SetInstantClonePendingImageState gets a reference to the given string and assigns it to the InstantClonePendingImageState field.
func (o *DesktopPoolProvisioningStatusDataV2) SetInstantClonePendingImageState(v string) {
	o.InstantClonePendingImageState = &v
}

// GetInstantClonePushImageSettings returns the InstantClonePushImageSettings field value if set, zero value otherwise.
func (o *DesktopPoolProvisioningStatusDataV2) GetInstantClonePushImageSettings() DesktopPoolInstantClonePushImageSettings {
	if o == nil || IsNil(o.InstantClonePushImageSettings) {
		var ret DesktopPoolInstantClonePushImageSettings
		return ret
	}
	return *o.InstantClonePushImageSettings
}

// GetInstantClonePushImageSettingsOk returns a tuple with the InstantClonePushImageSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolProvisioningStatusDataV2) GetInstantClonePushImageSettingsOk() (*DesktopPoolInstantClonePushImageSettings, bool) {
	if o == nil || IsNil(o.InstantClonePushImageSettings) {
		return nil, false
	}
	return o.InstantClonePushImageSettings, true
}

// HasInstantClonePushImageSettings returns a boolean if a field has been set.
func (o *DesktopPoolProvisioningStatusDataV2) HasInstantClonePushImageSettings() bool {
	if o != nil && !IsNil(o.InstantClonePushImageSettings) {
		return true
	}

	return false
}

// SetInstantClonePushImageSettings gets a reference to the given DesktopPoolInstantClonePushImageSettings and assigns it to the InstantClonePushImageSettings field.
func (o *DesktopPoolProvisioningStatusDataV2) SetInstantClonePushImageSettings(v DesktopPoolInstantClonePushImageSettings) {
	o.InstantClonePushImageSettings = &v
}

// GetLastProvisioningError returns the LastProvisioningError field value if set, zero value otherwise.
func (o *DesktopPoolProvisioningStatusDataV2) GetLastProvisioningError() string {
	if o == nil || IsNil(o.LastProvisioningError) {
		var ret string
		return ret
	}
	return *o.LastProvisioningError
}

// GetLastProvisioningErrorOk returns a tuple with the LastProvisioningError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolProvisioningStatusDataV2) GetLastProvisioningErrorOk() (*string, bool) {
	if o == nil || IsNil(o.LastProvisioningError) {
		return nil, false
	}
	return o.LastProvisioningError, true
}

// HasLastProvisioningError returns a boolean if a field has been set.
func (o *DesktopPoolProvisioningStatusDataV2) HasLastProvisioningError() bool {
	if o != nil && !IsNil(o.LastProvisioningError) {
		return true
	}

	return false
}

// SetLastProvisioningError gets a reference to the given string and assigns it to the LastProvisioningError field.
func (o *DesktopPoolProvisioningStatusDataV2) SetLastProvisioningError(v string) {
	o.LastProvisioningError = &v
}

// GetLastProvisioningErrorTime returns the LastProvisioningErrorTime field value if set, zero value otherwise.
func (o *DesktopPoolProvisioningStatusDataV2) GetLastProvisioningErrorTime() int64 {
	if o == nil || IsNil(o.LastProvisioningErrorTime) {
		var ret int64
		return ret
	}
	return *o.LastProvisioningErrorTime
}

// GetLastProvisioningErrorTimeOk returns a tuple with the LastProvisioningErrorTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolProvisioningStatusDataV2) GetLastProvisioningErrorTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.LastProvisioningErrorTime) {
		return nil, false
	}
	return o.LastProvisioningErrorTime, true
}

// HasLastProvisioningErrorTime returns a boolean if a field has been set.
func (o *DesktopPoolProvisioningStatusDataV2) HasLastProvisioningErrorTime() bool {
	if o != nil && !IsNil(o.LastProvisioningErrorTime) {
		return true
	}

	return false
}

// SetLastProvisioningErrorTime gets a reference to the given int64 and assigns it to the LastProvisioningErrorTime field.
func (o *DesktopPoolProvisioningStatusDataV2) SetLastProvisioningErrorTime(v int64) {
	o.LastProvisioningErrorTime = &v
}

// GetPendingComputeProfileNumCoresPerSocket returns the PendingComputeProfileNumCoresPerSocket field value if set, zero value otherwise.
func (o *DesktopPoolProvisioningStatusDataV2) GetPendingComputeProfileNumCoresPerSocket() int32 {
	if o == nil || IsNil(o.PendingComputeProfileNumCoresPerSocket) {
		var ret int32
		return ret
	}
	return *o.PendingComputeProfileNumCoresPerSocket
}

// GetPendingComputeProfileNumCoresPerSocketOk returns a tuple with the PendingComputeProfileNumCoresPerSocket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolProvisioningStatusDataV2) GetPendingComputeProfileNumCoresPerSocketOk() (*int32, bool) {
	if o == nil || IsNil(o.PendingComputeProfileNumCoresPerSocket) {
		return nil, false
	}
	return o.PendingComputeProfileNumCoresPerSocket, true
}

// HasPendingComputeProfileNumCoresPerSocket returns a boolean if a field has been set.
func (o *DesktopPoolProvisioningStatusDataV2) HasPendingComputeProfileNumCoresPerSocket() bool {
	if o != nil && !IsNil(o.PendingComputeProfileNumCoresPerSocket) {
		return true
	}

	return false
}

// SetPendingComputeProfileNumCoresPerSocket gets a reference to the given int32 and assigns it to the PendingComputeProfileNumCoresPerSocket field.
func (o *DesktopPoolProvisioningStatusDataV2) SetPendingComputeProfileNumCoresPerSocket(v int32) {
	o.PendingComputeProfileNumCoresPerSocket = &v
}

// GetPendingComputeProfileNumCpus returns the PendingComputeProfileNumCpus field value if set, zero value otherwise.
func (o *DesktopPoolProvisioningStatusDataV2) GetPendingComputeProfileNumCpus() int32 {
	if o == nil || IsNil(o.PendingComputeProfileNumCpus) {
		var ret int32
		return ret
	}
	return *o.PendingComputeProfileNumCpus
}

// GetPendingComputeProfileNumCpusOk returns a tuple with the PendingComputeProfileNumCpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolProvisioningStatusDataV2) GetPendingComputeProfileNumCpusOk() (*int32, bool) {
	if o == nil || IsNil(o.PendingComputeProfileNumCpus) {
		return nil, false
	}
	return o.PendingComputeProfileNumCpus, true
}

// HasPendingComputeProfileNumCpus returns a boolean if a field has been set.
func (o *DesktopPoolProvisioningStatusDataV2) HasPendingComputeProfileNumCpus() bool {
	if o != nil && !IsNil(o.PendingComputeProfileNumCpus) {
		return true
	}

	return false
}

// SetPendingComputeProfileNumCpus gets a reference to the given int32 and assigns it to the PendingComputeProfileNumCpus field.
func (o *DesktopPoolProvisioningStatusDataV2) SetPendingComputeProfileNumCpus(v int32) {
	o.PendingComputeProfileNumCpus = &v
}

// GetPendingComputeProfileRamMb returns the PendingComputeProfileRamMb field value if set, zero value otherwise.
func (o *DesktopPoolProvisioningStatusDataV2) GetPendingComputeProfileRamMb() int32 {
	if o == nil || IsNil(o.PendingComputeProfileRamMb) {
		var ret int32
		return ret
	}
	return *o.PendingComputeProfileRamMb
}

// GetPendingComputeProfileRamMbOk returns a tuple with the PendingComputeProfileRamMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolProvisioningStatusDataV2) GetPendingComputeProfileRamMbOk() (*int32, bool) {
	if o == nil || IsNil(o.PendingComputeProfileRamMb) {
		return nil, false
	}
	return o.PendingComputeProfileRamMb, true
}

// HasPendingComputeProfileRamMb returns a boolean if a field has been set.
func (o *DesktopPoolProvisioningStatusDataV2) HasPendingComputeProfileRamMb() bool {
	if o != nil && !IsNil(o.PendingComputeProfileRamMb) {
		return true
	}

	return false
}

// SetPendingComputeProfileRamMb gets a reference to the given int32 and assigns it to the PendingComputeProfileRamMb field.
func (o *DesktopPoolProvisioningStatusDataV2) SetPendingComputeProfileRamMb(v int32) {
	o.PendingComputeProfileRamMb = &v
}

func (o DesktopPoolProvisioningStatusDataV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DesktopPoolProvisioningStatusDataV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InstantCloneCurrentImageState) {
		toSerialize["instant_clone_current_image_state"] = o.InstantCloneCurrentImageState
	}
	if !IsNil(o.InstantCloneOperation) {
		toSerialize["instant_clone_operation"] = o.InstantCloneOperation
	}
	if !IsNil(o.InstantClonePendingImStreamId) {
		toSerialize["instant_clone_pending_im_stream_id"] = o.InstantClonePendingImStreamId
	}
	if !IsNil(o.InstantClonePendingImTagId) {
		toSerialize["instant_clone_pending_im_tag_id"] = o.InstantClonePendingImTagId
	}
	if !IsNil(o.InstantClonePendingImageError) {
		toSerialize["instant_clone_pending_image_error"] = o.InstantClonePendingImageError
	}
	if !IsNil(o.InstantClonePendingImageParentVmId) {
		toSerialize["instant_clone_pending_image_parent_vm_id"] = o.InstantClonePendingImageParentVmId
	}
	if !IsNil(o.InstantClonePendingImageProgress) {
		toSerialize["instant_clone_pending_image_progress"] = o.InstantClonePendingImageProgress
	}
	if !IsNil(o.InstantClonePendingImageSnapshotId) {
		toSerialize["instant_clone_pending_image_snapshot_id"] = o.InstantClonePendingImageSnapshotId
	}
	if !IsNil(o.InstantClonePendingImageState) {
		toSerialize["instant_clone_pending_image_state"] = o.InstantClonePendingImageState
	}
	if !IsNil(o.InstantClonePushImageSettings) {
		toSerialize["instant_clone_push_image_settings"] = o.InstantClonePushImageSettings
	}
	if !IsNil(o.LastProvisioningError) {
		toSerialize["last_provisioning_error"] = o.LastProvisioningError
	}
	if !IsNil(o.LastProvisioningErrorTime) {
		toSerialize["last_provisioning_error_time"] = o.LastProvisioningErrorTime
	}
	if !IsNil(o.PendingComputeProfileNumCoresPerSocket) {
		toSerialize["pending_compute_profile_num_cores_per_socket"] = o.PendingComputeProfileNumCoresPerSocket
	}
	if !IsNil(o.PendingComputeProfileNumCpus) {
		toSerialize["pending_compute_profile_num_cpus"] = o.PendingComputeProfileNumCpus
	}
	if !IsNil(o.PendingComputeProfileRamMb) {
		toSerialize["pending_compute_profile_ram_mb"] = o.PendingComputeProfileRamMb
	}
	return toSerialize, nil
}

type NullableDesktopPoolProvisioningStatusDataV2 struct {
	value *DesktopPoolProvisioningStatusDataV2
	isSet bool
}

func (v NullableDesktopPoolProvisioningStatusDataV2) Get() *DesktopPoolProvisioningStatusDataV2 {
	return v.value
}

func (v *NullableDesktopPoolProvisioningStatusDataV2) Set(val *DesktopPoolProvisioningStatusDataV2) {
	v.value = val
	v.isSet = true
}

func (v NullableDesktopPoolProvisioningStatusDataV2) IsSet() bool {
	return v.isSet
}

func (v *NullableDesktopPoolProvisioningStatusDataV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDesktopPoolProvisioningStatusDataV2(val *DesktopPoolProvisioningStatusDataV2) *NullableDesktopPoolProvisioningStatusDataV2 {
	return &NullableDesktopPoolProvisioningStatusDataV2{value: val, isSet: true}
}

func (v NullableDesktopPoolProvisioningStatusDataV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDesktopPoolProvisioningStatusDataV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


