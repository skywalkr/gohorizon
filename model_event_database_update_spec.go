/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EventDatabaseUpdateSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventDatabaseUpdateSpec{}

// EventDatabaseUpdateSpec Information required to update an event database.
type EventDatabaseUpdateSpec struct {
	// The number of events administrator can see in the admin console. It has a default value of 2000.
	AdminEventsCount *int32 `json:"admin_events_count,omitempty"`
	// Events will be marked as new for a time based on the value. Must be between 1 and 3 days.
	ClassifyEventsAsNewForDays *int32 `json:"classify_events_as_new_for_days,omitempty"`
	// Name of the database on the database server to use for storing events. Note that this database must exist on the server or the values cannot be saved.
	DatabaseName string `json:"database_name"`
	// Password to use for the event database connection.
	Password []string `json:"password"`
	// Port number on the database server to which Horizon will send events.
	Port int32 `json:"port"`
	// Query execution timeout in seconds. It has a default value of 120 seconds.
	QueryTimeoutSeconds *int32 `json:"query_timeout_seconds,omitempty"`
	// The server that hosts the database which will be used to store events.
	ServerName string `json:"server_name"`
	// Events will be shown in the Horizon Admin console for a time based on this value. It has a default value of 3 months. * ONE_WEEK: One week. * TWO_WEEKS: Two weeks. * THREE_WEEKS: Three weeks. * ONE_MONTH: One month. * TWO_MONTHS: Two months. * THREE_MONTHS: Three months. * SIX_MONTHS: Six months.
	ShowEventsForTime *string `json:"show_events_for_time,omitempty"`
	// If present, all tables for this instance will start with this prefix. This allows multiple brokers to use the same events database without trampling on other broker data. This property must start with a letter, may only contain letters, numbers, and the characters @, $, #, and _, and may not be longer than 6 characters.
	TablePrefix *string `json:"table_prefix,omitempty"`
	// Timing Profiler data will be kept in database for a time based on the value. Must be between 1 and 7 days. Timing Profiler Data will not be stored in Event DB. It has a default value of 7.
	TimingProfilerDataLongevityDays *int32 `json:"timing_profiler_data_longevity_days,omitempty"`
	// The type of database to use for the event database. * ORACLE: An Oracle database. * SQL_SERVER: A SQL server database. * POSTGRESQL: A PostgreSQL database.
	Type string `json:"type"`
	// Username to use for the connection to the event database.
	Username string `json:"username"`
}

type _EventDatabaseUpdateSpec EventDatabaseUpdateSpec

// NewEventDatabaseUpdateSpec instantiates a new EventDatabaseUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventDatabaseUpdateSpec(databaseName string, password []string, port int32, serverName string, type_ string, username string) *EventDatabaseUpdateSpec {
	this := EventDatabaseUpdateSpec{}
	this.DatabaseName = databaseName
	this.Password = password
	this.Port = port
	this.ServerName = serverName
	this.Type = type_
	this.Username = username
	return &this
}

// NewEventDatabaseUpdateSpecWithDefaults instantiates a new EventDatabaseUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventDatabaseUpdateSpecWithDefaults() *EventDatabaseUpdateSpec {
	this := EventDatabaseUpdateSpec{}
	return &this
}

// GetAdminEventsCount returns the AdminEventsCount field value if set, zero value otherwise.
func (o *EventDatabaseUpdateSpec) GetAdminEventsCount() int32 {
	if o == nil || IsNil(o.AdminEventsCount) {
		var ret int32
		return ret
	}
	return *o.AdminEventsCount
}

// GetAdminEventsCountOk returns a tuple with the AdminEventsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDatabaseUpdateSpec) GetAdminEventsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.AdminEventsCount) {
		return nil, false
	}
	return o.AdminEventsCount, true
}

// HasAdminEventsCount returns a boolean if a field has been set.
func (o *EventDatabaseUpdateSpec) HasAdminEventsCount() bool {
	if o != nil && !IsNil(o.AdminEventsCount) {
		return true
	}

	return false
}

// SetAdminEventsCount gets a reference to the given int32 and assigns it to the AdminEventsCount field.
func (o *EventDatabaseUpdateSpec) SetAdminEventsCount(v int32) {
	o.AdminEventsCount = &v
}

// GetClassifyEventsAsNewForDays returns the ClassifyEventsAsNewForDays field value if set, zero value otherwise.
func (o *EventDatabaseUpdateSpec) GetClassifyEventsAsNewForDays() int32 {
	if o == nil || IsNil(o.ClassifyEventsAsNewForDays) {
		var ret int32
		return ret
	}
	return *o.ClassifyEventsAsNewForDays
}

// GetClassifyEventsAsNewForDaysOk returns a tuple with the ClassifyEventsAsNewForDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDatabaseUpdateSpec) GetClassifyEventsAsNewForDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.ClassifyEventsAsNewForDays) {
		return nil, false
	}
	return o.ClassifyEventsAsNewForDays, true
}

// HasClassifyEventsAsNewForDays returns a boolean if a field has been set.
func (o *EventDatabaseUpdateSpec) HasClassifyEventsAsNewForDays() bool {
	if o != nil && !IsNil(o.ClassifyEventsAsNewForDays) {
		return true
	}

	return false
}

// SetClassifyEventsAsNewForDays gets a reference to the given int32 and assigns it to the ClassifyEventsAsNewForDays field.
func (o *EventDatabaseUpdateSpec) SetClassifyEventsAsNewForDays(v int32) {
	o.ClassifyEventsAsNewForDays = &v
}

// GetDatabaseName returns the DatabaseName field value
func (o *EventDatabaseUpdateSpec) GetDatabaseName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value
// and a boolean to check if the value has been set.
func (o *EventDatabaseUpdateSpec) GetDatabaseNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseName, true
}

// SetDatabaseName sets field value
func (o *EventDatabaseUpdateSpec) SetDatabaseName(v string) {
	o.DatabaseName = v
}

// GetPassword returns the Password field value
func (o *EventDatabaseUpdateSpec) GetPassword() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *EventDatabaseUpdateSpec) GetPasswordOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Password, true
}

// SetPassword sets field value
func (o *EventDatabaseUpdateSpec) SetPassword(v []string) {
	o.Password = v
}

// GetPort returns the Port field value
func (o *EventDatabaseUpdateSpec) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *EventDatabaseUpdateSpec) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *EventDatabaseUpdateSpec) SetPort(v int32) {
	o.Port = v
}

// GetQueryTimeoutSeconds returns the QueryTimeoutSeconds field value if set, zero value otherwise.
func (o *EventDatabaseUpdateSpec) GetQueryTimeoutSeconds() int32 {
	if o == nil || IsNil(o.QueryTimeoutSeconds) {
		var ret int32
		return ret
	}
	return *o.QueryTimeoutSeconds
}

// GetQueryTimeoutSecondsOk returns a tuple with the QueryTimeoutSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDatabaseUpdateSpec) GetQueryTimeoutSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.QueryTimeoutSeconds) {
		return nil, false
	}
	return o.QueryTimeoutSeconds, true
}

// HasQueryTimeoutSeconds returns a boolean if a field has been set.
func (o *EventDatabaseUpdateSpec) HasQueryTimeoutSeconds() bool {
	if o != nil && !IsNil(o.QueryTimeoutSeconds) {
		return true
	}

	return false
}

// SetQueryTimeoutSeconds gets a reference to the given int32 and assigns it to the QueryTimeoutSeconds field.
func (o *EventDatabaseUpdateSpec) SetQueryTimeoutSeconds(v int32) {
	o.QueryTimeoutSeconds = &v
}

// GetServerName returns the ServerName field value
func (o *EventDatabaseUpdateSpec) GetServerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value
// and a boolean to check if the value has been set.
func (o *EventDatabaseUpdateSpec) GetServerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerName, true
}

// SetServerName sets field value
func (o *EventDatabaseUpdateSpec) SetServerName(v string) {
	o.ServerName = v
}

// GetShowEventsForTime returns the ShowEventsForTime field value if set, zero value otherwise.
func (o *EventDatabaseUpdateSpec) GetShowEventsForTime() string {
	if o == nil || IsNil(o.ShowEventsForTime) {
		var ret string
		return ret
	}
	return *o.ShowEventsForTime
}

// GetShowEventsForTimeOk returns a tuple with the ShowEventsForTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDatabaseUpdateSpec) GetShowEventsForTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ShowEventsForTime) {
		return nil, false
	}
	return o.ShowEventsForTime, true
}

// HasShowEventsForTime returns a boolean if a field has been set.
func (o *EventDatabaseUpdateSpec) HasShowEventsForTime() bool {
	if o != nil && !IsNil(o.ShowEventsForTime) {
		return true
	}

	return false
}

// SetShowEventsForTime gets a reference to the given string and assigns it to the ShowEventsForTime field.
func (o *EventDatabaseUpdateSpec) SetShowEventsForTime(v string) {
	o.ShowEventsForTime = &v
}

// GetTablePrefix returns the TablePrefix field value if set, zero value otherwise.
func (o *EventDatabaseUpdateSpec) GetTablePrefix() string {
	if o == nil || IsNil(o.TablePrefix) {
		var ret string
		return ret
	}
	return *o.TablePrefix
}

// GetTablePrefixOk returns a tuple with the TablePrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDatabaseUpdateSpec) GetTablePrefixOk() (*string, bool) {
	if o == nil || IsNil(o.TablePrefix) {
		return nil, false
	}
	return o.TablePrefix, true
}

// HasTablePrefix returns a boolean if a field has been set.
func (o *EventDatabaseUpdateSpec) HasTablePrefix() bool {
	if o != nil && !IsNil(o.TablePrefix) {
		return true
	}

	return false
}

// SetTablePrefix gets a reference to the given string and assigns it to the TablePrefix field.
func (o *EventDatabaseUpdateSpec) SetTablePrefix(v string) {
	o.TablePrefix = &v
}

// GetTimingProfilerDataLongevityDays returns the TimingProfilerDataLongevityDays field value if set, zero value otherwise.
func (o *EventDatabaseUpdateSpec) GetTimingProfilerDataLongevityDays() int32 {
	if o == nil || IsNil(o.TimingProfilerDataLongevityDays) {
		var ret int32
		return ret
	}
	return *o.TimingProfilerDataLongevityDays
}

// GetTimingProfilerDataLongevityDaysOk returns a tuple with the TimingProfilerDataLongevityDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDatabaseUpdateSpec) GetTimingProfilerDataLongevityDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.TimingProfilerDataLongevityDays) {
		return nil, false
	}
	return o.TimingProfilerDataLongevityDays, true
}

// HasTimingProfilerDataLongevityDays returns a boolean if a field has been set.
func (o *EventDatabaseUpdateSpec) HasTimingProfilerDataLongevityDays() bool {
	if o != nil && !IsNil(o.TimingProfilerDataLongevityDays) {
		return true
	}

	return false
}

// SetTimingProfilerDataLongevityDays gets a reference to the given int32 and assigns it to the TimingProfilerDataLongevityDays field.
func (o *EventDatabaseUpdateSpec) SetTimingProfilerDataLongevityDays(v int32) {
	o.TimingProfilerDataLongevityDays = &v
}

// GetType returns the Type field value
func (o *EventDatabaseUpdateSpec) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EventDatabaseUpdateSpec) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EventDatabaseUpdateSpec) SetType(v string) {
	o.Type = v
}

// GetUsername returns the Username field value
func (o *EventDatabaseUpdateSpec) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *EventDatabaseUpdateSpec) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *EventDatabaseUpdateSpec) SetUsername(v string) {
	o.Username = v
}

func (o EventDatabaseUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventDatabaseUpdateSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdminEventsCount) {
		toSerialize["admin_events_count"] = o.AdminEventsCount
	}
	if !IsNil(o.ClassifyEventsAsNewForDays) {
		toSerialize["classify_events_as_new_for_days"] = o.ClassifyEventsAsNewForDays
	}
	toSerialize["database_name"] = o.DatabaseName
	toSerialize["password"] = o.Password
	toSerialize["port"] = o.Port
	if !IsNil(o.QueryTimeoutSeconds) {
		toSerialize["query_timeout_seconds"] = o.QueryTimeoutSeconds
	}
	toSerialize["server_name"] = o.ServerName
	if !IsNil(o.ShowEventsForTime) {
		toSerialize["show_events_for_time"] = o.ShowEventsForTime
	}
	if !IsNil(o.TablePrefix) {
		toSerialize["table_prefix"] = o.TablePrefix
	}
	if !IsNil(o.TimingProfilerDataLongevityDays) {
		toSerialize["timing_profiler_data_longevity_days"] = o.TimingProfilerDataLongevityDays
	}
	toSerialize["type"] = o.Type
	toSerialize["username"] = o.Username
	return toSerialize, nil
}

func (o *EventDatabaseUpdateSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"database_name",
		"password",
		"port",
		"server_name",
		"type",
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventDatabaseUpdateSpec := _EventDatabaseUpdateSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventDatabaseUpdateSpec)

	if err != nil {
		return err
	}

	*o = EventDatabaseUpdateSpec(varEventDatabaseUpdateSpec)

	return err
}

type NullableEventDatabaseUpdateSpec struct {
	value *EventDatabaseUpdateSpec
	isSet bool
}

func (v NullableEventDatabaseUpdateSpec) Get() *EventDatabaseUpdateSpec {
	return v.value
}

func (v *NullableEventDatabaseUpdateSpec) Set(val *EventDatabaseUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableEventDatabaseUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableEventDatabaseUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventDatabaseUpdateSpec(val *EventDatabaseUpdateSpec) *NullableEventDatabaseUpdateSpec {
	return &NullableEventDatabaseUpdateSpec{value: val, isSet: true}
}

func (v NullableEventDatabaseUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventDatabaseUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


