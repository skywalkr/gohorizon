/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConnectionServerRADIUSSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionServerRADIUSSpec{}

// ConnectionServerRADIUSSpec Information related to connection server RADIUS authentication settings.
type ConnectionServerRADIUSSpec struct {
	// The RADIUS Authenticator to use.
	RadiusAuthenticatorId *string `json:"radius_authenticator_id,omitempty"`
	// Indicates whether RADIUS authentication is enabled.
	RadiusEnabled bool `json:"radius_enabled"`
	// Indicates whether RADIUS name mapping is enabled.
	RadiusNameMapping *bool `json:"radius_name_mapping,omitempty"`
	// Indicates whether RADIUS Windows Single Sign-On is enabled.
	RadiusSso *bool `json:"radius_sso,omitempty"`
}

type _ConnectionServerRADIUSSpec ConnectionServerRADIUSSpec

// NewConnectionServerRADIUSSpec instantiates a new ConnectionServerRADIUSSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionServerRADIUSSpec(radiusEnabled bool) *ConnectionServerRADIUSSpec {
	this := ConnectionServerRADIUSSpec{}
	this.RadiusEnabled = radiusEnabled
	return &this
}

// NewConnectionServerRADIUSSpecWithDefaults instantiates a new ConnectionServerRADIUSSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionServerRADIUSSpecWithDefaults() *ConnectionServerRADIUSSpec {
	this := ConnectionServerRADIUSSpec{}
	return &this
}

// GetRadiusAuthenticatorId returns the RadiusAuthenticatorId field value if set, zero value otherwise.
func (o *ConnectionServerRADIUSSpec) GetRadiusAuthenticatorId() string {
	if o == nil || IsNil(o.RadiusAuthenticatorId) {
		var ret string
		return ret
	}
	return *o.RadiusAuthenticatorId
}

// GetRadiusAuthenticatorIdOk returns a tuple with the RadiusAuthenticatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerRADIUSSpec) GetRadiusAuthenticatorIdOk() (*string, bool) {
	if o == nil || IsNil(o.RadiusAuthenticatorId) {
		return nil, false
	}
	return o.RadiusAuthenticatorId, true
}

// HasRadiusAuthenticatorId returns a boolean if a field has been set.
func (o *ConnectionServerRADIUSSpec) HasRadiusAuthenticatorId() bool {
	if o != nil && !IsNil(o.RadiusAuthenticatorId) {
		return true
	}

	return false
}

// SetRadiusAuthenticatorId gets a reference to the given string and assigns it to the RadiusAuthenticatorId field.
func (o *ConnectionServerRADIUSSpec) SetRadiusAuthenticatorId(v string) {
	o.RadiusAuthenticatorId = &v
}

// GetRadiusEnabled returns the RadiusEnabled field value
func (o *ConnectionServerRADIUSSpec) GetRadiusEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RadiusEnabled
}

// GetRadiusEnabledOk returns a tuple with the RadiusEnabled field value
// and a boolean to check if the value has been set.
func (o *ConnectionServerRADIUSSpec) GetRadiusEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RadiusEnabled, true
}

// SetRadiusEnabled sets field value
func (o *ConnectionServerRADIUSSpec) SetRadiusEnabled(v bool) {
	o.RadiusEnabled = v
}

// GetRadiusNameMapping returns the RadiusNameMapping field value if set, zero value otherwise.
func (o *ConnectionServerRADIUSSpec) GetRadiusNameMapping() bool {
	if o == nil || IsNil(o.RadiusNameMapping) {
		var ret bool
		return ret
	}
	return *o.RadiusNameMapping
}

// GetRadiusNameMappingOk returns a tuple with the RadiusNameMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerRADIUSSpec) GetRadiusNameMappingOk() (*bool, bool) {
	if o == nil || IsNil(o.RadiusNameMapping) {
		return nil, false
	}
	return o.RadiusNameMapping, true
}

// HasRadiusNameMapping returns a boolean if a field has been set.
func (o *ConnectionServerRADIUSSpec) HasRadiusNameMapping() bool {
	if o != nil && !IsNil(o.RadiusNameMapping) {
		return true
	}

	return false
}

// SetRadiusNameMapping gets a reference to the given bool and assigns it to the RadiusNameMapping field.
func (o *ConnectionServerRADIUSSpec) SetRadiusNameMapping(v bool) {
	o.RadiusNameMapping = &v
}

// GetRadiusSso returns the RadiusSso field value if set, zero value otherwise.
func (o *ConnectionServerRADIUSSpec) GetRadiusSso() bool {
	if o == nil || IsNil(o.RadiusSso) {
		var ret bool
		return ret
	}
	return *o.RadiusSso
}

// GetRadiusSsoOk returns a tuple with the RadiusSso field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerRADIUSSpec) GetRadiusSsoOk() (*bool, bool) {
	if o == nil || IsNil(o.RadiusSso) {
		return nil, false
	}
	return o.RadiusSso, true
}

// HasRadiusSso returns a boolean if a field has been set.
func (o *ConnectionServerRADIUSSpec) HasRadiusSso() bool {
	if o != nil && !IsNil(o.RadiusSso) {
		return true
	}

	return false
}

// SetRadiusSso gets a reference to the given bool and assigns it to the RadiusSso field.
func (o *ConnectionServerRADIUSSpec) SetRadiusSso(v bool) {
	o.RadiusSso = &v
}

func (o ConnectionServerRADIUSSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionServerRADIUSSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RadiusAuthenticatorId) {
		toSerialize["radius_authenticator_id"] = o.RadiusAuthenticatorId
	}
	toSerialize["radius_enabled"] = o.RadiusEnabled
	if !IsNil(o.RadiusNameMapping) {
		toSerialize["radius_name_mapping"] = o.RadiusNameMapping
	}
	if !IsNil(o.RadiusSso) {
		toSerialize["radius_sso"] = o.RadiusSso
	}
	return toSerialize, nil
}

func (o *ConnectionServerRADIUSSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"radius_enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnectionServerRADIUSSpec := _ConnectionServerRADIUSSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConnectionServerRADIUSSpec)

	if err != nil {
		return err
	}

	*o = ConnectionServerRADIUSSpec(varConnectionServerRADIUSSpec)

	return err
}

type NullableConnectionServerRADIUSSpec struct {
	value *ConnectionServerRADIUSSpec
	isSet bool
}

func (v NullableConnectionServerRADIUSSpec) Get() *ConnectionServerRADIUSSpec {
	return v.value
}

func (v *NullableConnectionServerRADIUSSpec) Set(val *ConnectionServerRADIUSSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionServerRADIUSSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionServerRADIUSSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionServerRADIUSSpec(val *ConnectionServerRADIUSSpec) *NullableConnectionServerRADIUSSpec {
	return &NullableConnectionServerRADIUSSpec{value: val, isSet: true}
}

func (v NullableConnectionServerRADIUSSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionServerRADIUSSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


