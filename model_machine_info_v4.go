/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the MachineInfoV4 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MachineInfoV4{}

// MachineInfoV4 Information related to a Machine.<br>List API returning this summary information can use search filter query to filter on specific fields supported by filters.<br> Supported Filters : 'And', 'Or', 'Equals', 'NotEquals', 'StartsWith', 'Contains' and 'EndsWith'.<br>See the field description to know the filter types it supports.
type MachineInfoV4 struct {
	// Access group id of this Machine.
	AccessGroupId *string `json:"access_group_id,omitempty"`
	// The Horizon Agent build number.<br>Supported Filters : 'Equals'.
	AgentBuildNumber *string `json:"agent_build_number,omitempty"`
	// Error message of the agent upgrade operation failure on the machine.
	AgentUpgradeErrorMessage *string `json:"agent_upgrade_error_message,omitempty"`
	// Result of the agent upgrade operation on the machine. * OK: Agent upgrade is OK. * ERROR: Agent upgrade has unknown error. * FAILURE: Agent upgrade has failed. * INVALID: Agent received invalid values for upgrade. * DUPLICATE: Agent received duplicate upgrade request. * NOT_FOUND: Agent could not find upgrade request. * PROGRESS: Agent upgrade is in progress. * PREFLIGHTCHECK_INPROGRESS: Preflight check is in progress for agent upgrade. * PREFLIGHTCHECK_OK: Preflight check succeeded for agent upgrade. * PREFLIGHTCHECK_FAILURE: Preflight check failed for agent upgrade. * UNKNOWN: Agent upgrade result is unknown.
	AgentUpgradeResult *string `json:"agent_upgrade_result,omitempty"`
	// State of the agent upgrade operation on the machine. * READY: Agent is ready to be upgraded. * DOWNLOAD: Agent is downloading the upgrade binary. * WAIT: Agent is waiting for user to logoff or for reboot to complete. * NOLOGON: Agent has no logged in user. * UPDATING: Agent is upgrading. * DONE: Agent upgrade task has ended. * UNKNOWN: Agent upgrade state is unknown.
	AgentUpgradeState *string `json:"agent_upgrade_state,omitempty"`
	// The Horizon Agent version.<br>Supported Filters : 'Equals'.
	AgentVersion *string `json:"agent_version,omitempty"`
	// List of MachineAlias
	Aliases []MachineAlias `json:"aliases,omitempty"`
	// Names of the Horizon Connection Servers that attempted theft of pairing for this Agent.
	AttemptedTheftByConnectionServer []string `json:"attempted_theft_by_connection_server,omitempty"`
	// Names of the Horizon Connection Servers the Horizon Agent is paired with.
	ConfiguredByConnectionServer []string `json:"configured_by_connection_server,omitempty"`
	// The id of the Desktop Pool that the machine belongs to.<br>Supported Filters : 'Equals'.
	DesktopPoolId *string `json:"desktop_pool_id,omitempty"`
	// DNS name of the machine.<br>Supported Filters : 'Equals', 'StartsWith', 'EndsWith' and 'Contains'.
	DnsName *string `json:"dns_name,omitempty"`
	// Indicates whether the machine is in held state.Supported Filters: 'Equals'.
	HeldMachine *bool `json:"held_machine,omitempty"`
	// Unique ID representing machine.<br>Supported Filters : 'Equals'.
	Id *string `json:"id,omitempty"`
	ManagedMachineData *ManagedMachineDataV2 `json:"managed_machine_data,omitempty"`
	// Indicates whether ENHANCED message security mode is currently supported by this machine.
	MessageSecurityEnhancedModeSupported *bool `json:"message_security_enhanced_mode_supported,omitempty"`
	// The current JMS message security mode used by this machine.<br>Supported Filters : 'Equals'. * DISABLED: Message security mode is disabled. * MIXED: Message security mode is enabled but not enforced. * ENABLED: Message security mode is enabled. Unsigned messages are rejected by Horizon components. * ENHANCED: Message Security mode is Enhanced. Message signing and validation is performed based on the current Security Level and desktop Message Security mode.
	MessageSecurityMode *string `json:"message_security_mode,omitempty"`
	// Name of the machine.<br>Supported Filters : 'Equals', 'StartsWith' and 'Contains'.
	Name *string `json:"name,omitempty"`
	// The guest operating system. * UNKNOWN: Unknown * WINDOWS_XP: Windows XP * WINDOWS_VISTA: Windows Vista * WINDOWS_7: Windows 7 * WINDOWS_8: Windows 8 * WINDOWS_10: Windows 10 * WINDOWS_11: Windows 11 * WINDOWS_SERVER_2003: Windows Server 2003 * WINDOWS_SERVER_2008: Windows Server 2008 * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2 * WINDOWS_SERVER_2012: Windows Server 2012 * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2 * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above * LINUX_OTHER: Linux (other) * LINUX_SERVER_OTHER: Linux server (other) * LINUX_UBUNTU: Linux (Ubuntu) * LINUX_RHEL: Linux (Red Hat Enterprise) * LINUX_SUSE: Linux (Suse) * LINUX_CENTOS: Linux (CentOS)
	OperatingSystem *string `json:"operating_system,omitempty"`
	// The guest operating system architecture. * UNKNOWN: Operating System cannot be determined. * BIT_32: 32 bit Operating System Architecture. * BIT_64: 64 bit Operating System Architecture.
	OperatingSystemArchitecture *string `json:"operating_system_architecture,omitempty"`
	// Horizon Agent pairing state. * NOT_AVAILABLE: Agent pairing state is not available. * IN_PAIRING: Agent pairing with Horizon Connection Server is in progress. * PAIRED_AND_SECURED: Agent is paired and secured with a Horizon Connection Server.
	PairingState *string `json:"pairing_state,omitempty"`
	// The remote experience Horizon Agent build number.<br>Supported Filters : 'Equals'.
	RemoteExperienceAgentBuildNumber *string `json:"remote_experience_agent_build_number,omitempty"`
	// The remote experience Horizon Agent version.<br>Supported Filters : 'Equals'.
	RemoteExperienceAgentVersion *string `json:"remote_experience_agent_version,omitempty"`
	// The ID of the session on the Machine (if one exists).
	SessionId *string `json:"session_id,omitempty"`
	// The state of the machine.<br>Supported Filters : 'Equals'. * PROVISIONING: The machine is being provisioned. * PROVISIONING_ERROR: An error occurred during provisioning. * WAITING_FOR_AGENT: Horizon Connection Server is waiting to establish communication with Horizon Agent for one of these cases - a virtual machine in a manual desktop pool, unmanaged machine or RDS server. * CUSTOMIZING: The machine which is from an automated desktop pool is being customized after provisioning. * DELETING: The machine is marked for deletion. * MAINTENANCE: The machine is in maintenance mode. Users cannot log in or use the machine. * ERROR: An unknown error occurred in the machine. * PROVISIONED: The machine is powered off or suspended. * AGENT_UNREACHABLE: Horizon Connection Server cannot establish communication with Horizon Agent on the machine. * UNASSIGNED_USER_CONNECTED: A user other than the assigned user is logged in to the machine in a dedicated desktop pool. * CONNECTED: The machine is in an active session and has an active connection to a Horizon client. * UNASSIGNED_USER_DISCONNECTED: A user other than the assigned user is logged in and disconnected from the machine in a dedicated desktop pool. * DISCONNECTED: The machine is in an active session, but it is disconnected from the Horizon client. * AGENT_ERROR_STARTUP_IN_PROGRESS: Horizon Agent has started on the machine, but other required services such as the display protocol are still starting. * AGENT_ERROR_DISABLED: Horizon Agent is disabled. * AGENT_ERROR_INVALID_IP: Horizon Agent has an invalid IP address. * AGENT_ERROR_NEEDS_REBOOT: Horizon Agent needs reboot. * AGENT_ERROR_PROTOCOL_FAILURE: Protocol such as BLAST, RDP or PCoIP is not enabled. * AGENT_CONFIG_ERROR: The Remote Desktop Services role is not enabled on the windows server. * AGENT_DRAIN_MODE: RDS host is configured for drain mode. New connections are currently disabled. * AGENT_DRAIN_UNTIL_RESTART: RDS host is configured for drain-until-restart mode. * ALREADY_USED: The machine is configured to have only one session which is currently in progress and cannot accept new sessions. * AVAILABLE: The machine is powered on and ready for active connections. * IN_PROGRESS: There is a machine operation in progress. * DISABLED: The machine is disabled. * DISABLE_IN_PROGRESS: Disabled Horizon Connection Server still has some Horizon brokered sessions. It can still accept re-connections. * VALIDATING: The Horizon Connection Server is synchronizing state information with the agent. * UNKNOWN: Could not determine the state of the machine.
	State *string `json:"state,omitempty"`
	// The type of machine.<br>Supported Filters : 'Equals'. * MANAGED_MACHINE: The machine is a managed virtual machine. * UNMANAGED_MACHINE: The machine is an unmanaged physical or virtual machine.
	Type *string `json:"type,omitempty"`
	// The unique SIDs of the users assigned to the machine.<br>Supported Filters : 'Equals', 'NotEquals' and 'Contains'.
	UserIds []string `json:"user_ids,omitempty"`
}

// NewMachineInfoV4 instantiates a new MachineInfoV4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMachineInfoV4() *MachineInfoV4 {
	this := MachineInfoV4{}
	return &this
}

// NewMachineInfoV4WithDefaults instantiates a new MachineInfoV4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMachineInfoV4WithDefaults() *MachineInfoV4 {
	this := MachineInfoV4{}
	return &this
}

// GetAccessGroupId returns the AccessGroupId field value if set, zero value otherwise.
func (o *MachineInfoV4) GetAccessGroupId() string {
	if o == nil || IsNil(o.AccessGroupId) {
		var ret string
		return ret
	}
	return *o.AccessGroupId
}

// GetAccessGroupIdOk returns a tuple with the AccessGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineInfoV4) GetAccessGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccessGroupId) {
		return nil, false
	}
	return o.AccessGroupId, true
}

// HasAccessGroupId returns a boolean if a field has been set.
func (o *MachineInfoV4) HasAccessGroupId() bool {
	if o != nil && !IsNil(o.AccessGroupId) {
		return true
	}

	return false
}

// SetAccessGroupId gets a reference to the given string and assigns it to the AccessGroupId field.
func (o *MachineInfoV4) SetAccessGroupId(v string) {
	o.AccessGroupId = &v
}

// GetAgentBuildNumber returns the AgentBuildNumber field value if set, zero value otherwise.
func (o *MachineInfoV4) GetAgentBuildNumber() string {
	if o == nil || IsNil(o.AgentBuildNumber) {
		var ret string
		return ret
	}
	return *o.AgentBuildNumber
}

// GetAgentBuildNumberOk returns a tuple with the AgentBuildNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineInfoV4) GetAgentBuildNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AgentBuildNumber) {
		return nil, false
	}
	return o.AgentBuildNumber, true
}

// HasAgentBuildNumber returns a boolean if a field has been set.
func (o *MachineInfoV4) HasAgentBuildNumber() bool {
	if o != nil && !IsNil(o.AgentBuildNumber) {
		return true
	}

	return false
}

// SetAgentBuildNumber gets a reference to the given string and assigns it to the AgentBuildNumber field.
func (o *MachineInfoV4) SetAgentBuildNumber(v string) {
	o.AgentBuildNumber = &v
}

// GetAgentUpgradeErrorMessage returns the AgentUpgradeErrorMessage field value if set, zero value otherwise.
func (o *MachineInfoV4) GetAgentUpgradeErrorMessage() string {
	if o == nil || IsNil(o.AgentUpgradeErrorMessage) {
		var ret string
		return ret
	}
	return *o.AgentUpgradeErrorMessage
}

// GetAgentUpgradeErrorMessageOk returns a tuple with the AgentUpgradeErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineInfoV4) GetAgentUpgradeErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.AgentUpgradeErrorMessage) {
		return nil, false
	}
	return o.AgentUpgradeErrorMessage, true
}

// HasAgentUpgradeErrorMessage returns a boolean if a field has been set.
func (o *MachineInfoV4) HasAgentUpgradeErrorMessage() bool {
	if o != nil && !IsNil(o.AgentUpgradeErrorMessage) {
		return true
	}

	return false
}

// SetAgentUpgradeErrorMessage gets a reference to the given string and assigns it to the AgentUpgradeErrorMessage field.
func (o *MachineInfoV4) SetAgentUpgradeErrorMessage(v string) {
	o.AgentUpgradeErrorMessage = &v
}

// GetAgentUpgradeResult returns the AgentUpgradeResult field value if set, zero value otherwise.
func (o *MachineInfoV4) GetAgentUpgradeResult() string {
	if o == nil || IsNil(o.AgentUpgradeResult) {
		var ret string
		return ret
	}
	return *o.AgentUpgradeResult
}

// GetAgentUpgradeResultOk returns a tuple with the AgentUpgradeResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineInfoV4) GetAgentUpgradeResultOk() (*string, bool) {
	if o == nil || IsNil(o.AgentUpgradeResult) {
		return nil, false
	}
	return o.AgentUpgradeResult, true
}

// HasAgentUpgradeResult returns a boolean if a field has been set.
func (o *MachineInfoV4) HasAgentUpgradeResult() bool {
	if o != nil && !IsNil(o.AgentUpgradeResult) {
		return true
	}

	return false
}

// SetAgentUpgradeResult gets a reference to the given string and assigns it to the AgentUpgradeResult field.
func (o *MachineInfoV4) SetAgentUpgradeResult(v string) {
	o.AgentUpgradeResult = &v
}

// GetAgentUpgradeState returns the AgentUpgradeState field value if set, zero value otherwise.
func (o *MachineInfoV4) GetAgentUpgradeState() string {
	if o == nil || IsNil(o.AgentUpgradeState) {
		var ret string
		return ret
	}
	return *o.AgentUpgradeState
}

// GetAgentUpgradeStateOk returns a tuple with the AgentUpgradeState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineInfoV4) GetAgentUpgradeStateOk() (*string, bool) {
	if o == nil || IsNil(o.AgentUpgradeState) {
		return nil, false
	}
	return o.AgentUpgradeState, true
}

// HasAgentUpgradeState returns a boolean if a field has been set.
func (o *MachineInfoV4) HasAgentUpgradeState() bool {
	if o != nil && !IsNil(o.AgentUpgradeState) {
		return true
	}

	return false
}

// SetAgentUpgradeState gets a reference to the given string and assigns it to the AgentUpgradeState field.
func (o *MachineInfoV4) SetAgentUpgradeState(v string) {
	o.AgentUpgradeState = &v
}

// GetAgentVersion returns the AgentVersion field value if set, zero value otherwise.
func (o *MachineInfoV4) GetAgentVersion() string {
	if o == nil || IsNil(o.AgentVersion) {
		var ret string
		return ret
	}
	return *o.AgentVersion
}

// GetAgentVersionOk returns a tuple with the AgentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineInfoV4) GetAgentVersionOk() (*string, bool) {
	if o == nil || IsNil(o.AgentVersion) {
		return nil, false
	}
	return o.AgentVersion, true
}

// HasAgentVersion returns a boolean if a field has been set.
func (o *MachineInfoV4) HasAgentVersion() bool {
	if o != nil && !IsNil(o.AgentVersion) {
		return true
	}

	return false
}

// SetAgentVersion gets a reference to the given string and assigns it to the AgentVersion field.
func (o *MachineInfoV4) SetAgentVersion(v string) {
	o.AgentVersion = &v
}

// GetAliases returns the Aliases field value if set, zero value otherwise.
func (o *MachineInfoV4) GetAliases() []MachineAlias {
	if o == nil || IsNil(o.Aliases) {
		var ret []MachineAlias
		return ret
	}
	return o.Aliases
}

// GetAliasesOk returns a tuple with the Aliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineInfoV4) GetAliasesOk() ([]MachineAlias, bool) {
	if o == nil || IsNil(o.Aliases) {
		return nil, false
	}
	return o.Aliases, true
}

// HasAliases returns a boolean if a field has been set.
func (o *MachineInfoV4) HasAliases() bool {
	if o != nil && !IsNil(o.Aliases) {
		return true
	}

	return false
}

// SetAliases gets a reference to the given []MachineAlias and assigns it to the Aliases field.
func (o *MachineInfoV4) SetAliases(v []MachineAlias) {
	o.Aliases = v
}

// GetAttemptedTheftByConnectionServer returns the AttemptedTheftByConnectionServer field value if set, zero value otherwise.
func (o *MachineInfoV4) GetAttemptedTheftByConnectionServer() []string {
	if o == nil || IsNil(o.AttemptedTheftByConnectionServer) {
		var ret []string
		return ret
	}
	return o.AttemptedTheftByConnectionServer
}

// GetAttemptedTheftByConnectionServerOk returns a tuple with the AttemptedTheftByConnectionServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineInfoV4) GetAttemptedTheftByConnectionServerOk() ([]string, bool) {
	if o == nil || IsNil(o.AttemptedTheftByConnectionServer) {
		return nil, false
	}
	return o.AttemptedTheftByConnectionServer, true
}

// HasAttemptedTheftByConnectionServer returns a boolean if a field has been set.
func (o *MachineInfoV4) HasAttemptedTheftByConnectionServer() bool {
	if o != nil && !IsNil(o.AttemptedTheftByConnectionServer) {
		return true
	}

	return false
}

// SetAttemptedTheftByConnectionServer gets a reference to the given []string and assigns it to the AttemptedTheftByConnectionServer field.
func (o *MachineInfoV4) SetAttemptedTheftByConnectionServer(v []string) {
	o.AttemptedTheftByConnectionServer = v
}

// GetConfiguredByConnectionServer returns the ConfiguredByConnectionServer field value if set, zero value otherwise.
func (o *MachineInfoV4) GetConfiguredByConnectionServer() []string {
	if o == nil || IsNil(o.ConfiguredByConnectionServer) {
		var ret []string
		return ret
	}
	return o.ConfiguredByConnectionServer
}

// GetConfiguredByConnectionServerOk returns a tuple with the ConfiguredByConnectionServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineInfoV4) GetConfiguredByConnectionServerOk() ([]string, bool) {
	if o == nil || IsNil(o.ConfiguredByConnectionServer) {
		return nil, false
	}
	return o.ConfiguredByConnectionServer, true
}

// HasConfiguredByConnectionServer returns a boolean if a field has been set.
func (o *MachineInfoV4) HasConfiguredByConnectionServer() bool {
	if o != nil && !IsNil(o.ConfiguredByConnectionServer) {
		return true
	}

	return false
}

// SetConfiguredByConnectionServer gets a reference to the given []string and assigns it to the ConfiguredByConnectionServer field.
func (o *MachineInfoV4) SetConfiguredByConnectionServer(v []string) {
	o.ConfiguredByConnectionServer = v
}

// GetDesktopPoolId returns the DesktopPoolId field value if set, zero value otherwise.
func (o *MachineInfoV4) GetDesktopPoolId() string {
	if o == nil || IsNil(o.DesktopPoolId) {
		var ret string
		return ret
	}
	return *o.DesktopPoolId
}

// GetDesktopPoolIdOk returns a tuple with the DesktopPoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineInfoV4) GetDesktopPoolIdOk() (*string, bool) {
	if o == nil || IsNil(o.DesktopPoolId) {
		return nil, false
	}
	return o.DesktopPoolId, true
}

// HasDesktopPoolId returns a boolean if a field has been set.
func (o *MachineInfoV4) HasDesktopPoolId() bool {
	if o != nil && !IsNil(o.DesktopPoolId) {
		return true
	}

	return false
}

// SetDesktopPoolId gets a reference to the given string and assigns it to the DesktopPoolId field.
func (o *MachineInfoV4) SetDesktopPoolId(v string) {
	o.DesktopPoolId = &v
}

// GetDnsName returns the DnsName field value if set, zero value otherwise.
func (o *MachineInfoV4) GetDnsName() string {
	if o == nil || IsNil(o.DnsName) {
		var ret string
		return ret
	}
	return *o.DnsName
}

// GetDnsNameOk returns a tuple with the DnsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineInfoV4) GetDnsNameOk() (*string, bool) {
	if o == nil || IsNil(o.DnsName) {
		return nil, false
	}
	return o.DnsName, true
}

// HasDnsName returns a boolean if a field has been set.
func (o *MachineInfoV4) HasDnsName() bool {
	if o != nil && !IsNil(o.DnsName) {
		return true
	}

	return false
}

// SetDnsName gets a reference to the given string and assigns it to the DnsName field.
func (o *MachineInfoV4) SetDnsName(v string) {
	o.DnsName = &v
}

// GetHeldMachine returns the HeldMachine field value if set, zero value otherwise.
func (o *MachineInfoV4) GetHeldMachine() bool {
	if o == nil || IsNil(o.HeldMachine) {
		var ret bool
		return ret
	}
	return *o.HeldMachine
}

// GetHeldMachineOk returns a tuple with the HeldMachine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineInfoV4) GetHeldMachineOk() (*bool, bool) {
	if o == nil || IsNil(o.HeldMachine) {
		return nil, false
	}
	return o.HeldMachine, true
}

// HasHeldMachine returns a boolean if a field has been set.
func (o *MachineInfoV4) HasHeldMachine() bool {
	if o != nil && !IsNil(o.HeldMachine) {
		return true
	}

	return false
}

// SetHeldMachine gets a reference to the given bool and assigns it to the HeldMachine field.
func (o *MachineInfoV4) SetHeldMachine(v bool) {
	o.HeldMachine = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MachineInfoV4) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineInfoV4) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MachineInfoV4) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MachineInfoV4) SetId(v string) {
	o.Id = &v
}

// GetManagedMachineData returns the ManagedMachineData field value if set, zero value otherwise.
func (o *MachineInfoV4) GetManagedMachineData() ManagedMachineDataV2 {
	if o == nil || IsNil(o.ManagedMachineData) {
		var ret ManagedMachineDataV2
		return ret
	}
	return *o.ManagedMachineData
}

// GetManagedMachineDataOk returns a tuple with the ManagedMachineData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineInfoV4) GetManagedMachineDataOk() (*ManagedMachineDataV2, bool) {
	if o == nil || IsNil(o.ManagedMachineData) {
		return nil, false
	}
	return o.ManagedMachineData, true
}

// HasManagedMachineData returns a boolean if a field has been set.
func (o *MachineInfoV4) HasManagedMachineData() bool {
	if o != nil && !IsNil(o.ManagedMachineData) {
		return true
	}

	return false
}

// SetManagedMachineData gets a reference to the given ManagedMachineDataV2 and assigns it to the ManagedMachineData field.
func (o *MachineInfoV4) SetManagedMachineData(v ManagedMachineDataV2) {
	o.ManagedMachineData = &v
}

// GetMessageSecurityEnhancedModeSupported returns the MessageSecurityEnhancedModeSupported field value if set, zero value otherwise.
func (o *MachineInfoV4) GetMessageSecurityEnhancedModeSupported() bool {
	if o == nil || IsNil(o.MessageSecurityEnhancedModeSupported) {
		var ret bool
		return ret
	}
	return *o.MessageSecurityEnhancedModeSupported
}

// GetMessageSecurityEnhancedModeSupportedOk returns a tuple with the MessageSecurityEnhancedModeSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineInfoV4) GetMessageSecurityEnhancedModeSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.MessageSecurityEnhancedModeSupported) {
		return nil, false
	}
	return o.MessageSecurityEnhancedModeSupported, true
}

// HasMessageSecurityEnhancedModeSupported returns a boolean if a field has been set.
func (o *MachineInfoV4) HasMessageSecurityEnhancedModeSupported() bool {
	if o != nil && !IsNil(o.MessageSecurityEnhancedModeSupported) {
		return true
	}

	return false
}

// SetMessageSecurityEnhancedModeSupported gets a reference to the given bool and assigns it to the MessageSecurityEnhancedModeSupported field.
func (o *MachineInfoV4) SetMessageSecurityEnhancedModeSupported(v bool) {
	o.MessageSecurityEnhancedModeSupported = &v
}

// GetMessageSecurityMode returns the MessageSecurityMode field value if set, zero value otherwise.
func (o *MachineInfoV4) GetMessageSecurityMode() string {
	if o == nil || IsNil(o.MessageSecurityMode) {
		var ret string
		return ret
	}
	return *o.MessageSecurityMode
}

// GetMessageSecurityModeOk returns a tuple with the MessageSecurityMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineInfoV4) GetMessageSecurityModeOk() (*string, bool) {
	if o == nil || IsNil(o.MessageSecurityMode) {
		return nil, false
	}
	return o.MessageSecurityMode, true
}

// HasMessageSecurityMode returns a boolean if a field has been set.
func (o *MachineInfoV4) HasMessageSecurityMode() bool {
	if o != nil && !IsNil(o.MessageSecurityMode) {
		return true
	}

	return false
}

// SetMessageSecurityMode gets a reference to the given string and assigns it to the MessageSecurityMode field.
func (o *MachineInfoV4) SetMessageSecurityMode(v string) {
	o.MessageSecurityMode = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MachineInfoV4) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineInfoV4) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MachineInfoV4) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MachineInfoV4) SetName(v string) {
	o.Name = &v
}

// GetOperatingSystem returns the OperatingSystem field value if set, zero value otherwise.
func (o *MachineInfoV4) GetOperatingSystem() string {
	if o == nil || IsNil(o.OperatingSystem) {
		var ret string
		return ret
	}
	return *o.OperatingSystem
}

// GetOperatingSystemOk returns a tuple with the OperatingSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineInfoV4) GetOperatingSystemOk() (*string, bool) {
	if o == nil || IsNil(o.OperatingSystem) {
		return nil, false
	}
	return o.OperatingSystem, true
}

// HasOperatingSystem returns a boolean if a field has been set.
func (o *MachineInfoV4) HasOperatingSystem() bool {
	if o != nil && !IsNil(o.OperatingSystem) {
		return true
	}

	return false
}

// SetOperatingSystem gets a reference to the given string and assigns it to the OperatingSystem field.
func (o *MachineInfoV4) SetOperatingSystem(v string) {
	o.OperatingSystem = &v
}

// GetOperatingSystemArchitecture returns the OperatingSystemArchitecture field value if set, zero value otherwise.
func (o *MachineInfoV4) GetOperatingSystemArchitecture() string {
	if o == nil || IsNil(o.OperatingSystemArchitecture) {
		var ret string
		return ret
	}
	return *o.OperatingSystemArchitecture
}

// GetOperatingSystemArchitectureOk returns a tuple with the OperatingSystemArchitecture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineInfoV4) GetOperatingSystemArchitectureOk() (*string, bool) {
	if o == nil || IsNil(o.OperatingSystemArchitecture) {
		return nil, false
	}
	return o.OperatingSystemArchitecture, true
}

// HasOperatingSystemArchitecture returns a boolean if a field has been set.
func (o *MachineInfoV4) HasOperatingSystemArchitecture() bool {
	if o != nil && !IsNil(o.OperatingSystemArchitecture) {
		return true
	}

	return false
}

// SetOperatingSystemArchitecture gets a reference to the given string and assigns it to the OperatingSystemArchitecture field.
func (o *MachineInfoV4) SetOperatingSystemArchitecture(v string) {
	o.OperatingSystemArchitecture = &v
}

// GetPairingState returns the PairingState field value if set, zero value otherwise.
func (o *MachineInfoV4) GetPairingState() string {
	if o == nil || IsNil(o.PairingState) {
		var ret string
		return ret
	}
	return *o.PairingState
}

// GetPairingStateOk returns a tuple with the PairingState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineInfoV4) GetPairingStateOk() (*string, bool) {
	if o == nil || IsNil(o.PairingState) {
		return nil, false
	}
	return o.PairingState, true
}

// HasPairingState returns a boolean if a field has been set.
func (o *MachineInfoV4) HasPairingState() bool {
	if o != nil && !IsNil(o.PairingState) {
		return true
	}

	return false
}

// SetPairingState gets a reference to the given string and assigns it to the PairingState field.
func (o *MachineInfoV4) SetPairingState(v string) {
	o.PairingState = &v
}

// GetRemoteExperienceAgentBuildNumber returns the RemoteExperienceAgentBuildNumber field value if set, zero value otherwise.
func (o *MachineInfoV4) GetRemoteExperienceAgentBuildNumber() string {
	if o == nil || IsNil(o.RemoteExperienceAgentBuildNumber) {
		var ret string
		return ret
	}
	return *o.RemoteExperienceAgentBuildNumber
}

// GetRemoteExperienceAgentBuildNumberOk returns a tuple with the RemoteExperienceAgentBuildNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineInfoV4) GetRemoteExperienceAgentBuildNumberOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteExperienceAgentBuildNumber) {
		return nil, false
	}
	return o.RemoteExperienceAgentBuildNumber, true
}

// HasRemoteExperienceAgentBuildNumber returns a boolean if a field has been set.
func (o *MachineInfoV4) HasRemoteExperienceAgentBuildNumber() bool {
	if o != nil && !IsNil(o.RemoteExperienceAgentBuildNumber) {
		return true
	}

	return false
}

// SetRemoteExperienceAgentBuildNumber gets a reference to the given string and assigns it to the RemoteExperienceAgentBuildNumber field.
func (o *MachineInfoV4) SetRemoteExperienceAgentBuildNumber(v string) {
	o.RemoteExperienceAgentBuildNumber = &v
}

// GetRemoteExperienceAgentVersion returns the RemoteExperienceAgentVersion field value if set, zero value otherwise.
func (o *MachineInfoV4) GetRemoteExperienceAgentVersion() string {
	if o == nil || IsNil(o.RemoteExperienceAgentVersion) {
		var ret string
		return ret
	}
	return *o.RemoteExperienceAgentVersion
}

// GetRemoteExperienceAgentVersionOk returns a tuple with the RemoteExperienceAgentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineInfoV4) GetRemoteExperienceAgentVersionOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteExperienceAgentVersion) {
		return nil, false
	}
	return o.RemoteExperienceAgentVersion, true
}

// HasRemoteExperienceAgentVersion returns a boolean if a field has been set.
func (o *MachineInfoV4) HasRemoteExperienceAgentVersion() bool {
	if o != nil && !IsNil(o.RemoteExperienceAgentVersion) {
		return true
	}

	return false
}

// SetRemoteExperienceAgentVersion gets a reference to the given string and assigns it to the RemoteExperienceAgentVersion field.
func (o *MachineInfoV4) SetRemoteExperienceAgentVersion(v string) {
	o.RemoteExperienceAgentVersion = &v
}

// GetSessionId returns the SessionId field value if set, zero value otherwise.
func (o *MachineInfoV4) GetSessionId() string {
	if o == nil || IsNil(o.SessionId) {
		var ret string
		return ret
	}
	return *o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineInfoV4) GetSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.SessionId) {
		return nil, false
	}
	return o.SessionId, true
}

// HasSessionId returns a boolean if a field has been set.
func (o *MachineInfoV4) HasSessionId() bool {
	if o != nil && !IsNil(o.SessionId) {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given string and assigns it to the SessionId field.
func (o *MachineInfoV4) SetSessionId(v string) {
	o.SessionId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *MachineInfoV4) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineInfoV4) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *MachineInfoV4) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *MachineInfoV4) SetState(v string) {
	o.State = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MachineInfoV4) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineInfoV4) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MachineInfoV4) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MachineInfoV4) SetType(v string) {
	o.Type = &v
}

// GetUserIds returns the UserIds field value if set, zero value otherwise.
func (o *MachineInfoV4) GetUserIds() []string {
	if o == nil || IsNil(o.UserIds) {
		var ret []string
		return ret
	}
	return o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineInfoV4) GetUserIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.UserIds) {
		return nil, false
	}
	return o.UserIds, true
}

// HasUserIds returns a boolean if a field has been set.
func (o *MachineInfoV4) HasUserIds() bool {
	if o != nil && !IsNil(o.UserIds) {
		return true
	}

	return false
}

// SetUserIds gets a reference to the given []string and assigns it to the UserIds field.
func (o *MachineInfoV4) SetUserIds(v []string) {
	o.UserIds = v
}

func (o MachineInfoV4) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MachineInfoV4) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessGroupId) {
		toSerialize["access_group_id"] = o.AccessGroupId
	}
	if !IsNil(o.AgentBuildNumber) {
		toSerialize["agent_build_number"] = o.AgentBuildNumber
	}
	if !IsNil(o.AgentUpgradeErrorMessage) {
		toSerialize["agent_upgrade_error_message"] = o.AgentUpgradeErrorMessage
	}
	if !IsNil(o.AgentUpgradeResult) {
		toSerialize["agent_upgrade_result"] = o.AgentUpgradeResult
	}
	if !IsNil(o.AgentUpgradeState) {
		toSerialize["agent_upgrade_state"] = o.AgentUpgradeState
	}
	if !IsNil(o.AgentVersion) {
		toSerialize["agent_version"] = o.AgentVersion
	}
	if !IsNil(o.Aliases) {
		toSerialize["aliases"] = o.Aliases
	}
	if !IsNil(o.AttemptedTheftByConnectionServer) {
		toSerialize["attempted_theft_by_connection_server"] = o.AttemptedTheftByConnectionServer
	}
	if !IsNil(o.ConfiguredByConnectionServer) {
		toSerialize["configured_by_connection_server"] = o.ConfiguredByConnectionServer
	}
	if !IsNil(o.DesktopPoolId) {
		toSerialize["desktop_pool_id"] = o.DesktopPoolId
	}
	if !IsNil(o.DnsName) {
		toSerialize["dns_name"] = o.DnsName
	}
	if !IsNil(o.HeldMachine) {
		toSerialize["held_machine"] = o.HeldMachine
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ManagedMachineData) {
		toSerialize["managed_machine_data"] = o.ManagedMachineData
	}
	if !IsNil(o.MessageSecurityEnhancedModeSupported) {
		toSerialize["message_security_enhanced_mode_supported"] = o.MessageSecurityEnhancedModeSupported
	}
	if !IsNil(o.MessageSecurityMode) {
		toSerialize["message_security_mode"] = o.MessageSecurityMode
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OperatingSystem) {
		toSerialize["operating_system"] = o.OperatingSystem
	}
	if !IsNil(o.OperatingSystemArchitecture) {
		toSerialize["operating_system_architecture"] = o.OperatingSystemArchitecture
	}
	if !IsNil(o.PairingState) {
		toSerialize["pairing_state"] = o.PairingState
	}
	if !IsNil(o.RemoteExperienceAgentBuildNumber) {
		toSerialize["remote_experience_agent_build_number"] = o.RemoteExperienceAgentBuildNumber
	}
	if !IsNil(o.RemoteExperienceAgentVersion) {
		toSerialize["remote_experience_agent_version"] = o.RemoteExperienceAgentVersion
	}
	if !IsNil(o.SessionId) {
		toSerialize["session_id"] = o.SessionId
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UserIds) {
		toSerialize["user_ids"] = o.UserIds
	}
	return toSerialize, nil
}

type NullableMachineInfoV4 struct {
	value *MachineInfoV4
	isSet bool
}

func (v NullableMachineInfoV4) Get() *MachineInfoV4 {
	return v.value
}

func (v *NullableMachineInfoV4) Set(val *MachineInfoV4) {
	v.value = val
	v.isSet = true
}

func (v NullableMachineInfoV4) IsSet() bool {
	return v.isSet
}

func (v *NullableMachineInfoV4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMachineInfoV4(val *MachineInfoV4) *NullableMachineInfoV4 {
	return &NullableMachineInfoV4{value: val, isSet: true}
}

func (v NullableMachineInfoV4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMachineInfoV4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


