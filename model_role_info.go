/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the RoleInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleInfo{}

// RoleInfo Information about role.
type RoleInfo struct {
	// Specifies whether federated access group is applicable for this role. This will be true when the role contains atleast one of FEDEREATED_LDAP_MANAGE, FEDEREATED_LDAP_VIEW, FEDERATED_SESSIONS_MANAGE or FEDERATED_SESSIONS_VIEW privilege.
	AppliesToFederationAccessGroup *bool `json:"applies_to_federation_access_group,omitempty"`
	// Specifies whether local access group is applicable for this role. This will be true when the role contains atleast one inventory specific privilege.
	AppliesToLocalAccessGroup *bool `json:"applies_to_local_access_group,omitempty"`
	// The role type. It will be null for custom roles. * ADMINISTRATOR: Role with full administrative rights. * ADMINISTRATOR_READ_ONLY: Role with full read-only administrative rights. * AGENT_REGISTRATION_ADMIN: Role with rights to register Agents. * GLOBAL_CONFIG_AND_POLICY_ADMIN: Role with rights for View Configuration settings and policies. * GLOBAL_CONFIG_AND_POLICY_ADMIN_READ_ONLY: Role with read-only rights for View Configuration settings and policies. * HELP_DESK_ADMIN: Role with rights for Help Desk portal management. * HELP_DESK_ADMIN_READ_ONLY: Role with read only rights for Help Desk portal management. * INVENTORY_ADMIN: Role with rights for inventory management. * INVENTORY_ADMIN_READ_ONLY: Role with read only rights for inventory management. * LOCAL_ADMIN: Local Pod Administration role with full administrative rights. * LOCAL_ADMIN_READ_ONLY: Local Pod Administration role with full read-only administrative rights. * UNKNOWN_ROLE: Unknown Role type.
	BuiltInRoleType *string `json:"built_in_role_type,omitempty"`
	// Role description.
	Description *string `json:"description,omitempty"`
	// Unique ID representing this role.
	Id *string `json:"id,omitempty"`
	// Role name.
	Name *string `json:"name,omitempty"`
	// Administrative permissions (user/group and access group) for this role.
	PermissionIds []string `json:"permission_ids,omitempty"`
	// Privileges for this role.
	Privileges []string `json:"privileges,omitempty"`
}

// NewRoleInfo instantiates a new RoleInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleInfo() *RoleInfo {
	this := RoleInfo{}
	return &this
}

// NewRoleInfoWithDefaults instantiates a new RoleInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleInfoWithDefaults() *RoleInfo {
	this := RoleInfo{}
	return &this
}

// GetAppliesToFederationAccessGroup returns the AppliesToFederationAccessGroup field value if set, zero value otherwise.
func (o *RoleInfo) GetAppliesToFederationAccessGroup() bool {
	if o == nil || IsNil(o.AppliesToFederationAccessGroup) {
		var ret bool
		return ret
	}
	return *o.AppliesToFederationAccessGroup
}

// GetAppliesToFederationAccessGroupOk returns a tuple with the AppliesToFederationAccessGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleInfo) GetAppliesToFederationAccessGroupOk() (*bool, bool) {
	if o == nil || IsNil(o.AppliesToFederationAccessGroup) {
		return nil, false
	}
	return o.AppliesToFederationAccessGroup, true
}

// HasAppliesToFederationAccessGroup returns a boolean if a field has been set.
func (o *RoleInfo) HasAppliesToFederationAccessGroup() bool {
	if o != nil && !IsNil(o.AppliesToFederationAccessGroup) {
		return true
	}

	return false
}

// SetAppliesToFederationAccessGroup gets a reference to the given bool and assigns it to the AppliesToFederationAccessGroup field.
func (o *RoleInfo) SetAppliesToFederationAccessGroup(v bool) {
	o.AppliesToFederationAccessGroup = &v
}

// GetAppliesToLocalAccessGroup returns the AppliesToLocalAccessGroup field value if set, zero value otherwise.
func (o *RoleInfo) GetAppliesToLocalAccessGroup() bool {
	if o == nil || IsNil(o.AppliesToLocalAccessGroup) {
		var ret bool
		return ret
	}
	return *o.AppliesToLocalAccessGroup
}

// GetAppliesToLocalAccessGroupOk returns a tuple with the AppliesToLocalAccessGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleInfo) GetAppliesToLocalAccessGroupOk() (*bool, bool) {
	if o == nil || IsNil(o.AppliesToLocalAccessGroup) {
		return nil, false
	}
	return o.AppliesToLocalAccessGroup, true
}

// HasAppliesToLocalAccessGroup returns a boolean if a field has been set.
func (o *RoleInfo) HasAppliesToLocalAccessGroup() bool {
	if o != nil && !IsNil(o.AppliesToLocalAccessGroup) {
		return true
	}

	return false
}

// SetAppliesToLocalAccessGroup gets a reference to the given bool and assigns it to the AppliesToLocalAccessGroup field.
func (o *RoleInfo) SetAppliesToLocalAccessGroup(v bool) {
	o.AppliesToLocalAccessGroup = &v
}

// GetBuiltInRoleType returns the BuiltInRoleType field value if set, zero value otherwise.
func (o *RoleInfo) GetBuiltInRoleType() string {
	if o == nil || IsNil(o.BuiltInRoleType) {
		var ret string
		return ret
	}
	return *o.BuiltInRoleType
}

// GetBuiltInRoleTypeOk returns a tuple with the BuiltInRoleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleInfo) GetBuiltInRoleTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BuiltInRoleType) {
		return nil, false
	}
	return o.BuiltInRoleType, true
}

// HasBuiltInRoleType returns a boolean if a field has been set.
func (o *RoleInfo) HasBuiltInRoleType() bool {
	if o != nil && !IsNil(o.BuiltInRoleType) {
		return true
	}

	return false
}

// SetBuiltInRoleType gets a reference to the given string and assigns it to the BuiltInRoleType field.
func (o *RoleInfo) SetBuiltInRoleType(v string) {
	o.BuiltInRoleType = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RoleInfo) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RoleInfo) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RoleInfo) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RoleInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RoleInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RoleInfo) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RoleInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RoleInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RoleInfo) SetName(v string) {
	o.Name = &v
}

// GetPermissionIds returns the PermissionIds field value if set, zero value otherwise.
func (o *RoleInfo) GetPermissionIds() []string {
	if o == nil || IsNil(o.PermissionIds) {
		var ret []string
		return ret
	}
	return o.PermissionIds
}

// GetPermissionIdsOk returns a tuple with the PermissionIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleInfo) GetPermissionIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.PermissionIds) {
		return nil, false
	}
	return o.PermissionIds, true
}

// HasPermissionIds returns a boolean if a field has been set.
func (o *RoleInfo) HasPermissionIds() bool {
	if o != nil && !IsNil(o.PermissionIds) {
		return true
	}

	return false
}

// SetPermissionIds gets a reference to the given []string and assigns it to the PermissionIds field.
func (o *RoleInfo) SetPermissionIds(v []string) {
	o.PermissionIds = v
}

// GetPrivileges returns the Privileges field value if set, zero value otherwise.
func (o *RoleInfo) GetPrivileges() []string {
	if o == nil || IsNil(o.Privileges) {
		var ret []string
		return ret
	}
	return o.Privileges
}

// GetPrivilegesOk returns a tuple with the Privileges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleInfo) GetPrivilegesOk() ([]string, bool) {
	if o == nil || IsNil(o.Privileges) {
		return nil, false
	}
	return o.Privileges, true
}

// HasPrivileges returns a boolean if a field has been set.
func (o *RoleInfo) HasPrivileges() bool {
	if o != nil && !IsNil(o.Privileges) {
		return true
	}

	return false
}

// SetPrivileges gets a reference to the given []string and assigns it to the Privileges field.
func (o *RoleInfo) SetPrivileges(v []string) {
	o.Privileges = v
}

func (o RoleInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppliesToFederationAccessGroup) {
		toSerialize["applies_to_federation_access_group"] = o.AppliesToFederationAccessGroup
	}
	if !IsNil(o.AppliesToLocalAccessGroup) {
		toSerialize["applies_to_local_access_group"] = o.AppliesToLocalAccessGroup
	}
	if !IsNil(o.BuiltInRoleType) {
		toSerialize["built_in_role_type"] = o.BuiltInRoleType
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PermissionIds) {
		toSerialize["permission_ids"] = o.PermissionIds
	}
	if !IsNil(o.Privileges) {
		toSerialize["privileges"] = o.Privileges
	}
	return toSerialize, nil
}

type NullableRoleInfo struct {
	value *RoleInfo
	isSet bool
}

func (v NullableRoleInfo) Get() *RoleInfo {
	return v.value
}

func (v *NullableRoleInfo) Set(val *RoleInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleInfo(val *RoleInfo) *NullableRoleInfo {
	return &NullableRoleInfo{value: val, isSet: true}
}

func (v NullableRoleInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


