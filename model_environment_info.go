/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// EnvironmentInfo Information related to Environment Settings.
type EnvironmentInfo struct {
	// The GUID of a group of Connection Servers sharing the same configuration.
	ClusterGuid string `json:"cluster_guid"`
	// The name of a group of Connection Servers sharing the same configuration.
	ClusterName string `json:"cluster_name"`
	// Indicates if FIPS mode is enabled.
	FipsModeEnabled bool `json:"fips_mode_enabled"`
	// Indicates the IP mode of the environment. * IPv4: The ip mode is IPv4. * IPv6: The ip mode is IPv6.
	IpMode string `json:"ip_mode"`
	// The name of the current pod in the Multi-DataCenter Horizon Pod, the value will be null when PodFederation is not initialized.
	LocalPodName *string `json:"local_pod_name,omitempty"`
	// Represents the clusters time zone offset from UTC in seconds.
	TimezoneOffset int32 `json:"timezone_offset"`
}

// NewEnvironmentInfo instantiates a new EnvironmentInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentInfo(clusterGuid string, clusterName string, fipsModeEnabled bool, ipMode string, timezoneOffset int32) *EnvironmentInfo {
	this := EnvironmentInfo{}
	this.ClusterGuid = clusterGuid
	this.ClusterName = clusterName
	this.FipsModeEnabled = fipsModeEnabled
	this.IpMode = ipMode
	this.TimezoneOffset = timezoneOffset
	return &this
}

// NewEnvironmentInfoWithDefaults instantiates a new EnvironmentInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentInfoWithDefaults() *EnvironmentInfo {
	this := EnvironmentInfo{}
	return &this
}

// GetClusterGuid returns the ClusterGuid field value
func (o *EnvironmentInfo) GetClusterGuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterGuid
}

// GetClusterGuidOk returns a tuple with the ClusterGuid field value
// and a boolean to check if the value has been set.
func (o *EnvironmentInfo) GetClusterGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterGuid, true
}

// SetClusterGuid sets field value
func (o *EnvironmentInfo) SetClusterGuid(v string) {
	o.ClusterGuid = v
}

// GetClusterName returns the ClusterName field value
func (o *EnvironmentInfo) GetClusterName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value
// and a boolean to check if the value has been set.
func (o *EnvironmentInfo) GetClusterNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterName, true
}

// SetClusterName sets field value
func (o *EnvironmentInfo) SetClusterName(v string) {
	o.ClusterName = v
}

// GetFipsModeEnabled returns the FipsModeEnabled field value
func (o *EnvironmentInfo) GetFipsModeEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.FipsModeEnabled
}

// GetFipsModeEnabledOk returns a tuple with the FipsModeEnabled field value
// and a boolean to check if the value has been set.
func (o *EnvironmentInfo) GetFipsModeEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FipsModeEnabled, true
}

// SetFipsModeEnabled sets field value
func (o *EnvironmentInfo) SetFipsModeEnabled(v bool) {
	o.FipsModeEnabled = v
}

// GetIpMode returns the IpMode field value
func (o *EnvironmentInfo) GetIpMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IpMode
}

// GetIpModeOk returns a tuple with the IpMode field value
// and a boolean to check if the value has been set.
func (o *EnvironmentInfo) GetIpModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpMode, true
}

// SetIpMode sets field value
func (o *EnvironmentInfo) SetIpMode(v string) {
	o.IpMode = v
}

// GetLocalPodName returns the LocalPodName field value if set, zero value otherwise.
func (o *EnvironmentInfo) GetLocalPodName() string {
	if o == nil || o.LocalPodName == nil {
		var ret string
		return ret
	}
	return *o.LocalPodName
}

// GetLocalPodNameOk returns a tuple with the LocalPodName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentInfo) GetLocalPodNameOk() (*string, bool) {
	if o == nil || o.LocalPodName == nil {
		return nil, false
	}
	return o.LocalPodName, true
}

// HasLocalPodName returns a boolean if a field has been set.
func (o *EnvironmentInfo) HasLocalPodName() bool {
	if o != nil && o.LocalPodName != nil {
		return true
	}

	return false
}

// SetLocalPodName gets a reference to the given string and assigns it to the LocalPodName field.
func (o *EnvironmentInfo) SetLocalPodName(v string) {
	o.LocalPodName = &v
}

// GetTimezoneOffset returns the TimezoneOffset field value
func (o *EnvironmentInfo) GetTimezoneOffset() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TimezoneOffset
}

// GetTimezoneOffsetOk returns a tuple with the TimezoneOffset field value
// and a boolean to check if the value has been set.
func (o *EnvironmentInfo) GetTimezoneOffsetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimezoneOffset, true
}

// SetTimezoneOffset sets field value
func (o *EnvironmentInfo) SetTimezoneOffset(v int32) {
	o.TimezoneOffset = v
}

func (o EnvironmentInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["cluster_guid"] = o.ClusterGuid
	}
	if true {
		toSerialize["cluster_name"] = o.ClusterName
	}
	if true {
		toSerialize["fips_mode_enabled"] = o.FipsModeEnabled
	}
	if true {
		toSerialize["ip_mode"] = o.IpMode
	}
	if o.LocalPodName != nil {
		toSerialize["local_pod_name"] = o.LocalPodName
	}
	if true {
		toSerialize["timezone_offset"] = o.TimezoneOffset
	}
	return json.Marshal(toSerialize)
}

type NullableEnvironmentInfo struct {
	value *EnvironmentInfo
	isSet bool
}

func (v NullableEnvironmentInfo) Get() *EnvironmentInfo {
	return v.value
}

func (v *NullableEnvironmentInfo) Set(val *EnvironmentInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentInfo(val *EnvironmentInfo) *NullableEnvironmentInfo {
	return &NullableEnvironmentInfo{value: val, isSet: true}
}

func (v NullableEnvironmentInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
