/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the EnvironmentInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentInfo{}

// EnvironmentInfo Information related to Environment Settings.
type EnvironmentInfo struct {
	// The GUID of a group of Connection Servers sharing the same configuration.
	ClusterGuid *string `json:"cluster_guid,omitempty"`
	// The name of a group of Connection Servers sharing the same configuration.
	ClusterName *string `json:"cluster_name,omitempty"`
	// Indicates if FIPS mode is enabled.
	FipsModeEnabled *bool `json:"fips_mode_enabled,omitempty"`
	// Indicates the IP mode of the environment. * IPv4: The ip mode is IPv4. * IPv6: The ip mode is IPv6.
	IpMode *string `json:"ip_mode,omitempty"`
	// The name of the current pod in the Multi-DataCenter Horizon Pod, the value will be null when PodFederation is not initialized.
	LocalPodName *string `json:"local_pod_name,omitempty"`
	// Represents the clusters time zone offset from UTC in seconds.
	TimezoneOffset *int32 `json:"timezone_offset,omitempty"`
}

// NewEnvironmentInfo instantiates a new EnvironmentInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentInfo() *EnvironmentInfo {
	this := EnvironmentInfo{}
	return &this
}

// NewEnvironmentInfoWithDefaults instantiates a new EnvironmentInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentInfoWithDefaults() *EnvironmentInfo {
	this := EnvironmentInfo{}
	return &this
}

// GetClusterGuid returns the ClusterGuid field value if set, zero value otherwise.
func (o *EnvironmentInfo) GetClusterGuid() string {
	if o == nil || IsNil(o.ClusterGuid) {
		var ret string
		return ret
	}
	return *o.ClusterGuid
}

// GetClusterGuidOk returns a tuple with the ClusterGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentInfo) GetClusterGuidOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterGuid) {
		return nil, false
	}
	return o.ClusterGuid, true
}

// HasClusterGuid returns a boolean if a field has been set.
func (o *EnvironmentInfo) HasClusterGuid() bool {
	if o != nil && !IsNil(o.ClusterGuid) {
		return true
	}

	return false
}

// SetClusterGuid gets a reference to the given string and assigns it to the ClusterGuid field.
func (o *EnvironmentInfo) SetClusterGuid(v string) {
	o.ClusterGuid = &v
}

// GetClusterName returns the ClusterName field value if set, zero value otherwise.
func (o *EnvironmentInfo) GetClusterName() string {
	if o == nil || IsNil(o.ClusterName) {
		var ret string
		return ret
	}
	return *o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentInfo) GetClusterNameOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterName) {
		return nil, false
	}
	return o.ClusterName, true
}

// HasClusterName returns a boolean if a field has been set.
func (o *EnvironmentInfo) HasClusterName() bool {
	if o != nil && !IsNil(o.ClusterName) {
		return true
	}

	return false
}

// SetClusterName gets a reference to the given string and assigns it to the ClusterName field.
func (o *EnvironmentInfo) SetClusterName(v string) {
	o.ClusterName = &v
}

// GetFipsModeEnabled returns the FipsModeEnabled field value if set, zero value otherwise.
func (o *EnvironmentInfo) GetFipsModeEnabled() bool {
	if o == nil || IsNil(o.FipsModeEnabled) {
		var ret bool
		return ret
	}
	return *o.FipsModeEnabled
}

// GetFipsModeEnabledOk returns a tuple with the FipsModeEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentInfo) GetFipsModeEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.FipsModeEnabled) {
		return nil, false
	}
	return o.FipsModeEnabled, true
}

// HasFipsModeEnabled returns a boolean if a field has been set.
func (o *EnvironmentInfo) HasFipsModeEnabled() bool {
	if o != nil && !IsNil(o.FipsModeEnabled) {
		return true
	}

	return false
}

// SetFipsModeEnabled gets a reference to the given bool and assigns it to the FipsModeEnabled field.
func (o *EnvironmentInfo) SetFipsModeEnabled(v bool) {
	o.FipsModeEnabled = &v
}

// GetIpMode returns the IpMode field value if set, zero value otherwise.
func (o *EnvironmentInfo) GetIpMode() string {
	if o == nil || IsNil(o.IpMode) {
		var ret string
		return ret
	}
	return *o.IpMode
}

// GetIpModeOk returns a tuple with the IpMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentInfo) GetIpModeOk() (*string, bool) {
	if o == nil || IsNil(o.IpMode) {
		return nil, false
	}
	return o.IpMode, true
}

// HasIpMode returns a boolean if a field has been set.
func (o *EnvironmentInfo) HasIpMode() bool {
	if o != nil && !IsNil(o.IpMode) {
		return true
	}

	return false
}

// SetIpMode gets a reference to the given string and assigns it to the IpMode field.
func (o *EnvironmentInfo) SetIpMode(v string) {
	o.IpMode = &v
}

// GetLocalPodName returns the LocalPodName field value if set, zero value otherwise.
func (o *EnvironmentInfo) GetLocalPodName() string {
	if o == nil || IsNil(o.LocalPodName) {
		var ret string
		return ret
	}
	return *o.LocalPodName
}

// GetLocalPodNameOk returns a tuple with the LocalPodName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentInfo) GetLocalPodNameOk() (*string, bool) {
	if o == nil || IsNil(o.LocalPodName) {
		return nil, false
	}
	return o.LocalPodName, true
}

// HasLocalPodName returns a boolean if a field has been set.
func (o *EnvironmentInfo) HasLocalPodName() bool {
	if o != nil && !IsNil(o.LocalPodName) {
		return true
	}

	return false
}

// SetLocalPodName gets a reference to the given string and assigns it to the LocalPodName field.
func (o *EnvironmentInfo) SetLocalPodName(v string) {
	o.LocalPodName = &v
}

// GetTimezoneOffset returns the TimezoneOffset field value if set, zero value otherwise.
func (o *EnvironmentInfo) GetTimezoneOffset() int32 {
	if o == nil || IsNil(o.TimezoneOffset) {
		var ret int32
		return ret
	}
	return *o.TimezoneOffset
}

// GetTimezoneOffsetOk returns a tuple with the TimezoneOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentInfo) GetTimezoneOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.TimezoneOffset) {
		return nil, false
	}
	return o.TimezoneOffset, true
}

// HasTimezoneOffset returns a boolean if a field has been set.
func (o *EnvironmentInfo) HasTimezoneOffset() bool {
	if o != nil && !IsNil(o.TimezoneOffset) {
		return true
	}

	return false
}

// SetTimezoneOffset gets a reference to the given int32 and assigns it to the TimezoneOffset field.
func (o *EnvironmentInfo) SetTimezoneOffset(v int32) {
	o.TimezoneOffset = &v
}

func (o EnvironmentInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClusterGuid) {
		toSerialize["cluster_guid"] = o.ClusterGuid
	}
	if !IsNil(o.ClusterName) {
		toSerialize["cluster_name"] = o.ClusterName
	}
	if !IsNil(o.FipsModeEnabled) {
		toSerialize["fips_mode_enabled"] = o.FipsModeEnabled
	}
	if !IsNil(o.IpMode) {
		toSerialize["ip_mode"] = o.IpMode
	}
	if !IsNil(o.LocalPodName) {
		toSerialize["local_pod_name"] = o.LocalPodName
	}
	if !IsNil(o.TimezoneOffset) {
		toSerialize["timezone_offset"] = o.TimezoneOffset
	}
	return toSerialize, nil
}

type NullableEnvironmentInfo struct {
	value *EnvironmentInfo
	isSet bool
}

func (v NullableEnvironmentInfo) Get() *EnvironmentInfo {
	return v.value
}

func (v *NullableEnvironmentInfo) Set(val *EnvironmentInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentInfo(val *EnvironmentInfo) *NullableEnvironmentInfo {
	return &NullableEnvironmentInfo{value: val, isSet: true}
}

func (v NullableEnvironmentInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


