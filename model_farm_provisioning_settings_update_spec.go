/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FarmProvisioningSettingsUpdateSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FarmProvisioningSettingsUpdateSpec{}

// FarmProvisioningSettingsUpdateSpec Virtual center provisioning settings for the farm.
type FarmProvisioningSettingsUpdateSpec struct {
	// Host or cluster where the machines are deployed in. For Instant clone farms it can be only be a cluster id. This can be modified only if there are no current operations ( operation is NONE).
	HostOrClusterId string `json:"host_or_cluster_id"`
	// Resource pool to deploy the RDS Servers.
	ResourcePoolId string `json:"resource_pool_id"`
}

type _FarmProvisioningSettingsUpdateSpec FarmProvisioningSettingsUpdateSpec

// NewFarmProvisioningSettingsUpdateSpec instantiates a new FarmProvisioningSettingsUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFarmProvisioningSettingsUpdateSpec(hostOrClusterId string, resourcePoolId string) *FarmProvisioningSettingsUpdateSpec {
	this := FarmProvisioningSettingsUpdateSpec{}
	this.HostOrClusterId = hostOrClusterId
	this.ResourcePoolId = resourcePoolId
	return &this
}

// NewFarmProvisioningSettingsUpdateSpecWithDefaults instantiates a new FarmProvisioningSettingsUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFarmProvisioningSettingsUpdateSpecWithDefaults() *FarmProvisioningSettingsUpdateSpec {
	this := FarmProvisioningSettingsUpdateSpec{}
	return &this
}

// GetHostOrClusterId returns the HostOrClusterId field value
func (o *FarmProvisioningSettingsUpdateSpec) GetHostOrClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HostOrClusterId
}

// GetHostOrClusterIdOk returns a tuple with the HostOrClusterId field value
// and a boolean to check if the value has been set.
func (o *FarmProvisioningSettingsUpdateSpec) GetHostOrClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HostOrClusterId, true
}

// SetHostOrClusterId sets field value
func (o *FarmProvisioningSettingsUpdateSpec) SetHostOrClusterId(v string) {
	o.HostOrClusterId = v
}

// GetResourcePoolId returns the ResourcePoolId field value
func (o *FarmProvisioningSettingsUpdateSpec) GetResourcePoolId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourcePoolId
}

// GetResourcePoolIdOk returns a tuple with the ResourcePoolId field value
// and a boolean to check if the value has been set.
func (o *FarmProvisioningSettingsUpdateSpec) GetResourcePoolIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourcePoolId, true
}

// SetResourcePoolId sets field value
func (o *FarmProvisioningSettingsUpdateSpec) SetResourcePoolId(v string) {
	o.ResourcePoolId = v
}

func (o FarmProvisioningSettingsUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FarmProvisioningSettingsUpdateSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["host_or_cluster_id"] = o.HostOrClusterId
	toSerialize["resource_pool_id"] = o.ResourcePoolId
	return toSerialize, nil
}

func (o *FarmProvisioningSettingsUpdateSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"host_or_cluster_id",
		"resource_pool_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFarmProvisioningSettingsUpdateSpec := _FarmProvisioningSettingsUpdateSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFarmProvisioningSettingsUpdateSpec)

	if err != nil {
		return err
	}

	*o = FarmProvisioningSettingsUpdateSpec(varFarmProvisioningSettingsUpdateSpec)

	return err
}

type NullableFarmProvisioningSettingsUpdateSpec struct {
	value *FarmProvisioningSettingsUpdateSpec
	isSet bool
}

func (v NullableFarmProvisioningSettingsUpdateSpec) Get() *FarmProvisioningSettingsUpdateSpec {
	return v.value
}

func (v *NullableFarmProvisioningSettingsUpdateSpec) Set(val *FarmProvisioningSettingsUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableFarmProvisioningSettingsUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableFarmProvisioningSettingsUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFarmProvisioningSettingsUpdateSpec(val *FarmProvisioningSettingsUpdateSpec) *NullableFarmProvisioningSettingsUpdateSpec {
	return &NullableFarmProvisioningSettingsUpdateSpec{value: val, isSet: true}
}

func (v NullableFarmProvisioningSettingsUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFarmProvisioningSettingsUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


