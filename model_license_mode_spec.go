/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LicenseModeSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseModeSpec{}

// LicenseModeSpec Information to set the mode of license
type LicenseModeSpec struct {
	// The license mode used. * DEFAULT: Perpetual license is in use. * PERPETUAL_ONLY: Perpetual license is in use. * SUBSCRIPTION: Cloud subscription license is in use.
	LicenseMode string `json:"license_mode"`
}

type _LicenseModeSpec LicenseModeSpec

// NewLicenseModeSpec instantiates a new LicenseModeSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseModeSpec(licenseMode string) *LicenseModeSpec {
	this := LicenseModeSpec{}
	this.LicenseMode = licenseMode
	return &this
}

// NewLicenseModeSpecWithDefaults instantiates a new LicenseModeSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseModeSpecWithDefaults() *LicenseModeSpec {
	this := LicenseModeSpec{}
	return &this
}

// GetLicenseMode returns the LicenseMode field value
func (o *LicenseModeSpec) GetLicenseMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LicenseMode
}

// GetLicenseModeOk returns a tuple with the LicenseMode field value
// and a boolean to check if the value has been set.
func (o *LicenseModeSpec) GetLicenseModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LicenseMode, true
}

// SetLicenseMode sets field value
func (o *LicenseModeSpec) SetLicenseMode(v string) {
	o.LicenseMode = v
}

func (o LicenseModeSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseModeSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["license_mode"] = o.LicenseMode
	return toSerialize, nil
}

func (o *LicenseModeSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"license_mode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLicenseModeSpec := _LicenseModeSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLicenseModeSpec)

	if err != nil {
		return err
	}

	*o = LicenseModeSpec(varLicenseModeSpec)

	return err
}

type NullableLicenseModeSpec struct {
	value *LicenseModeSpec
	isSet bool
}

func (v NullableLicenseModeSpec) Get() *LicenseModeSpec {
	return v.value
}

func (v *NullableLicenseModeSpec) Set(val *LicenseModeSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseModeSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseModeSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseModeSpec(val *LicenseModeSpec) *NullableLicenseModeSpec {
	return &NullableLicenseModeSpec{value: val, isSet: true}
}

func (v NullableLicenseModeSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseModeSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


