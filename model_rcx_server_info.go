/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// RCXServerInfo Information related to RCX servers of the cluster.
type RCXServerInfo struct {
	// Unique ID representing RCX server.
	Id string `json:"id"`
	// FQDN/IP address of the RCX server.
	Name string `json:"name"`
	// RCX server's port.
	Port int32 `json:"port"`
	// This indicates the current status of RCX server. * UP: RCX server is running. * DOWN: RCX server is down. * UNKNOWN: RCX server status is unknown.
	Status string `json:"status"`
	// Thumbprints of the RCX server certificates.
	Thumbprints *[]CertificateThumbprint `json:"thumbprints,omitempty"`
	// Version information of RCX server.
	Version string `json:"version"`
}

// NewRCXServerInfo instantiates a new RCXServerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRCXServerInfo(id string, name string, port int32, status string, version string) *RCXServerInfo {
	this := RCXServerInfo{}
	this.Id = id
	this.Name = name
	this.Port = port
	this.Status = status
	this.Version = version
	return &this
}

// NewRCXServerInfoWithDefaults instantiates a new RCXServerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRCXServerInfoWithDefaults() *RCXServerInfo {
	this := RCXServerInfo{}
	return &this
}

// GetId returns the Id field value
func (o *RCXServerInfo) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RCXServerInfo) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RCXServerInfo) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *RCXServerInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RCXServerInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RCXServerInfo) SetName(v string) {
	o.Name = v
}

// GetPort returns the Port field value
func (o *RCXServerInfo) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *RCXServerInfo) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *RCXServerInfo) SetPort(v int32) {
	o.Port = v
}

// GetStatus returns the Status field value
func (o *RCXServerInfo) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *RCXServerInfo) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *RCXServerInfo) SetStatus(v string) {
	o.Status = v
}

// GetThumbprints returns the Thumbprints field value if set, zero value otherwise.
func (o *RCXServerInfo) GetThumbprints() []CertificateThumbprint {
	if o == nil || o.Thumbprints == nil {
		var ret []CertificateThumbprint
		return ret
	}
	return *o.Thumbprints
}

// GetThumbprintsOk returns a tuple with the Thumbprints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RCXServerInfo) GetThumbprintsOk() (*[]CertificateThumbprint, bool) {
	if o == nil || o.Thumbprints == nil {
		return nil, false
	}
	return o.Thumbprints, true
}

// HasThumbprints returns a boolean if a field has been set.
func (o *RCXServerInfo) HasThumbprints() bool {
	if o != nil && o.Thumbprints != nil {
		return true
	}

	return false
}

// SetThumbprints gets a reference to the given []CertificateThumbprint and assigns it to the Thumbprints field.
func (o *RCXServerInfo) SetThumbprints(v []CertificateThumbprint) {
	o.Thumbprints = &v
}

// GetVersion returns the Version field value
func (o *RCXServerInfo) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *RCXServerInfo) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *RCXServerInfo) SetVersion(v string) {
	o.Version = v
}

func (o RCXServerInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["port"] = o.Port
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.Thumbprints != nil {
		toSerialize["thumbprints"] = o.Thumbprints
	}
	if true {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableRCXServerInfo struct {
	value *RCXServerInfo
	isSet bool
}

func (v NullableRCXServerInfo) Get() *RCXServerInfo {
	return v.value
}

func (v *NullableRCXServerInfo) Set(val *RCXServerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRCXServerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRCXServerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRCXServerInfo(val *RCXServerInfo) *NullableRCXServerInfo {
	return &NullableRCXServerInfo{value: val, isSet: true}
}

func (v NullableRCXServerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRCXServerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
