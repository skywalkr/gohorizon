/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// RDSHLoadBalancerSettingsUpdateSpec RDSH load balancer settings for the farm. This is required if use_custom_script_for_load_balancing is false.
type RDSHLoadBalancerSettingsUpdateSpec struct {
	// Represents threshold of CPU usage, in percentage. If the value is 0, then this metric is not considered for load balancing.
	CpuThreshold int32 `json:"cpu_threshold"`
	// Represents the threshold of average number of both read and write requests that were queued for the selected disk during the sample interval. If the value is 0, then this metric is not considered for load balancing.
	DiskQueueLengthThreshold int32 `json:"disk_queue_length_threshold"`
	// Represents the threshold of average time, in milliseconds, of a read of data from the disk. If the value is 0, then this metric is not considered for load balancing.
	DiskReadLatencyThreshold int32 `json:"disk_read_latency_threshold"`
	// Represents the threshold of average time, in milliseconds, of a write of data to the disk. If the value is 0, then this metric is not considered for load balancing.
	DiskWriteLatencyThreshold int32 `json:"disk_write_latency_threshold"`
	// Indicates whether to include session count for load balancing.
	IncludeSessionCount bool `json:"include_session_count"`
	// Represents threshold of memory usage, in percentage. If the value is 0, then this metric is not considered for load balancing.
	MemoryThreshold int32 `json:"memory_threshold"`
}

// NewRDSHLoadBalancerSettingsUpdateSpec instantiates a new RDSHLoadBalancerSettingsUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRDSHLoadBalancerSettingsUpdateSpec(cpuThreshold int32, diskQueueLengthThreshold int32, diskReadLatencyThreshold int32, diskWriteLatencyThreshold int32, includeSessionCount bool, memoryThreshold int32) *RDSHLoadBalancerSettingsUpdateSpec {
	this := RDSHLoadBalancerSettingsUpdateSpec{}
	this.CpuThreshold = cpuThreshold
	this.DiskQueueLengthThreshold = diskQueueLengthThreshold
	this.DiskReadLatencyThreshold = diskReadLatencyThreshold
	this.DiskWriteLatencyThreshold = diskWriteLatencyThreshold
	this.IncludeSessionCount = includeSessionCount
	this.MemoryThreshold = memoryThreshold
	return &this
}

// NewRDSHLoadBalancerSettingsUpdateSpecWithDefaults instantiates a new RDSHLoadBalancerSettingsUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRDSHLoadBalancerSettingsUpdateSpecWithDefaults() *RDSHLoadBalancerSettingsUpdateSpec {
	this := RDSHLoadBalancerSettingsUpdateSpec{}
	return &this
}

// GetCpuThreshold returns the CpuThreshold field value
func (o *RDSHLoadBalancerSettingsUpdateSpec) GetCpuThreshold() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CpuThreshold
}

// GetCpuThresholdOk returns a tuple with the CpuThreshold field value
// and a boolean to check if the value has been set.
func (o *RDSHLoadBalancerSettingsUpdateSpec) GetCpuThresholdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CpuThreshold, true
}

// SetCpuThreshold sets field value
func (o *RDSHLoadBalancerSettingsUpdateSpec) SetCpuThreshold(v int32) {
	o.CpuThreshold = v
}

// GetDiskQueueLengthThreshold returns the DiskQueueLengthThreshold field value
func (o *RDSHLoadBalancerSettingsUpdateSpec) GetDiskQueueLengthThreshold() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DiskQueueLengthThreshold
}

// GetDiskQueueLengthThresholdOk returns a tuple with the DiskQueueLengthThreshold field value
// and a boolean to check if the value has been set.
func (o *RDSHLoadBalancerSettingsUpdateSpec) GetDiskQueueLengthThresholdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskQueueLengthThreshold, true
}

// SetDiskQueueLengthThreshold sets field value
func (o *RDSHLoadBalancerSettingsUpdateSpec) SetDiskQueueLengthThreshold(v int32) {
	o.DiskQueueLengthThreshold = v
}

// GetDiskReadLatencyThreshold returns the DiskReadLatencyThreshold field value
func (o *RDSHLoadBalancerSettingsUpdateSpec) GetDiskReadLatencyThreshold() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DiskReadLatencyThreshold
}

// GetDiskReadLatencyThresholdOk returns a tuple with the DiskReadLatencyThreshold field value
// and a boolean to check if the value has been set.
func (o *RDSHLoadBalancerSettingsUpdateSpec) GetDiskReadLatencyThresholdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskReadLatencyThreshold, true
}

// SetDiskReadLatencyThreshold sets field value
func (o *RDSHLoadBalancerSettingsUpdateSpec) SetDiskReadLatencyThreshold(v int32) {
	o.DiskReadLatencyThreshold = v
}

// GetDiskWriteLatencyThreshold returns the DiskWriteLatencyThreshold field value
func (o *RDSHLoadBalancerSettingsUpdateSpec) GetDiskWriteLatencyThreshold() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DiskWriteLatencyThreshold
}

// GetDiskWriteLatencyThresholdOk returns a tuple with the DiskWriteLatencyThreshold field value
// and a boolean to check if the value has been set.
func (o *RDSHLoadBalancerSettingsUpdateSpec) GetDiskWriteLatencyThresholdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskWriteLatencyThreshold, true
}

// SetDiskWriteLatencyThreshold sets field value
func (o *RDSHLoadBalancerSettingsUpdateSpec) SetDiskWriteLatencyThreshold(v int32) {
	o.DiskWriteLatencyThreshold = v
}

// GetIncludeSessionCount returns the IncludeSessionCount field value
func (o *RDSHLoadBalancerSettingsUpdateSpec) GetIncludeSessionCount() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IncludeSessionCount
}

// GetIncludeSessionCountOk returns a tuple with the IncludeSessionCount field value
// and a boolean to check if the value has been set.
func (o *RDSHLoadBalancerSettingsUpdateSpec) GetIncludeSessionCountOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IncludeSessionCount, true
}

// SetIncludeSessionCount sets field value
func (o *RDSHLoadBalancerSettingsUpdateSpec) SetIncludeSessionCount(v bool) {
	o.IncludeSessionCount = v
}

// GetMemoryThreshold returns the MemoryThreshold field value
func (o *RDSHLoadBalancerSettingsUpdateSpec) GetMemoryThreshold() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MemoryThreshold
}

// GetMemoryThresholdOk returns a tuple with the MemoryThreshold field value
// and a boolean to check if the value has been set.
func (o *RDSHLoadBalancerSettingsUpdateSpec) GetMemoryThresholdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MemoryThreshold, true
}

// SetMemoryThreshold sets field value
func (o *RDSHLoadBalancerSettingsUpdateSpec) SetMemoryThreshold(v int32) {
	o.MemoryThreshold = v
}

func (o RDSHLoadBalancerSettingsUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["cpu_threshold"] = o.CpuThreshold
	}
	if true {
		toSerialize["disk_queue_length_threshold"] = o.DiskQueueLengthThreshold
	}
	if true {
		toSerialize["disk_read_latency_threshold"] = o.DiskReadLatencyThreshold
	}
	if true {
		toSerialize["disk_write_latency_threshold"] = o.DiskWriteLatencyThreshold
	}
	if true {
		toSerialize["include_session_count"] = o.IncludeSessionCount
	}
	if true {
		toSerialize["memory_threshold"] = o.MemoryThreshold
	}
	return json.Marshal(toSerialize)
}

type NullableRDSHLoadBalancerSettingsUpdateSpec struct {
	value *RDSHLoadBalancerSettingsUpdateSpec
	isSet bool
}

func (v NullableRDSHLoadBalancerSettingsUpdateSpec) Get() *RDSHLoadBalancerSettingsUpdateSpec {
	return v.value
}

func (v *NullableRDSHLoadBalancerSettingsUpdateSpec) Set(val *RDSHLoadBalancerSettingsUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableRDSHLoadBalancerSettingsUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableRDSHLoadBalancerSettingsUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRDSHLoadBalancerSettingsUpdateSpec(val *RDSHLoadBalancerSettingsUpdateSpec) *NullableRDSHLoadBalancerSettingsUpdateSpec {
	return &NullableRDSHLoadBalancerSettingsUpdateSpec{value: val, isSet: true}
}

func (v NullableRDSHLoadBalancerSettingsUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRDSHLoadBalancerSettingsUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
