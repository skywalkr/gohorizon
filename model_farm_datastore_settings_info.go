/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2111
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// FarmDatastoreSettingsInfo Datastore settings for the automated farm.
type FarmDatastoreSettingsInfo struct {
	// Id of the datastore.
	DatastoreId *string `json:"datastore_id,omitempty"`
	// Storage overcommit determines how view places new RDS Servers on the selected datastores. With an aggressive overcommit level, view reserves less space for sparse disk growth, but fits more RDS Servers on the datastore. * NONE: No overcommit. * CONSERVATIVE: Conservative. * MODERATE: Moderate. * AGGRESSIVE: Aggressive. * UNBOUNDED: Unbounded.
	StorageOvercommit *string `json:"storage_overcommit,omitempty"`
}

// NewFarmDatastoreSettingsInfo instantiates a new FarmDatastoreSettingsInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFarmDatastoreSettingsInfo() *FarmDatastoreSettingsInfo {
	this := FarmDatastoreSettingsInfo{}
	return &this
}

// NewFarmDatastoreSettingsInfoWithDefaults instantiates a new FarmDatastoreSettingsInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFarmDatastoreSettingsInfoWithDefaults() *FarmDatastoreSettingsInfo {
	this := FarmDatastoreSettingsInfo{}
	return &this
}

// GetDatastoreId returns the DatastoreId field value if set, zero value otherwise.
func (o *FarmDatastoreSettingsInfo) GetDatastoreId() string {
	if o == nil || o.DatastoreId == nil {
		var ret string
		return ret
	}
	return *o.DatastoreId
}

// GetDatastoreIdOk returns a tuple with the DatastoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmDatastoreSettingsInfo) GetDatastoreIdOk() (*string, bool) {
	if o == nil || o.DatastoreId == nil {
		return nil, false
	}
	return o.DatastoreId, true
}

// HasDatastoreId returns a boolean if a field has been set.
func (o *FarmDatastoreSettingsInfo) HasDatastoreId() bool {
	if o != nil && o.DatastoreId != nil {
		return true
	}

	return false
}

// SetDatastoreId gets a reference to the given string and assigns it to the DatastoreId field.
func (o *FarmDatastoreSettingsInfo) SetDatastoreId(v string) {
	o.DatastoreId = &v
}

// GetStorageOvercommit returns the StorageOvercommit field value if set, zero value otherwise.
func (o *FarmDatastoreSettingsInfo) GetStorageOvercommit() string {
	if o == nil || o.StorageOvercommit == nil {
		var ret string
		return ret
	}
	return *o.StorageOvercommit
}

// GetStorageOvercommitOk returns a tuple with the StorageOvercommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmDatastoreSettingsInfo) GetStorageOvercommitOk() (*string, bool) {
	if o == nil || o.StorageOvercommit == nil {
		return nil, false
	}
	return o.StorageOvercommit, true
}

// HasStorageOvercommit returns a boolean if a field has been set.
func (o *FarmDatastoreSettingsInfo) HasStorageOvercommit() bool {
	if o != nil && o.StorageOvercommit != nil {
		return true
	}

	return false
}

// SetStorageOvercommit gets a reference to the given string and assigns it to the StorageOvercommit field.
func (o *FarmDatastoreSettingsInfo) SetStorageOvercommit(v string) {
	o.StorageOvercommit = &v
}

func (o FarmDatastoreSettingsInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DatastoreId != nil {
		toSerialize["datastore_id"] = o.DatastoreId
	}
	if o.StorageOvercommit != nil {
		toSerialize["storage_overcommit"] = o.StorageOvercommit
	}
	return json.Marshal(toSerialize)
}

type NullableFarmDatastoreSettingsInfo struct {
	value *FarmDatastoreSettingsInfo
	isSet bool
}

func (v NullableFarmDatastoreSettingsInfo) Get() *FarmDatastoreSettingsInfo {
	return v.value
}

func (v *NullableFarmDatastoreSettingsInfo) Set(val *FarmDatastoreSettingsInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableFarmDatastoreSettingsInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableFarmDatastoreSettingsInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFarmDatastoreSettingsInfo(val *FarmDatastoreSettingsInfo) *NullableFarmDatastoreSettingsInfo {
	return &NullableFarmDatastoreSettingsInfo{value: val, isSet: true}
}

func (v NullableFarmDatastoreSettingsInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFarmDatastoreSettingsInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
