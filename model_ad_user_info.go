/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2111
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// ADUserInfo Information related to AD User.
type ADUserInfo struct {
	// DNS name of the domain in which this user or group belongs to.
	Domain *string `json:"domain,omitempty"`
	// Guids of the user's groups in RFC 4122 format.
	GroupGuids *[]string `json:"group_guids,omitempty"`
	// List of unique SIDs of the groups, this user or group belongs to.
	GroupSids *[]string `json:"group_sids,omitempty"`
	// GUID of the user in RFC 4122 format.
	UserGuid *string `json:"user_guid,omitempty"`
	// User Principal name(UPN) of this user.
	UserPrincipalName *string `json:"user_principal_name,omitempty"`
	// Unique SID representing this AD User.
	UserSid *string `json:"user_sid,omitempty"`
	// Username of this user.
	Username *string `json:"username,omitempty"`
}

// NewADUserInfo instantiates a new ADUserInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewADUserInfo() *ADUserInfo {
	this := ADUserInfo{}
	return &this
}

// NewADUserInfoWithDefaults instantiates a new ADUserInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewADUserInfoWithDefaults() *ADUserInfo {
	this := ADUserInfo{}
	return &this
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *ADUserInfo) GetDomain() string {
	if o == nil || o.Domain == nil {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADUserInfo) GetDomainOk() (*string, bool) {
	if o == nil || o.Domain == nil {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *ADUserInfo) HasDomain() bool {
	if o != nil && o.Domain != nil {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *ADUserInfo) SetDomain(v string) {
	o.Domain = &v
}

// GetGroupGuids returns the GroupGuids field value if set, zero value otherwise.
func (o *ADUserInfo) GetGroupGuids() []string {
	if o == nil || o.GroupGuids == nil {
		var ret []string
		return ret
	}
	return *o.GroupGuids
}

// GetGroupGuidsOk returns a tuple with the GroupGuids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADUserInfo) GetGroupGuidsOk() (*[]string, bool) {
	if o == nil || o.GroupGuids == nil {
		return nil, false
	}
	return o.GroupGuids, true
}

// HasGroupGuids returns a boolean if a field has been set.
func (o *ADUserInfo) HasGroupGuids() bool {
	if o != nil && o.GroupGuids != nil {
		return true
	}

	return false
}

// SetGroupGuids gets a reference to the given []string and assigns it to the GroupGuids field.
func (o *ADUserInfo) SetGroupGuids(v []string) {
	o.GroupGuids = &v
}

// GetGroupSids returns the GroupSids field value if set, zero value otherwise.
func (o *ADUserInfo) GetGroupSids() []string {
	if o == nil || o.GroupSids == nil {
		var ret []string
		return ret
	}
	return *o.GroupSids
}

// GetGroupSidsOk returns a tuple with the GroupSids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADUserInfo) GetGroupSidsOk() (*[]string, bool) {
	if o == nil || o.GroupSids == nil {
		return nil, false
	}
	return o.GroupSids, true
}

// HasGroupSids returns a boolean if a field has been set.
func (o *ADUserInfo) HasGroupSids() bool {
	if o != nil && o.GroupSids != nil {
		return true
	}

	return false
}

// SetGroupSids gets a reference to the given []string and assigns it to the GroupSids field.
func (o *ADUserInfo) SetGroupSids(v []string) {
	o.GroupSids = &v
}

// GetUserGuid returns the UserGuid field value if set, zero value otherwise.
func (o *ADUserInfo) GetUserGuid() string {
	if o == nil || o.UserGuid == nil {
		var ret string
		return ret
	}
	return *o.UserGuid
}

// GetUserGuidOk returns a tuple with the UserGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADUserInfo) GetUserGuidOk() (*string, bool) {
	if o == nil || o.UserGuid == nil {
		return nil, false
	}
	return o.UserGuid, true
}

// HasUserGuid returns a boolean if a field has been set.
func (o *ADUserInfo) HasUserGuid() bool {
	if o != nil && o.UserGuid != nil {
		return true
	}

	return false
}

// SetUserGuid gets a reference to the given string and assigns it to the UserGuid field.
func (o *ADUserInfo) SetUserGuid(v string) {
	o.UserGuid = &v
}

// GetUserPrincipalName returns the UserPrincipalName field value if set, zero value otherwise.
func (o *ADUserInfo) GetUserPrincipalName() string {
	if o == nil || o.UserPrincipalName == nil {
		var ret string
		return ret
	}
	return *o.UserPrincipalName
}

// GetUserPrincipalNameOk returns a tuple with the UserPrincipalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADUserInfo) GetUserPrincipalNameOk() (*string, bool) {
	if o == nil || o.UserPrincipalName == nil {
		return nil, false
	}
	return o.UserPrincipalName, true
}

// HasUserPrincipalName returns a boolean if a field has been set.
func (o *ADUserInfo) HasUserPrincipalName() bool {
	if o != nil && o.UserPrincipalName != nil {
		return true
	}

	return false
}

// SetUserPrincipalName gets a reference to the given string and assigns it to the UserPrincipalName field.
func (o *ADUserInfo) SetUserPrincipalName(v string) {
	o.UserPrincipalName = &v
}

// GetUserSid returns the UserSid field value if set, zero value otherwise.
func (o *ADUserInfo) GetUserSid() string {
	if o == nil || o.UserSid == nil {
		var ret string
		return ret
	}
	return *o.UserSid
}

// GetUserSidOk returns a tuple with the UserSid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADUserInfo) GetUserSidOk() (*string, bool) {
	if o == nil || o.UserSid == nil {
		return nil, false
	}
	return o.UserSid, true
}

// HasUserSid returns a boolean if a field has been set.
func (o *ADUserInfo) HasUserSid() bool {
	if o != nil && o.UserSid != nil {
		return true
	}

	return false
}

// SetUserSid gets a reference to the given string and assigns it to the UserSid field.
func (o *ADUserInfo) SetUserSid(v string) {
	o.UserSid = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ADUserInfo) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADUserInfo) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ADUserInfo) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ADUserInfo) SetUsername(v string) {
	o.Username = &v
}

func (o ADUserInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Domain != nil {
		toSerialize["domain"] = o.Domain
	}
	if o.GroupGuids != nil {
		toSerialize["group_guids"] = o.GroupGuids
	}
	if o.GroupSids != nil {
		toSerialize["group_sids"] = o.GroupSids
	}
	if o.UserGuid != nil {
		toSerialize["user_guid"] = o.UserGuid
	}
	if o.UserPrincipalName != nil {
		toSerialize["user_principal_name"] = o.UserPrincipalName
	}
	if o.UserSid != nil {
		toSerialize["user_sid"] = o.UserSid
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	return json.Marshal(toSerialize)
}

type NullableADUserInfo struct {
	value *ADUserInfo
	isSet bool
}

func (v NullableADUserInfo) Get() *ADUserInfo {
	return v.value
}

func (v *NullableADUserInfo) Set(val *ADUserInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableADUserInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableADUserInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableADUserInfo(val *ADUserInfo) *NullableADUserInfo {
	return &NullableADUserInfo{value: val, isSet: true}
}

func (v NullableADUserInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableADUserInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
