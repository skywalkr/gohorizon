/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SessionSendMessageSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SessionSendMessageSpec{}

// SessionSendMessageSpec Information required to send message to sessions.
type SessionSendMessageSpec struct {
	// Message to be sent to session(s).
	Message string `json:"message"`
	// Type of message to be sent to session(s). * ERROR: Message is of error type. * WARNING: Message is of warning type. * INFO: Message is of information type.
	MessageType string `json:"message_type"`
	// List of session ids to which message is to be sent
	SessionIds []string `json:"session_ids"`
}

type _SessionSendMessageSpec SessionSendMessageSpec

// NewSessionSendMessageSpec instantiates a new SessionSendMessageSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionSendMessageSpec(message string, messageType string, sessionIds []string) *SessionSendMessageSpec {
	this := SessionSendMessageSpec{}
	this.Message = message
	this.MessageType = messageType
	this.SessionIds = sessionIds
	return &this
}

// NewSessionSendMessageSpecWithDefaults instantiates a new SessionSendMessageSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionSendMessageSpecWithDefaults() *SessionSendMessageSpec {
	this := SessionSendMessageSpec{}
	return &this
}

// GetMessage returns the Message field value
func (o *SessionSendMessageSpec) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *SessionSendMessageSpec) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *SessionSendMessageSpec) SetMessage(v string) {
	o.Message = v
}

// GetMessageType returns the MessageType field value
func (o *SessionSendMessageSpec) GetMessageType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MessageType
}

// GetMessageTypeOk returns a tuple with the MessageType field value
// and a boolean to check if the value has been set.
func (o *SessionSendMessageSpec) GetMessageTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MessageType, true
}

// SetMessageType sets field value
func (o *SessionSendMessageSpec) SetMessageType(v string) {
	o.MessageType = v
}

// GetSessionIds returns the SessionIds field value
func (o *SessionSendMessageSpec) GetSessionIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SessionIds
}

// GetSessionIdsOk returns a tuple with the SessionIds field value
// and a boolean to check if the value has been set.
func (o *SessionSendMessageSpec) GetSessionIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SessionIds, true
}

// SetSessionIds sets field value
func (o *SessionSendMessageSpec) SetSessionIds(v []string) {
	o.SessionIds = v
}

func (o SessionSendMessageSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SessionSendMessageSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message
	toSerialize["message_type"] = o.MessageType
	toSerialize["session_ids"] = o.SessionIds
	return toSerialize, nil
}

func (o *SessionSendMessageSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
		"message_type",
		"session_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSessionSendMessageSpec := _SessionSendMessageSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSessionSendMessageSpec)

	if err != nil {
		return err
	}

	*o = SessionSendMessageSpec(varSessionSendMessageSpec)

	return err
}

type NullableSessionSendMessageSpec struct {
	value *SessionSendMessageSpec
	isSet bool
}

func (v NullableSessionSendMessageSpec) Get() *SessionSendMessageSpec {
	return v.value
}

func (v *NullableSessionSendMessageSpec) Set(val *SessionSendMessageSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionSendMessageSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionSendMessageSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionSendMessageSpec(val *SessionSendMessageSpec) *NullableSessionSendMessageSpec {
	return &NullableSessionSendMessageSpec{value: val, isSet: true}
}

func (v NullableSessionSendMessageSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionSendMessageSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


