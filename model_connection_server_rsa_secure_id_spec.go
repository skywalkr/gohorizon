/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConnectionServerRSASecureIdSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionServerRSASecureIdSpec{}

// ConnectionServerRSASecureIdSpec Information related to Connection server RSA SecureId authentication settings.
type ConnectionServerRSASecureIdSpec struct {
	// When set to TRUE the SecureID node secret is cleared
	ClearNodeSecret *bool `json:"clear_node_secret,omitempty"`
	// Indicates how SecureID names map to AD usernames. It is false for not mapped.
	NameMapping *bool `json:"name_mapping,omitempty"`
	// Indicates whether SecureID authentication is required.
	SecureIdEnabled bool `json:"secure_id_enabled"`
	// Binary contents of the SecurID sdconf.rec file.
	SecurityFileData *string `json:"security_file_data,omitempty" validate:"regexp=^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$"`
}

type _ConnectionServerRSASecureIdSpec ConnectionServerRSASecureIdSpec

// NewConnectionServerRSASecureIdSpec instantiates a new ConnectionServerRSASecureIdSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionServerRSASecureIdSpec(secureIdEnabled bool) *ConnectionServerRSASecureIdSpec {
	this := ConnectionServerRSASecureIdSpec{}
	this.SecureIdEnabled = secureIdEnabled
	return &this
}

// NewConnectionServerRSASecureIdSpecWithDefaults instantiates a new ConnectionServerRSASecureIdSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionServerRSASecureIdSpecWithDefaults() *ConnectionServerRSASecureIdSpec {
	this := ConnectionServerRSASecureIdSpec{}
	return &this
}

// GetClearNodeSecret returns the ClearNodeSecret field value if set, zero value otherwise.
func (o *ConnectionServerRSASecureIdSpec) GetClearNodeSecret() bool {
	if o == nil || IsNil(o.ClearNodeSecret) {
		var ret bool
		return ret
	}
	return *o.ClearNodeSecret
}

// GetClearNodeSecretOk returns a tuple with the ClearNodeSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerRSASecureIdSpec) GetClearNodeSecretOk() (*bool, bool) {
	if o == nil || IsNil(o.ClearNodeSecret) {
		return nil, false
	}
	return o.ClearNodeSecret, true
}

// HasClearNodeSecret returns a boolean if a field has been set.
func (o *ConnectionServerRSASecureIdSpec) HasClearNodeSecret() bool {
	if o != nil && !IsNil(o.ClearNodeSecret) {
		return true
	}

	return false
}

// SetClearNodeSecret gets a reference to the given bool and assigns it to the ClearNodeSecret field.
func (o *ConnectionServerRSASecureIdSpec) SetClearNodeSecret(v bool) {
	o.ClearNodeSecret = &v
}

// GetNameMapping returns the NameMapping field value if set, zero value otherwise.
func (o *ConnectionServerRSASecureIdSpec) GetNameMapping() bool {
	if o == nil || IsNil(o.NameMapping) {
		var ret bool
		return ret
	}
	return *o.NameMapping
}

// GetNameMappingOk returns a tuple with the NameMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerRSASecureIdSpec) GetNameMappingOk() (*bool, bool) {
	if o == nil || IsNil(o.NameMapping) {
		return nil, false
	}
	return o.NameMapping, true
}

// HasNameMapping returns a boolean if a field has been set.
func (o *ConnectionServerRSASecureIdSpec) HasNameMapping() bool {
	if o != nil && !IsNil(o.NameMapping) {
		return true
	}

	return false
}

// SetNameMapping gets a reference to the given bool and assigns it to the NameMapping field.
func (o *ConnectionServerRSASecureIdSpec) SetNameMapping(v bool) {
	o.NameMapping = &v
}

// GetSecureIdEnabled returns the SecureIdEnabled field value
func (o *ConnectionServerRSASecureIdSpec) GetSecureIdEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SecureIdEnabled
}

// GetSecureIdEnabledOk returns a tuple with the SecureIdEnabled field value
// and a boolean to check if the value has been set.
func (o *ConnectionServerRSASecureIdSpec) GetSecureIdEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecureIdEnabled, true
}

// SetSecureIdEnabled sets field value
func (o *ConnectionServerRSASecureIdSpec) SetSecureIdEnabled(v bool) {
	o.SecureIdEnabled = v
}

// GetSecurityFileData returns the SecurityFileData field value if set, zero value otherwise.
func (o *ConnectionServerRSASecureIdSpec) GetSecurityFileData() string {
	if o == nil || IsNil(o.SecurityFileData) {
		var ret string
		return ret
	}
	return *o.SecurityFileData
}

// GetSecurityFileDataOk returns a tuple with the SecurityFileData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerRSASecureIdSpec) GetSecurityFileDataOk() (*string, bool) {
	if o == nil || IsNil(o.SecurityFileData) {
		return nil, false
	}
	return o.SecurityFileData, true
}

// HasSecurityFileData returns a boolean if a field has been set.
func (o *ConnectionServerRSASecureIdSpec) HasSecurityFileData() bool {
	if o != nil && !IsNil(o.SecurityFileData) {
		return true
	}

	return false
}

// SetSecurityFileData gets a reference to the given string and assigns it to the SecurityFileData field.
func (o *ConnectionServerRSASecureIdSpec) SetSecurityFileData(v string) {
	o.SecurityFileData = &v
}

func (o ConnectionServerRSASecureIdSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionServerRSASecureIdSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClearNodeSecret) {
		toSerialize["clear_node_secret"] = o.ClearNodeSecret
	}
	if !IsNil(o.NameMapping) {
		toSerialize["name_mapping"] = o.NameMapping
	}
	toSerialize["secure_id_enabled"] = o.SecureIdEnabled
	if !IsNil(o.SecurityFileData) {
		toSerialize["security_file_data"] = o.SecurityFileData
	}
	return toSerialize, nil
}

func (o *ConnectionServerRSASecureIdSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"secure_id_enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnectionServerRSASecureIdSpec := _ConnectionServerRSASecureIdSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConnectionServerRSASecureIdSpec)

	if err != nil {
		return err
	}

	*o = ConnectionServerRSASecureIdSpec(varConnectionServerRSASecureIdSpec)

	return err
}

type NullableConnectionServerRSASecureIdSpec struct {
	value *ConnectionServerRSASecureIdSpec
	isSet bool
}

func (v NullableConnectionServerRSASecureIdSpec) Get() *ConnectionServerRSASecureIdSpec {
	return v.value
}

func (v *NullableConnectionServerRSASecureIdSpec) Set(val *ConnectionServerRSASecureIdSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionServerRSASecureIdSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionServerRSASecureIdSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionServerRSASecureIdSpec(val *ConnectionServerRSASecureIdSpec) *NullableConnectionServerRSASecureIdSpec {
	return &NullableConnectionServerRSASecureIdSpec{value: val, isSet: true}
}

func (v NullableConnectionServerRSASecureIdSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionServerRSASecureIdSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


