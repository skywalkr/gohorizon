/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the ADDomainInfoV3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ADDomainInfoV3{}

// ADDomainInfoV3 Information related to AD Domains of the environment.
type ADDomainInfoV3 struct {
	AdDomainAdvancedSettings *ADDomainAdvancedSettingsInfo `json:"ad_domain_advanced_settings,omitempty"`
	// Auxiliary service accounts information of untrusted domain.
	AuxiliaryAccounts []ADDomainAuxiliaryServiceAccountInfo `json:"auxiliary_accounts,omitempty"`
	// DNS name of the AD Domain.
	DnsName *string `json:"dns_name,omitempty"`
	// AD Domain Type. * CONNECTION_SERVER_DOMAIN: The domain having trust with connection server domain. * NO_TRUST_DOMAIN: The domain not having any trust with connection server domain.
	DomainType *string `json:"domain_type,omitempty"`
	// Unique SID representing AD Domain.
	Id *string `json:"id,omitempty"`
	// NetBIOS name of the AD Domain.
	NetbiosName *string `json:"netbios_name,omitempty"`
	PrimaryAccount *ADDomainPrimaryServiceAccountInfo `json:"primary_account,omitempty"`
}

// NewADDomainInfoV3 instantiates a new ADDomainInfoV3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewADDomainInfoV3() *ADDomainInfoV3 {
	this := ADDomainInfoV3{}
	return &this
}

// NewADDomainInfoV3WithDefaults instantiates a new ADDomainInfoV3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewADDomainInfoV3WithDefaults() *ADDomainInfoV3 {
	this := ADDomainInfoV3{}
	return &this
}

// GetAdDomainAdvancedSettings returns the AdDomainAdvancedSettings field value if set, zero value otherwise.
func (o *ADDomainInfoV3) GetAdDomainAdvancedSettings() ADDomainAdvancedSettingsInfo {
	if o == nil || IsNil(o.AdDomainAdvancedSettings) {
		var ret ADDomainAdvancedSettingsInfo
		return ret
	}
	return *o.AdDomainAdvancedSettings
}

// GetAdDomainAdvancedSettingsOk returns a tuple with the AdDomainAdvancedSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADDomainInfoV3) GetAdDomainAdvancedSettingsOk() (*ADDomainAdvancedSettingsInfo, bool) {
	if o == nil || IsNil(o.AdDomainAdvancedSettings) {
		return nil, false
	}
	return o.AdDomainAdvancedSettings, true
}

// HasAdDomainAdvancedSettings returns a boolean if a field has been set.
func (o *ADDomainInfoV3) HasAdDomainAdvancedSettings() bool {
	if o != nil && !IsNil(o.AdDomainAdvancedSettings) {
		return true
	}

	return false
}

// SetAdDomainAdvancedSettings gets a reference to the given ADDomainAdvancedSettingsInfo and assigns it to the AdDomainAdvancedSettings field.
func (o *ADDomainInfoV3) SetAdDomainAdvancedSettings(v ADDomainAdvancedSettingsInfo) {
	o.AdDomainAdvancedSettings = &v
}

// GetAuxiliaryAccounts returns the AuxiliaryAccounts field value if set, zero value otherwise.
func (o *ADDomainInfoV3) GetAuxiliaryAccounts() []ADDomainAuxiliaryServiceAccountInfo {
	if o == nil || IsNil(o.AuxiliaryAccounts) {
		var ret []ADDomainAuxiliaryServiceAccountInfo
		return ret
	}
	return o.AuxiliaryAccounts
}

// GetAuxiliaryAccountsOk returns a tuple with the AuxiliaryAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADDomainInfoV3) GetAuxiliaryAccountsOk() ([]ADDomainAuxiliaryServiceAccountInfo, bool) {
	if o == nil || IsNil(o.AuxiliaryAccounts) {
		return nil, false
	}
	return o.AuxiliaryAccounts, true
}

// HasAuxiliaryAccounts returns a boolean if a field has been set.
func (o *ADDomainInfoV3) HasAuxiliaryAccounts() bool {
	if o != nil && !IsNil(o.AuxiliaryAccounts) {
		return true
	}

	return false
}

// SetAuxiliaryAccounts gets a reference to the given []ADDomainAuxiliaryServiceAccountInfo and assigns it to the AuxiliaryAccounts field.
func (o *ADDomainInfoV3) SetAuxiliaryAccounts(v []ADDomainAuxiliaryServiceAccountInfo) {
	o.AuxiliaryAccounts = v
}

// GetDnsName returns the DnsName field value if set, zero value otherwise.
func (o *ADDomainInfoV3) GetDnsName() string {
	if o == nil || IsNil(o.DnsName) {
		var ret string
		return ret
	}
	return *o.DnsName
}

// GetDnsNameOk returns a tuple with the DnsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADDomainInfoV3) GetDnsNameOk() (*string, bool) {
	if o == nil || IsNil(o.DnsName) {
		return nil, false
	}
	return o.DnsName, true
}

// HasDnsName returns a boolean if a field has been set.
func (o *ADDomainInfoV3) HasDnsName() bool {
	if o != nil && !IsNil(o.DnsName) {
		return true
	}

	return false
}

// SetDnsName gets a reference to the given string and assigns it to the DnsName field.
func (o *ADDomainInfoV3) SetDnsName(v string) {
	o.DnsName = &v
}

// GetDomainType returns the DomainType field value if set, zero value otherwise.
func (o *ADDomainInfoV3) GetDomainType() string {
	if o == nil || IsNil(o.DomainType) {
		var ret string
		return ret
	}
	return *o.DomainType
}

// GetDomainTypeOk returns a tuple with the DomainType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADDomainInfoV3) GetDomainTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DomainType) {
		return nil, false
	}
	return o.DomainType, true
}

// HasDomainType returns a boolean if a field has been set.
func (o *ADDomainInfoV3) HasDomainType() bool {
	if o != nil && !IsNil(o.DomainType) {
		return true
	}

	return false
}

// SetDomainType gets a reference to the given string and assigns it to the DomainType field.
func (o *ADDomainInfoV3) SetDomainType(v string) {
	o.DomainType = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ADDomainInfoV3) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADDomainInfoV3) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ADDomainInfoV3) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ADDomainInfoV3) SetId(v string) {
	o.Id = &v
}

// GetNetbiosName returns the NetbiosName field value if set, zero value otherwise.
func (o *ADDomainInfoV3) GetNetbiosName() string {
	if o == nil || IsNil(o.NetbiosName) {
		var ret string
		return ret
	}
	return *o.NetbiosName
}

// GetNetbiosNameOk returns a tuple with the NetbiosName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADDomainInfoV3) GetNetbiosNameOk() (*string, bool) {
	if o == nil || IsNil(o.NetbiosName) {
		return nil, false
	}
	return o.NetbiosName, true
}

// HasNetbiosName returns a boolean if a field has been set.
func (o *ADDomainInfoV3) HasNetbiosName() bool {
	if o != nil && !IsNil(o.NetbiosName) {
		return true
	}

	return false
}

// SetNetbiosName gets a reference to the given string and assigns it to the NetbiosName field.
func (o *ADDomainInfoV3) SetNetbiosName(v string) {
	o.NetbiosName = &v
}

// GetPrimaryAccount returns the PrimaryAccount field value if set, zero value otherwise.
func (o *ADDomainInfoV3) GetPrimaryAccount() ADDomainPrimaryServiceAccountInfo {
	if o == nil || IsNil(o.PrimaryAccount) {
		var ret ADDomainPrimaryServiceAccountInfo
		return ret
	}
	return *o.PrimaryAccount
}

// GetPrimaryAccountOk returns a tuple with the PrimaryAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADDomainInfoV3) GetPrimaryAccountOk() (*ADDomainPrimaryServiceAccountInfo, bool) {
	if o == nil || IsNil(o.PrimaryAccount) {
		return nil, false
	}
	return o.PrimaryAccount, true
}

// HasPrimaryAccount returns a boolean if a field has been set.
func (o *ADDomainInfoV3) HasPrimaryAccount() bool {
	if o != nil && !IsNil(o.PrimaryAccount) {
		return true
	}

	return false
}

// SetPrimaryAccount gets a reference to the given ADDomainPrimaryServiceAccountInfo and assigns it to the PrimaryAccount field.
func (o *ADDomainInfoV3) SetPrimaryAccount(v ADDomainPrimaryServiceAccountInfo) {
	o.PrimaryAccount = &v
}

func (o ADDomainInfoV3) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ADDomainInfoV3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdDomainAdvancedSettings) {
		toSerialize["ad_domain_advanced_settings"] = o.AdDomainAdvancedSettings
	}
	if !IsNil(o.AuxiliaryAccounts) {
		toSerialize["auxiliary_accounts"] = o.AuxiliaryAccounts
	}
	if !IsNil(o.DnsName) {
		toSerialize["dns_name"] = o.DnsName
	}
	if !IsNil(o.DomainType) {
		toSerialize["domain_type"] = o.DomainType
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.NetbiosName) {
		toSerialize["netbios_name"] = o.NetbiosName
	}
	if !IsNil(o.PrimaryAccount) {
		toSerialize["primary_account"] = o.PrimaryAccount
	}
	return toSerialize, nil
}

type NullableADDomainInfoV3 struct {
	value *ADDomainInfoV3
	isSet bool
}

func (v NullableADDomainInfoV3) Get() *ADDomainInfoV3 {
	return v.value
}

func (v *NullableADDomainInfoV3) Set(val *ADDomainInfoV3) {
	v.value = val
	v.isSet = true
}

func (v NullableADDomainInfoV3) IsSet() bool {
	return v.isSet
}

func (v *NullableADDomainInfoV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableADDomainInfoV3(val *ADDomainInfoV3) *NullableADDomainInfoV3 {
	return &NullableADDomainInfoV3{value: val, isSet: true}
}

func (v NullableADDomainInfoV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableADDomainInfoV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


