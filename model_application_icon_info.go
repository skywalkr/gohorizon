/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the ApplicationIconInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationIconInfo{}

// ApplicationIconInfo Application icon information.
type ApplicationIconInfo struct {
	// An application icon could be shared by multiple application pools. This is a set of application pool IDs this icon represents. Caller should have permission to POOL_VIEW privilege on the access group of any of the associated application pools for this field to be populated.<br>
	ApplicationPoolIds []string `json:"application_pool_ids,omitempty"`
	// Icon image data in PNG format.
	Data *string `json:"data,omitempty" validate:"regexp=^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$"`
	// Icon height.
	Height *int32 `json:"height,omitempty"`
	// MD5 hash of icon image data, to enable quick icon lookup.
	IconHash *string `json:"icon_hash,omitempty"`
	// Source of the application icon. The icon can be from Machine/RDS Agent or custom icon. * HORIZON_AGENT: When the icon is from machine/RDS agent. * HORIZON_CONNECTION_SERVER: When the icon is uploaded by the administrator through connection server.
	IconSource *string `json:"icon_source,omitempty"`
	// Unique ID representing application icon.
	Id *string `json:"id,omitempty"`
	// Icon width.
	Width *int32 `json:"width,omitempty"`
}

// NewApplicationIconInfo instantiates a new ApplicationIconInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationIconInfo() *ApplicationIconInfo {
	this := ApplicationIconInfo{}
	return &this
}

// NewApplicationIconInfoWithDefaults instantiates a new ApplicationIconInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationIconInfoWithDefaults() *ApplicationIconInfo {
	this := ApplicationIconInfo{}
	return &this
}

// GetApplicationPoolIds returns the ApplicationPoolIds field value if set, zero value otherwise.
func (o *ApplicationIconInfo) GetApplicationPoolIds() []string {
	if o == nil || IsNil(o.ApplicationPoolIds) {
		var ret []string
		return ret
	}
	return o.ApplicationPoolIds
}

// GetApplicationPoolIdsOk returns a tuple with the ApplicationPoolIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationIconInfo) GetApplicationPoolIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ApplicationPoolIds) {
		return nil, false
	}
	return o.ApplicationPoolIds, true
}

// HasApplicationPoolIds returns a boolean if a field has been set.
func (o *ApplicationIconInfo) HasApplicationPoolIds() bool {
	if o != nil && !IsNil(o.ApplicationPoolIds) {
		return true
	}

	return false
}

// SetApplicationPoolIds gets a reference to the given []string and assigns it to the ApplicationPoolIds field.
func (o *ApplicationIconInfo) SetApplicationPoolIds(v []string) {
	o.ApplicationPoolIds = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ApplicationIconInfo) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationIconInfo) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ApplicationIconInfo) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *ApplicationIconInfo) SetData(v string) {
	o.Data = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *ApplicationIconInfo) GetHeight() int32 {
	if o == nil || IsNil(o.Height) {
		var ret int32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationIconInfo) GetHeightOk() (*int32, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *ApplicationIconInfo) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int32 and assigns it to the Height field.
func (o *ApplicationIconInfo) SetHeight(v int32) {
	o.Height = &v
}

// GetIconHash returns the IconHash field value if set, zero value otherwise.
func (o *ApplicationIconInfo) GetIconHash() string {
	if o == nil || IsNil(o.IconHash) {
		var ret string
		return ret
	}
	return *o.IconHash
}

// GetIconHashOk returns a tuple with the IconHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationIconInfo) GetIconHashOk() (*string, bool) {
	if o == nil || IsNil(o.IconHash) {
		return nil, false
	}
	return o.IconHash, true
}

// HasIconHash returns a boolean if a field has been set.
func (o *ApplicationIconInfo) HasIconHash() bool {
	if o != nil && !IsNil(o.IconHash) {
		return true
	}

	return false
}

// SetIconHash gets a reference to the given string and assigns it to the IconHash field.
func (o *ApplicationIconInfo) SetIconHash(v string) {
	o.IconHash = &v
}

// GetIconSource returns the IconSource field value if set, zero value otherwise.
func (o *ApplicationIconInfo) GetIconSource() string {
	if o == nil || IsNil(o.IconSource) {
		var ret string
		return ret
	}
	return *o.IconSource
}

// GetIconSourceOk returns a tuple with the IconSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationIconInfo) GetIconSourceOk() (*string, bool) {
	if o == nil || IsNil(o.IconSource) {
		return nil, false
	}
	return o.IconSource, true
}

// HasIconSource returns a boolean if a field has been set.
func (o *ApplicationIconInfo) HasIconSource() bool {
	if o != nil && !IsNil(o.IconSource) {
		return true
	}

	return false
}

// SetIconSource gets a reference to the given string and assigns it to the IconSource field.
func (o *ApplicationIconInfo) SetIconSource(v string) {
	o.IconSource = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApplicationIconInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationIconInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApplicationIconInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApplicationIconInfo) SetId(v string) {
	o.Id = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *ApplicationIconInfo) GetWidth() int32 {
	if o == nil || IsNil(o.Width) {
		var ret int32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationIconInfo) GetWidthOk() (*int32, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *ApplicationIconInfo) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given int32 and assigns it to the Width field.
func (o *ApplicationIconInfo) SetWidth(v int32) {
	o.Width = &v
}

func (o ApplicationIconInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationIconInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplicationPoolIds) {
		toSerialize["application_pool_ids"] = o.ApplicationPoolIds
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !IsNil(o.IconHash) {
		toSerialize["icon_hash"] = o.IconHash
	}
	if !IsNil(o.IconSource) {
		toSerialize["icon_source"] = o.IconSource
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	return toSerialize, nil
}

type NullableApplicationIconInfo struct {
	value *ApplicationIconInfo
	isSet bool
}

func (v NullableApplicationIconInfo) Get() *ApplicationIconInfo {
	return v.value
}

func (v *NullableApplicationIconInfo) Set(val *ApplicationIconInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationIconInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationIconInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationIconInfo(val *ApplicationIconInfo) *NullableApplicationIconInfo {
	return &NullableApplicationIconInfo{value: val, isSet: true}
}

func (v NullableApplicationIconInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationIconInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


