/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GlobalApplicationEntitlementUpdateSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GlobalApplicationEntitlementUpdateSpec{}

// GlobalApplicationEntitlementUpdateSpec Information required to update global application entitlement.
type GlobalApplicationEntitlementUpdateSpec struct {
	// Global Application Entitlement that can be used as backup for this Global Application Entitlement.
	BackupGaeId *string `json:"backup_gae_id,omitempty"`
	// Name of the category folder in the user's OS containing a shortcut to the entitlement. The property will not be set if the entitlement does not belong to a category.
	CategoryFolderName *string `json:"category_folder_name,omitempty"`
	// List of connection server restriction tags to which the access to the global application entitlement is restricted. Empty or null list means that entitlement can be accessed from any connection server.
	CsRestrictionTags []string `json:"cs_restriction_tags,omitempty"`
	// The default display protocol for the global application entitlement. This can only be set to \"PCOIP\" or \"BLAST\". If this application's Farm's or desktop pool's allow_users_to_choose_protocol is set to false, then default_display_protocol must match that default_display_protocol of farm or desktop pool. * PCOIP: PCoIP protocol. * BLAST: BLAST protocol.
	DefaultDisplayProtocol string `json:"default_display_protocol"`
	// Description of global application entitlement.
	Description *string `json:"description,omitempty"`
	// The display name is the name that users will see when they connect using Horizon View Client. If display_name is left blank, it defaults to name.
	DisplayName string `json:"display_name"`
	// Indicates whether client restrictions to be applied to global application entitlement, currently it is valid for published application pools.
	EnableClientRestrictions bool `json:"enable_client_restrictions"`
	// If value is set to true, this global application entitlement can be pre-launched. This property can be set to true only if multi_session_mode is set to \"DISABLED\".
	EnablePreLaunch bool `json:"enable_pre_launch"`
	// Indicates whether the global application entitlement is enabled.
	Enabled bool `json:"enabled"`
	// ID of the federated access group with which the global application entitlement is to be associated. They can also be used for delegated administration.
	FederatedAccessGroupId string `json:"federated_access_group_id"`
	// Multi-session mode for this entitlement. A global application entitlement launched in multi-session mode does not support reconnect behavior when user logs in from a different client instance. * DISABLED: Multi-session is not supported for this application. * ENABLED_DEFAULT_OFF: Multi-session is supported for this application but is disabled by default. The client would need to explicitly request multi-session launch, if wanted. If a legacy client is used, this will always result in a single-session application launch. * ENABLED_DEFAULT_ON: Multi-session mode is supported for this application and is enabled by default. The client can request explicitly for single-session launch, if wanted. If a legacy client is used, this will always result in a multi-session application launch. * ENABLED_ENFORCED: Multi-session is supported for this application and it is enforced. The client can not select to launch this application as a single-session application.
	MultiSessionMode string `json:"multi_session_mode"`
	// Indicates whether automatic session clean up is enabled.
	MultipleSessionAutoClean bool `json:"multiple_session_auto_clean"`
	// Unique name used to identify the global application entitlement.
	Name string `json:"name"`
	// Indicates whether it should fail if a home site isn't defined for this global application entitlement. This property cannot be set to true if use_home_site is set to false.
	RequireHomeSite bool `json:"require_home_site"`
	// Scope for this global application entitlement. Visibility and Placement policies are defined by this value. * WITHIN_POD: Within POD Policy: Local pod will be used for this policy. If this policy is for visibility, search for existing session will happen only in local pod. If this policy is for placement, session will always be placed on local pod. * WITHIN_SITE: Within Site Policy: Site will be used for this policy. If this policy is for visibility, search for existing session will happen only from site. If this policy is for placement, session will be placed on site. * ALL_SITES: All Sites Policy: Any pod can be used for this action. If this policy is for visibility, search for existing session will span all pods in LMV set. If this policy is for placement, session can be placed on any pod in LMV set.
	Scope string `json:"scope"`
	// Locations of the category folder in the user's OS containing a shortcut to the desktop. This property is required if category_folder_name is set.
	ShortcutLocationsV2 []string `json:"shortcut_locations_v2,omitempty"`
	// Indicates whether a pod in the user's home site is used to start the search or the current site is used.
	UseHomeSite bool `json:"use_home_site"`
}

type _GlobalApplicationEntitlementUpdateSpec GlobalApplicationEntitlementUpdateSpec

// NewGlobalApplicationEntitlementUpdateSpec instantiates a new GlobalApplicationEntitlementUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalApplicationEntitlementUpdateSpec(defaultDisplayProtocol string, displayName string, enableClientRestrictions bool, enablePreLaunch bool, enabled bool, federatedAccessGroupId string, multiSessionMode string, multipleSessionAutoClean bool, name string, requireHomeSite bool, scope string, useHomeSite bool) *GlobalApplicationEntitlementUpdateSpec {
	this := GlobalApplicationEntitlementUpdateSpec{}
	this.DefaultDisplayProtocol = defaultDisplayProtocol
	this.DisplayName = displayName
	this.EnableClientRestrictions = enableClientRestrictions
	this.EnablePreLaunch = enablePreLaunch
	this.Enabled = enabled
	this.FederatedAccessGroupId = federatedAccessGroupId
	this.MultiSessionMode = multiSessionMode
	this.MultipleSessionAutoClean = multipleSessionAutoClean
	this.Name = name
	this.RequireHomeSite = requireHomeSite
	this.Scope = scope
	this.UseHomeSite = useHomeSite
	return &this
}

// NewGlobalApplicationEntitlementUpdateSpecWithDefaults instantiates a new GlobalApplicationEntitlementUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalApplicationEntitlementUpdateSpecWithDefaults() *GlobalApplicationEntitlementUpdateSpec {
	this := GlobalApplicationEntitlementUpdateSpec{}
	return &this
}

// GetBackupGaeId returns the BackupGaeId field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementUpdateSpec) GetBackupGaeId() string {
	if o == nil || IsNil(o.BackupGaeId) {
		var ret string
		return ret
	}
	return *o.BackupGaeId
}

// GetBackupGaeIdOk returns a tuple with the BackupGaeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementUpdateSpec) GetBackupGaeIdOk() (*string, bool) {
	if o == nil || IsNil(o.BackupGaeId) {
		return nil, false
	}
	return o.BackupGaeId, true
}

// HasBackupGaeId returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementUpdateSpec) HasBackupGaeId() bool {
	if o != nil && !IsNil(o.BackupGaeId) {
		return true
	}

	return false
}

// SetBackupGaeId gets a reference to the given string and assigns it to the BackupGaeId field.
func (o *GlobalApplicationEntitlementUpdateSpec) SetBackupGaeId(v string) {
	o.BackupGaeId = &v
}

// GetCategoryFolderName returns the CategoryFolderName field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementUpdateSpec) GetCategoryFolderName() string {
	if o == nil || IsNil(o.CategoryFolderName) {
		var ret string
		return ret
	}
	return *o.CategoryFolderName
}

// GetCategoryFolderNameOk returns a tuple with the CategoryFolderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementUpdateSpec) GetCategoryFolderNameOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryFolderName) {
		return nil, false
	}
	return o.CategoryFolderName, true
}

// HasCategoryFolderName returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementUpdateSpec) HasCategoryFolderName() bool {
	if o != nil && !IsNil(o.CategoryFolderName) {
		return true
	}

	return false
}

// SetCategoryFolderName gets a reference to the given string and assigns it to the CategoryFolderName field.
func (o *GlobalApplicationEntitlementUpdateSpec) SetCategoryFolderName(v string) {
	o.CategoryFolderName = &v
}

// GetCsRestrictionTags returns the CsRestrictionTags field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementUpdateSpec) GetCsRestrictionTags() []string {
	if o == nil || IsNil(o.CsRestrictionTags) {
		var ret []string
		return ret
	}
	return o.CsRestrictionTags
}

// GetCsRestrictionTagsOk returns a tuple with the CsRestrictionTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementUpdateSpec) GetCsRestrictionTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.CsRestrictionTags) {
		return nil, false
	}
	return o.CsRestrictionTags, true
}

// HasCsRestrictionTags returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementUpdateSpec) HasCsRestrictionTags() bool {
	if o != nil && !IsNil(o.CsRestrictionTags) {
		return true
	}

	return false
}

// SetCsRestrictionTags gets a reference to the given []string and assigns it to the CsRestrictionTags field.
func (o *GlobalApplicationEntitlementUpdateSpec) SetCsRestrictionTags(v []string) {
	o.CsRestrictionTags = v
}

// GetDefaultDisplayProtocol returns the DefaultDisplayProtocol field value
func (o *GlobalApplicationEntitlementUpdateSpec) GetDefaultDisplayProtocol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultDisplayProtocol
}

// GetDefaultDisplayProtocolOk returns a tuple with the DefaultDisplayProtocol field value
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementUpdateSpec) GetDefaultDisplayProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultDisplayProtocol, true
}

// SetDefaultDisplayProtocol sets field value
func (o *GlobalApplicationEntitlementUpdateSpec) SetDefaultDisplayProtocol(v string) {
	o.DefaultDisplayProtocol = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementUpdateSpec) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementUpdateSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementUpdateSpec) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GlobalApplicationEntitlementUpdateSpec) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value
func (o *GlobalApplicationEntitlementUpdateSpec) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementUpdateSpec) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *GlobalApplicationEntitlementUpdateSpec) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetEnableClientRestrictions returns the EnableClientRestrictions field value
func (o *GlobalApplicationEntitlementUpdateSpec) GetEnableClientRestrictions() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EnableClientRestrictions
}

// GetEnableClientRestrictionsOk returns a tuple with the EnableClientRestrictions field value
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementUpdateSpec) GetEnableClientRestrictionsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnableClientRestrictions, true
}

// SetEnableClientRestrictions sets field value
func (o *GlobalApplicationEntitlementUpdateSpec) SetEnableClientRestrictions(v bool) {
	o.EnableClientRestrictions = v
}

// GetEnablePreLaunch returns the EnablePreLaunch field value
func (o *GlobalApplicationEntitlementUpdateSpec) GetEnablePreLaunch() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EnablePreLaunch
}

// GetEnablePreLaunchOk returns a tuple with the EnablePreLaunch field value
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementUpdateSpec) GetEnablePreLaunchOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnablePreLaunch, true
}

// SetEnablePreLaunch sets field value
func (o *GlobalApplicationEntitlementUpdateSpec) SetEnablePreLaunch(v bool) {
	o.EnablePreLaunch = v
}

// GetEnabled returns the Enabled field value
func (o *GlobalApplicationEntitlementUpdateSpec) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementUpdateSpec) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *GlobalApplicationEntitlementUpdateSpec) SetEnabled(v bool) {
	o.Enabled = v
}

// GetFederatedAccessGroupId returns the FederatedAccessGroupId field value
func (o *GlobalApplicationEntitlementUpdateSpec) GetFederatedAccessGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FederatedAccessGroupId
}

// GetFederatedAccessGroupIdOk returns a tuple with the FederatedAccessGroupId field value
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementUpdateSpec) GetFederatedAccessGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FederatedAccessGroupId, true
}

// SetFederatedAccessGroupId sets field value
func (o *GlobalApplicationEntitlementUpdateSpec) SetFederatedAccessGroupId(v string) {
	o.FederatedAccessGroupId = v
}

// GetMultiSessionMode returns the MultiSessionMode field value
func (o *GlobalApplicationEntitlementUpdateSpec) GetMultiSessionMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MultiSessionMode
}

// GetMultiSessionModeOk returns a tuple with the MultiSessionMode field value
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementUpdateSpec) GetMultiSessionModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MultiSessionMode, true
}

// SetMultiSessionMode sets field value
func (o *GlobalApplicationEntitlementUpdateSpec) SetMultiSessionMode(v string) {
	o.MultiSessionMode = v
}

// GetMultipleSessionAutoClean returns the MultipleSessionAutoClean field value
func (o *GlobalApplicationEntitlementUpdateSpec) GetMultipleSessionAutoClean() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.MultipleSessionAutoClean
}

// GetMultipleSessionAutoCleanOk returns a tuple with the MultipleSessionAutoClean field value
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementUpdateSpec) GetMultipleSessionAutoCleanOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MultipleSessionAutoClean, true
}

// SetMultipleSessionAutoClean sets field value
func (o *GlobalApplicationEntitlementUpdateSpec) SetMultipleSessionAutoClean(v bool) {
	o.MultipleSessionAutoClean = v
}

// GetName returns the Name field value
func (o *GlobalApplicationEntitlementUpdateSpec) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementUpdateSpec) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GlobalApplicationEntitlementUpdateSpec) SetName(v string) {
	o.Name = v
}

// GetRequireHomeSite returns the RequireHomeSite field value
func (o *GlobalApplicationEntitlementUpdateSpec) GetRequireHomeSite() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RequireHomeSite
}

// GetRequireHomeSiteOk returns a tuple with the RequireHomeSite field value
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementUpdateSpec) GetRequireHomeSiteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequireHomeSite, true
}

// SetRequireHomeSite sets field value
func (o *GlobalApplicationEntitlementUpdateSpec) SetRequireHomeSite(v bool) {
	o.RequireHomeSite = v
}

// GetScope returns the Scope field value
func (o *GlobalApplicationEntitlementUpdateSpec) GetScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementUpdateSpec) GetScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *GlobalApplicationEntitlementUpdateSpec) SetScope(v string) {
	o.Scope = v
}

// GetShortcutLocationsV2 returns the ShortcutLocationsV2 field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementUpdateSpec) GetShortcutLocationsV2() []string {
	if o == nil || IsNil(o.ShortcutLocationsV2) {
		var ret []string
		return ret
	}
	return o.ShortcutLocationsV2
}

// GetShortcutLocationsV2Ok returns a tuple with the ShortcutLocationsV2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementUpdateSpec) GetShortcutLocationsV2Ok() ([]string, bool) {
	if o == nil || IsNil(o.ShortcutLocationsV2) {
		return nil, false
	}
	return o.ShortcutLocationsV2, true
}

// HasShortcutLocationsV2 returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementUpdateSpec) HasShortcutLocationsV2() bool {
	if o != nil && !IsNil(o.ShortcutLocationsV2) {
		return true
	}

	return false
}

// SetShortcutLocationsV2 gets a reference to the given []string and assigns it to the ShortcutLocationsV2 field.
func (o *GlobalApplicationEntitlementUpdateSpec) SetShortcutLocationsV2(v []string) {
	o.ShortcutLocationsV2 = v
}

// GetUseHomeSite returns the UseHomeSite field value
func (o *GlobalApplicationEntitlementUpdateSpec) GetUseHomeSite() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UseHomeSite
}

// GetUseHomeSiteOk returns a tuple with the UseHomeSite field value
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementUpdateSpec) GetUseHomeSiteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseHomeSite, true
}

// SetUseHomeSite sets field value
func (o *GlobalApplicationEntitlementUpdateSpec) SetUseHomeSite(v bool) {
	o.UseHomeSite = v
}

func (o GlobalApplicationEntitlementUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GlobalApplicationEntitlementUpdateSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BackupGaeId) {
		toSerialize["backup_gae_id"] = o.BackupGaeId
	}
	if !IsNil(o.CategoryFolderName) {
		toSerialize["category_folder_name"] = o.CategoryFolderName
	}
	if !IsNil(o.CsRestrictionTags) {
		toSerialize["cs_restriction_tags"] = o.CsRestrictionTags
	}
	toSerialize["default_display_protocol"] = o.DefaultDisplayProtocol
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["display_name"] = o.DisplayName
	toSerialize["enable_client_restrictions"] = o.EnableClientRestrictions
	toSerialize["enable_pre_launch"] = o.EnablePreLaunch
	toSerialize["enabled"] = o.Enabled
	toSerialize["federated_access_group_id"] = o.FederatedAccessGroupId
	toSerialize["multi_session_mode"] = o.MultiSessionMode
	toSerialize["multiple_session_auto_clean"] = o.MultipleSessionAutoClean
	toSerialize["name"] = o.Name
	toSerialize["require_home_site"] = o.RequireHomeSite
	toSerialize["scope"] = o.Scope
	if !IsNil(o.ShortcutLocationsV2) {
		toSerialize["shortcut_locations_v2"] = o.ShortcutLocationsV2
	}
	toSerialize["use_home_site"] = o.UseHomeSite
	return toSerialize, nil
}

func (o *GlobalApplicationEntitlementUpdateSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"default_display_protocol",
		"display_name",
		"enable_client_restrictions",
		"enable_pre_launch",
		"enabled",
		"federated_access_group_id",
		"multi_session_mode",
		"multiple_session_auto_clean",
		"name",
		"require_home_site",
		"scope",
		"use_home_site",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGlobalApplicationEntitlementUpdateSpec := _GlobalApplicationEntitlementUpdateSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGlobalApplicationEntitlementUpdateSpec)

	if err != nil {
		return err
	}

	*o = GlobalApplicationEntitlementUpdateSpec(varGlobalApplicationEntitlementUpdateSpec)

	return err
}

type NullableGlobalApplicationEntitlementUpdateSpec struct {
	value *GlobalApplicationEntitlementUpdateSpec
	isSet bool
}

func (v NullableGlobalApplicationEntitlementUpdateSpec) Get() *GlobalApplicationEntitlementUpdateSpec {
	return v.value
}

func (v *NullableGlobalApplicationEntitlementUpdateSpec) Set(val *GlobalApplicationEntitlementUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalApplicationEntitlementUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalApplicationEntitlementUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalApplicationEntitlementUpdateSpec(val *GlobalApplicationEntitlementUpdateSpec) *NullableGlobalApplicationEntitlementUpdateSpec {
	return &NullableGlobalApplicationEntitlementUpdateSpec{value: val, isSet: true}
}

func (v NullableGlobalApplicationEntitlementUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalApplicationEntitlementUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


