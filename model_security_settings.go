/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2111
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// SecuritySettings Information related to Security Settings.
type SecuritySettings struct {
	// The Base 64 encoded public key of the cluster in PEM format.
	ClusterPublicKey *string `json:"cluster_public_key,omitempty"`
	// Key Id to identify the cluster's active key pair.
	ClusterPublicKeyId *string `json:"cluster_public_key_id,omitempty"`
	// Indicates whether the backup recovery password has been configured.
	DataRecoveryPasswordConfigured *bool `json:"data_recovery_password_configured,omitempty"`
	// Determines if signing and verification of the JMS messages passed between Horizon components takes place. * DISABLED: Message security mode is disabled. * MIXED: Message security mode is enabled but not enforced. * ENABLED: Message security mode is enabled. Unsigned messages are rejected by Horizon components. * ENHANCED: Message Security mode is Enhanced. Message signing and validation is performed based on the current Security Level and desktop Message Security mode.
	MessageSecurityMode *string `json:"message_security_mode,omitempty"`
	// The status of the JMS message security. This tracks the application of changes to messageSecurityMode. * READY: The cluster is performing at the specified message security mode. * INITIALIZING_ENHANCED: The cluster is initializing a transition to the ENHANCED message security mode. * PENDING_ENHANCED: The cluster is propagating the change to ENHANCED message security mode to all nodes. * LEAVING_ENHANCED: The cluster is leaving the ENHANCED message security mode.
	MessageSecurityStatus *string `json:"message_security_status,omitempty"`
	// Determines if user credentials must be re-authenticated after a network interruption when Horizon clients use secure tunnel connections to Horizon resources. When you select this setting, if a secure tunnel connection ends during a session, Horizon Client requires the user to re-authenticate before reconnecting.
	ReAuthSecureTunnelAfterInterruption *bool `json:"re_auth_secure_tunnel_after_interruption,omitempty"`
}

// NewSecuritySettings instantiates a new SecuritySettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecuritySettings() *SecuritySettings {
	this := SecuritySettings{}
	return &this
}

// NewSecuritySettingsWithDefaults instantiates a new SecuritySettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecuritySettingsWithDefaults() *SecuritySettings {
	this := SecuritySettings{}
	return &this
}

// GetClusterPublicKey returns the ClusterPublicKey field value if set, zero value otherwise.
func (o *SecuritySettings) GetClusterPublicKey() string {
	if o == nil || o.ClusterPublicKey == nil {
		var ret string
		return ret
	}
	return *o.ClusterPublicKey
}

// GetClusterPublicKeyOk returns a tuple with the ClusterPublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecuritySettings) GetClusterPublicKeyOk() (*string, bool) {
	if o == nil || o.ClusterPublicKey == nil {
		return nil, false
	}
	return o.ClusterPublicKey, true
}

// HasClusterPublicKey returns a boolean if a field has been set.
func (o *SecuritySettings) HasClusterPublicKey() bool {
	if o != nil && o.ClusterPublicKey != nil {
		return true
	}

	return false
}

// SetClusterPublicKey gets a reference to the given string and assigns it to the ClusterPublicKey field.
func (o *SecuritySettings) SetClusterPublicKey(v string) {
	o.ClusterPublicKey = &v
}

// GetClusterPublicKeyId returns the ClusterPublicKeyId field value if set, zero value otherwise.
func (o *SecuritySettings) GetClusterPublicKeyId() string {
	if o == nil || o.ClusterPublicKeyId == nil {
		var ret string
		return ret
	}
	return *o.ClusterPublicKeyId
}

// GetClusterPublicKeyIdOk returns a tuple with the ClusterPublicKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecuritySettings) GetClusterPublicKeyIdOk() (*string, bool) {
	if o == nil || o.ClusterPublicKeyId == nil {
		return nil, false
	}
	return o.ClusterPublicKeyId, true
}

// HasClusterPublicKeyId returns a boolean if a field has been set.
func (o *SecuritySettings) HasClusterPublicKeyId() bool {
	if o != nil && o.ClusterPublicKeyId != nil {
		return true
	}

	return false
}

// SetClusterPublicKeyId gets a reference to the given string and assigns it to the ClusterPublicKeyId field.
func (o *SecuritySettings) SetClusterPublicKeyId(v string) {
	o.ClusterPublicKeyId = &v
}

// GetDataRecoveryPasswordConfigured returns the DataRecoveryPasswordConfigured field value if set, zero value otherwise.
func (o *SecuritySettings) GetDataRecoveryPasswordConfigured() bool {
	if o == nil || o.DataRecoveryPasswordConfigured == nil {
		var ret bool
		return ret
	}
	return *o.DataRecoveryPasswordConfigured
}

// GetDataRecoveryPasswordConfiguredOk returns a tuple with the DataRecoveryPasswordConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecuritySettings) GetDataRecoveryPasswordConfiguredOk() (*bool, bool) {
	if o == nil || o.DataRecoveryPasswordConfigured == nil {
		return nil, false
	}
	return o.DataRecoveryPasswordConfigured, true
}

// HasDataRecoveryPasswordConfigured returns a boolean if a field has been set.
func (o *SecuritySettings) HasDataRecoveryPasswordConfigured() bool {
	if o != nil && o.DataRecoveryPasswordConfigured != nil {
		return true
	}

	return false
}

// SetDataRecoveryPasswordConfigured gets a reference to the given bool and assigns it to the DataRecoveryPasswordConfigured field.
func (o *SecuritySettings) SetDataRecoveryPasswordConfigured(v bool) {
	o.DataRecoveryPasswordConfigured = &v
}

// GetMessageSecurityMode returns the MessageSecurityMode field value if set, zero value otherwise.
func (o *SecuritySettings) GetMessageSecurityMode() string {
	if o == nil || o.MessageSecurityMode == nil {
		var ret string
		return ret
	}
	return *o.MessageSecurityMode
}

// GetMessageSecurityModeOk returns a tuple with the MessageSecurityMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecuritySettings) GetMessageSecurityModeOk() (*string, bool) {
	if o == nil || o.MessageSecurityMode == nil {
		return nil, false
	}
	return o.MessageSecurityMode, true
}

// HasMessageSecurityMode returns a boolean if a field has been set.
func (o *SecuritySettings) HasMessageSecurityMode() bool {
	if o != nil && o.MessageSecurityMode != nil {
		return true
	}

	return false
}

// SetMessageSecurityMode gets a reference to the given string and assigns it to the MessageSecurityMode field.
func (o *SecuritySettings) SetMessageSecurityMode(v string) {
	o.MessageSecurityMode = &v
}

// GetMessageSecurityStatus returns the MessageSecurityStatus field value if set, zero value otherwise.
func (o *SecuritySettings) GetMessageSecurityStatus() string {
	if o == nil || o.MessageSecurityStatus == nil {
		var ret string
		return ret
	}
	return *o.MessageSecurityStatus
}

// GetMessageSecurityStatusOk returns a tuple with the MessageSecurityStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecuritySettings) GetMessageSecurityStatusOk() (*string, bool) {
	if o == nil || o.MessageSecurityStatus == nil {
		return nil, false
	}
	return o.MessageSecurityStatus, true
}

// HasMessageSecurityStatus returns a boolean if a field has been set.
func (o *SecuritySettings) HasMessageSecurityStatus() bool {
	if o != nil && o.MessageSecurityStatus != nil {
		return true
	}

	return false
}

// SetMessageSecurityStatus gets a reference to the given string and assigns it to the MessageSecurityStatus field.
func (o *SecuritySettings) SetMessageSecurityStatus(v string) {
	o.MessageSecurityStatus = &v
}

// GetReAuthSecureTunnelAfterInterruption returns the ReAuthSecureTunnelAfterInterruption field value if set, zero value otherwise.
func (o *SecuritySettings) GetReAuthSecureTunnelAfterInterruption() bool {
	if o == nil || o.ReAuthSecureTunnelAfterInterruption == nil {
		var ret bool
		return ret
	}
	return *o.ReAuthSecureTunnelAfterInterruption
}

// GetReAuthSecureTunnelAfterInterruptionOk returns a tuple with the ReAuthSecureTunnelAfterInterruption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecuritySettings) GetReAuthSecureTunnelAfterInterruptionOk() (*bool, bool) {
	if o == nil || o.ReAuthSecureTunnelAfterInterruption == nil {
		return nil, false
	}
	return o.ReAuthSecureTunnelAfterInterruption, true
}

// HasReAuthSecureTunnelAfterInterruption returns a boolean if a field has been set.
func (o *SecuritySettings) HasReAuthSecureTunnelAfterInterruption() bool {
	if o != nil && o.ReAuthSecureTunnelAfterInterruption != nil {
		return true
	}

	return false
}

// SetReAuthSecureTunnelAfterInterruption gets a reference to the given bool and assigns it to the ReAuthSecureTunnelAfterInterruption field.
func (o *SecuritySettings) SetReAuthSecureTunnelAfterInterruption(v bool) {
	o.ReAuthSecureTunnelAfterInterruption = &v
}

func (o SecuritySettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClusterPublicKey != nil {
		toSerialize["cluster_public_key"] = o.ClusterPublicKey
	}
	if o.ClusterPublicKeyId != nil {
		toSerialize["cluster_public_key_id"] = o.ClusterPublicKeyId
	}
	if o.DataRecoveryPasswordConfigured != nil {
		toSerialize["data_recovery_password_configured"] = o.DataRecoveryPasswordConfigured
	}
	if o.MessageSecurityMode != nil {
		toSerialize["message_security_mode"] = o.MessageSecurityMode
	}
	if o.MessageSecurityStatus != nil {
		toSerialize["message_security_status"] = o.MessageSecurityStatus
	}
	if o.ReAuthSecureTunnelAfterInterruption != nil {
		toSerialize["re_auth_secure_tunnel_after_interruption"] = o.ReAuthSecureTunnelAfterInterruption
	}
	return json.Marshal(toSerialize)
}

type NullableSecuritySettings struct {
	value *SecuritySettings
	isSet bool
}

func (v NullableSecuritySettings) Get() *SecuritySettings {
	return v.value
}

func (v *NullableSecuritySettings) Set(val *SecuritySettings) {
	v.value = val
	v.isSet = true
}

func (v NullableSecuritySettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSecuritySettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecuritySettings(val *SecuritySettings) *NullableSecuritySettings {
	return &NullableSecuritySettings{value: val, isSet: true}
}

func (v NullableSecuritySettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecuritySettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
