/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the TrueSSOCertificateDomainInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrueSSOCertificateDomainInfo{}

// TrueSSOCertificateDomainInfo Domain data available to this enrollment server.
type TrueSSOCertificateDomainInfo struct {
	// Collection of certificate server data available to this domain.
	CertificateServers []TrueSSOCertificateServerInfo `json:"certificate_servers,omitempty"`
	// DNS name of the domain.
	DnsName *string `json:"dns_name,omitempty"`
	// Id of the domain.
	DomainId *string `json:"domain_id,omitempty"`
	// The status of this domain to the enrollment server. * READY: The domain is ready. * CREATED: The domain is created. * INITIALIZED: The domain is initialized. * CONNECTING: The domain is connecting. * ASSOCIATED: This domain has been associated with a Forest, but we do not yet have a connection to this domain. We have no means of syncing objects for this forest from this domain, so it may only operate as long as there is another domain in the same forest that we can synchronize with. * STOPPING: The domain is stopping. A domain with this status cannot be used in connector creation. * FAILED: The domain is failed. A domain with this status cannot be used in connector creation. * UNKNOWN: The domain status is unknown. A domain with this status cannot be used in connector creation.
	DomainStatus *string `json:"domain_status,omitempty"`
	// Additional non-localized explanation of the domain status.
	DomainStatusReason *string `json:"domain_status_reason,omitempty"`
	// The status of the enrollment server's certificate for this domain's forest. * VALID: A valid enrollment certificate for this domain's forest is installed on the enrollment server. * NOT_VALID: No valid enrollment certificate for this domain's forest is installed on the enrollment server, or it may have expired. An enrollment server with this status cannot be used in connector creation.
	EnrollmentCertificateStatus *string `json:"enrollment_certificate_status,omitempty"`
	// DNS name of the domain's forest, if any.
	ForestDnsName *string `json:"forest_dns_name,omitempty"`
	// This domain's forest's replication status with the domain controller. * OK: The enrollment server has read the enrollment properties at least once and is successfully able to update them periodically. * DEGRADED: The enrollment server has read the enrollment properties at least once, but has not been able to reach a domain controller for some time. * PENDING: he enrollment server has not yet read the enrollment properties from a domain controller. * FAILED: The enrollment server has read the enrollment properties at least once but either has not been able to reach a domain controller for an extended time or another issue exists. An enrollment server with this status cannot be used in connector creation.
	ReplicationStatus *string `json:"replication_status,omitempty"`
	// Additional non-localized explanation of the replication status.
	ReplicationStatusReason *string `json:"replication_status_reason,omitempty"`
	// Collection of certificate template data available to certificate servers on this domain. Not all certificate servers may have access to all of these templates.
	Templates []TrueSSOTemplateInfo `json:"templates,omitempty"`
}

// NewTrueSSOCertificateDomainInfo instantiates a new TrueSSOCertificateDomainInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrueSSOCertificateDomainInfo() *TrueSSOCertificateDomainInfo {
	this := TrueSSOCertificateDomainInfo{}
	return &this
}

// NewTrueSSOCertificateDomainInfoWithDefaults instantiates a new TrueSSOCertificateDomainInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrueSSOCertificateDomainInfoWithDefaults() *TrueSSOCertificateDomainInfo {
	this := TrueSSOCertificateDomainInfo{}
	return &this
}

// GetCertificateServers returns the CertificateServers field value if set, zero value otherwise.
func (o *TrueSSOCertificateDomainInfo) GetCertificateServers() []TrueSSOCertificateServerInfo {
	if o == nil || IsNil(o.CertificateServers) {
		var ret []TrueSSOCertificateServerInfo
		return ret
	}
	return o.CertificateServers
}

// GetCertificateServersOk returns a tuple with the CertificateServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrueSSOCertificateDomainInfo) GetCertificateServersOk() ([]TrueSSOCertificateServerInfo, bool) {
	if o == nil || IsNil(o.CertificateServers) {
		return nil, false
	}
	return o.CertificateServers, true
}

// HasCertificateServers returns a boolean if a field has been set.
func (o *TrueSSOCertificateDomainInfo) HasCertificateServers() bool {
	if o != nil && !IsNil(o.CertificateServers) {
		return true
	}

	return false
}

// SetCertificateServers gets a reference to the given []TrueSSOCertificateServerInfo and assigns it to the CertificateServers field.
func (o *TrueSSOCertificateDomainInfo) SetCertificateServers(v []TrueSSOCertificateServerInfo) {
	o.CertificateServers = v
}

// GetDnsName returns the DnsName field value if set, zero value otherwise.
func (o *TrueSSOCertificateDomainInfo) GetDnsName() string {
	if o == nil || IsNil(o.DnsName) {
		var ret string
		return ret
	}
	return *o.DnsName
}

// GetDnsNameOk returns a tuple with the DnsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrueSSOCertificateDomainInfo) GetDnsNameOk() (*string, bool) {
	if o == nil || IsNil(o.DnsName) {
		return nil, false
	}
	return o.DnsName, true
}

// HasDnsName returns a boolean if a field has been set.
func (o *TrueSSOCertificateDomainInfo) HasDnsName() bool {
	if o != nil && !IsNil(o.DnsName) {
		return true
	}

	return false
}

// SetDnsName gets a reference to the given string and assigns it to the DnsName field.
func (o *TrueSSOCertificateDomainInfo) SetDnsName(v string) {
	o.DnsName = &v
}

// GetDomainId returns the DomainId field value if set, zero value otherwise.
func (o *TrueSSOCertificateDomainInfo) GetDomainId() string {
	if o == nil || IsNil(o.DomainId) {
		var ret string
		return ret
	}
	return *o.DomainId
}

// GetDomainIdOk returns a tuple with the DomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrueSSOCertificateDomainInfo) GetDomainIdOk() (*string, bool) {
	if o == nil || IsNil(o.DomainId) {
		return nil, false
	}
	return o.DomainId, true
}

// HasDomainId returns a boolean if a field has been set.
func (o *TrueSSOCertificateDomainInfo) HasDomainId() bool {
	if o != nil && !IsNil(o.DomainId) {
		return true
	}

	return false
}

// SetDomainId gets a reference to the given string and assigns it to the DomainId field.
func (o *TrueSSOCertificateDomainInfo) SetDomainId(v string) {
	o.DomainId = &v
}

// GetDomainStatus returns the DomainStatus field value if set, zero value otherwise.
func (o *TrueSSOCertificateDomainInfo) GetDomainStatus() string {
	if o == nil || IsNil(o.DomainStatus) {
		var ret string
		return ret
	}
	return *o.DomainStatus
}

// GetDomainStatusOk returns a tuple with the DomainStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrueSSOCertificateDomainInfo) GetDomainStatusOk() (*string, bool) {
	if o == nil || IsNil(o.DomainStatus) {
		return nil, false
	}
	return o.DomainStatus, true
}

// HasDomainStatus returns a boolean if a field has been set.
func (o *TrueSSOCertificateDomainInfo) HasDomainStatus() bool {
	if o != nil && !IsNil(o.DomainStatus) {
		return true
	}

	return false
}

// SetDomainStatus gets a reference to the given string and assigns it to the DomainStatus field.
func (o *TrueSSOCertificateDomainInfo) SetDomainStatus(v string) {
	o.DomainStatus = &v
}

// GetDomainStatusReason returns the DomainStatusReason field value if set, zero value otherwise.
func (o *TrueSSOCertificateDomainInfo) GetDomainStatusReason() string {
	if o == nil || IsNil(o.DomainStatusReason) {
		var ret string
		return ret
	}
	return *o.DomainStatusReason
}

// GetDomainStatusReasonOk returns a tuple with the DomainStatusReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrueSSOCertificateDomainInfo) GetDomainStatusReasonOk() (*string, bool) {
	if o == nil || IsNil(o.DomainStatusReason) {
		return nil, false
	}
	return o.DomainStatusReason, true
}

// HasDomainStatusReason returns a boolean if a field has been set.
func (o *TrueSSOCertificateDomainInfo) HasDomainStatusReason() bool {
	if o != nil && !IsNil(o.DomainStatusReason) {
		return true
	}

	return false
}

// SetDomainStatusReason gets a reference to the given string and assigns it to the DomainStatusReason field.
func (o *TrueSSOCertificateDomainInfo) SetDomainStatusReason(v string) {
	o.DomainStatusReason = &v
}

// GetEnrollmentCertificateStatus returns the EnrollmentCertificateStatus field value if set, zero value otherwise.
func (o *TrueSSOCertificateDomainInfo) GetEnrollmentCertificateStatus() string {
	if o == nil || IsNil(o.EnrollmentCertificateStatus) {
		var ret string
		return ret
	}
	return *o.EnrollmentCertificateStatus
}

// GetEnrollmentCertificateStatusOk returns a tuple with the EnrollmentCertificateStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrueSSOCertificateDomainInfo) GetEnrollmentCertificateStatusOk() (*string, bool) {
	if o == nil || IsNil(o.EnrollmentCertificateStatus) {
		return nil, false
	}
	return o.EnrollmentCertificateStatus, true
}

// HasEnrollmentCertificateStatus returns a boolean if a field has been set.
func (o *TrueSSOCertificateDomainInfo) HasEnrollmentCertificateStatus() bool {
	if o != nil && !IsNil(o.EnrollmentCertificateStatus) {
		return true
	}

	return false
}

// SetEnrollmentCertificateStatus gets a reference to the given string and assigns it to the EnrollmentCertificateStatus field.
func (o *TrueSSOCertificateDomainInfo) SetEnrollmentCertificateStatus(v string) {
	o.EnrollmentCertificateStatus = &v
}

// GetForestDnsName returns the ForestDnsName field value if set, zero value otherwise.
func (o *TrueSSOCertificateDomainInfo) GetForestDnsName() string {
	if o == nil || IsNil(o.ForestDnsName) {
		var ret string
		return ret
	}
	return *o.ForestDnsName
}

// GetForestDnsNameOk returns a tuple with the ForestDnsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrueSSOCertificateDomainInfo) GetForestDnsNameOk() (*string, bool) {
	if o == nil || IsNil(o.ForestDnsName) {
		return nil, false
	}
	return o.ForestDnsName, true
}

// HasForestDnsName returns a boolean if a field has been set.
func (o *TrueSSOCertificateDomainInfo) HasForestDnsName() bool {
	if o != nil && !IsNil(o.ForestDnsName) {
		return true
	}

	return false
}

// SetForestDnsName gets a reference to the given string and assigns it to the ForestDnsName field.
func (o *TrueSSOCertificateDomainInfo) SetForestDnsName(v string) {
	o.ForestDnsName = &v
}

// GetReplicationStatus returns the ReplicationStatus field value if set, zero value otherwise.
func (o *TrueSSOCertificateDomainInfo) GetReplicationStatus() string {
	if o == nil || IsNil(o.ReplicationStatus) {
		var ret string
		return ret
	}
	return *o.ReplicationStatus
}

// GetReplicationStatusOk returns a tuple with the ReplicationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrueSSOCertificateDomainInfo) GetReplicationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ReplicationStatus) {
		return nil, false
	}
	return o.ReplicationStatus, true
}

// HasReplicationStatus returns a boolean if a field has been set.
func (o *TrueSSOCertificateDomainInfo) HasReplicationStatus() bool {
	if o != nil && !IsNil(o.ReplicationStatus) {
		return true
	}

	return false
}

// SetReplicationStatus gets a reference to the given string and assigns it to the ReplicationStatus field.
func (o *TrueSSOCertificateDomainInfo) SetReplicationStatus(v string) {
	o.ReplicationStatus = &v
}

// GetReplicationStatusReason returns the ReplicationStatusReason field value if set, zero value otherwise.
func (o *TrueSSOCertificateDomainInfo) GetReplicationStatusReason() string {
	if o == nil || IsNil(o.ReplicationStatusReason) {
		var ret string
		return ret
	}
	return *o.ReplicationStatusReason
}

// GetReplicationStatusReasonOk returns a tuple with the ReplicationStatusReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrueSSOCertificateDomainInfo) GetReplicationStatusReasonOk() (*string, bool) {
	if o == nil || IsNil(o.ReplicationStatusReason) {
		return nil, false
	}
	return o.ReplicationStatusReason, true
}

// HasReplicationStatusReason returns a boolean if a field has been set.
func (o *TrueSSOCertificateDomainInfo) HasReplicationStatusReason() bool {
	if o != nil && !IsNil(o.ReplicationStatusReason) {
		return true
	}

	return false
}

// SetReplicationStatusReason gets a reference to the given string and assigns it to the ReplicationStatusReason field.
func (o *TrueSSOCertificateDomainInfo) SetReplicationStatusReason(v string) {
	o.ReplicationStatusReason = &v
}

// GetTemplates returns the Templates field value if set, zero value otherwise.
func (o *TrueSSOCertificateDomainInfo) GetTemplates() []TrueSSOTemplateInfo {
	if o == nil || IsNil(o.Templates) {
		var ret []TrueSSOTemplateInfo
		return ret
	}
	return o.Templates
}

// GetTemplatesOk returns a tuple with the Templates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrueSSOCertificateDomainInfo) GetTemplatesOk() ([]TrueSSOTemplateInfo, bool) {
	if o == nil || IsNil(o.Templates) {
		return nil, false
	}
	return o.Templates, true
}

// HasTemplates returns a boolean if a field has been set.
func (o *TrueSSOCertificateDomainInfo) HasTemplates() bool {
	if o != nil && !IsNil(o.Templates) {
		return true
	}

	return false
}

// SetTemplates gets a reference to the given []TrueSSOTemplateInfo and assigns it to the Templates field.
func (o *TrueSSOCertificateDomainInfo) SetTemplates(v []TrueSSOTemplateInfo) {
	o.Templates = v
}

func (o TrueSSOCertificateDomainInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrueSSOCertificateDomainInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CertificateServers) {
		toSerialize["certificate_servers"] = o.CertificateServers
	}
	if !IsNil(o.DnsName) {
		toSerialize["dns_name"] = o.DnsName
	}
	if !IsNil(o.DomainId) {
		toSerialize["domain_id"] = o.DomainId
	}
	if !IsNil(o.DomainStatus) {
		toSerialize["domain_status"] = o.DomainStatus
	}
	if !IsNil(o.DomainStatusReason) {
		toSerialize["domain_status_reason"] = o.DomainStatusReason
	}
	if !IsNil(o.EnrollmentCertificateStatus) {
		toSerialize["enrollment_certificate_status"] = o.EnrollmentCertificateStatus
	}
	if !IsNil(o.ForestDnsName) {
		toSerialize["forest_dns_name"] = o.ForestDnsName
	}
	if !IsNil(o.ReplicationStatus) {
		toSerialize["replication_status"] = o.ReplicationStatus
	}
	if !IsNil(o.ReplicationStatusReason) {
		toSerialize["replication_status_reason"] = o.ReplicationStatusReason
	}
	if !IsNil(o.Templates) {
		toSerialize["templates"] = o.Templates
	}
	return toSerialize, nil
}

type NullableTrueSSOCertificateDomainInfo struct {
	value *TrueSSOCertificateDomainInfo
	isSet bool
}

func (v NullableTrueSSOCertificateDomainInfo) Get() *TrueSSOCertificateDomainInfo {
	return v.value
}

func (v *NullableTrueSSOCertificateDomainInfo) Set(val *TrueSSOCertificateDomainInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTrueSSOCertificateDomainInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTrueSSOCertificateDomainInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrueSSOCertificateDomainInfo(val *TrueSSOCertificateDomainInfo) *NullableTrueSSOCertificateDomainInfo {
	return &NullableTrueSSOCertificateDomainInfo{value: val, isSet: true}
}

func (v NullableTrueSSOCertificateDomainInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrueSSOCertificateDomainInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


