/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2111
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// EnvironmentInfoV2 Information related to Environment Settings.
type EnvironmentInfoV2 struct {
	// The GUID of a group of Connection Servers sharing the same configuration.
	ClusterGuid *string `json:"cluster_guid,omitempty"`
	// The name of a group of Connection Servers sharing the same configuration.
	ClusterName *string `json:"cluster_name,omitempty"`
	// Indicates different environments that Horizon can be deployed into. * GENERAL: Horizon is deployed on On-premises. * AZURE: Horizon is deployed on Azure. * AWS: Horizon is deployed on AWS. * DELL_EMC: Horizon is deployed on Dell EMC. * GOOGLE: Horizon is deployed on Google Cloud. * ORACLE: Horizon is deployed on Oracle Cloud.
	DeploymentType *string `json:"deployment_type,omitempty"`
	// Indicates if FIPS mode is enabled.
	FipsModeEnabled *bool `json:"fips_mode_enabled,omitempty"`
	// Indicates the IP mode of the environment. * IPv4: The ip mode is IPv4. * IPv6: The ip mode is IPv6.
	IpMode *string `json:"ip_mode,omitempty"`
	// Local connection Server build number.
	LocalConnectionServerBuild *string `json:"local_connection_server_build,omitempty"`
	// Local connection Server version number.
	LocalConnectionServerVersion *string `json:"local_connection_server_version,omitempty"`
	// The name of the current pod in the Multi-DataCenter Horizon Pod, the value will be null when PodFederation is not initialized.
	LocalPodName *string `json:"local_pod_name,omitempty"`
	// Represents the clusters time zone offset from UTC in seconds.
	TimezoneOffset *int32 `json:"timezone_offset,omitempty"`
}

// NewEnvironmentInfoV2 instantiates a new EnvironmentInfoV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentInfoV2() *EnvironmentInfoV2 {
	this := EnvironmentInfoV2{}
	return &this
}

// NewEnvironmentInfoV2WithDefaults instantiates a new EnvironmentInfoV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentInfoV2WithDefaults() *EnvironmentInfoV2 {
	this := EnvironmentInfoV2{}
	return &this
}

// GetClusterGuid returns the ClusterGuid field value if set, zero value otherwise.
func (o *EnvironmentInfoV2) GetClusterGuid() string {
	if o == nil || o.ClusterGuid == nil {
		var ret string
		return ret
	}
	return *o.ClusterGuid
}

// GetClusterGuidOk returns a tuple with the ClusterGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentInfoV2) GetClusterGuidOk() (*string, bool) {
	if o == nil || o.ClusterGuid == nil {
		return nil, false
	}
	return o.ClusterGuid, true
}

// HasClusterGuid returns a boolean if a field has been set.
func (o *EnvironmentInfoV2) HasClusterGuid() bool {
	if o != nil && o.ClusterGuid != nil {
		return true
	}

	return false
}

// SetClusterGuid gets a reference to the given string and assigns it to the ClusterGuid field.
func (o *EnvironmentInfoV2) SetClusterGuid(v string) {
	o.ClusterGuid = &v
}

// GetClusterName returns the ClusterName field value if set, zero value otherwise.
func (o *EnvironmentInfoV2) GetClusterName() string {
	if o == nil || o.ClusterName == nil {
		var ret string
		return ret
	}
	return *o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentInfoV2) GetClusterNameOk() (*string, bool) {
	if o == nil || o.ClusterName == nil {
		return nil, false
	}
	return o.ClusterName, true
}

// HasClusterName returns a boolean if a field has been set.
func (o *EnvironmentInfoV2) HasClusterName() bool {
	if o != nil && o.ClusterName != nil {
		return true
	}

	return false
}

// SetClusterName gets a reference to the given string and assigns it to the ClusterName field.
func (o *EnvironmentInfoV2) SetClusterName(v string) {
	o.ClusterName = &v
}

// GetDeploymentType returns the DeploymentType field value if set, zero value otherwise.
func (o *EnvironmentInfoV2) GetDeploymentType() string {
	if o == nil || o.DeploymentType == nil {
		var ret string
		return ret
	}
	return *o.DeploymentType
}

// GetDeploymentTypeOk returns a tuple with the DeploymentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentInfoV2) GetDeploymentTypeOk() (*string, bool) {
	if o == nil || o.DeploymentType == nil {
		return nil, false
	}
	return o.DeploymentType, true
}

// HasDeploymentType returns a boolean if a field has been set.
func (o *EnvironmentInfoV2) HasDeploymentType() bool {
	if o != nil && o.DeploymentType != nil {
		return true
	}

	return false
}

// SetDeploymentType gets a reference to the given string and assigns it to the DeploymentType field.
func (o *EnvironmentInfoV2) SetDeploymentType(v string) {
	o.DeploymentType = &v
}

// GetFipsModeEnabled returns the FipsModeEnabled field value if set, zero value otherwise.
func (o *EnvironmentInfoV2) GetFipsModeEnabled() bool {
	if o == nil || o.FipsModeEnabled == nil {
		var ret bool
		return ret
	}
	return *o.FipsModeEnabled
}

// GetFipsModeEnabledOk returns a tuple with the FipsModeEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentInfoV2) GetFipsModeEnabledOk() (*bool, bool) {
	if o == nil || o.FipsModeEnabled == nil {
		return nil, false
	}
	return o.FipsModeEnabled, true
}

// HasFipsModeEnabled returns a boolean if a field has been set.
func (o *EnvironmentInfoV2) HasFipsModeEnabled() bool {
	if o != nil && o.FipsModeEnabled != nil {
		return true
	}

	return false
}

// SetFipsModeEnabled gets a reference to the given bool and assigns it to the FipsModeEnabled field.
func (o *EnvironmentInfoV2) SetFipsModeEnabled(v bool) {
	o.FipsModeEnabled = &v
}

// GetIpMode returns the IpMode field value if set, zero value otherwise.
func (o *EnvironmentInfoV2) GetIpMode() string {
	if o == nil || o.IpMode == nil {
		var ret string
		return ret
	}
	return *o.IpMode
}

// GetIpModeOk returns a tuple with the IpMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentInfoV2) GetIpModeOk() (*string, bool) {
	if o == nil || o.IpMode == nil {
		return nil, false
	}
	return o.IpMode, true
}

// HasIpMode returns a boolean if a field has been set.
func (o *EnvironmentInfoV2) HasIpMode() bool {
	if o != nil && o.IpMode != nil {
		return true
	}

	return false
}

// SetIpMode gets a reference to the given string and assigns it to the IpMode field.
func (o *EnvironmentInfoV2) SetIpMode(v string) {
	o.IpMode = &v
}

// GetLocalConnectionServerBuild returns the LocalConnectionServerBuild field value if set, zero value otherwise.
func (o *EnvironmentInfoV2) GetLocalConnectionServerBuild() string {
	if o == nil || o.LocalConnectionServerBuild == nil {
		var ret string
		return ret
	}
	return *o.LocalConnectionServerBuild
}

// GetLocalConnectionServerBuildOk returns a tuple with the LocalConnectionServerBuild field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentInfoV2) GetLocalConnectionServerBuildOk() (*string, bool) {
	if o == nil || o.LocalConnectionServerBuild == nil {
		return nil, false
	}
	return o.LocalConnectionServerBuild, true
}

// HasLocalConnectionServerBuild returns a boolean if a field has been set.
func (o *EnvironmentInfoV2) HasLocalConnectionServerBuild() bool {
	if o != nil && o.LocalConnectionServerBuild != nil {
		return true
	}

	return false
}

// SetLocalConnectionServerBuild gets a reference to the given string and assigns it to the LocalConnectionServerBuild field.
func (o *EnvironmentInfoV2) SetLocalConnectionServerBuild(v string) {
	o.LocalConnectionServerBuild = &v
}

// GetLocalConnectionServerVersion returns the LocalConnectionServerVersion field value if set, zero value otherwise.
func (o *EnvironmentInfoV2) GetLocalConnectionServerVersion() string {
	if o == nil || o.LocalConnectionServerVersion == nil {
		var ret string
		return ret
	}
	return *o.LocalConnectionServerVersion
}

// GetLocalConnectionServerVersionOk returns a tuple with the LocalConnectionServerVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentInfoV2) GetLocalConnectionServerVersionOk() (*string, bool) {
	if o == nil || o.LocalConnectionServerVersion == nil {
		return nil, false
	}
	return o.LocalConnectionServerVersion, true
}

// HasLocalConnectionServerVersion returns a boolean if a field has been set.
func (o *EnvironmentInfoV2) HasLocalConnectionServerVersion() bool {
	if o != nil && o.LocalConnectionServerVersion != nil {
		return true
	}

	return false
}

// SetLocalConnectionServerVersion gets a reference to the given string and assigns it to the LocalConnectionServerVersion field.
func (o *EnvironmentInfoV2) SetLocalConnectionServerVersion(v string) {
	o.LocalConnectionServerVersion = &v
}

// GetLocalPodName returns the LocalPodName field value if set, zero value otherwise.
func (o *EnvironmentInfoV2) GetLocalPodName() string {
	if o == nil || o.LocalPodName == nil {
		var ret string
		return ret
	}
	return *o.LocalPodName
}

// GetLocalPodNameOk returns a tuple with the LocalPodName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentInfoV2) GetLocalPodNameOk() (*string, bool) {
	if o == nil || o.LocalPodName == nil {
		return nil, false
	}
	return o.LocalPodName, true
}

// HasLocalPodName returns a boolean if a field has been set.
func (o *EnvironmentInfoV2) HasLocalPodName() bool {
	if o != nil && o.LocalPodName != nil {
		return true
	}

	return false
}

// SetLocalPodName gets a reference to the given string and assigns it to the LocalPodName field.
func (o *EnvironmentInfoV2) SetLocalPodName(v string) {
	o.LocalPodName = &v
}

// GetTimezoneOffset returns the TimezoneOffset field value if set, zero value otherwise.
func (o *EnvironmentInfoV2) GetTimezoneOffset() int32 {
	if o == nil || o.TimezoneOffset == nil {
		var ret int32
		return ret
	}
	return *o.TimezoneOffset
}

// GetTimezoneOffsetOk returns a tuple with the TimezoneOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentInfoV2) GetTimezoneOffsetOk() (*int32, bool) {
	if o == nil || o.TimezoneOffset == nil {
		return nil, false
	}
	return o.TimezoneOffset, true
}

// HasTimezoneOffset returns a boolean if a field has been set.
func (o *EnvironmentInfoV2) HasTimezoneOffset() bool {
	if o != nil && o.TimezoneOffset != nil {
		return true
	}

	return false
}

// SetTimezoneOffset gets a reference to the given int32 and assigns it to the TimezoneOffset field.
func (o *EnvironmentInfoV2) SetTimezoneOffset(v int32) {
	o.TimezoneOffset = &v
}

func (o EnvironmentInfoV2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClusterGuid != nil {
		toSerialize["cluster_guid"] = o.ClusterGuid
	}
	if o.ClusterName != nil {
		toSerialize["cluster_name"] = o.ClusterName
	}
	if o.DeploymentType != nil {
		toSerialize["deployment_type"] = o.DeploymentType
	}
	if o.FipsModeEnabled != nil {
		toSerialize["fips_mode_enabled"] = o.FipsModeEnabled
	}
	if o.IpMode != nil {
		toSerialize["ip_mode"] = o.IpMode
	}
	if o.LocalConnectionServerBuild != nil {
		toSerialize["local_connection_server_build"] = o.LocalConnectionServerBuild
	}
	if o.LocalConnectionServerVersion != nil {
		toSerialize["local_connection_server_version"] = o.LocalConnectionServerVersion
	}
	if o.LocalPodName != nil {
		toSerialize["local_pod_name"] = o.LocalPodName
	}
	if o.TimezoneOffset != nil {
		toSerialize["timezone_offset"] = o.TimezoneOffset
	}
	return json.Marshal(toSerialize)
}

type NullableEnvironmentInfoV2 struct {
	value *EnvironmentInfoV2
	isSet bool
}

func (v NullableEnvironmentInfoV2) Get() *EnvironmentInfoV2 {
	return v.value
}

func (v *NullableEnvironmentInfoV2) Set(val *EnvironmentInfoV2) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentInfoV2) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentInfoV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentInfoV2(val *EnvironmentInfoV2) *NullableEnvironmentInfoV2 {
	return &NullableEnvironmentInfoV2{value: val, isSet: true}
}

func (v NullableEnvironmentInfoV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentInfoV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
