/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApplicationPoolUpdateSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationPoolUpdateSpec{}

// ApplicationPoolUpdateSpec Information required to update an application pool.
type ApplicationPoolUpdateSpec struct {
	AntiAffinityData *ApplicationAntiAffinityData `json:"anti_affinity_data,omitempty"`
	// Name of the category folder in the user's OS containing a shortcut to the application. Unset if the application does not belong to a category.
	CategoryFolderName *string `json:"category_folder_name,omitempty"`
	// Connection server restrictions. Application pool can be accessed from only those connection server instances that have a matching tag in this list. Null or empty list means that the application pool can be accessed from any connection server.
	CsRestrictionTags []string `json:"cs_restriction_tags,omitempty"`
	// Notes about the application pool.
	Description *string `json:"description,omitempty"`
	// The display name is the name that users will see in Horizon client. If the display name is left blank, it defaults to name.
	DisplayName *string `json:"display_name,omitempty"`
	// Indicates whether client restrictions are to be applied to application pool. Currently it is valid for application pool created from farm. Default value is false.
	EnableClientRestrictions *bool `json:"enable_client_restrictions,omitempty"`
	// Whether to pre-launch the application.
	EnablePreLaunch bool `json:"enable_pre_launch"`
	// Indicates whether the application pool is enabled.
	Enabled bool `json:"enabled"`
	// Path to application executable.
	ExecutablePath string `json:"executable_path"`
	// Maximum number of multi-sessions a user can have in this application pool. This property is required if multi-session mode is set to \"ENABLED_DEFAULT_OFF\", \"ENABLED_DEFAULT_ON\", or \"ENABLED_ENFORCED\"Default value is 1.
	MaxMultiSessions *int32 `json:"max_multi_sessions,omitempty"`
	// Multi-session mode for the application pool. An application launched in multi-session mode does not support reconnect behavior when user logs in from a different client instance. Multi-session mode should be disabled when pre-launch is enabled.Default value is \"DISABLED\" * DISABLED: Multi-session is not supported for this application. * ENABLED_DEFAULT_OFF: Multi-session is supported for this application but is disabled by default. The client would need to explicitly request multi-session launch, if wanted. If a legacy client is used, this will always result in a single-session application launch. * ENABLED_DEFAULT_ON: Multi-session mode is supported for this application and is enabled by default. The client can request explicitly for single-session launch, if wanted. If a legacy client is used, this will always result in a multi-session application launch. * ENABLED_ENFORCED: Multi-session is supported for this application and it is enforced. The client can not select to launch this application as a single-session application.
	MultiSessionMode *string `json:"multi_session_mode,omitempty"`
	// Parameters to pass to application when launching.
	Parameters *string `json:"parameters,omitempty"`
	// Application publisher
	Publisher *string `json:"publisher,omitempty"`
	// Locations of the category folder in the user's OS containing a shortcut to the application. The value must be set if category folder name is provided.
	ShortcutLocations []string `json:"shortcut_locations,omitempty"`
	// Starting folder for application
	StartFolder *string `json:"start_folder,omitempty"`
	SupportedFileTypesData ApplicationSupportedFileTypesData `json:"supported_file_types_data"`
	// Application version.
	Version *string `json:"version,omitempty"`
}

type _ApplicationPoolUpdateSpec ApplicationPoolUpdateSpec

// NewApplicationPoolUpdateSpec instantiates a new ApplicationPoolUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationPoolUpdateSpec(enablePreLaunch bool, enabled bool, executablePath string, supportedFileTypesData ApplicationSupportedFileTypesData) *ApplicationPoolUpdateSpec {
	this := ApplicationPoolUpdateSpec{}
	this.EnablePreLaunch = enablePreLaunch
	this.Enabled = enabled
	this.ExecutablePath = executablePath
	this.SupportedFileTypesData = supportedFileTypesData
	return &this
}

// NewApplicationPoolUpdateSpecWithDefaults instantiates a new ApplicationPoolUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationPoolUpdateSpecWithDefaults() *ApplicationPoolUpdateSpec {
	this := ApplicationPoolUpdateSpec{}
	return &this
}

// GetAntiAffinityData returns the AntiAffinityData field value if set, zero value otherwise.
func (o *ApplicationPoolUpdateSpec) GetAntiAffinityData() ApplicationAntiAffinityData {
	if o == nil || IsNil(o.AntiAffinityData) {
		var ret ApplicationAntiAffinityData
		return ret
	}
	return *o.AntiAffinityData
}

// GetAntiAffinityDataOk returns a tuple with the AntiAffinityData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolUpdateSpec) GetAntiAffinityDataOk() (*ApplicationAntiAffinityData, bool) {
	if o == nil || IsNil(o.AntiAffinityData) {
		return nil, false
	}
	return o.AntiAffinityData, true
}

// HasAntiAffinityData returns a boolean if a field has been set.
func (o *ApplicationPoolUpdateSpec) HasAntiAffinityData() bool {
	if o != nil && !IsNil(o.AntiAffinityData) {
		return true
	}

	return false
}

// SetAntiAffinityData gets a reference to the given ApplicationAntiAffinityData and assigns it to the AntiAffinityData field.
func (o *ApplicationPoolUpdateSpec) SetAntiAffinityData(v ApplicationAntiAffinityData) {
	o.AntiAffinityData = &v
}

// GetCategoryFolderName returns the CategoryFolderName field value if set, zero value otherwise.
func (o *ApplicationPoolUpdateSpec) GetCategoryFolderName() string {
	if o == nil || IsNil(o.CategoryFolderName) {
		var ret string
		return ret
	}
	return *o.CategoryFolderName
}

// GetCategoryFolderNameOk returns a tuple with the CategoryFolderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolUpdateSpec) GetCategoryFolderNameOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryFolderName) {
		return nil, false
	}
	return o.CategoryFolderName, true
}

// HasCategoryFolderName returns a boolean if a field has been set.
func (o *ApplicationPoolUpdateSpec) HasCategoryFolderName() bool {
	if o != nil && !IsNil(o.CategoryFolderName) {
		return true
	}

	return false
}

// SetCategoryFolderName gets a reference to the given string and assigns it to the CategoryFolderName field.
func (o *ApplicationPoolUpdateSpec) SetCategoryFolderName(v string) {
	o.CategoryFolderName = &v
}

// GetCsRestrictionTags returns the CsRestrictionTags field value if set, zero value otherwise.
func (o *ApplicationPoolUpdateSpec) GetCsRestrictionTags() []string {
	if o == nil || IsNil(o.CsRestrictionTags) {
		var ret []string
		return ret
	}
	return o.CsRestrictionTags
}

// GetCsRestrictionTagsOk returns a tuple with the CsRestrictionTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolUpdateSpec) GetCsRestrictionTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.CsRestrictionTags) {
		return nil, false
	}
	return o.CsRestrictionTags, true
}

// HasCsRestrictionTags returns a boolean if a field has been set.
func (o *ApplicationPoolUpdateSpec) HasCsRestrictionTags() bool {
	if o != nil && !IsNil(o.CsRestrictionTags) {
		return true
	}

	return false
}

// SetCsRestrictionTags gets a reference to the given []string and assigns it to the CsRestrictionTags field.
func (o *ApplicationPoolUpdateSpec) SetCsRestrictionTags(v []string) {
	o.CsRestrictionTags = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ApplicationPoolUpdateSpec) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolUpdateSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ApplicationPoolUpdateSpec) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ApplicationPoolUpdateSpec) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ApplicationPoolUpdateSpec) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolUpdateSpec) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ApplicationPoolUpdateSpec) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ApplicationPoolUpdateSpec) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEnableClientRestrictions returns the EnableClientRestrictions field value if set, zero value otherwise.
func (o *ApplicationPoolUpdateSpec) GetEnableClientRestrictions() bool {
	if o == nil || IsNil(o.EnableClientRestrictions) {
		var ret bool
		return ret
	}
	return *o.EnableClientRestrictions
}

// GetEnableClientRestrictionsOk returns a tuple with the EnableClientRestrictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolUpdateSpec) GetEnableClientRestrictionsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableClientRestrictions) {
		return nil, false
	}
	return o.EnableClientRestrictions, true
}

// HasEnableClientRestrictions returns a boolean if a field has been set.
func (o *ApplicationPoolUpdateSpec) HasEnableClientRestrictions() bool {
	if o != nil && !IsNil(o.EnableClientRestrictions) {
		return true
	}

	return false
}

// SetEnableClientRestrictions gets a reference to the given bool and assigns it to the EnableClientRestrictions field.
func (o *ApplicationPoolUpdateSpec) SetEnableClientRestrictions(v bool) {
	o.EnableClientRestrictions = &v
}

// GetEnablePreLaunch returns the EnablePreLaunch field value
func (o *ApplicationPoolUpdateSpec) GetEnablePreLaunch() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EnablePreLaunch
}

// GetEnablePreLaunchOk returns a tuple with the EnablePreLaunch field value
// and a boolean to check if the value has been set.
func (o *ApplicationPoolUpdateSpec) GetEnablePreLaunchOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnablePreLaunch, true
}

// SetEnablePreLaunch sets field value
func (o *ApplicationPoolUpdateSpec) SetEnablePreLaunch(v bool) {
	o.EnablePreLaunch = v
}

// GetEnabled returns the Enabled field value
func (o *ApplicationPoolUpdateSpec) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ApplicationPoolUpdateSpec) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ApplicationPoolUpdateSpec) SetEnabled(v bool) {
	o.Enabled = v
}

// GetExecutablePath returns the ExecutablePath field value
func (o *ApplicationPoolUpdateSpec) GetExecutablePath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExecutablePath
}

// GetExecutablePathOk returns a tuple with the ExecutablePath field value
// and a boolean to check if the value has been set.
func (o *ApplicationPoolUpdateSpec) GetExecutablePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExecutablePath, true
}

// SetExecutablePath sets field value
func (o *ApplicationPoolUpdateSpec) SetExecutablePath(v string) {
	o.ExecutablePath = v
}

// GetMaxMultiSessions returns the MaxMultiSessions field value if set, zero value otherwise.
func (o *ApplicationPoolUpdateSpec) GetMaxMultiSessions() int32 {
	if o == nil || IsNil(o.MaxMultiSessions) {
		var ret int32
		return ret
	}
	return *o.MaxMultiSessions
}

// GetMaxMultiSessionsOk returns a tuple with the MaxMultiSessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolUpdateSpec) GetMaxMultiSessionsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxMultiSessions) {
		return nil, false
	}
	return o.MaxMultiSessions, true
}

// HasMaxMultiSessions returns a boolean if a field has been set.
func (o *ApplicationPoolUpdateSpec) HasMaxMultiSessions() bool {
	if o != nil && !IsNil(o.MaxMultiSessions) {
		return true
	}

	return false
}

// SetMaxMultiSessions gets a reference to the given int32 and assigns it to the MaxMultiSessions field.
func (o *ApplicationPoolUpdateSpec) SetMaxMultiSessions(v int32) {
	o.MaxMultiSessions = &v
}

// GetMultiSessionMode returns the MultiSessionMode field value if set, zero value otherwise.
func (o *ApplicationPoolUpdateSpec) GetMultiSessionMode() string {
	if o == nil || IsNil(o.MultiSessionMode) {
		var ret string
		return ret
	}
	return *o.MultiSessionMode
}

// GetMultiSessionModeOk returns a tuple with the MultiSessionMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolUpdateSpec) GetMultiSessionModeOk() (*string, bool) {
	if o == nil || IsNil(o.MultiSessionMode) {
		return nil, false
	}
	return o.MultiSessionMode, true
}

// HasMultiSessionMode returns a boolean if a field has been set.
func (o *ApplicationPoolUpdateSpec) HasMultiSessionMode() bool {
	if o != nil && !IsNil(o.MultiSessionMode) {
		return true
	}

	return false
}

// SetMultiSessionMode gets a reference to the given string and assigns it to the MultiSessionMode field.
func (o *ApplicationPoolUpdateSpec) SetMultiSessionMode(v string) {
	o.MultiSessionMode = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *ApplicationPoolUpdateSpec) GetParameters() string {
	if o == nil || IsNil(o.Parameters) {
		var ret string
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolUpdateSpec) GetParametersOk() (*string, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *ApplicationPoolUpdateSpec) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given string and assigns it to the Parameters field.
func (o *ApplicationPoolUpdateSpec) SetParameters(v string) {
	o.Parameters = &v
}

// GetPublisher returns the Publisher field value if set, zero value otherwise.
func (o *ApplicationPoolUpdateSpec) GetPublisher() string {
	if o == nil || IsNil(o.Publisher) {
		var ret string
		return ret
	}
	return *o.Publisher
}

// GetPublisherOk returns a tuple with the Publisher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolUpdateSpec) GetPublisherOk() (*string, bool) {
	if o == nil || IsNil(o.Publisher) {
		return nil, false
	}
	return o.Publisher, true
}

// HasPublisher returns a boolean if a field has been set.
func (o *ApplicationPoolUpdateSpec) HasPublisher() bool {
	if o != nil && !IsNil(o.Publisher) {
		return true
	}

	return false
}

// SetPublisher gets a reference to the given string and assigns it to the Publisher field.
func (o *ApplicationPoolUpdateSpec) SetPublisher(v string) {
	o.Publisher = &v
}

// GetShortcutLocations returns the ShortcutLocations field value if set, zero value otherwise.
func (o *ApplicationPoolUpdateSpec) GetShortcutLocations() []string {
	if o == nil || IsNil(o.ShortcutLocations) {
		var ret []string
		return ret
	}
	return o.ShortcutLocations
}

// GetShortcutLocationsOk returns a tuple with the ShortcutLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolUpdateSpec) GetShortcutLocationsOk() ([]string, bool) {
	if o == nil || IsNil(o.ShortcutLocations) {
		return nil, false
	}
	return o.ShortcutLocations, true
}

// HasShortcutLocations returns a boolean if a field has been set.
func (o *ApplicationPoolUpdateSpec) HasShortcutLocations() bool {
	if o != nil && !IsNil(o.ShortcutLocations) {
		return true
	}

	return false
}

// SetShortcutLocations gets a reference to the given []string and assigns it to the ShortcutLocations field.
func (o *ApplicationPoolUpdateSpec) SetShortcutLocations(v []string) {
	o.ShortcutLocations = v
}

// GetStartFolder returns the StartFolder field value if set, zero value otherwise.
func (o *ApplicationPoolUpdateSpec) GetStartFolder() string {
	if o == nil || IsNil(o.StartFolder) {
		var ret string
		return ret
	}
	return *o.StartFolder
}

// GetStartFolderOk returns a tuple with the StartFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolUpdateSpec) GetStartFolderOk() (*string, bool) {
	if o == nil || IsNil(o.StartFolder) {
		return nil, false
	}
	return o.StartFolder, true
}

// HasStartFolder returns a boolean if a field has been set.
func (o *ApplicationPoolUpdateSpec) HasStartFolder() bool {
	if o != nil && !IsNil(o.StartFolder) {
		return true
	}

	return false
}

// SetStartFolder gets a reference to the given string and assigns it to the StartFolder field.
func (o *ApplicationPoolUpdateSpec) SetStartFolder(v string) {
	o.StartFolder = &v
}

// GetSupportedFileTypesData returns the SupportedFileTypesData field value
func (o *ApplicationPoolUpdateSpec) GetSupportedFileTypesData() ApplicationSupportedFileTypesData {
	if o == nil {
		var ret ApplicationSupportedFileTypesData
		return ret
	}

	return o.SupportedFileTypesData
}

// GetSupportedFileTypesDataOk returns a tuple with the SupportedFileTypesData field value
// and a boolean to check if the value has been set.
func (o *ApplicationPoolUpdateSpec) GetSupportedFileTypesDataOk() (*ApplicationSupportedFileTypesData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SupportedFileTypesData, true
}

// SetSupportedFileTypesData sets field value
func (o *ApplicationPoolUpdateSpec) SetSupportedFileTypesData(v ApplicationSupportedFileTypesData) {
	o.SupportedFileTypesData = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ApplicationPoolUpdateSpec) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolUpdateSpec) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ApplicationPoolUpdateSpec) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ApplicationPoolUpdateSpec) SetVersion(v string) {
	o.Version = &v
}

func (o ApplicationPoolUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationPoolUpdateSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AntiAffinityData) {
		toSerialize["anti_affinity_data"] = o.AntiAffinityData
	}
	if !IsNil(o.CategoryFolderName) {
		toSerialize["category_folder_name"] = o.CategoryFolderName
	}
	if !IsNil(o.CsRestrictionTags) {
		toSerialize["cs_restriction_tags"] = o.CsRestrictionTags
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.EnableClientRestrictions) {
		toSerialize["enable_client_restrictions"] = o.EnableClientRestrictions
	}
	toSerialize["enable_pre_launch"] = o.EnablePreLaunch
	toSerialize["enabled"] = o.Enabled
	toSerialize["executable_path"] = o.ExecutablePath
	if !IsNil(o.MaxMultiSessions) {
		toSerialize["max_multi_sessions"] = o.MaxMultiSessions
	}
	if !IsNil(o.MultiSessionMode) {
		toSerialize["multi_session_mode"] = o.MultiSessionMode
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	if !IsNil(o.Publisher) {
		toSerialize["publisher"] = o.Publisher
	}
	if !IsNil(o.ShortcutLocations) {
		toSerialize["shortcut_locations"] = o.ShortcutLocations
	}
	if !IsNil(o.StartFolder) {
		toSerialize["start_folder"] = o.StartFolder
	}
	toSerialize["supported_file_types_data"] = o.SupportedFileTypesData
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

func (o *ApplicationPoolUpdateSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enable_pre_launch",
		"enabled",
		"executable_path",
		"supported_file_types_data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApplicationPoolUpdateSpec := _ApplicationPoolUpdateSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApplicationPoolUpdateSpec)

	if err != nil {
		return err
	}

	*o = ApplicationPoolUpdateSpec(varApplicationPoolUpdateSpec)

	return err
}

type NullableApplicationPoolUpdateSpec struct {
	value *ApplicationPoolUpdateSpec
	isSet bool
}

func (v NullableApplicationPoolUpdateSpec) Get() *ApplicationPoolUpdateSpec {
	return v.value
}

func (v *NullableApplicationPoolUpdateSpec) Set(val *ApplicationPoolUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationPoolUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationPoolUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationPoolUpdateSpec(val *ApplicationPoolUpdateSpec) *NullableApplicationPoolUpdateSpec {
	return &NullableApplicationPoolUpdateSpec{value: val, isSet: true}
}

func (v NullableApplicationPoolUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationPoolUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


