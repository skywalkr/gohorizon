/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the PreLogonSettingsInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PreLogonSettingsInfo{}

// PreLogonSettingsInfo Information related to Pre Logon Settings.
type PreLogonSettingsInfo struct {
	// Determines how long (in minutes) a refresh token is valid for and an idle View API session continues before the session times out. 
	ApiSessionTimeoutMinutes *int32 `json:"api_session_timeout_minutes,omitempty"`
	// Determines how long an idle admin console session continues before the session times out.
	ConsoleSessionTimeoutMinutes *int32 `json:"console_session_timeout_minutes,omitempty"`
	// Enable/disable pre login message pop up before logging into Horizon admin console
	DisplayPreLoginAdminBanner *bool `json:"display_pre_login_admin_banner,omitempty"`
	// UI Client provide 'remember me' option when this is set to true
	EnableUserNameCaching *bool `json:"enable_user_name_caching,omitempty"`
	// The warning pop up header to be displayed before logging into Horizon admin console, if pre login message pop up is activated for the same.
	PreLoginAdminBannerHeader *string `json:"pre_login_admin_banner_header,omitempty"`
	// The warning pop up message to be displayed before logging into Horizon admin console, if pre login message pop up is activated for the same.
	PreLoginAdminBannerMessage *string `json:"pre_login_admin_banner_message,omitempty"`
}

// NewPreLogonSettingsInfo instantiates a new PreLogonSettingsInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPreLogonSettingsInfo() *PreLogonSettingsInfo {
	this := PreLogonSettingsInfo{}
	return &this
}

// NewPreLogonSettingsInfoWithDefaults instantiates a new PreLogonSettingsInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreLogonSettingsInfoWithDefaults() *PreLogonSettingsInfo {
	this := PreLogonSettingsInfo{}
	return &this
}

// GetApiSessionTimeoutMinutes returns the ApiSessionTimeoutMinutes field value if set, zero value otherwise.
func (o *PreLogonSettingsInfo) GetApiSessionTimeoutMinutes() int32 {
	if o == nil || IsNil(o.ApiSessionTimeoutMinutes) {
		var ret int32
		return ret
	}
	return *o.ApiSessionTimeoutMinutes
}

// GetApiSessionTimeoutMinutesOk returns a tuple with the ApiSessionTimeoutMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreLogonSettingsInfo) GetApiSessionTimeoutMinutesOk() (*int32, bool) {
	if o == nil || IsNil(o.ApiSessionTimeoutMinutes) {
		return nil, false
	}
	return o.ApiSessionTimeoutMinutes, true
}

// HasApiSessionTimeoutMinutes returns a boolean if a field has been set.
func (o *PreLogonSettingsInfo) HasApiSessionTimeoutMinutes() bool {
	if o != nil && !IsNil(o.ApiSessionTimeoutMinutes) {
		return true
	}

	return false
}

// SetApiSessionTimeoutMinutes gets a reference to the given int32 and assigns it to the ApiSessionTimeoutMinutes field.
func (o *PreLogonSettingsInfo) SetApiSessionTimeoutMinutes(v int32) {
	o.ApiSessionTimeoutMinutes = &v
}

// GetConsoleSessionTimeoutMinutes returns the ConsoleSessionTimeoutMinutes field value if set, zero value otherwise.
func (o *PreLogonSettingsInfo) GetConsoleSessionTimeoutMinutes() int32 {
	if o == nil || IsNil(o.ConsoleSessionTimeoutMinutes) {
		var ret int32
		return ret
	}
	return *o.ConsoleSessionTimeoutMinutes
}

// GetConsoleSessionTimeoutMinutesOk returns a tuple with the ConsoleSessionTimeoutMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreLogonSettingsInfo) GetConsoleSessionTimeoutMinutesOk() (*int32, bool) {
	if o == nil || IsNil(o.ConsoleSessionTimeoutMinutes) {
		return nil, false
	}
	return o.ConsoleSessionTimeoutMinutes, true
}

// HasConsoleSessionTimeoutMinutes returns a boolean if a field has been set.
func (o *PreLogonSettingsInfo) HasConsoleSessionTimeoutMinutes() bool {
	if o != nil && !IsNil(o.ConsoleSessionTimeoutMinutes) {
		return true
	}

	return false
}

// SetConsoleSessionTimeoutMinutes gets a reference to the given int32 and assigns it to the ConsoleSessionTimeoutMinutes field.
func (o *PreLogonSettingsInfo) SetConsoleSessionTimeoutMinutes(v int32) {
	o.ConsoleSessionTimeoutMinutes = &v
}

// GetDisplayPreLoginAdminBanner returns the DisplayPreLoginAdminBanner field value if set, zero value otherwise.
func (o *PreLogonSettingsInfo) GetDisplayPreLoginAdminBanner() bool {
	if o == nil || IsNil(o.DisplayPreLoginAdminBanner) {
		var ret bool
		return ret
	}
	return *o.DisplayPreLoginAdminBanner
}

// GetDisplayPreLoginAdminBannerOk returns a tuple with the DisplayPreLoginAdminBanner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreLogonSettingsInfo) GetDisplayPreLoginAdminBannerOk() (*bool, bool) {
	if o == nil || IsNil(o.DisplayPreLoginAdminBanner) {
		return nil, false
	}
	return o.DisplayPreLoginAdminBanner, true
}

// HasDisplayPreLoginAdminBanner returns a boolean if a field has been set.
func (o *PreLogonSettingsInfo) HasDisplayPreLoginAdminBanner() bool {
	if o != nil && !IsNil(o.DisplayPreLoginAdminBanner) {
		return true
	}

	return false
}

// SetDisplayPreLoginAdminBanner gets a reference to the given bool and assigns it to the DisplayPreLoginAdminBanner field.
func (o *PreLogonSettingsInfo) SetDisplayPreLoginAdminBanner(v bool) {
	o.DisplayPreLoginAdminBanner = &v
}

// GetEnableUserNameCaching returns the EnableUserNameCaching field value if set, zero value otherwise.
func (o *PreLogonSettingsInfo) GetEnableUserNameCaching() bool {
	if o == nil || IsNil(o.EnableUserNameCaching) {
		var ret bool
		return ret
	}
	return *o.EnableUserNameCaching
}

// GetEnableUserNameCachingOk returns a tuple with the EnableUserNameCaching field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreLogonSettingsInfo) GetEnableUserNameCachingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableUserNameCaching) {
		return nil, false
	}
	return o.EnableUserNameCaching, true
}

// HasEnableUserNameCaching returns a boolean if a field has been set.
func (o *PreLogonSettingsInfo) HasEnableUserNameCaching() bool {
	if o != nil && !IsNil(o.EnableUserNameCaching) {
		return true
	}

	return false
}

// SetEnableUserNameCaching gets a reference to the given bool and assigns it to the EnableUserNameCaching field.
func (o *PreLogonSettingsInfo) SetEnableUserNameCaching(v bool) {
	o.EnableUserNameCaching = &v
}

// GetPreLoginAdminBannerHeader returns the PreLoginAdminBannerHeader field value if set, zero value otherwise.
func (o *PreLogonSettingsInfo) GetPreLoginAdminBannerHeader() string {
	if o == nil || IsNil(o.PreLoginAdminBannerHeader) {
		var ret string
		return ret
	}
	return *o.PreLoginAdminBannerHeader
}

// GetPreLoginAdminBannerHeaderOk returns a tuple with the PreLoginAdminBannerHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreLogonSettingsInfo) GetPreLoginAdminBannerHeaderOk() (*string, bool) {
	if o == nil || IsNil(o.PreLoginAdminBannerHeader) {
		return nil, false
	}
	return o.PreLoginAdminBannerHeader, true
}

// HasPreLoginAdminBannerHeader returns a boolean if a field has been set.
func (o *PreLogonSettingsInfo) HasPreLoginAdminBannerHeader() bool {
	if o != nil && !IsNil(o.PreLoginAdminBannerHeader) {
		return true
	}

	return false
}

// SetPreLoginAdminBannerHeader gets a reference to the given string and assigns it to the PreLoginAdminBannerHeader field.
func (o *PreLogonSettingsInfo) SetPreLoginAdminBannerHeader(v string) {
	o.PreLoginAdminBannerHeader = &v
}

// GetPreLoginAdminBannerMessage returns the PreLoginAdminBannerMessage field value if set, zero value otherwise.
func (o *PreLogonSettingsInfo) GetPreLoginAdminBannerMessage() string {
	if o == nil || IsNil(o.PreLoginAdminBannerMessage) {
		var ret string
		return ret
	}
	return *o.PreLoginAdminBannerMessage
}

// GetPreLoginAdminBannerMessageOk returns a tuple with the PreLoginAdminBannerMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreLogonSettingsInfo) GetPreLoginAdminBannerMessageOk() (*string, bool) {
	if o == nil || IsNil(o.PreLoginAdminBannerMessage) {
		return nil, false
	}
	return o.PreLoginAdminBannerMessage, true
}

// HasPreLoginAdminBannerMessage returns a boolean if a field has been set.
func (o *PreLogonSettingsInfo) HasPreLoginAdminBannerMessage() bool {
	if o != nil && !IsNil(o.PreLoginAdminBannerMessage) {
		return true
	}

	return false
}

// SetPreLoginAdminBannerMessage gets a reference to the given string and assigns it to the PreLoginAdminBannerMessage field.
func (o *PreLogonSettingsInfo) SetPreLoginAdminBannerMessage(v string) {
	o.PreLoginAdminBannerMessage = &v
}

func (o PreLogonSettingsInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PreLogonSettingsInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiSessionTimeoutMinutes) {
		toSerialize["api_session_timeout_minutes"] = o.ApiSessionTimeoutMinutes
	}
	if !IsNil(o.ConsoleSessionTimeoutMinutes) {
		toSerialize["console_session_timeout_minutes"] = o.ConsoleSessionTimeoutMinutes
	}
	if !IsNil(o.DisplayPreLoginAdminBanner) {
		toSerialize["display_pre_login_admin_banner"] = o.DisplayPreLoginAdminBanner
	}
	if !IsNil(o.EnableUserNameCaching) {
		toSerialize["enable_user_name_caching"] = o.EnableUserNameCaching
	}
	if !IsNil(o.PreLoginAdminBannerHeader) {
		toSerialize["pre_login_admin_banner_header"] = o.PreLoginAdminBannerHeader
	}
	if !IsNil(o.PreLoginAdminBannerMessage) {
		toSerialize["pre_login_admin_banner_message"] = o.PreLoginAdminBannerMessage
	}
	return toSerialize, nil
}

type NullablePreLogonSettingsInfo struct {
	value *PreLogonSettingsInfo
	isSet bool
}

func (v NullablePreLogonSettingsInfo) Get() *PreLogonSettingsInfo {
	return v.value
}

func (v *NullablePreLogonSettingsInfo) Set(val *PreLogonSettingsInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePreLogonSettingsInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePreLogonSettingsInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreLogonSettingsInfo(val *PreLogonSettingsInfo) *NullablePreLogonSettingsInfo {
	return &NullablePreLogonSettingsInfo{value: val, isSet: true}
}

func (v NullablePreLogonSettingsInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreLogonSettingsInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


