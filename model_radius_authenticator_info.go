/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the RADIUSAuthenticatorInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RADIUSAuthenticatorInfo{}

// RADIUSAuthenticatorInfo Information about to RADIUS Authenticator.
type RADIUSAuthenticatorInfo struct {
	// The description for this RADIUS authenticator.
	Description *string `json:"description,omitempty"`
	// Unique ID representing this RADIUS Authenticator.
	Id *string `json:"id,omitempty"`
	// The label for this RADIUS authenticator.
	Label *string `json:"label,omitempty"`
	// The label for the RADIUS authenticator passcode.
	PasscodeLabel *string `json:"passcode_label,omitempty"`
	// List of RADIUS servers.
	RadiusServers []RADIUSServerInfo `json:"radius_servers,omitempty"`
	// The label for the RADIUS authenticator user name.
	UserNameLabel *string `json:"user_name_label,omitempty"`
}

// NewRADIUSAuthenticatorInfo instantiates a new RADIUSAuthenticatorInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRADIUSAuthenticatorInfo() *RADIUSAuthenticatorInfo {
	this := RADIUSAuthenticatorInfo{}
	return &this
}

// NewRADIUSAuthenticatorInfoWithDefaults instantiates a new RADIUSAuthenticatorInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRADIUSAuthenticatorInfoWithDefaults() *RADIUSAuthenticatorInfo {
	this := RADIUSAuthenticatorInfo{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RADIUSAuthenticatorInfo) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RADIUSAuthenticatorInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RADIUSAuthenticatorInfo) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RADIUSAuthenticatorInfo) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RADIUSAuthenticatorInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RADIUSAuthenticatorInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RADIUSAuthenticatorInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RADIUSAuthenticatorInfo) SetId(v string) {
	o.Id = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *RADIUSAuthenticatorInfo) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RADIUSAuthenticatorInfo) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *RADIUSAuthenticatorInfo) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *RADIUSAuthenticatorInfo) SetLabel(v string) {
	o.Label = &v
}

// GetPasscodeLabel returns the PasscodeLabel field value if set, zero value otherwise.
func (o *RADIUSAuthenticatorInfo) GetPasscodeLabel() string {
	if o == nil || IsNil(o.PasscodeLabel) {
		var ret string
		return ret
	}
	return *o.PasscodeLabel
}

// GetPasscodeLabelOk returns a tuple with the PasscodeLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RADIUSAuthenticatorInfo) GetPasscodeLabelOk() (*string, bool) {
	if o == nil || IsNil(o.PasscodeLabel) {
		return nil, false
	}
	return o.PasscodeLabel, true
}

// HasPasscodeLabel returns a boolean if a field has been set.
func (o *RADIUSAuthenticatorInfo) HasPasscodeLabel() bool {
	if o != nil && !IsNil(o.PasscodeLabel) {
		return true
	}

	return false
}

// SetPasscodeLabel gets a reference to the given string and assigns it to the PasscodeLabel field.
func (o *RADIUSAuthenticatorInfo) SetPasscodeLabel(v string) {
	o.PasscodeLabel = &v
}

// GetRadiusServers returns the RadiusServers field value if set, zero value otherwise.
func (o *RADIUSAuthenticatorInfo) GetRadiusServers() []RADIUSServerInfo {
	if o == nil || IsNil(o.RadiusServers) {
		var ret []RADIUSServerInfo
		return ret
	}
	return o.RadiusServers
}

// GetRadiusServersOk returns a tuple with the RadiusServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RADIUSAuthenticatorInfo) GetRadiusServersOk() ([]RADIUSServerInfo, bool) {
	if o == nil || IsNil(o.RadiusServers) {
		return nil, false
	}
	return o.RadiusServers, true
}

// HasRadiusServers returns a boolean if a field has been set.
func (o *RADIUSAuthenticatorInfo) HasRadiusServers() bool {
	if o != nil && !IsNil(o.RadiusServers) {
		return true
	}

	return false
}

// SetRadiusServers gets a reference to the given []RADIUSServerInfo and assigns it to the RadiusServers field.
func (o *RADIUSAuthenticatorInfo) SetRadiusServers(v []RADIUSServerInfo) {
	o.RadiusServers = v
}

// GetUserNameLabel returns the UserNameLabel field value if set, zero value otherwise.
func (o *RADIUSAuthenticatorInfo) GetUserNameLabel() string {
	if o == nil || IsNil(o.UserNameLabel) {
		var ret string
		return ret
	}
	return *o.UserNameLabel
}

// GetUserNameLabelOk returns a tuple with the UserNameLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RADIUSAuthenticatorInfo) GetUserNameLabelOk() (*string, bool) {
	if o == nil || IsNil(o.UserNameLabel) {
		return nil, false
	}
	return o.UserNameLabel, true
}

// HasUserNameLabel returns a boolean if a field has been set.
func (o *RADIUSAuthenticatorInfo) HasUserNameLabel() bool {
	if o != nil && !IsNil(o.UserNameLabel) {
		return true
	}

	return false
}

// SetUserNameLabel gets a reference to the given string and assigns it to the UserNameLabel field.
func (o *RADIUSAuthenticatorInfo) SetUserNameLabel(v string) {
	o.UserNameLabel = &v
}

func (o RADIUSAuthenticatorInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RADIUSAuthenticatorInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.PasscodeLabel) {
		toSerialize["passcode_label"] = o.PasscodeLabel
	}
	if !IsNil(o.RadiusServers) {
		toSerialize["radius_servers"] = o.RadiusServers
	}
	if !IsNil(o.UserNameLabel) {
		toSerialize["user_name_label"] = o.UserNameLabel
	}
	return toSerialize, nil
}

type NullableRADIUSAuthenticatorInfo struct {
	value *RADIUSAuthenticatorInfo
	isSet bool
}

func (v NullableRADIUSAuthenticatorInfo) Get() *RADIUSAuthenticatorInfo {
	return v.value
}

func (v *NullableRADIUSAuthenticatorInfo) Set(val *RADIUSAuthenticatorInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRADIUSAuthenticatorInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRADIUSAuthenticatorInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRADIUSAuthenticatorInfo(val *RADIUSAuthenticatorInfo) *NullableRADIUSAuthenticatorInfo {
	return &NullableRADIUSAuthenticatorInfo{value: val, isSet: true}
}

func (v NullableRADIUSAuthenticatorInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRADIUSAuthenticatorInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


