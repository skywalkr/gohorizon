/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// ViewComposerMonitorDetails Details of the View Composer.
type ViewComposerMonitorDetails struct {
	// The version of the View Composer API used to communicate with the View Composer server.
	ApiVerion string `json:"api_verion"`
	// The build of the View Composer server.
	Build string `json:"build"`
	// The minimum ESX version required for compatibility with this View Composer server.
	MinEsxVersion string `json:"min_esx_version"`
	// The minimum Virtual Center version required for compatibility with this View Composer server.
	MinVcVersion string `json:"min_vc_version"`
	// The Virtual Center servers referencing to this View Composer.
	ReferencedVcs []string `json:"referenced_vcs"`
	// The version of the View Composer server.
	Version string `json:"version"`
}

// NewViewComposerMonitorDetails instantiates a new ViewComposerMonitorDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewComposerMonitorDetails(apiVerion string, build string, minEsxVersion string, minVcVersion string, referencedVcs []string, version string) *ViewComposerMonitorDetails {
	this := ViewComposerMonitorDetails{}
	this.ApiVerion = apiVerion
	this.Build = build
	this.MinEsxVersion = minEsxVersion
	this.MinVcVersion = minVcVersion
	this.ReferencedVcs = referencedVcs
	this.Version = version
	return &this
}

// NewViewComposerMonitorDetailsWithDefaults instantiates a new ViewComposerMonitorDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewComposerMonitorDetailsWithDefaults() *ViewComposerMonitorDetails {
	this := ViewComposerMonitorDetails{}
	return &this
}

// GetApiVerion returns the ApiVerion field value
func (o *ViewComposerMonitorDetails) GetApiVerion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiVerion
}

// GetApiVerionOk returns a tuple with the ApiVerion field value
// and a boolean to check if the value has been set.
func (o *ViewComposerMonitorDetails) GetApiVerionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiVerion, true
}

// SetApiVerion sets field value
func (o *ViewComposerMonitorDetails) SetApiVerion(v string) {
	o.ApiVerion = v
}

// GetBuild returns the Build field value
func (o *ViewComposerMonitorDetails) GetBuild() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Build
}

// GetBuildOk returns a tuple with the Build field value
// and a boolean to check if the value has been set.
func (o *ViewComposerMonitorDetails) GetBuildOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Build, true
}

// SetBuild sets field value
func (o *ViewComposerMonitorDetails) SetBuild(v string) {
	o.Build = v
}

// GetMinEsxVersion returns the MinEsxVersion field value
func (o *ViewComposerMonitorDetails) GetMinEsxVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MinEsxVersion
}

// GetMinEsxVersionOk returns a tuple with the MinEsxVersion field value
// and a boolean to check if the value has been set.
func (o *ViewComposerMonitorDetails) GetMinEsxVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinEsxVersion, true
}

// SetMinEsxVersion sets field value
func (o *ViewComposerMonitorDetails) SetMinEsxVersion(v string) {
	o.MinEsxVersion = v
}

// GetMinVcVersion returns the MinVcVersion field value
func (o *ViewComposerMonitorDetails) GetMinVcVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MinVcVersion
}

// GetMinVcVersionOk returns a tuple with the MinVcVersion field value
// and a boolean to check if the value has been set.
func (o *ViewComposerMonitorDetails) GetMinVcVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinVcVersion, true
}

// SetMinVcVersion sets field value
func (o *ViewComposerMonitorDetails) SetMinVcVersion(v string) {
	o.MinVcVersion = v
}

// GetReferencedVcs returns the ReferencedVcs field value
func (o *ViewComposerMonitorDetails) GetReferencedVcs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ReferencedVcs
}

// GetReferencedVcsOk returns a tuple with the ReferencedVcs field value
// and a boolean to check if the value has been set.
func (o *ViewComposerMonitorDetails) GetReferencedVcsOk() (*[]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferencedVcs, true
}

// SetReferencedVcs sets field value
func (o *ViewComposerMonitorDetails) SetReferencedVcs(v []string) {
	o.ReferencedVcs = v
}

// GetVersion returns the Version field value
func (o *ViewComposerMonitorDetails) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ViewComposerMonitorDetails) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ViewComposerMonitorDetails) SetVersion(v string) {
	o.Version = v
}

func (o ViewComposerMonitorDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["api_verion"] = o.ApiVerion
	}
	if true {
		toSerialize["build"] = o.Build
	}
	if true {
		toSerialize["min_esx_version"] = o.MinEsxVersion
	}
	if true {
		toSerialize["min_vc_version"] = o.MinVcVersion
	}
	if true {
		toSerialize["referenced_vcs"] = o.ReferencedVcs
	}
	if true {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableViewComposerMonitorDetails struct {
	value *ViewComposerMonitorDetails
	isSet bool
}

func (v NullableViewComposerMonitorDetails) Get() *ViewComposerMonitorDetails {
	return v.value
}

func (v *NullableViewComposerMonitorDetails) Set(val *ViewComposerMonitorDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableViewComposerMonitorDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableViewComposerMonitorDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewComposerMonitorDetails(val *ViewComposerMonitorDetails) *NullableViewComposerMonitorDetails {
	return &NullableViewComposerMonitorDetails{value: val, isSet: true}
}

func (v NullableViewComposerMonitorDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewComposerMonitorDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
