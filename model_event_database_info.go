/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the EventDatabaseInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventDatabaseInfo{}

// EventDatabaseInfo Information about event database.
type EventDatabaseInfo struct {
	// The number of events administrator can see in the admin console.
	AdminEventsCount *int32 `json:"admin_events_count,omitempty"`
	// Events will be marked as new for a time based on the value.
	ClassifyEventsAsNewForDays *int32 `json:"classify_events_as_new_for_days,omitempty"`
	// Name of the database on the database server to use for storing events. Note that this database must exist on the server or the values cannot be saved.
	DatabaseName *string `json:"database_name,omitempty"`
	// Indicates if the event database has been configured or not.
	EventDatabaseConfigured *bool `json:"event_database_configured,omitempty"`
	// Port number on the database server to which Horizon will send events.
	Port *int32 `json:"port,omitempty"`
	// Query execution timeout in seconds.
	QueryTimeoutSeconds *int32 `json:"query_timeout_seconds,omitempty"`
	// The server that hosts the database which will be used to store events.
	ServerName *string `json:"server_name,omitempty"`
	// Events will be shown in the Horizon Admin console for a time based on this value. * ONE_WEEK: One week. * TWO_WEEKS: Two weeks. * THREE_WEEKS: Three weeks. * ONE_MONTH: One month. * TWO_MONTHS: Two months. * THREE_MONTHS: Three months. * SIX_MONTHS: Six months.
	ShowEventsForTime *string `json:"show_events_for_time,omitempty"`
	// If present, all tables for this instance will start with this prefix. This allows multiple brokers to use the same events database without trampling on other broker data.
	TablePrefix *string `json:"table_prefix,omitempty"`
	// Timing Profiler data will be kept in database for a time based on the value. Timing Profiler Data will not be stored in Event DB.
	TimingProfilerDataLongevityDays *int32 `json:"timing_profiler_data_longevity_days,omitempty"`
	// The type of database to use for the event database. * ORACLE: An Oracle database. * SQL_SERVER: A SQL server database. * POSTGRESQL: A PostgreSQL database.
	Type *string `json:"type,omitempty"`
	// Username to use for the connection to the event database.
	Username *string `json:"username,omitempty"`
}

// NewEventDatabaseInfo instantiates a new EventDatabaseInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventDatabaseInfo() *EventDatabaseInfo {
	this := EventDatabaseInfo{}
	return &this
}

// NewEventDatabaseInfoWithDefaults instantiates a new EventDatabaseInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventDatabaseInfoWithDefaults() *EventDatabaseInfo {
	this := EventDatabaseInfo{}
	return &this
}

// GetAdminEventsCount returns the AdminEventsCount field value if set, zero value otherwise.
func (o *EventDatabaseInfo) GetAdminEventsCount() int32 {
	if o == nil || IsNil(o.AdminEventsCount) {
		var ret int32
		return ret
	}
	return *o.AdminEventsCount
}

// GetAdminEventsCountOk returns a tuple with the AdminEventsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDatabaseInfo) GetAdminEventsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.AdminEventsCount) {
		return nil, false
	}
	return o.AdminEventsCount, true
}

// HasAdminEventsCount returns a boolean if a field has been set.
func (o *EventDatabaseInfo) HasAdminEventsCount() bool {
	if o != nil && !IsNil(o.AdminEventsCount) {
		return true
	}

	return false
}

// SetAdminEventsCount gets a reference to the given int32 and assigns it to the AdminEventsCount field.
func (o *EventDatabaseInfo) SetAdminEventsCount(v int32) {
	o.AdminEventsCount = &v
}

// GetClassifyEventsAsNewForDays returns the ClassifyEventsAsNewForDays field value if set, zero value otherwise.
func (o *EventDatabaseInfo) GetClassifyEventsAsNewForDays() int32 {
	if o == nil || IsNil(o.ClassifyEventsAsNewForDays) {
		var ret int32
		return ret
	}
	return *o.ClassifyEventsAsNewForDays
}

// GetClassifyEventsAsNewForDaysOk returns a tuple with the ClassifyEventsAsNewForDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDatabaseInfo) GetClassifyEventsAsNewForDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.ClassifyEventsAsNewForDays) {
		return nil, false
	}
	return o.ClassifyEventsAsNewForDays, true
}

// HasClassifyEventsAsNewForDays returns a boolean if a field has been set.
func (o *EventDatabaseInfo) HasClassifyEventsAsNewForDays() bool {
	if o != nil && !IsNil(o.ClassifyEventsAsNewForDays) {
		return true
	}

	return false
}

// SetClassifyEventsAsNewForDays gets a reference to the given int32 and assigns it to the ClassifyEventsAsNewForDays field.
func (o *EventDatabaseInfo) SetClassifyEventsAsNewForDays(v int32) {
	o.ClassifyEventsAsNewForDays = &v
}

// GetDatabaseName returns the DatabaseName field value if set, zero value otherwise.
func (o *EventDatabaseInfo) GetDatabaseName() string {
	if o == nil || IsNil(o.DatabaseName) {
		var ret string
		return ret
	}
	return *o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDatabaseInfo) GetDatabaseNameOk() (*string, bool) {
	if o == nil || IsNil(o.DatabaseName) {
		return nil, false
	}
	return o.DatabaseName, true
}

// HasDatabaseName returns a boolean if a field has been set.
func (o *EventDatabaseInfo) HasDatabaseName() bool {
	if o != nil && !IsNil(o.DatabaseName) {
		return true
	}

	return false
}

// SetDatabaseName gets a reference to the given string and assigns it to the DatabaseName field.
func (o *EventDatabaseInfo) SetDatabaseName(v string) {
	o.DatabaseName = &v
}

// GetEventDatabaseConfigured returns the EventDatabaseConfigured field value if set, zero value otherwise.
func (o *EventDatabaseInfo) GetEventDatabaseConfigured() bool {
	if o == nil || IsNil(o.EventDatabaseConfigured) {
		var ret bool
		return ret
	}
	return *o.EventDatabaseConfigured
}

// GetEventDatabaseConfiguredOk returns a tuple with the EventDatabaseConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDatabaseInfo) GetEventDatabaseConfiguredOk() (*bool, bool) {
	if o == nil || IsNil(o.EventDatabaseConfigured) {
		return nil, false
	}
	return o.EventDatabaseConfigured, true
}

// HasEventDatabaseConfigured returns a boolean if a field has been set.
func (o *EventDatabaseInfo) HasEventDatabaseConfigured() bool {
	if o != nil && !IsNil(o.EventDatabaseConfigured) {
		return true
	}

	return false
}

// SetEventDatabaseConfigured gets a reference to the given bool and assigns it to the EventDatabaseConfigured field.
func (o *EventDatabaseInfo) SetEventDatabaseConfigured(v bool) {
	o.EventDatabaseConfigured = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *EventDatabaseInfo) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDatabaseInfo) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *EventDatabaseInfo) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *EventDatabaseInfo) SetPort(v int32) {
	o.Port = &v
}

// GetQueryTimeoutSeconds returns the QueryTimeoutSeconds field value if set, zero value otherwise.
func (o *EventDatabaseInfo) GetQueryTimeoutSeconds() int32 {
	if o == nil || IsNil(o.QueryTimeoutSeconds) {
		var ret int32
		return ret
	}
	return *o.QueryTimeoutSeconds
}

// GetQueryTimeoutSecondsOk returns a tuple with the QueryTimeoutSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDatabaseInfo) GetQueryTimeoutSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.QueryTimeoutSeconds) {
		return nil, false
	}
	return o.QueryTimeoutSeconds, true
}

// HasQueryTimeoutSeconds returns a boolean if a field has been set.
func (o *EventDatabaseInfo) HasQueryTimeoutSeconds() bool {
	if o != nil && !IsNil(o.QueryTimeoutSeconds) {
		return true
	}

	return false
}

// SetQueryTimeoutSeconds gets a reference to the given int32 and assigns it to the QueryTimeoutSeconds field.
func (o *EventDatabaseInfo) SetQueryTimeoutSeconds(v int32) {
	o.QueryTimeoutSeconds = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *EventDatabaseInfo) GetServerName() string {
	if o == nil || IsNil(o.ServerName) {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDatabaseInfo) GetServerNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerName) {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *EventDatabaseInfo) HasServerName() bool {
	if o != nil && !IsNil(o.ServerName) {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *EventDatabaseInfo) SetServerName(v string) {
	o.ServerName = &v
}

// GetShowEventsForTime returns the ShowEventsForTime field value if set, zero value otherwise.
func (o *EventDatabaseInfo) GetShowEventsForTime() string {
	if o == nil || IsNil(o.ShowEventsForTime) {
		var ret string
		return ret
	}
	return *o.ShowEventsForTime
}

// GetShowEventsForTimeOk returns a tuple with the ShowEventsForTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDatabaseInfo) GetShowEventsForTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ShowEventsForTime) {
		return nil, false
	}
	return o.ShowEventsForTime, true
}

// HasShowEventsForTime returns a boolean if a field has been set.
func (o *EventDatabaseInfo) HasShowEventsForTime() bool {
	if o != nil && !IsNil(o.ShowEventsForTime) {
		return true
	}

	return false
}

// SetShowEventsForTime gets a reference to the given string and assigns it to the ShowEventsForTime field.
func (o *EventDatabaseInfo) SetShowEventsForTime(v string) {
	o.ShowEventsForTime = &v
}

// GetTablePrefix returns the TablePrefix field value if set, zero value otherwise.
func (o *EventDatabaseInfo) GetTablePrefix() string {
	if o == nil || IsNil(o.TablePrefix) {
		var ret string
		return ret
	}
	return *o.TablePrefix
}

// GetTablePrefixOk returns a tuple with the TablePrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDatabaseInfo) GetTablePrefixOk() (*string, bool) {
	if o == nil || IsNil(o.TablePrefix) {
		return nil, false
	}
	return o.TablePrefix, true
}

// HasTablePrefix returns a boolean if a field has been set.
func (o *EventDatabaseInfo) HasTablePrefix() bool {
	if o != nil && !IsNil(o.TablePrefix) {
		return true
	}

	return false
}

// SetTablePrefix gets a reference to the given string and assigns it to the TablePrefix field.
func (o *EventDatabaseInfo) SetTablePrefix(v string) {
	o.TablePrefix = &v
}

// GetTimingProfilerDataLongevityDays returns the TimingProfilerDataLongevityDays field value if set, zero value otherwise.
func (o *EventDatabaseInfo) GetTimingProfilerDataLongevityDays() int32 {
	if o == nil || IsNil(o.TimingProfilerDataLongevityDays) {
		var ret int32
		return ret
	}
	return *o.TimingProfilerDataLongevityDays
}

// GetTimingProfilerDataLongevityDaysOk returns a tuple with the TimingProfilerDataLongevityDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDatabaseInfo) GetTimingProfilerDataLongevityDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.TimingProfilerDataLongevityDays) {
		return nil, false
	}
	return o.TimingProfilerDataLongevityDays, true
}

// HasTimingProfilerDataLongevityDays returns a boolean if a field has been set.
func (o *EventDatabaseInfo) HasTimingProfilerDataLongevityDays() bool {
	if o != nil && !IsNil(o.TimingProfilerDataLongevityDays) {
		return true
	}

	return false
}

// SetTimingProfilerDataLongevityDays gets a reference to the given int32 and assigns it to the TimingProfilerDataLongevityDays field.
func (o *EventDatabaseInfo) SetTimingProfilerDataLongevityDays(v int32) {
	o.TimingProfilerDataLongevityDays = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EventDatabaseInfo) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDatabaseInfo) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EventDatabaseInfo) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EventDatabaseInfo) SetType(v string) {
	o.Type = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *EventDatabaseInfo) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDatabaseInfo) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *EventDatabaseInfo) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *EventDatabaseInfo) SetUsername(v string) {
	o.Username = &v
}

func (o EventDatabaseInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventDatabaseInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdminEventsCount) {
		toSerialize["admin_events_count"] = o.AdminEventsCount
	}
	if !IsNil(o.ClassifyEventsAsNewForDays) {
		toSerialize["classify_events_as_new_for_days"] = o.ClassifyEventsAsNewForDays
	}
	if !IsNil(o.DatabaseName) {
		toSerialize["database_name"] = o.DatabaseName
	}
	if !IsNil(o.EventDatabaseConfigured) {
		toSerialize["event_database_configured"] = o.EventDatabaseConfigured
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.QueryTimeoutSeconds) {
		toSerialize["query_timeout_seconds"] = o.QueryTimeoutSeconds
	}
	if !IsNil(o.ServerName) {
		toSerialize["server_name"] = o.ServerName
	}
	if !IsNil(o.ShowEventsForTime) {
		toSerialize["show_events_for_time"] = o.ShowEventsForTime
	}
	if !IsNil(o.TablePrefix) {
		toSerialize["table_prefix"] = o.TablePrefix
	}
	if !IsNil(o.TimingProfilerDataLongevityDays) {
		toSerialize["timing_profiler_data_longevity_days"] = o.TimingProfilerDataLongevityDays
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableEventDatabaseInfo struct {
	value *EventDatabaseInfo
	isSet bool
}

func (v NullableEventDatabaseInfo) Get() *EventDatabaseInfo {
	return v.value
}

func (v *NullableEventDatabaseInfo) Set(val *EventDatabaseInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableEventDatabaseInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableEventDatabaseInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventDatabaseInfo(val *EventDatabaseInfo) *NullableEventDatabaseInfo {
	return &NullableEventDatabaseInfo{value: val, isSet: true}
}

func (v NullableEventDatabaseInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventDatabaseInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


