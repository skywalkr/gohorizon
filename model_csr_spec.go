/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CsrSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CsrSpec{}

// CsrSpec Generate Certificate Signing Request(CSR).
type CsrSpec struct {
	// Indicates the type of certificate based on usage. * MACHINE: vdm certificates
	CertificateUsage string `json:"certificate_usage"`
	// Subject alternative DNS names.
	DnsSubjectAlternativeNames []string `json:"dns_subject_alternative_names,omitempty"`
	// Subject name.
	SubjectName string `json:"subject_name"`
}

type _CsrSpec CsrSpec

// NewCsrSpec instantiates a new CsrSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCsrSpec(certificateUsage string, subjectName string) *CsrSpec {
	this := CsrSpec{}
	this.CertificateUsage = certificateUsage
	this.SubjectName = subjectName
	return &this
}

// NewCsrSpecWithDefaults instantiates a new CsrSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCsrSpecWithDefaults() *CsrSpec {
	this := CsrSpec{}
	return &this
}

// GetCertificateUsage returns the CertificateUsage field value
func (o *CsrSpec) GetCertificateUsage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CertificateUsage
}

// GetCertificateUsageOk returns a tuple with the CertificateUsage field value
// and a boolean to check if the value has been set.
func (o *CsrSpec) GetCertificateUsageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertificateUsage, true
}

// SetCertificateUsage sets field value
func (o *CsrSpec) SetCertificateUsage(v string) {
	o.CertificateUsage = v
}

// GetDnsSubjectAlternativeNames returns the DnsSubjectAlternativeNames field value if set, zero value otherwise.
func (o *CsrSpec) GetDnsSubjectAlternativeNames() []string {
	if o == nil || IsNil(o.DnsSubjectAlternativeNames) {
		var ret []string
		return ret
	}
	return o.DnsSubjectAlternativeNames
}

// GetDnsSubjectAlternativeNamesOk returns a tuple with the DnsSubjectAlternativeNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CsrSpec) GetDnsSubjectAlternativeNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.DnsSubjectAlternativeNames) {
		return nil, false
	}
	return o.DnsSubjectAlternativeNames, true
}

// HasDnsSubjectAlternativeNames returns a boolean if a field has been set.
func (o *CsrSpec) HasDnsSubjectAlternativeNames() bool {
	if o != nil && !IsNil(o.DnsSubjectAlternativeNames) {
		return true
	}

	return false
}

// SetDnsSubjectAlternativeNames gets a reference to the given []string and assigns it to the DnsSubjectAlternativeNames field.
func (o *CsrSpec) SetDnsSubjectAlternativeNames(v []string) {
	o.DnsSubjectAlternativeNames = v
}

// GetSubjectName returns the SubjectName field value
func (o *CsrSpec) GetSubjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubjectName
}

// GetSubjectNameOk returns a tuple with the SubjectName field value
// and a boolean to check if the value has been set.
func (o *CsrSpec) GetSubjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubjectName, true
}

// SetSubjectName sets field value
func (o *CsrSpec) SetSubjectName(v string) {
	o.SubjectName = v
}

func (o CsrSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CsrSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["certificate_usage"] = o.CertificateUsage
	if !IsNil(o.DnsSubjectAlternativeNames) {
		toSerialize["dns_subject_alternative_names"] = o.DnsSubjectAlternativeNames
	}
	toSerialize["subject_name"] = o.SubjectName
	return toSerialize, nil
}

func (o *CsrSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"certificate_usage",
		"subject_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCsrSpec := _CsrSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCsrSpec)

	if err != nil {
		return err
	}

	*o = CsrSpec(varCsrSpec)

	return err
}

type NullableCsrSpec struct {
	value *CsrSpec
	isSet bool
}

func (v NullableCsrSpec) Get() *CsrSpec {
	return v.value
}

func (v *NullableCsrSpec) Set(val *CsrSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCsrSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCsrSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCsrSpec(val *CsrSpec) *NullableCsrSpec {
	return &NullableCsrSpec{value: val, isSet: true}
}

func (v NullableCsrSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCsrSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


