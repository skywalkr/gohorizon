/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the BaseVMInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseVMInfo{}

// BaseVMInfo Information related to base VM.
type BaseVMInfo struct {
	// Datacenter id for this VM.
	DatacenterId *string `json:"datacenter_id,omitempty"`
	// Unique ID representing a VM.
	Id *string `json:"id,omitempty"`
	// Reasons that may preclude this BaseVM from having its snapshots used in linked or instant clone desktop or farm creation.
	IncompatibleReasons []string `json:"incompatible_reasons,omitempty"`
	// VM name.
	Name *string `json:"name,omitempty"`
	// Type of network base VM belongs to. * STANDARD_NETWORK: Standard network. * OPAQUE_NETWORK: Opaque network. * DISTRUBUTED_VIRTUAL_PORT_GROUP: DVS port group.
	NetworkType *string `json:"network_type,omitempty"`
	// Operating system. * UNKNOWN: Unknown * WINDOWS_XP: Windows XP * WINDOWS_VISTA: Windows Vista * WINDOWS_7: Windows 7 * WINDOWS_8: Windows 8 * WINDOWS_10: Windows 10 * WINDOWS_11: Windows 11 * WINDOWS_SERVER_2003: Windows Server 2003 * WINDOWS_SERVER_2008: Windows Server 2008 * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2 * WINDOWS_SERVER_2012: Windows Server 2012 * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2 * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above * LINUX_OTHER: Linux (other) * LINUX_SERVER_OTHER: Linux server (other) * LINUX_UBUNTU: Linux (Ubuntu) * LINUX_RHEL: Linux (Red Hat Enterprise) * LINUX_SUSE: Linux (Suse) * LINUX_CENTOS: Linux (CentOS)
	OperatingSystem *string `json:"operating_system,omitempty"`
	// Operating system display name from Virtual Center.
	OperatingSystemDisplayName *string `json:"operating_system_display_name,omitempty"`
	// VM path.
	Path *string `json:"path,omitempty"`
	// Virtual Center id for this VM.
	VcenterId *string `json:"vcenter_id,omitempty"`
}

// NewBaseVMInfo instantiates a new BaseVMInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseVMInfo() *BaseVMInfo {
	this := BaseVMInfo{}
	return &this
}

// NewBaseVMInfoWithDefaults instantiates a new BaseVMInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseVMInfoWithDefaults() *BaseVMInfo {
	this := BaseVMInfo{}
	return &this
}

// GetDatacenterId returns the DatacenterId field value if set, zero value otherwise.
func (o *BaseVMInfo) GetDatacenterId() string {
	if o == nil || IsNil(o.DatacenterId) {
		var ret string
		return ret
	}
	return *o.DatacenterId
}

// GetDatacenterIdOk returns a tuple with the DatacenterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseVMInfo) GetDatacenterIdOk() (*string, bool) {
	if o == nil || IsNil(o.DatacenterId) {
		return nil, false
	}
	return o.DatacenterId, true
}

// HasDatacenterId returns a boolean if a field has been set.
func (o *BaseVMInfo) HasDatacenterId() bool {
	if o != nil && !IsNil(o.DatacenterId) {
		return true
	}

	return false
}

// SetDatacenterId gets a reference to the given string and assigns it to the DatacenterId field.
func (o *BaseVMInfo) SetDatacenterId(v string) {
	o.DatacenterId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BaseVMInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseVMInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BaseVMInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BaseVMInfo) SetId(v string) {
	o.Id = &v
}

// GetIncompatibleReasons returns the IncompatibleReasons field value if set, zero value otherwise.
func (o *BaseVMInfo) GetIncompatibleReasons() []string {
	if o == nil || IsNil(o.IncompatibleReasons) {
		var ret []string
		return ret
	}
	return o.IncompatibleReasons
}

// GetIncompatibleReasonsOk returns a tuple with the IncompatibleReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseVMInfo) GetIncompatibleReasonsOk() ([]string, bool) {
	if o == nil || IsNil(o.IncompatibleReasons) {
		return nil, false
	}
	return o.IncompatibleReasons, true
}

// HasIncompatibleReasons returns a boolean if a field has been set.
func (o *BaseVMInfo) HasIncompatibleReasons() bool {
	if o != nil && !IsNil(o.IncompatibleReasons) {
		return true
	}

	return false
}

// SetIncompatibleReasons gets a reference to the given []string and assigns it to the IncompatibleReasons field.
func (o *BaseVMInfo) SetIncompatibleReasons(v []string) {
	o.IncompatibleReasons = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BaseVMInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseVMInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BaseVMInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BaseVMInfo) SetName(v string) {
	o.Name = &v
}

// GetNetworkType returns the NetworkType field value if set, zero value otherwise.
func (o *BaseVMInfo) GetNetworkType() string {
	if o == nil || IsNil(o.NetworkType) {
		var ret string
		return ret
	}
	return *o.NetworkType
}

// GetNetworkTypeOk returns a tuple with the NetworkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseVMInfo) GetNetworkTypeOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkType) {
		return nil, false
	}
	return o.NetworkType, true
}

// HasNetworkType returns a boolean if a field has been set.
func (o *BaseVMInfo) HasNetworkType() bool {
	if o != nil && !IsNil(o.NetworkType) {
		return true
	}

	return false
}

// SetNetworkType gets a reference to the given string and assigns it to the NetworkType field.
func (o *BaseVMInfo) SetNetworkType(v string) {
	o.NetworkType = &v
}

// GetOperatingSystem returns the OperatingSystem field value if set, zero value otherwise.
func (o *BaseVMInfo) GetOperatingSystem() string {
	if o == nil || IsNil(o.OperatingSystem) {
		var ret string
		return ret
	}
	return *o.OperatingSystem
}

// GetOperatingSystemOk returns a tuple with the OperatingSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseVMInfo) GetOperatingSystemOk() (*string, bool) {
	if o == nil || IsNil(o.OperatingSystem) {
		return nil, false
	}
	return o.OperatingSystem, true
}

// HasOperatingSystem returns a boolean if a field has been set.
func (o *BaseVMInfo) HasOperatingSystem() bool {
	if o != nil && !IsNil(o.OperatingSystem) {
		return true
	}

	return false
}

// SetOperatingSystem gets a reference to the given string and assigns it to the OperatingSystem field.
func (o *BaseVMInfo) SetOperatingSystem(v string) {
	o.OperatingSystem = &v
}

// GetOperatingSystemDisplayName returns the OperatingSystemDisplayName field value if set, zero value otherwise.
func (o *BaseVMInfo) GetOperatingSystemDisplayName() string {
	if o == nil || IsNil(o.OperatingSystemDisplayName) {
		var ret string
		return ret
	}
	return *o.OperatingSystemDisplayName
}

// GetOperatingSystemDisplayNameOk returns a tuple with the OperatingSystemDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseVMInfo) GetOperatingSystemDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.OperatingSystemDisplayName) {
		return nil, false
	}
	return o.OperatingSystemDisplayName, true
}

// HasOperatingSystemDisplayName returns a boolean if a field has been set.
func (o *BaseVMInfo) HasOperatingSystemDisplayName() bool {
	if o != nil && !IsNil(o.OperatingSystemDisplayName) {
		return true
	}

	return false
}

// SetOperatingSystemDisplayName gets a reference to the given string and assigns it to the OperatingSystemDisplayName field.
func (o *BaseVMInfo) SetOperatingSystemDisplayName(v string) {
	o.OperatingSystemDisplayName = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *BaseVMInfo) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseVMInfo) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *BaseVMInfo) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *BaseVMInfo) SetPath(v string) {
	o.Path = &v
}

// GetVcenterId returns the VcenterId field value if set, zero value otherwise.
func (o *BaseVMInfo) GetVcenterId() string {
	if o == nil || IsNil(o.VcenterId) {
		var ret string
		return ret
	}
	return *o.VcenterId
}

// GetVcenterIdOk returns a tuple with the VcenterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseVMInfo) GetVcenterIdOk() (*string, bool) {
	if o == nil || IsNil(o.VcenterId) {
		return nil, false
	}
	return o.VcenterId, true
}

// HasVcenterId returns a boolean if a field has been set.
func (o *BaseVMInfo) HasVcenterId() bool {
	if o != nil && !IsNil(o.VcenterId) {
		return true
	}

	return false
}

// SetVcenterId gets a reference to the given string and assigns it to the VcenterId field.
func (o *BaseVMInfo) SetVcenterId(v string) {
	o.VcenterId = &v
}

func (o BaseVMInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseVMInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DatacenterId) {
		toSerialize["datacenter_id"] = o.DatacenterId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IncompatibleReasons) {
		toSerialize["incompatible_reasons"] = o.IncompatibleReasons
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NetworkType) {
		toSerialize["network_type"] = o.NetworkType
	}
	if !IsNil(o.OperatingSystem) {
		toSerialize["operating_system"] = o.OperatingSystem
	}
	if !IsNil(o.OperatingSystemDisplayName) {
		toSerialize["operating_system_display_name"] = o.OperatingSystemDisplayName
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.VcenterId) {
		toSerialize["vcenter_id"] = o.VcenterId
	}
	return toSerialize, nil
}

type NullableBaseVMInfo struct {
	value *BaseVMInfo
	isSet bool
}

func (v NullableBaseVMInfo) Get() *BaseVMInfo {
	return v.value
}

func (v *NullableBaseVMInfo) Set(val *BaseVMInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseVMInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseVMInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseVMInfo(val *BaseVMInfo) *NullableBaseVMInfo {
	return &NullableBaseVMInfo{value: val, isSet: true}
}

func (v NullableBaseVMInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseVMInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


