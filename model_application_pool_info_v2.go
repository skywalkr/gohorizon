/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the ApplicationPoolInfoV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationPoolInfoV2{}

// ApplicationPoolInfoV2 Information related to Application Pool.<br>List API returning this information can use search filter query to filter on specific fields supported by filters.<br>Supported Filters: 'And', 'Or', 'Equals', 'StartsWith', 'Contains' and 'EndsWith'.<br>See the field description to know the filter types it supports.
type ApplicationPoolInfoV2 struct {
	// Access groups can organize the entities (like application pools, desktop pools) in the organization. They can also be used for delegated administration. For application pool, this is the same as that of the farm or desktop pool that the application pool belongs to.<br>Supported Filters: 'Equals'.
	AccessGroupId *string `json:"access_group_id,omitempty"`
	AntiAffinityData *ApplicationAntiAffinityData `json:"anti_affinity_data,omitempty"`
	// Name of the category folder in the user's OS containing a shortcut to the application. Unset if the application does not belong to a category.
	CategoryFolderName *string `json:"category_folder_name,omitempty"`
	// Connection server restrictions. Application pool can be accessed from only those connection server instances that have a matching tag in this list. Null or empty list means that the application pool can be accessed from any connection server.
	CsRestrictionTags []string `json:"cs_restriction_tags,omitempty"`
	// List of customized icon IDs associated with the application which the user has configured.
	CustomizedIconIds []string `json:"customized_icon_ids,omitempty"`
	// Notes about the application pool.<br>Supported Filters: 'Equals', 'StartsWith' and 'Contains'.
	Description *string `json:"description,omitempty"`
	// ID of the desktop pool from which this application pool is created. Either this or farm id will be set.<br>Supported Filters: 'Equals'.
	DesktopPoolId *string `json:"desktop_pool_id,omitempty"`
	// The display name is the name that users will see when they connect to view client. If the display name is left blank, it defaults to name.<br>Supported Filters: 'Equals', 'StartsWith' and 'Contains'.
	DisplayName *string `json:"display_name,omitempty"`
	// Indicates whether client restrictions are to be applied to application pool. Currently it is valid for application pool created from farm.<br>Supported Filters: 'Equals'.
	EnableClientRestrictions *bool `json:"enable_client_restrictions,omitempty"`
	// Whether to pre-launch the application.<br>Supported Filters: 'Equals'.
	EnablePreLaunch *bool `json:"enable_pre_launch,omitempty"`
	// Indicates whether the application pool is enabled.<br>Supported Filters: 'Equals'.
	Enabled *bool `json:"enabled,omitempty"`
	// Path to application executable.<br>Supported Filters: 'Equals', 'StartsWith', 'EndsWith' and 'Contains'.
	ExecutablePath *string `json:"executable_path,omitempty"`
	// ID of the farm from which this application pool is created. Either this or desktop pool id will be set.<br>Supported Filters: 'Equals'.
	FarmId *string `json:"farm_id,omitempty"`
	// Global application entitlement for this application pool. Caller should have permission to FEDERATED_LDAP_VIEW privilege for this field to be populated or to use in filter.<br>Supported Filters: 'Equals'.
	GlobalApplicationEntitlementId *string `json:"global_application_entitlement_id,omitempty"`
	// List of icon IDs associated with the application which are fetched from the agent.
	IconIds []string `json:"icon_ids,omitempty"`
	// Unique ID representing application pool.<br>Supported Filters: 'Equals'.
	Id *string `json:"id,omitempty"`
	// Maximum number of multi-sessions a user can have in this application pool. This property is required if multi-session mode is set to \"ENABLED_DEFAULT_OFF\", \"ENABLED_DEFAULT_ON\", or \"ENABLED_ENFORCED\"
	MaxMultiSessions *int32 `json:"max_multi_sessions,omitempty"`
	// Multi-session mode for the application pool. An application launched in multi-session mode does not support reconnect behavior when user logs in from a different client instance. Multi-session mode should be disabled when pre-launch is enabled.<br>Supported Filters: 'Equals'. * DISABLED: Multi-session is not supported for this application. * ENABLED_DEFAULT_OFF: Multi-session is supported for this application but is disabled by default. The client would need to explicitly request multi-session launch, if wanted. If a legacy client is used, this will always result in a single-session application launch. * ENABLED_DEFAULT_ON: Multi-session mode is supported for this application and is enabled by default. The client can request explicitly for single-session launch, if wanted. If a legacy client is used, this will always result in a multi-session application launch. * ENABLED_ENFORCED: Multi-session is supported for this application and it is enforced. The client can not select to launch this application as a single-session application.
	MultiSessionMode *string `json:"multi_session_mode,omitempty"`
	// The application name is the unique identifier used to identify this application pool. This property must contain only alphanumerics, underscores, and dashes. The maximum length is 64 characters.<br>Supported Filters: 'Equals', 'StartsWith' and 'Contains'.
	Name *string `json:"name,omitempty"`
	// Parameters to pass to application when launching.
	Parameters *string `json:"parameters,omitempty"`
	// Application publisher.<br>Supported Filters: 'Equals', 'StartsWith' and 'Contains'.
	Publisher *string `json:"publisher,omitempty"`
	// Locations of the category folder in the user's OS containing a shortcut to the application. The value must be set if category folder name is provided.
	ShortcutLocations []string `json:"shortcut_locations,omitempty"`
	// Starting folder for application.
	StartFolder *string `json:"start_folder,omitempty"`
	SupportedFileTypesData *ApplicationSupportedFileTypesData `json:"supported_file_types_data,omitempty"`
	// Application version.<br>Supported Filters: 'Equals', 'StartsWith' and 'Contains'.
	Version *string `json:"version,omitempty"`
}

// NewApplicationPoolInfoV2 instantiates a new ApplicationPoolInfoV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationPoolInfoV2() *ApplicationPoolInfoV2 {
	this := ApplicationPoolInfoV2{}
	return &this
}

// NewApplicationPoolInfoV2WithDefaults instantiates a new ApplicationPoolInfoV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationPoolInfoV2WithDefaults() *ApplicationPoolInfoV2 {
	this := ApplicationPoolInfoV2{}
	return &this
}

// GetAccessGroupId returns the AccessGroupId field value if set, zero value otherwise.
func (o *ApplicationPoolInfoV2) GetAccessGroupId() string {
	if o == nil || IsNil(o.AccessGroupId) {
		var ret string
		return ret
	}
	return *o.AccessGroupId
}

// GetAccessGroupIdOk returns a tuple with the AccessGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolInfoV2) GetAccessGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccessGroupId) {
		return nil, false
	}
	return o.AccessGroupId, true
}

// HasAccessGroupId returns a boolean if a field has been set.
func (o *ApplicationPoolInfoV2) HasAccessGroupId() bool {
	if o != nil && !IsNil(o.AccessGroupId) {
		return true
	}

	return false
}

// SetAccessGroupId gets a reference to the given string and assigns it to the AccessGroupId field.
func (o *ApplicationPoolInfoV2) SetAccessGroupId(v string) {
	o.AccessGroupId = &v
}

// GetAntiAffinityData returns the AntiAffinityData field value if set, zero value otherwise.
func (o *ApplicationPoolInfoV2) GetAntiAffinityData() ApplicationAntiAffinityData {
	if o == nil || IsNil(o.AntiAffinityData) {
		var ret ApplicationAntiAffinityData
		return ret
	}
	return *o.AntiAffinityData
}

// GetAntiAffinityDataOk returns a tuple with the AntiAffinityData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolInfoV2) GetAntiAffinityDataOk() (*ApplicationAntiAffinityData, bool) {
	if o == nil || IsNil(o.AntiAffinityData) {
		return nil, false
	}
	return o.AntiAffinityData, true
}

// HasAntiAffinityData returns a boolean if a field has been set.
func (o *ApplicationPoolInfoV2) HasAntiAffinityData() bool {
	if o != nil && !IsNil(o.AntiAffinityData) {
		return true
	}

	return false
}

// SetAntiAffinityData gets a reference to the given ApplicationAntiAffinityData and assigns it to the AntiAffinityData field.
func (o *ApplicationPoolInfoV2) SetAntiAffinityData(v ApplicationAntiAffinityData) {
	o.AntiAffinityData = &v
}

// GetCategoryFolderName returns the CategoryFolderName field value if set, zero value otherwise.
func (o *ApplicationPoolInfoV2) GetCategoryFolderName() string {
	if o == nil || IsNil(o.CategoryFolderName) {
		var ret string
		return ret
	}
	return *o.CategoryFolderName
}

// GetCategoryFolderNameOk returns a tuple with the CategoryFolderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolInfoV2) GetCategoryFolderNameOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryFolderName) {
		return nil, false
	}
	return o.CategoryFolderName, true
}

// HasCategoryFolderName returns a boolean if a field has been set.
func (o *ApplicationPoolInfoV2) HasCategoryFolderName() bool {
	if o != nil && !IsNil(o.CategoryFolderName) {
		return true
	}

	return false
}

// SetCategoryFolderName gets a reference to the given string and assigns it to the CategoryFolderName field.
func (o *ApplicationPoolInfoV2) SetCategoryFolderName(v string) {
	o.CategoryFolderName = &v
}

// GetCsRestrictionTags returns the CsRestrictionTags field value if set, zero value otherwise.
func (o *ApplicationPoolInfoV2) GetCsRestrictionTags() []string {
	if o == nil || IsNil(o.CsRestrictionTags) {
		var ret []string
		return ret
	}
	return o.CsRestrictionTags
}

// GetCsRestrictionTagsOk returns a tuple with the CsRestrictionTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolInfoV2) GetCsRestrictionTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.CsRestrictionTags) {
		return nil, false
	}
	return o.CsRestrictionTags, true
}

// HasCsRestrictionTags returns a boolean if a field has been set.
func (o *ApplicationPoolInfoV2) HasCsRestrictionTags() bool {
	if o != nil && !IsNil(o.CsRestrictionTags) {
		return true
	}

	return false
}

// SetCsRestrictionTags gets a reference to the given []string and assigns it to the CsRestrictionTags field.
func (o *ApplicationPoolInfoV2) SetCsRestrictionTags(v []string) {
	o.CsRestrictionTags = v
}

// GetCustomizedIconIds returns the CustomizedIconIds field value if set, zero value otherwise.
func (o *ApplicationPoolInfoV2) GetCustomizedIconIds() []string {
	if o == nil || IsNil(o.CustomizedIconIds) {
		var ret []string
		return ret
	}
	return o.CustomizedIconIds
}

// GetCustomizedIconIdsOk returns a tuple with the CustomizedIconIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolInfoV2) GetCustomizedIconIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.CustomizedIconIds) {
		return nil, false
	}
	return o.CustomizedIconIds, true
}

// HasCustomizedIconIds returns a boolean if a field has been set.
func (o *ApplicationPoolInfoV2) HasCustomizedIconIds() bool {
	if o != nil && !IsNil(o.CustomizedIconIds) {
		return true
	}

	return false
}

// SetCustomizedIconIds gets a reference to the given []string and assigns it to the CustomizedIconIds field.
func (o *ApplicationPoolInfoV2) SetCustomizedIconIds(v []string) {
	o.CustomizedIconIds = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ApplicationPoolInfoV2) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolInfoV2) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ApplicationPoolInfoV2) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ApplicationPoolInfoV2) SetDescription(v string) {
	o.Description = &v
}

// GetDesktopPoolId returns the DesktopPoolId field value if set, zero value otherwise.
func (o *ApplicationPoolInfoV2) GetDesktopPoolId() string {
	if o == nil || IsNil(o.DesktopPoolId) {
		var ret string
		return ret
	}
	return *o.DesktopPoolId
}

// GetDesktopPoolIdOk returns a tuple with the DesktopPoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolInfoV2) GetDesktopPoolIdOk() (*string, bool) {
	if o == nil || IsNil(o.DesktopPoolId) {
		return nil, false
	}
	return o.DesktopPoolId, true
}

// HasDesktopPoolId returns a boolean if a field has been set.
func (o *ApplicationPoolInfoV2) HasDesktopPoolId() bool {
	if o != nil && !IsNil(o.DesktopPoolId) {
		return true
	}

	return false
}

// SetDesktopPoolId gets a reference to the given string and assigns it to the DesktopPoolId field.
func (o *ApplicationPoolInfoV2) SetDesktopPoolId(v string) {
	o.DesktopPoolId = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ApplicationPoolInfoV2) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolInfoV2) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ApplicationPoolInfoV2) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ApplicationPoolInfoV2) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEnableClientRestrictions returns the EnableClientRestrictions field value if set, zero value otherwise.
func (o *ApplicationPoolInfoV2) GetEnableClientRestrictions() bool {
	if o == nil || IsNil(o.EnableClientRestrictions) {
		var ret bool
		return ret
	}
	return *o.EnableClientRestrictions
}

// GetEnableClientRestrictionsOk returns a tuple with the EnableClientRestrictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolInfoV2) GetEnableClientRestrictionsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableClientRestrictions) {
		return nil, false
	}
	return o.EnableClientRestrictions, true
}

// HasEnableClientRestrictions returns a boolean if a field has been set.
func (o *ApplicationPoolInfoV2) HasEnableClientRestrictions() bool {
	if o != nil && !IsNil(o.EnableClientRestrictions) {
		return true
	}

	return false
}

// SetEnableClientRestrictions gets a reference to the given bool and assigns it to the EnableClientRestrictions field.
func (o *ApplicationPoolInfoV2) SetEnableClientRestrictions(v bool) {
	o.EnableClientRestrictions = &v
}

// GetEnablePreLaunch returns the EnablePreLaunch field value if set, zero value otherwise.
func (o *ApplicationPoolInfoV2) GetEnablePreLaunch() bool {
	if o == nil || IsNil(o.EnablePreLaunch) {
		var ret bool
		return ret
	}
	return *o.EnablePreLaunch
}

// GetEnablePreLaunchOk returns a tuple with the EnablePreLaunch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolInfoV2) GetEnablePreLaunchOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePreLaunch) {
		return nil, false
	}
	return o.EnablePreLaunch, true
}

// HasEnablePreLaunch returns a boolean if a field has been set.
func (o *ApplicationPoolInfoV2) HasEnablePreLaunch() bool {
	if o != nil && !IsNil(o.EnablePreLaunch) {
		return true
	}

	return false
}

// SetEnablePreLaunch gets a reference to the given bool and assigns it to the EnablePreLaunch field.
func (o *ApplicationPoolInfoV2) SetEnablePreLaunch(v bool) {
	o.EnablePreLaunch = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ApplicationPoolInfoV2) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolInfoV2) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ApplicationPoolInfoV2) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ApplicationPoolInfoV2) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetExecutablePath returns the ExecutablePath field value if set, zero value otherwise.
func (o *ApplicationPoolInfoV2) GetExecutablePath() string {
	if o == nil || IsNil(o.ExecutablePath) {
		var ret string
		return ret
	}
	return *o.ExecutablePath
}

// GetExecutablePathOk returns a tuple with the ExecutablePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolInfoV2) GetExecutablePathOk() (*string, bool) {
	if o == nil || IsNil(o.ExecutablePath) {
		return nil, false
	}
	return o.ExecutablePath, true
}

// HasExecutablePath returns a boolean if a field has been set.
func (o *ApplicationPoolInfoV2) HasExecutablePath() bool {
	if o != nil && !IsNil(o.ExecutablePath) {
		return true
	}

	return false
}

// SetExecutablePath gets a reference to the given string and assigns it to the ExecutablePath field.
func (o *ApplicationPoolInfoV2) SetExecutablePath(v string) {
	o.ExecutablePath = &v
}

// GetFarmId returns the FarmId field value if set, zero value otherwise.
func (o *ApplicationPoolInfoV2) GetFarmId() string {
	if o == nil || IsNil(o.FarmId) {
		var ret string
		return ret
	}
	return *o.FarmId
}

// GetFarmIdOk returns a tuple with the FarmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolInfoV2) GetFarmIdOk() (*string, bool) {
	if o == nil || IsNil(o.FarmId) {
		return nil, false
	}
	return o.FarmId, true
}

// HasFarmId returns a boolean if a field has been set.
func (o *ApplicationPoolInfoV2) HasFarmId() bool {
	if o != nil && !IsNil(o.FarmId) {
		return true
	}

	return false
}

// SetFarmId gets a reference to the given string and assigns it to the FarmId field.
func (o *ApplicationPoolInfoV2) SetFarmId(v string) {
	o.FarmId = &v
}

// GetGlobalApplicationEntitlementId returns the GlobalApplicationEntitlementId field value if set, zero value otherwise.
func (o *ApplicationPoolInfoV2) GetGlobalApplicationEntitlementId() string {
	if o == nil || IsNil(o.GlobalApplicationEntitlementId) {
		var ret string
		return ret
	}
	return *o.GlobalApplicationEntitlementId
}

// GetGlobalApplicationEntitlementIdOk returns a tuple with the GlobalApplicationEntitlementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolInfoV2) GetGlobalApplicationEntitlementIdOk() (*string, bool) {
	if o == nil || IsNil(o.GlobalApplicationEntitlementId) {
		return nil, false
	}
	return o.GlobalApplicationEntitlementId, true
}

// HasGlobalApplicationEntitlementId returns a boolean if a field has been set.
func (o *ApplicationPoolInfoV2) HasGlobalApplicationEntitlementId() bool {
	if o != nil && !IsNil(o.GlobalApplicationEntitlementId) {
		return true
	}

	return false
}

// SetGlobalApplicationEntitlementId gets a reference to the given string and assigns it to the GlobalApplicationEntitlementId field.
func (o *ApplicationPoolInfoV2) SetGlobalApplicationEntitlementId(v string) {
	o.GlobalApplicationEntitlementId = &v
}

// GetIconIds returns the IconIds field value if set, zero value otherwise.
func (o *ApplicationPoolInfoV2) GetIconIds() []string {
	if o == nil || IsNil(o.IconIds) {
		var ret []string
		return ret
	}
	return o.IconIds
}

// GetIconIdsOk returns a tuple with the IconIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolInfoV2) GetIconIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.IconIds) {
		return nil, false
	}
	return o.IconIds, true
}

// HasIconIds returns a boolean if a field has been set.
func (o *ApplicationPoolInfoV2) HasIconIds() bool {
	if o != nil && !IsNil(o.IconIds) {
		return true
	}

	return false
}

// SetIconIds gets a reference to the given []string and assigns it to the IconIds field.
func (o *ApplicationPoolInfoV2) SetIconIds(v []string) {
	o.IconIds = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApplicationPoolInfoV2) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolInfoV2) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApplicationPoolInfoV2) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApplicationPoolInfoV2) SetId(v string) {
	o.Id = &v
}

// GetMaxMultiSessions returns the MaxMultiSessions field value if set, zero value otherwise.
func (o *ApplicationPoolInfoV2) GetMaxMultiSessions() int32 {
	if o == nil || IsNil(o.MaxMultiSessions) {
		var ret int32
		return ret
	}
	return *o.MaxMultiSessions
}

// GetMaxMultiSessionsOk returns a tuple with the MaxMultiSessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolInfoV2) GetMaxMultiSessionsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxMultiSessions) {
		return nil, false
	}
	return o.MaxMultiSessions, true
}

// HasMaxMultiSessions returns a boolean if a field has been set.
func (o *ApplicationPoolInfoV2) HasMaxMultiSessions() bool {
	if o != nil && !IsNil(o.MaxMultiSessions) {
		return true
	}

	return false
}

// SetMaxMultiSessions gets a reference to the given int32 and assigns it to the MaxMultiSessions field.
func (o *ApplicationPoolInfoV2) SetMaxMultiSessions(v int32) {
	o.MaxMultiSessions = &v
}

// GetMultiSessionMode returns the MultiSessionMode field value if set, zero value otherwise.
func (o *ApplicationPoolInfoV2) GetMultiSessionMode() string {
	if o == nil || IsNil(o.MultiSessionMode) {
		var ret string
		return ret
	}
	return *o.MultiSessionMode
}

// GetMultiSessionModeOk returns a tuple with the MultiSessionMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolInfoV2) GetMultiSessionModeOk() (*string, bool) {
	if o == nil || IsNil(o.MultiSessionMode) {
		return nil, false
	}
	return o.MultiSessionMode, true
}

// HasMultiSessionMode returns a boolean if a field has been set.
func (o *ApplicationPoolInfoV2) HasMultiSessionMode() bool {
	if o != nil && !IsNil(o.MultiSessionMode) {
		return true
	}

	return false
}

// SetMultiSessionMode gets a reference to the given string and assigns it to the MultiSessionMode field.
func (o *ApplicationPoolInfoV2) SetMultiSessionMode(v string) {
	o.MultiSessionMode = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApplicationPoolInfoV2) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolInfoV2) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApplicationPoolInfoV2) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApplicationPoolInfoV2) SetName(v string) {
	o.Name = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *ApplicationPoolInfoV2) GetParameters() string {
	if o == nil || IsNil(o.Parameters) {
		var ret string
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolInfoV2) GetParametersOk() (*string, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *ApplicationPoolInfoV2) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given string and assigns it to the Parameters field.
func (o *ApplicationPoolInfoV2) SetParameters(v string) {
	o.Parameters = &v
}

// GetPublisher returns the Publisher field value if set, zero value otherwise.
func (o *ApplicationPoolInfoV2) GetPublisher() string {
	if o == nil || IsNil(o.Publisher) {
		var ret string
		return ret
	}
	return *o.Publisher
}

// GetPublisherOk returns a tuple with the Publisher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolInfoV2) GetPublisherOk() (*string, bool) {
	if o == nil || IsNil(o.Publisher) {
		return nil, false
	}
	return o.Publisher, true
}

// HasPublisher returns a boolean if a field has been set.
func (o *ApplicationPoolInfoV2) HasPublisher() bool {
	if o != nil && !IsNil(o.Publisher) {
		return true
	}

	return false
}

// SetPublisher gets a reference to the given string and assigns it to the Publisher field.
func (o *ApplicationPoolInfoV2) SetPublisher(v string) {
	o.Publisher = &v
}

// GetShortcutLocations returns the ShortcutLocations field value if set, zero value otherwise.
func (o *ApplicationPoolInfoV2) GetShortcutLocations() []string {
	if o == nil || IsNil(o.ShortcutLocations) {
		var ret []string
		return ret
	}
	return o.ShortcutLocations
}

// GetShortcutLocationsOk returns a tuple with the ShortcutLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolInfoV2) GetShortcutLocationsOk() ([]string, bool) {
	if o == nil || IsNil(o.ShortcutLocations) {
		return nil, false
	}
	return o.ShortcutLocations, true
}

// HasShortcutLocations returns a boolean if a field has been set.
func (o *ApplicationPoolInfoV2) HasShortcutLocations() bool {
	if o != nil && !IsNil(o.ShortcutLocations) {
		return true
	}

	return false
}

// SetShortcutLocations gets a reference to the given []string and assigns it to the ShortcutLocations field.
func (o *ApplicationPoolInfoV2) SetShortcutLocations(v []string) {
	o.ShortcutLocations = v
}

// GetStartFolder returns the StartFolder field value if set, zero value otherwise.
func (o *ApplicationPoolInfoV2) GetStartFolder() string {
	if o == nil || IsNil(o.StartFolder) {
		var ret string
		return ret
	}
	return *o.StartFolder
}

// GetStartFolderOk returns a tuple with the StartFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolInfoV2) GetStartFolderOk() (*string, bool) {
	if o == nil || IsNil(o.StartFolder) {
		return nil, false
	}
	return o.StartFolder, true
}

// HasStartFolder returns a boolean if a field has been set.
func (o *ApplicationPoolInfoV2) HasStartFolder() bool {
	if o != nil && !IsNil(o.StartFolder) {
		return true
	}

	return false
}

// SetStartFolder gets a reference to the given string and assigns it to the StartFolder field.
func (o *ApplicationPoolInfoV2) SetStartFolder(v string) {
	o.StartFolder = &v
}

// GetSupportedFileTypesData returns the SupportedFileTypesData field value if set, zero value otherwise.
func (o *ApplicationPoolInfoV2) GetSupportedFileTypesData() ApplicationSupportedFileTypesData {
	if o == nil || IsNil(o.SupportedFileTypesData) {
		var ret ApplicationSupportedFileTypesData
		return ret
	}
	return *o.SupportedFileTypesData
}

// GetSupportedFileTypesDataOk returns a tuple with the SupportedFileTypesData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolInfoV2) GetSupportedFileTypesDataOk() (*ApplicationSupportedFileTypesData, bool) {
	if o == nil || IsNil(o.SupportedFileTypesData) {
		return nil, false
	}
	return o.SupportedFileTypesData, true
}

// HasSupportedFileTypesData returns a boolean if a field has been set.
func (o *ApplicationPoolInfoV2) HasSupportedFileTypesData() bool {
	if o != nil && !IsNil(o.SupportedFileTypesData) {
		return true
	}

	return false
}

// SetSupportedFileTypesData gets a reference to the given ApplicationSupportedFileTypesData and assigns it to the SupportedFileTypesData field.
func (o *ApplicationPoolInfoV2) SetSupportedFileTypesData(v ApplicationSupportedFileTypesData) {
	o.SupportedFileTypesData = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ApplicationPoolInfoV2) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationPoolInfoV2) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ApplicationPoolInfoV2) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ApplicationPoolInfoV2) SetVersion(v string) {
	o.Version = &v
}

func (o ApplicationPoolInfoV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationPoolInfoV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessGroupId) {
		toSerialize["access_group_id"] = o.AccessGroupId
	}
	if !IsNil(o.AntiAffinityData) {
		toSerialize["anti_affinity_data"] = o.AntiAffinityData
	}
	if !IsNil(o.CategoryFolderName) {
		toSerialize["category_folder_name"] = o.CategoryFolderName
	}
	if !IsNil(o.CsRestrictionTags) {
		toSerialize["cs_restriction_tags"] = o.CsRestrictionTags
	}
	if !IsNil(o.CustomizedIconIds) {
		toSerialize["customized_icon_ids"] = o.CustomizedIconIds
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DesktopPoolId) {
		toSerialize["desktop_pool_id"] = o.DesktopPoolId
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.EnableClientRestrictions) {
		toSerialize["enable_client_restrictions"] = o.EnableClientRestrictions
	}
	if !IsNil(o.EnablePreLaunch) {
		toSerialize["enable_pre_launch"] = o.EnablePreLaunch
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.ExecutablePath) {
		toSerialize["executable_path"] = o.ExecutablePath
	}
	if !IsNil(o.FarmId) {
		toSerialize["farm_id"] = o.FarmId
	}
	if !IsNil(o.GlobalApplicationEntitlementId) {
		toSerialize["global_application_entitlement_id"] = o.GlobalApplicationEntitlementId
	}
	if !IsNil(o.IconIds) {
		toSerialize["icon_ids"] = o.IconIds
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MaxMultiSessions) {
		toSerialize["max_multi_sessions"] = o.MaxMultiSessions
	}
	if !IsNil(o.MultiSessionMode) {
		toSerialize["multi_session_mode"] = o.MultiSessionMode
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	if !IsNil(o.Publisher) {
		toSerialize["publisher"] = o.Publisher
	}
	if !IsNil(o.ShortcutLocations) {
		toSerialize["shortcut_locations"] = o.ShortcutLocations
	}
	if !IsNil(o.StartFolder) {
		toSerialize["start_folder"] = o.StartFolder
	}
	if !IsNil(o.SupportedFileTypesData) {
		toSerialize["supported_file_types_data"] = o.SupportedFileTypesData
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableApplicationPoolInfoV2 struct {
	value *ApplicationPoolInfoV2
	isSet bool
}

func (v NullableApplicationPoolInfoV2) Get() *ApplicationPoolInfoV2 {
	return v.value
}

func (v *NullableApplicationPoolInfoV2) Set(val *ApplicationPoolInfoV2) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationPoolInfoV2) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationPoolInfoV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationPoolInfoV2(val *ApplicationPoolInfoV2) *NullableApplicationPoolInfoV2 {
	return &NullableApplicationPoolInfoV2{value: val, isSet: true}
}

func (v NullableApplicationPoolInfoV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationPoolInfoV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


