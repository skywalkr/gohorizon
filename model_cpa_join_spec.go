/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CPAJoinSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CPAJoinSpec{}

// CPAJoinSpec struct for CPAJoinSpec
type CPAJoinSpec struct {
	// The password for the user.
	Password []string `json:"password"`
	// The IP address or hostname for the remote pod.
	RemotePodAddress string `json:"remote_pod_address"`
	// The user name, along with domain name, with sufficient privilege to perform a global LDAP join against the remote pod. The down-level logon name format (domain\\username) is allowed.
	Username string `json:"username"`
}

type _CPAJoinSpec CPAJoinSpec

// NewCPAJoinSpec instantiates a new CPAJoinSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCPAJoinSpec(password []string, remotePodAddress string, username string) *CPAJoinSpec {
	this := CPAJoinSpec{}
	this.Password = password
	this.RemotePodAddress = remotePodAddress
	this.Username = username
	return &this
}

// NewCPAJoinSpecWithDefaults instantiates a new CPAJoinSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCPAJoinSpecWithDefaults() *CPAJoinSpec {
	this := CPAJoinSpec{}
	return &this
}

// GetPassword returns the Password field value
func (o *CPAJoinSpec) GetPassword() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *CPAJoinSpec) GetPasswordOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Password, true
}

// SetPassword sets field value
func (o *CPAJoinSpec) SetPassword(v []string) {
	o.Password = v
}

// GetRemotePodAddress returns the RemotePodAddress field value
func (o *CPAJoinSpec) GetRemotePodAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemotePodAddress
}

// GetRemotePodAddressOk returns a tuple with the RemotePodAddress field value
// and a boolean to check if the value has been set.
func (o *CPAJoinSpec) GetRemotePodAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemotePodAddress, true
}

// SetRemotePodAddress sets field value
func (o *CPAJoinSpec) SetRemotePodAddress(v string) {
	o.RemotePodAddress = v
}

// GetUsername returns the Username field value
func (o *CPAJoinSpec) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *CPAJoinSpec) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *CPAJoinSpec) SetUsername(v string) {
	o.Username = v
}

func (o CPAJoinSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CPAJoinSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["password"] = o.Password
	toSerialize["remote_pod_address"] = o.RemotePodAddress
	toSerialize["username"] = o.Username
	return toSerialize, nil
}

func (o *CPAJoinSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"password",
		"remote_pod_address",
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCPAJoinSpec := _CPAJoinSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCPAJoinSpec)

	if err != nil {
		return err
	}

	*o = CPAJoinSpec(varCPAJoinSpec)

	return err
}

type NullableCPAJoinSpec struct {
	value *CPAJoinSpec
	isSet bool
}

func (v NullableCPAJoinSpec) Get() *CPAJoinSpec {
	return v.value
}

func (v *NullableCPAJoinSpec) Set(val *CPAJoinSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCPAJoinSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCPAJoinSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCPAJoinSpec(val *CPAJoinSpec) *NullableCPAJoinSpec {
	return &NullableCPAJoinSpec{value: val, isSet: true}
}

func (v NullableCPAJoinSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCPAJoinSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


