/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the AdminUserOrGroupPrivilegesInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdminUserOrGroupPrivilegesInfo{}

// AdminUserOrGroupPrivilegesInfo Information about admin user or group privileges.
type AdminUserOrGroupPrivilegesInfo struct {
	// ID of the access group.
	AccessGroupId *string `json:"access_group_id,omitempty"`
	// Name of the access group.
	AccessGroupName *string `json:"access_group_name,omitempty"`
	// The set of privileges on the access group.
	Privileges []string `json:"privileges,omitempty"`
}

// NewAdminUserOrGroupPrivilegesInfo instantiates a new AdminUserOrGroupPrivilegesInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminUserOrGroupPrivilegesInfo() *AdminUserOrGroupPrivilegesInfo {
	this := AdminUserOrGroupPrivilegesInfo{}
	return &this
}

// NewAdminUserOrGroupPrivilegesInfoWithDefaults instantiates a new AdminUserOrGroupPrivilegesInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminUserOrGroupPrivilegesInfoWithDefaults() *AdminUserOrGroupPrivilegesInfo {
	this := AdminUserOrGroupPrivilegesInfo{}
	return &this
}

// GetAccessGroupId returns the AccessGroupId field value if set, zero value otherwise.
func (o *AdminUserOrGroupPrivilegesInfo) GetAccessGroupId() string {
	if o == nil || IsNil(o.AccessGroupId) {
		var ret string
		return ret
	}
	return *o.AccessGroupId
}

// GetAccessGroupIdOk returns a tuple with the AccessGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminUserOrGroupPrivilegesInfo) GetAccessGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccessGroupId) {
		return nil, false
	}
	return o.AccessGroupId, true
}

// HasAccessGroupId returns a boolean if a field has been set.
func (o *AdminUserOrGroupPrivilegesInfo) HasAccessGroupId() bool {
	if o != nil && !IsNil(o.AccessGroupId) {
		return true
	}

	return false
}

// SetAccessGroupId gets a reference to the given string and assigns it to the AccessGroupId field.
func (o *AdminUserOrGroupPrivilegesInfo) SetAccessGroupId(v string) {
	o.AccessGroupId = &v
}

// GetAccessGroupName returns the AccessGroupName field value if set, zero value otherwise.
func (o *AdminUserOrGroupPrivilegesInfo) GetAccessGroupName() string {
	if o == nil || IsNil(o.AccessGroupName) {
		var ret string
		return ret
	}
	return *o.AccessGroupName
}

// GetAccessGroupNameOk returns a tuple with the AccessGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminUserOrGroupPrivilegesInfo) GetAccessGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccessGroupName) {
		return nil, false
	}
	return o.AccessGroupName, true
}

// HasAccessGroupName returns a boolean if a field has been set.
func (o *AdminUserOrGroupPrivilegesInfo) HasAccessGroupName() bool {
	if o != nil && !IsNil(o.AccessGroupName) {
		return true
	}

	return false
}

// SetAccessGroupName gets a reference to the given string and assigns it to the AccessGroupName field.
func (o *AdminUserOrGroupPrivilegesInfo) SetAccessGroupName(v string) {
	o.AccessGroupName = &v
}

// GetPrivileges returns the Privileges field value if set, zero value otherwise.
func (o *AdminUserOrGroupPrivilegesInfo) GetPrivileges() []string {
	if o == nil || IsNil(o.Privileges) {
		var ret []string
		return ret
	}
	return o.Privileges
}

// GetPrivilegesOk returns a tuple with the Privileges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminUserOrGroupPrivilegesInfo) GetPrivilegesOk() ([]string, bool) {
	if o == nil || IsNil(o.Privileges) {
		return nil, false
	}
	return o.Privileges, true
}

// HasPrivileges returns a boolean if a field has been set.
func (o *AdminUserOrGroupPrivilegesInfo) HasPrivileges() bool {
	if o != nil && !IsNil(o.Privileges) {
		return true
	}

	return false
}

// SetPrivileges gets a reference to the given []string and assigns it to the Privileges field.
func (o *AdminUserOrGroupPrivilegesInfo) SetPrivileges(v []string) {
	o.Privileges = v
}

func (o AdminUserOrGroupPrivilegesInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdminUserOrGroupPrivilegesInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessGroupId) {
		toSerialize["access_group_id"] = o.AccessGroupId
	}
	if !IsNil(o.AccessGroupName) {
		toSerialize["access_group_name"] = o.AccessGroupName
	}
	if !IsNil(o.Privileges) {
		toSerialize["privileges"] = o.Privileges
	}
	return toSerialize, nil
}

type NullableAdminUserOrGroupPrivilegesInfo struct {
	value *AdminUserOrGroupPrivilegesInfo
	isSet bool
}

func (v NullableAdminUserOrGroupPrivilegesInfo) Get() *AdminUserOrGroupPrivilegesInfo {
	return v.value
}

func (v *NullableAdminUserOrGroupPrivilegesInfo) Set(val *AdminUserOrGroupPrivilegesInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminUserOrGroupPrivilegesInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminUserOrGroupPrivilegesInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminUserOrGroupPrivilegesInfo(val *AdminUserOrGroupPrivilegesInfo) *NullableAdminUserOrGroupPrivilegesInfo {
	return &NullableAdminUserOrGroupPrivilegesInfo{value: val, isSet: true}
}

func (v NullableAdminUserOrGroupPrivilegesInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminUserOrGroupPrivilegesInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


