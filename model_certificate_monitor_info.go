/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the CertificateMonitorInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateMonitorInfo{}

// CertificateMonitorInfo Monitoring data about server's certificate.
type CertificateMonitorInfo struct {
	// Indicates if the certificate is valid.
	Valid *bool `json:"valid,omitempty"`
	// Start time of the certificate validity in milliseconds. Measured as epoch time.
	ValidFrom *int64 `json:"valid_from,omitempty"`
	// Expiration time of the certificate validity in milliseconds. Measured as epoch time.
	ValidTo *int64 `json:"valid_to,omitempty"`
}

// NewCertificateMonitorInfo instantiates a new CertificateMonitorInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateMonitorInfo() *CertificateMonitorInfo {
	this := CertificateMonitorInfo{}
	return &this
}

// NewCertificateMonitorInfoWithDefaults instantiates a new CertificateMonitorInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateMonitorInfoWithDefaults() *CertificateMonitorInfo {
	this := CertificateMonitorInfo{}
	return &this
}

// GetValid returns the Valid field value if set, zero value otherwise.
func (o *CertificateMonitorInfo) GetValid() bool {
	if o == nil || IsNil(o.Valid) {
		var ret bool
		return ret
	}
	return *o.Valid
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateMonitorInfo) GetValidOk() (*bool, bool) {
	if o == nil || IsNil(o.Valid) {
		return nil, false
	}
	return o.Valid, true
}

// HasValid returns a boolean if a field has been set.
func (o *CertificateMonitorInfo) HasValid() bool {
	if o != nil && !IsNil(o.Valid) {
		return true
	}

	return false
}

// SetValid gets a reference to the given bool and assigns it to the Valid field.
func (o *CertificateMonitorInfo) SetValid(v bool) {
	o.Valid = &v
}

// GetValidFrom returns the ValidFrom field value if set, zero value otherwise.
func (o *CertificateMonitorInfo) GetValidFrom() int64 {
	if o == nil || IsNil(o.ValidFrom) {
		var ret int64
		return ret
	}
	return *o.ValidFrom
}

// GetValidFromOk returns a tuple with the ValidFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateMonitorInfo) GetValidFromOk() (*int64, bool) {
	if o == nil || IsNil(o.ValidFrom) {
		return nil, false
	}
	return o.ValidFrom, true
}

// HasValidFrom returns a boolean if a field has been set.
func (o *CertificateMonitorInfo) HasValidFrom() bool {
	if o != nil && !IsNil(o.ValidFrom) {
		return true
	}

	return false
}

// SetValidFrom gets a reference to the given int64 and assigns it to the ValidFrom field.
func (o *CertificateMonitorInfo) SetValidFrom(v int64) {
	o.ValidFrom = &v
}

// GetValidTo returns the ValidTo field value if set, zero value otherwise.
func (o *CertificateMonitorInfo) GetValidTo() int64 {
	if o == nil || IsNil(o.ValidTo) {
		var ret int64
		return ret
	}
	return *o.ValidTo
}

// GetValidToOk returns a tuple with the ValidTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateMonitorInfo) GetValidToOk() (*int64, bool) {
	if o == nil || IsNil(o.ValidTo) {
		return nil, false
	}
	return o.ValidTo, true
}

// HasValidTo returns a boolean if a field has been set.
func (o *CertificateMonitorInfo) HasValidTo() bool {
	if o != nil && !IsNil(o.ValidTo) {
		return true
	}

	return false
}

// SetValidTo gets a reference to the given int64 and assigns it to the ValidTo field.
func (o *CertificateMonitorInfo) SetValidTo(v int64) {
	o.ValidTo = &v
}

func (o CertificateMonitorInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateMonitorInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Valid) {
		toSerialize["valid"] = o.Valid
	}
	if !IsNil(o.ValidFrom) {
		toSerialize["valid_from"] = o.ValidFrom
	}
	if !IsNil(o.ValidTo) {
		toSerialize["valid_to"] = o.ValidTo
	}
	return toSerialize, nil
}

type NullableCertificateMonitorInfo struct {
	value *CertificateMonitorInfo
	isSet bool
}

func (v NullableCertificateMonitorInfo) Get() *CertificateMonitorInfo {
	return v.value
}

func (v *NullableCertificateMonitorInfo) Set(val *CertificateMonitorInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateMonitorInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateMonitorInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateMonitorInfo(val *CertificateMonitorInfo) *NullableCertificateMonitorInfo {
	return &NullableCertificateMonitorInfo{value: val, isSet: true}
}

func (v NullableCertificateMonitorInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateMonitorInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


