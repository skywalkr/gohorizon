/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FarmRDSServersPatternNamingSettingsCreateSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FarmRDSServersPatternNamingSettingsCreateSpec{}

// FarmRDSServersPatternNamingSettingsCreateSpec RDS server naming Pattern settings for the farm.
type FarmRDSServersPatternNamingSettingsCreateSpec struct {
	// Maximum number of RDS Servers in the farm. Default value is 1.
	MaxNumberOfRdsServers *int32 `json:"max_number_of_rds_servers,omitempty"`
	// RDS Servers will be named according to the specified naming pattern. By default, Horizon appends a unique number to the specified pattern to provide a unique name for each RDS Server. To place this unique number elsewhere in the pattern, use '{n}'. (For example: rds-{n}-sales.) The unique number can also be made a fixed length. (For example: rds-{n:fixed=3}-sales will name RDS Servers from rds-001-sales to rds-999-sales).<br>RDS Server names are constrained to a maximum size of 15 characters including the unique number. Therefore, care must be taken when choosing a pattern. If the maximum farm size is 9 RDS servers, the pattern must be at most 14 characters. For 99 RDS servers, 13 characters, for 999 RDS servers, 12 characters. For 9999 RDS servers, 11 characters. If using a fixed size token, use a maximum of 14 characters for \"n=1\", 13 characters for \"n=2\", 12 characters for \"n=3\", and 11 characters for \"n=4\". If {n} is specified with no size, a size of 2 is automatically used and if no {} is specified, {n=2} is automatically appended to the end of the pattern.<br>This property must contain only alphanumerics and dashes. It must contain at least one alpha character. It may also optionally contain a numeric placement token {n} or {n:fixed=#}. If the pattern does not specify the numeric placement token, the maximum length is 14 characters.
	NamingPattern string `json:"naming_pattern"`
}

type _FarmRDSServersPatternNamingSettingsCreateSpec FarmRDSServersPatternNamingSettingsCreateSpec

// NewFarmRDSServersPatternNamingSettingsCreateSpec instantiates a new FarmRDSServersPatternNamingSettingsCreateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFarmRDSServersPatternNamingSettingsCreateSpec(namingPattern string) *FarmRDSServersPatternNamingSettingsCreateSpec {
	this := FarmRDSServersPatternNamingSettingsCreateSpec{}
	this.NamingPattern = namingPattern
	return &this
}

// NewFarmRDSServersPatternNamingSettingsCreateSpecWithDefaults instantiates a new FarmRDSServersPatternNamingSettingsCreateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFarmRDSServersPatternNamingSettingsCreateSpecWithDefaults() *FarmRDSServersPatternNamingSettingsCreateSpec {
	this := FarmRDSServersPatternNamingSettingsCreateSpec{}
	return &this
}

// GetMaxNumberOfRdsServers returns the MaxNumberOfRdsServers field value if set, zero value otherwise.
func (o *FarmRDSServersPatternNamingSettingsCreateSpec) GetMaxNumberOfRdsServers() int32 {
	if o == nil || IsNil(o.MaxNumberOfRdsServers) {
		var ret int32
		return ret
	}
	return *o.MaxNumberOfRdsServers
}

// GetMaxNumberOfRdsServersOk returns a tuple with the MaxNumberOfRdsServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmRDSServersPatternNamingSettingsCreateSpec) GetMaxNumberOfRdsServersOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxNumberOfRdsServers) {
		return nil, false
	}
	return o.MaxNumberOfRdsServers, true
}

// HasMaxNumberOfRdsServers returns a boolean if a field has been set.
func (o *FarmRDSServersPatternNamingSettingsCreateSpec) HasMaxNumberOfRdsServers() bool {
	if o != nil && !IsNil(o.MaxNumberOfRdsServers) {
		return true
	}

	return false
}

// SetMaxNumberOfRdsServers gets a reference to the given int32 and assigns it to the MaxNumberOfRdsServers field.
func (o *FarmRDSServersPatternNamingSettingsCreateSpec) SetMaxNumberOfRdsServers(v int32) {
	o.MaxNumberOfRdsServers = &v
}

// GetNamingPattern returns the NamingPattern field value
func (o *FarmRDSServersPatternNamingSettingsCreateSpec) GetNamingPattern() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NamingPattern
}

// GetNamingPatternOk returns a tuple with the NamingPattern field value
// and a boolean to check if the value has been set.
func (o *FarmRDSServersPatternNamingSettingsCreateSpec) GetNamingPatternOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NamingPattern, true
}

// SetNamingPattern sets field value
func (o *FarmRDSServersPatternNamingSettingsCreateSpec) SetNamingPattern(v string) {
	o.NamingPattern = v
}

func (o FarmRDSServersPatternNamingSettingsCreateSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FarmRDSServersPatternNamingSettingsCreateSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaxNumberOfRdsServers) {
		toSerialize["max_number_of_rds_servers"] = o.MaxNumberOfRdsServers
	}
	toSerialize["naming_pattern"] = o.NamingPattern
	return toSerialize, nil
}

func (o *FarmRDSServersPatternNamingSettingsCreateSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"naming_pattern",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFarmRDSServersPatternNamingSettingsCreateSpec := _FarmRDSServersPatternNamingSettingsCreateSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFarmRDSServersPatternNamingSettingsCreateSpec)

	if err != nil {
		return err
	}

	*o = FarmRDSServersPatternNamingSettingsCreateSpec(varFarmRDSServersPatternNamingSettingsCreateSpec)

	return err
}

type NullableFarmRDSServersPatternNamingSettingsCreateSpec struct {
	value *FarmRDSServersPatternNamingSettingsCreateSpec
	isSet bool
}

func (v NullableFarmRDSServersPatternNamingSettingsCreateSpec) Get() *FarmRDSServersPatternNamingSettingsCreateSpec {
	return v.value
}

func (v *NullableFarmRDSServersPatternNamingSettingsCreateSpec) Set(val *FarmRDSServersPatternNamingSettingsCreateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableFarmRDSServersPatternNamingSettingsCreateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableFarmRDSServersPatternNamingSettingsCreateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFarmRDSServersPatternNamingSettingsCreateSpec(val *FarmRDSServersPatternNamingSettingsCreateSpec) *NullableFarmRDSServersPatternNamingSettingsCreateSpec {
	return &NullableFarmRDSServersPatternNamingSettingsCreateSpec{value: val, isSet: true}
}

func (v NullableFarmRDSServersPatternNamingSettingsCreateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFarmRDSServersPatternNamingSettingsCreateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


