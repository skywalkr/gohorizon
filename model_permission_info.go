/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the PermissionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissionInfo{}

// PermissionInfo Information about permission.
type PermissionInfo struct {
	// The AD User or Group SID for this permission.
	AdUserOrGroupId *string `json:"ad_user_or_group_id,omitempty"`
	// The federation access group ID for this permission.
	FederationAccessGroupId *string `json:"federation_access_group_id,omitempty"`
	// Unique ID representing this permission.
	Id *string `json:"id,omitempty"`
	// The local access group ID for this permission.
	LocalAccessGroupId *string `json:"local_access_group_id,omitempty"`
	// Role ID for this permission.
	RoleId *string `json:"role_id,omitempty"`
}

// NewPermissionInfo instantiates a new PermissionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionInfo() *PermissionInfo {
	this := PermissionInfo{}
	return &this
}

// NewPermissionInfoWithDefaults instantiates a new PermissionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionInfoWithDefaults() *PermissionInfo {
	this := PermissionInfo{}
	return &this
}

// GetAdUserOrGroupId returns the AdUserOrGroupId field value if set, zero value otherwise.
func (o *PermissionInfo) GetAdUserOrGroupId() string {
	if o == nil || IsNil(o.AdUserOrGroupId) {
		var ret string
		return ret
	}
	return *o.AdUserOrGroupId
}

// GetAdUserOrGroupIdOk returns a tuple with the AdUserOrGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionInfo) GetAdUserOrGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.AdUserOrGroupId) {
		return nil, false
	}
	return o.AdUserOrGroupId, true
}

// HasAdUserOrGroupId returns a boolean if a field has been set.
func (o *PermissionInfo) HasAdUserOrGroupId() bool {
	if o != nil && !IsNil(o.AdUserOrGroupId) {
		return true
	}

	return false
}

// SetAdUserOrGroupId gets a reference to the given string and assigns it to the AdUserOrGroupId field.
func (o *PermissionInfo) SetAdUserOrGroupId(v string) {
	o.AdUserOrGroupId = &v
}

// GetFederationAccessGroupId returns the FederationAccessGroupId field value if set, zero value otherwise.
func (o *PermissionInfo) GetFederationAccessGroupId() string {
	if o == nil || IsNil(o.FederationAccessGroupId) {
		var ret string
		return ret
	}
	return *o.FederationAccessGroupId
}

// GetFederationAccessGroupIdOk returns a tuple with the FederationAccessGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionInfo) GetFederationAccessGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.FederationAccessGroupId) {
		return nil, false
	}
	return o.FederationAccessGroupId, true
}

// HasFederationAccessGroupId returns a boolean if a field has been set.
func (o *PermissionInfo) HasFederationAccessGroupId() bool {
	if o != nil && !IsNil(o.FederationAccessGroupId) {
		return true
	}

	return false
}

// SetFederationAccessGroupId gets a reference to the given string and assigns it to the FederationAccessGroupId field.
func (o *PermissionInfo) SetFederationAccessGroupId(v string) {
	o.FederationAccessGroupId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PermissionInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PermissionInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PermissionInfo) SetId(v string) {
	o.Id = &v
}

// GetLocalAccessGroupId returns the LocalAccessGroupId field value if set, zero value otherwise.
func (o *PermissionInfo) GetLocalAccessGroupId() string {
	if o == nil || IsNil(o.LocalAccessGroupId) {
		var ret string
		return ret
	}
	return *o.LocalAccessGroupId
}

// GetLocalAccessGroupIdOk returns a tuple with the LocalAccessGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionInfo) GetLocalAccessGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.LocalAccessGroupId) {
		return nil, false
	}
	return o.LocalAccessGroupId, true
}

// HasLocalAccessGroupId returns a boolean if a field has been set.
func (o *PermissionInfo) HasLocalAccessGroupId() bool {
	if o != nil && !IsNil(o.LocalAccessGroupId) {
		return true
	}

	return false
}

// SetLocalAccessGroupId gets a reference to the given string and assigns it to the LocalAccessGroupId field.
func (o *PermissionInfo) SetLocalAccessGroupId(v string) {
	o.LocalAccessGroupId = &v
}

// GetRoleId returns the RoleId field value if set, zero value otherwise.
func (o *PermissionInfo) GetRoleId() string {
	if o == nil || IsNil(o.RoleId) {
		var ret string
		return ret
	}
	return *o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionInfo) GetRoleIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoleId) {
		return nil, false
	}
	return o.RoleId, true
}

// HasRoleId returns a boolean if a field has been set.
func (o *PermissionInfo) HasRoleId() bool {
	if o != nil && !IsNil(o.RoleId) {
		return true
	}

	return false
}

// SetRoleId gets a reference to the given string and assigns it to the RoleId field.
func (o *PermissionInfo) SetRoleId(v string) {
	o.RoleId = &v
}

func (o PermissionInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdUserOrGroupId) {
		toSerialize["ad_user_or_group_id"] = o.AdUserOrGroupId
	}
	if !IsNil(o.FederationAccessGroupId) {
		toSerialize["federation_access_group_id"] = o.FederationAccessGroupId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LocalAccessGroupId) {
		toSerialize["local_access_group_id"] = o.LocalAccessGroupId
	}
	if !IsNil(o.RoleId) {
		toSerialize["role_id"] = o.RoleId
	}
	return toSerialize, nil
}

type NullablePermissionInfo struct {
	value *PermissionInfo
	isSet bool
}

func (v NullablePermissionInfo) Get() *PermissionInfo {
	return v.value
}

func (v *NullablePermissionInfo) Set(val *PermissionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionInfo(val *PermissionInfo) *NullablePermissionInfo {
	return &NullablePermissionInfo{value: val, isSet: true}
}

func (v NullablePermissionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


