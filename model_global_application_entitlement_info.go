/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2111
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// GlobalApplicationEntitlementInfo Information about Global Application Entitlement
type GlobalApplicationEntitlementInfo struct {
	// Indicates whether the users can choose the protocol used. If set to true, the application pools that are associated with this Global Application Entitlement must also allow users to choose display protocol with allowUsersToChooseProtocol. Supported Filters: 'Equals'.
	AllowUsersToChooseProtocol *bool            `json:"allow_users_to_choose_protocol,omitempty"`
	ApplicationData            *ApplicationData `json:"application_data,omitempty"`
	// Icons associated with the Global Application Entitlement
	ApplicationIconIds *[]string `json:"application_icon_ids,omitempty"`
	// Indicates the Global Application Entitlement that can be used as backup for this Global Application Entitlement. Supported Filters: 'Equals'.
	BackupGaeId *string `json:"backup_gae_id,omitempty"`
	// Name of the category folder in the user's OS containing a shortcut to the entitlement. Unset if the entitlement does not belong to a category.
	CategoryFolderName *string `json:"category_folder_name,omitempty"`
	// Connection server restrictions. This is a list of tags that access to the entitlement is restricted to. No list means that the entitlement can be accessed from any connection server.
	CsRestrictionTags *[]string `json:"cs_restriction_tags,omitempty"`
	// The default display protocol for the Global Application Entitlement. Must be a protocol in the supportedDisplayProtocols list. Clients connecting through this Global Application Entitlement that do not specify a protocol will use this value, not the value specified directly on the application pool to which they connect (if different). Supported Filters: 'Equals'. * PCOIP: PCoIP protocol. * BLAST: BLAST protocol.
	DefaultDisplayProtocol *string `json:"default_display_protocol,omitempty"`
	// Description of Global Application Entitlement. This property has a maximum length of 1024 characters. Supported Filters: 'Equals', 'StartsWith' and 'Contains'.
	Description *string `json:"description,omitempty"`
	// Name that users will see when they connect using Horizon Client. If the display name is left blank, while creating or updating the Global Application Entitlement display name value will be same as name. This property has a maximum length of 64 characters. Supported Filters: 'Equals', 'StartsWith' and 'Contains'.
	DisplayName *string `json:"display_name,omitempty"`
	// Indicates whether client restrictions to be applied to Global Application Entitlement. Currently it is valid for RDSH pools. Supported Filters: 'Equals'.
	EnableClientRestrictions *bool `json:"enable_client_restrictions,omitempty"`
	// Indicates whether Global Application Entitlement can be pre-launched Supported Filters: 'Equals'.
	EnablePreLaunch *bool `json:"enable_pre_launch,omitempty"`
	// Indicates if this Global Application Entitlement is enabled. Supported Filters: 'Equals'.
	Enabled *bool `json:"enabled,omitempty"`
	// Count of groups that are associated with this Global Application Entitlement.
	GroupCount *int32 `json:"group_count,omitempty"`
	// Unique ID representing this Global Application Entitlement. Supported Filters: 'Equals'.
	Id *string `json:"id,omitempty"`
	// Count of application pools local to this pod that are associated with this Global Application Entitlement.
	LocalApplicationPoolsCount *int32 `json:"local_application_pools_count,omitempty"`
	// Pods that have application pools associated with this Global Application Entitlement.
	MemberPods *[]string `json:"member_pods,omitempty"`
	// Multi-session mode for the application pool. An application launched in multi-session mode does not support reconnect behavior when user logs in from a different client instance. Multi-session mode should be disabled when pre-launch is enabled. Supported Filters: 'Equals'. * DISABLED: Multi-session is not supported for this application. * ENABLED_DEFAULT_OFF: Multi-session is supported for this application but is disabled by default. The client would need to explicitly request multi-session launch, if wanted. If a legacy client is used, this will always result in a single-session application launch. * ENABLED_DEFAULT_ON: Multi-session mode is supported for this application and is enabled by default. The client can request explicitly for single-session launch, if wanted. If a legacy client is used, this will always result in a multi-session application launch. * ENABLED_ENFORCED: Multi-session is supported for this application and it is enforced. The client can not select to launch this application as a single-session application.
	MultiSessionMode *string `json:"multi_session_mode,omitempty"`
	// Indicates if automatic session clean up is enabled. This cannot be enabled when this Global Application Entitlement is associated with a Application pool that has dedicated user assignment. Supported Filters: 'Equals'.
	MultipleSessionAutoClean *bool `json:"multiple_session_auto_clean,omitempty"`
	// Unique name used to identify the Global Application Entitlement. This property has a maximum length of 64 characters. Supported Filters: 'Equals', 'StartsWith' and 'Contains'.
	Name *string `json:"name,omitempty"`
	// Indicates the Global Application Entitlement for which this Global Application Entitlement acts as backup.
	PrimaryGaeId *string `json:"primary_gae_id,omitempty"`
	// Count of application pools on remote pods that are associated with this Global Application Entitlement.
	RemoteApplicationPoolsCount *int32 `json:"remote_application_pools_count,omitempty"`
	// Indicates whether we fail if a home site isn't defined for this Global Application Entitlement. Supported Filters: 'Equals'.
	RequireHomeSite *bool `json:"require_home_site,omitempty"`
	// Scope for this global application entitlement. Visibility and Placement policies are defined by this value. Supported Filters: 'Equals'. * WITHIN_POD: Within POD Policy: Local pod will be used for this policy. If this policy is for visibility, search for existing session will happen only in local pod. If this policy is for placement, session will always be placed on local pod. * WITHIN_SITE: Within Site Policy: Site will be used for this policy. If this policy is for visibility, search for existing session will happen only from site. If this policy is for placement, session will be placed on site. * ALL_SITES: All Sites Policy: Any pod can be used for this action. If this policy is for visibility, search for existing session will span all pods in LMV set. If this policy is for placement, session can be placed on any pod in LMV set.
	Scope *string `json:"scope,omitempty"`
	// Locations of the category folder in the user's OS containing a shortcut to the application. The value must be set if categoryFolderName is provided.
	ShortcutLocations *[]string `json:"shortcut_locations,omitempty"`
	// The set of supported display protocols for the Global Application Entitlement. All the application pools associated with this Global Application Entitlement must support these protocols supportedDisplayProtocols . Clients connecting through this Global Application Entitlement that are allowed to select their protocol will see these display protocol options.
	SupportedDisplayProtocols *[]string `json:"supported_display_protocols,omitempty"`
	// Indicates whether a pod in the user's home site is used to start the search or the current site is used. Supported Filters: 'Equals'.
	UseHomeSite *bool `json:"use_home_site,omitempty"`
	// Count of users that are associated with this Global Application Entitlement.
	UserCount *int32 `json:"user_count,omitempty"`
	// Count of all User Home Site overrides associated with this Global Application Entitlement (for either users or groups).
	UserOrGroupSiteOverrideCount *int32 `json:"user_or_group_site_override_count,omitempty"`
}

// NewGlobalApplicationEntitlementInfo instantiates a new GlobalApplicationEntitlementInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalApplicationEntitlementInfo() *GlobalApplicationEntitlementInfo {
	this := GlobalApplicationEntitlementInfo{}
	return &this
}

// NewGlobalApplicationEntitlementInfoWithDefaults instantiates a new GlobalApplicationEntitlementInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalApplicationEntitlementInfoWithDefaults() *GlobalApplicationEntitlementInfo {
	this := GlobalApplicationEntitlementInfo{}
	return &this
}

// GetAllowUsersToChooseProtocol returns the AllowUsersToChooseProtocol field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetAllowUsersToChooseProtocol() bool {
	if o == nil || o.AllowUsersToChooseProtocol == nil {
		var ret bool
		return ret
	}
	return *o.AllowUsersToChooseProtocol
}

// GetAllowUsersToChooseProtocolOk returns a tuple with the AllowUsersToChooseProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetAllowUsersToChooseProtocolOk() (*bool, bool) {
	if o == nil || o.AllowUsersToChooseProtocol == nil {
		return nil, false
	}
	return o.AllowUsersToChooseProtocol, true
}

// HasAllowUsersToChooseProtocol returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasAllowUsersToChooseProtocol() bool {
	if o != nil && o.AllowUsersToChooseProtocol != nil {
		return true
	}

	return false
}

// SetAllowUsersToChooseProtocol gets a reference to the given bool and assigns it to the AllowUsersToChooseProtocol field.
func (o *GlobalApplicationEntitlementInfo) SetAllowUsersToChooseProtocol(v bool) {
	o.AllowUsersToChooseProtocol = &v
}

// GetApplicationData returns the ApplicationData field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetApplicationData() ApplicationData {
	if o == nil || o.ApplicationData == nil {
		var ret ApplicationData
		return ret
	}
	return *o.ApplicationData
}

// GetApplicationDataOk returns a tuple with the ApplicationData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetApplicationDataOk() (*ApplicationData, bool) {
	if o == nil || o.ApplicationData == nil {
		return nil, false
	}
	return o.ApplicationData, true
}

// HasApplicationData returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasApplicationData() bool {
	if o != nil && o.ApplicationData != nil {
		return true
	}

	return false
}

// SetApplicationData gets a reference to the given ApplicationData and assigns it to the ApplicationData field.
func (o *GlobalApplicationEntitlementInfo) SetApplicationData(v ApplicationData) {
	o.ApplicationData = &v
}

// GetApplicationIconIds returns the ApplicationIconIds field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetApplicationIconIds() []string {
	if o == nil || o.ApplicationIconIds == nil {
		var ret []string
		return ret
	}
	return *o.ApplicationIconIds
}

// GetApplicationIconIdsOk returns a tuple with the ApplicationIconIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetApplicationIconIdsOk() (*[]string, bool) {
	if o == nil || o.ApplicationIconIds == nil {
		return nil, false
	}
	return o.ApplicationIconIds, true
}

// HasApplicationIconIds returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasApplicationIconIds() bool {
	if o != nil && o.ApplicationIconIds != nil {
		return true
	}

	return false
}

// SetApplicationIconIds gets a reference to the given []string and assigns it to the ApplicationIconIds field.
func (o *GlobalApplicationEntitlementInfo) SetApplicationIconIds(v []string) {
	o.ApplicationIconIds = &v
}

// GetBackupGaeId returns the BackupGaeId field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetBackupGaeId() string {
	if o == nil || o.BackupGaeId == nil {
		var ret string
		return ret
	}
	return *o.BackupGaeId
}

// GetBackupGaeIdOk returns a tuple with the BackupGaeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetBackupGaeIdOk() (*string, bool) {
	if o == nil || o.BackupGaeId == nil {
		return nil, false
	}
	return o.BackupGaeId, true
}

// HasBackupGaeId returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasBackupGaeId() bool {
	if o != nil && o.BackupGaeId != nil {
		return true
	}

	return false
}

// SetBackupGaeId gets a reference to the given string and assigns it to the BackupGaeId field.
func (o *GlobalApplicationEntitlementInfo) SetBackupGaeId(v string) {
	o.BackupGaeId = &v
}

// GetCategoryFolderName returns the CategoryFolderName field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetCategoryFolderName() string {
	if o == nil || o.CategoryFolderName == nil {
		var ret string
		return ret
	}
	return *o.CategoryFolderName
}

// GetCategoryFolderNameOk returns a tuple with the CategoryFolderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetCategoryFolderNameOk() (*string, bool) {
	if o == nil || o.CategoryFolderName == nil {
		return nil, false
	}
	return o.CategoryFolderName, true
}

// HasCategoryFolderName returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasCategoryFolderName() bool {
	if o != nil && o.CategoryFolderName != nil {
		return true
	}

	return false
}

// SetCategoryFolderName gets a reference to the given string and assigns it to the CategoryFolderName field.
func (o *GlobalApplicationEntitlementInfo) SetCategoryFolderName(v string) {
	o.CategoryFolderName = &v
}

// GetCsRestrictionTags returns the CsRestrictionTags field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetCsRestrictionTags() []string {
	if o == nil || o.CsRestrictionTags == nil {
		var ret []string
		return ret
	}
	return *o.CsRestrictionTags
}

// GetCsRestrictionTagsOk returns a tuple with the CsRestrictionTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetCsRestrictionTagsOk() (*[]string, bool) {
	if o == nil || o.CsRestrictionTags == nil {
		return nil, false
	}
	return o.CsRestrictionTags, true
}

// HasCsRestrictionTags returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasCsRestrictionTags() bool {
	if o != nil && o.CsRestrictionTags != nil {
		return true
	}

	return false
}

// SetCsRestrictionTags gets a reference to the given []string and assigns it to the CsRestrictionTags field.
func (o *GlobalApplicationEntitlementInfo) SetCsRestrictionTags(v []string) {
	o.CsRestrictionTags = &v
}

// GetDefaultDisplayProtocol returns the DefaultDisplayProtocol field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetDefaultDisplayProtocol() string {
	if o == nil || o.DefaultDisplayProtocol == nil {
		var ret string
		return ret
	}
	return *o.DefaultDisplayProtocol
}

// GetDefaultDisplayProtocolOk returns a tuple with the DefaultDisplayProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetDefaultDisplayProtocolOk() (*string, bool) {
	if o == nil || o.DefaultDisplayProtocol == nil {
		return nil, false
	}
	return o.DefaultDisplayProtocol, true
}

// HasDefaultDisplayProtocol returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasDefaultDisplayProtocol() bool {
	if o != nil && o.DefaultDisplayProtocol != nil {
		return true
	}

	return false
}

// SetDefaultDisplayProtocol gets a reference to the given string and assigns it to the DefaultDisplayProtocol field.
func (o *GlobalApplicationEntitlementInfo) SetDefaultDisplayProtocol(v string) {
	o.DefaultDisplayProtocol = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GlobalApplicationEntitlementInfo) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *GlobalApplicationEntitlementInfo) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEnableClientRestrictions returns the EnableClientRestrictions field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetEnableClientRestrictions() bool {
	if o == nil || o.EnableClientRestrictions == nil {
		var ret bool
		return ret
	}
	return *o.EnableClientRestrictions
}

// GetEnableClientRestrictionsOk returns a tuple with the EnableClientRestrictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetEnableClientRestrictionsOk() (*bool, bool) {
	if o == nil || o.EnableClientRestrictions == nil {
		return nil, false
	}
	return o.EnableClientRestrictions, true
}

// HasEnableClientRestrictions returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasEnableClientRestrictions() bool {
	if o != nil && o.EnableClientRestrictions != nil {
		return true
	}

	return false
}

// SetEnableClientRestrictions gets a reference to the given bool and assigns it to the EnableClientRestrictions field.
func (o *GlobalApplicationEntitlementInfo) SetEnableClientRestrictions(v bool) {
	o.EnableClientRestrictions = &v
}

// GetEnablePreLaunch returns the EnablePreLaunch field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetEnablePreLaunch() bool {
	if o == nil || o.EnablePreLaunch == nil {
		var ret bool
		return ret
	}
	return *o.EnablePreLaunch
}

// GetEnablePreLaunchOk returns a tuple with the EnablePreLaunch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetEnablePreLaunchOk() (*bool, bool) {
	if o == nil || o.EnablePreLaunch == nil {
		return nil, false
	}
	return o.EnablePreLaunch, true
}

// HasEnablePreLaunch returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasEnablePreLaunch() bool {
	if o != nil && o.EnablePreLaunch != nil {
		return true
	}

	return false
}

// SetEnablePreLaunch gets a reference to the given bool and assigns it to the EnablePreLaunch field.
func (o *GlobalApplicationEntitlementInfo) SetEnablePreLaunch(v bool) {
	o.EnablePreLaunch = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *GlobalApplicationEntitlementInfo) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetGroupCount returns the GroupCount field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetGroupCount() int32 {
	if o == nil || o.GroupCount == nil {
		var ret int32
		return ret
	}
	return *o.GroupCount
}

// GetGroupCountOk returns a tuple with the GroupCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetGroupCountOk() (*int32, bool) {
	if o == nil || o.GroupCount == nil {
		return nil, false
	}
	return o.GroupCount, true
}

// HasGroupCount returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasGroupCount() bool {
	if o != nil && o.GroupCount != nil {
		return true
	}

	return false
}

// SetGroupCount gets a reference to the given int32 and assigns it to the GroupCount field.
func (o *GlobalApplicationEntitlementInfo) SetGroupCount(v int32) {
	o.GroupCount = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GlobalApplicationEntitlementInfo) SetId(v string) {
	o.Id = &v
}

// GetLocalApplicationPoolsCount returns the LocalApplicationPoolsCount field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetLocalApplicationPoolsCount() int32 {
	if o == nil || o.LocalApplicationPoolsCount == nil {
		var ret int32
		return ret
	}
	return *o.LocalApplicationPoolsCount
}

// GetLocalApplicationPoolsCountOk returns a tuple with the LocalApplicationPoolsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetLocalApplicationPoolsCountOk() (*int32, bool) {
	if o == nil || o.LocalApplicationPoolsCount == nil {
		return nil, false
	}
	return o.LocalApplicationPoolsCount, true
}

// HasLocalApplicationPoolsCount returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasLocalApplicationPoolsCount() bool {
	if o != nil && o.LocalApplicationPoolsCount != nil {
		return true
	}

	return false
}

// SetLocalApplicationPoolsCount gets a reference to the given int32 and assigns it to the LocalApplicationPoolsCount field.
func (o *GlobalApplicationEntitlementInfo) SetLocalApplicationPoolsCount(v int32) {
	o.LocalApplicationPoolsCount = &v
}

// GetMemberPods returns the MemberPods field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetMemberPods() []string {
	if o == nil || o.MemberPods == nil {
		var ret []string
		return ret
	}
	return *o.MemberPods
}

// GetMemberPodsOk returns a tuple with the MemberPods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetMemberPodsOk() (*[]string, bool) {
	if o == nil || o.MemberPods == nil {
		return nil, false
	}
	return o.MemberPods, true
}

// HasMemberPods returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasMemberPods() bool {
	if o != nil && o.MemberPods != nil {
		return true
	}

	return false
}

// SetMemberPods gets a reference to the given []string and assigns it to the MemberPods field.
func (o *GlobalApplicationEntitlementInfo) SetMemberPods(v []string) {
	o.MemberPods = &v
}

// GetMultiSessionMode returns the MultiSessionMode field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetMultiSessionMode() string {
	if o == nil || o.MultiSessionMode == nil {
		var ret string
		return ret
	}
	return *o.MultiSessionMode
}

// GetMultiSessionModeOk returns a tuple with the MultiSessionMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetMultiSessionModeOk() (*string, bool) {
	if o == nil || o.MultiSessionMode == nil {
		return nil, false
	}
	return o.MultiSessionMode, true
}

// HasMultiSessionMode returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasMultiSessionMode() bool {
	if o != nil && o.MultiSessionMode != nil {
		return true
	}

	return false
}

// SetMultiSessionMode gets a reference to the given string and assigns it to the MultiSessionMode field.
func (o *GlobalApplicationEntitlementInfo) SetMultiSessionMode(v string) {
	o.MultiSessionMode = &v
}

// GetMultipleSessionAutoClean returns the MultipleSessionAutoClean field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetMultipleSessionAutoClean() bool {
	if o == nil || o.MultipleSessionAutoClean == nil {
		var ret bool
		return ret
	}
	return *o.MultipleSessionAutoClean
}

// GetMultipleSessionAutoCleanOk returns a tuple with the MultipleSessionAutoClean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetMultipleSessionAutoCleanOk() (*bool, bool) {
	if o == nil || o.MultipleSessionAutoClean == nil {
		return nil, false
	}
	return o.MultipleSessionAutoClean, true
}

// HasMultipleSessionAutoClean returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasMultipleSessionAutoClean() bool {
	if o != nil && o.MultipleSessionAutoClean != nil {
		return true
	}

	return false
}

// SetMultipleSessionAutoClean gets a reference to the given bool and assigns it to the MultipleSessionAutoClean field.
func (o *GlobalApplicationEntitlementInfo) SetMultipleSessionAutoClean(v bool) {
	o.MultipleSessionAutoClean = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GlobalApplicationEntitlementInfo) SetName(v string) {
	o.Name = &v
}

// GetPrimaryGaeId returns the PrimaryGaeId field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetPrimaryGaeId() string {
	if o == nil || o.PrimaryGaeId == nil {
		var ret string
		return ret
	}
	return *o.PrimaryGaeId
}

// GetPrimaryGaeIdOk returns a tuple with the PrimaryGaeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetPrimaryGaeIdOk() (*string, bool) {
	if o == nil || o.PrimaryGaeId == nil {
		return nil, false
	}
	return o.PrimaryGaeId, true
}

// HasPrimaryGaeId returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasPrimaryGaeId() bool {
	if o != nil && o.PrimaryGaeId != nil {
		return true
	}

	return false
}

// SetPrimaryGaeId gets a reference to the given string and assigns it to the PrimaryGaeId field.
func (o *GlobalApplicationEntitlementInfo) SetPrimaryGaeId(v string) {
	o.PrimaryGaeId = &v
}

// GetRemoteApplicationPoolsCount returns the RemoteApplicationPoolsCount field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetRemoteApplicationPoolsCount() int32 {
	if o == nil || o.RemoteApplicationPoolsCount == nil {
		var ret int32
		return ret
	}
	return *o.RemoteApplicationPoolsCount
}

// GetRemoteApplicationPoolsCountOk returns a tuple with the RemoteApplicationPoolsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetRemoteApplicationPoolsCountOk() (*int32, bool) {
	if o == nil || o.RemoteApplicationPoolsCount == nil {
		return nil, false
	}
	return o.RemoteApplicationPoolsCount, true
}

// HasRemoteApplicationPoolsCount returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasRemoteApplicationPoolsCount() bool {
	if o != nil && o.RemoteApplicationPoolsCount != nil {
		return true
	}

	return false
}

// SetRemoteApplicationPoolsCount gets a reference to the given int32 and assigns it to the RemoteApplicationPoolsCount field.
func (o *GlobalApplicationEntitlementInfo) SetRemoteApplicationPoolsCount(v int32) {
	o.RemoteApplicationPoolsCount = &v
}

// GetRequireHomeSite returns the RequireHomeSite field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetRequireHomeSite() bool {
	if o == nil || o.RequireHomeSite == nil {
		var ret bool
		return ret
	}
	return *o.RequireHomeSite
}

// GetRequireHomeSiteOk returns a tuple with the RequireHomeSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetRequireHomeSiteOk() (*bool, bool) {
	if o == nil || o.RequireHomeSite == nil {
		return nil, false
	}
	return o.RequireHomeSite, true
}

// HasRequireHomeSite returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasRequireHomeSite() bool {
	if o != nil && o.RequireHomeSite != nil {
		return true
	}

	return false
}

// SetRequireHomeSite gets a reference to the given bool and assigns it to the RequireHomeSite field.
func (o *GlobalApplicationEntitlementInfo) SetRequireHomeSite(v bool) {
	o.RequireHomeSite = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetScope() string {
	if o == nil || o.Scope == nil {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetScopeOk() (*string, bool) {
	if o == nil || o.Scope == nil {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *GlobalApplicationEntitlementInfo) SetScope(v string) {
	o.Scope = &v
}

// GetShortcutLocations returns the ShortcutLocations field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetShortcutLocations() []string {
	if o == nil || o.ShortcutLocations == nil {
		var ret []string
		return ret
	}
	return *o.ShortcutLocations
}

// GetShortcutLocationsOk returns a tuple with the ShortcutLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetShortcutLocationsOk() (*[]string, bool) {
	if o == nil || o.ShortcutLocations == nil {
		return nil, false
	}
	return o.ShortcutLocations, true
}

// HasShortcutLocations returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasShortcutLocations() bool {
	if o != nil && o.ShortcutLocations != nil {
		return true
	}

	return false
}

// SetShortcutLocations gets a reference to the given []string and assigns it to the ShortcutLocations field.
func (o *GlobalApplicationEntitlementInfo) SetShortcutLocations(v []string) {
	o.ShortcutLocations = &v
}

// GetSupportedDisplayProtocols returns the SupportedDisplayProtocols field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetSupportedDisplayProtocols() []string {
	if o == nil || o.SupportedDisplayProtocols == nil {
		var ret []string
		return ret
	}
	return *o.SupportedDisplayProtocols
}

// GetSupportedDisplayProtocolsOk returns a tuple with the SupportedDisplayProtocols field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetSupportedDisplayProtocolsOk() (*[]string, bool) {
	if o == nil || o.SupportedDisplayProtocols == nil {
		return nil, false
	}
	return o.SupportedDisplayProtocols, true
}

// HasSupportedDisplayProtocols returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasSupportedDisplayProtocols() bool {
	if o != nil && o.SupportedDisplayProtocols != nil {
		return true
	}

	return false
}

// SetSupportedDisplayProtocols gets a reference to the given []string and assigns it to the SupportedDisplayProtocols field.
func (o *GlobalApplicationEntitlementInfo) SetSupportedDisplayProtocols(v []string) {
	o.SupportedDisplayProtocols = &v
}

// GetUseHomeSite returns the UseHomeSite field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetUseHomeSite() bool {
	if o == nil || o.UseHomeSite == nil {
		var ret bool
		return ret
	}
	return *o.UseHomeSite
}

// GetUseHomeSiteOk returns a tuple with the UseHomeSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetUseHomeSiteOk() (*bool, bool) {
	if o == nil || o.UseHomeSite == nil {
		return nil, false
	}
	return o.UseHomeSite, true
}

// HasUseHomeSite returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasUseHomeSite() bool {
	if o != nil && o.UseHomeSite != nil {
		return true
	}

	return false
}

// SetUseHomeSite gets a reference to the given bool and assigns it to the UseHomeSite field.
func (o *GlobalApplicationEntitlementInfo) SetUseHomeSite(v bool) {
	o.UseHomeSite = &v
}

// GetUserCount returns the UserCount field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetUserCount() int32 {
	if o == nil || o.UserCount == nil {
		var ret int32
		return ret
	}
	return *o.UserCount
}

// GetUserCountOk returns a tuple with the UserCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetUserCountOk() (*int32, bool) {
	if o == nil || o.UserCount == nil {
		return nil, false
	}
	return o.UserCount, true
}

// HasUserCount returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasUserCount() bool {
	if o != nil && o.UserCount != nil {
		return true
	}

	return false
}

// SetUserCount gets a reference to the given int32 and assigns it to the UserCount field.
func (o *GlobalApplicationEntitlementInfo) SetUserCount(v int32) {
	o.UserCount = &v
}

// GetUserOrGroupSiteOverrideCount returns the UserOrGroupSiteOverrideCount field value if set, zero value otherwise.
func (o *GlobalApplicationEntitlementInfo) GetUserOrGroupSiteOverrideCount() int32 {
	if o == nil || o.UserOrGroupSiteOverrideCount == nil {
		var ret int32
		return ret
	}
	return *o.UserOrGroupSiteOverrideCount
}

// GetUserOrGroupSiteOverrideCountOk returns a tuple with the UserOrGroupSiteOverrideCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalApplicationEntitlementInfo) GetUserOrGroupSiteOverrideCountOk() (*int32, bool) {
	if o == nil || o.UserOrGroupSiteOverrideCount == nil {
		return nil, false
	}
	return o.UserOrGroupSiteOverrideCount, true
}

// HasUserOrGroupSiteOverrideCount returns a boolean if a field has been set.
func (o *GlobalApplicationEntitlementInfo) HasUserOrGroupSiteOverrideCount() bool {
	if o != nil && o.UserOrGroupSiteOverrideCount != nil {
		return true
	}

	return false
}

// SetUserOrGroupSiteOverrideCount gets a reference to the given int32 and assigns it to the UserOrGroupSiteOverrideCount field.
func (o *GlobalApplicationEntitlementInfo) SetUserOrGroupSiteOverrideCount(v int32) {
	o.UserOrGroupSiteOverrideCount = &v
}

func (o GlobalApplicationEntitlementInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowUsersToChooseProtocol != nil {
		toSerialize["allow_users_to_choose_protocol"] = o.AllowUsersToChooseProtocol
	}
	if o.ApplicationData != nil {
		toSerialize["application_data"] = o.ApplicationData
	}
	if o.ApplicationIconIds != nil {
		toSerialize["application_icon_ids"] = o.ApplicationIconIds
	}
	if o.BackupGaeId != nil {
		toSerialize["backup_gae_id"] = o.BackupGaeId
	}
	if o.CategoryFolderName != nil {
		toSerialize["category_folder_name"] = o.CategoryFolderName
	}
	if o.CsRestrictionTags != nil {
		toSerialize["cs_restriction_tags"] = o.CsRestrictionTags
	}
	if o.DefaultDisplayProtocol != nil {
		toSerialize["default_display_protocol"] = o.DefaultDisplayProtocol
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.EnableClientRestrictions != nil {
		toSerialize["enable_client_restrictions"] = o.EnableClientRestrictions
	}
	if o.EnablePreLaunch != nil {
		toSerialize["enable_pre_launch"] = o.EnablePreLaunch
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.GroupCount != nil {
		toSerialize["group_count"] = o.GroupCount
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.LocalApplicationPoolsCount != nil {
		toSerialize["local_application_pools_count"] = o.LocalApplicationPoolsCount
	}
	if o.MemberPods != nil {
		toSerialize["member_pods"] = o.MemberPods
	}
	if o.MultiSessionMode != nil {
		toSerialize["multi_session_mode"] = o.MultiSessionMode
	}
	if o.MultipleSessionAutoClean != nil {
		toSerialize["multiple_session_auto_clean"] = o.MultipleSessionAutoClean
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.PrimaryGaeId != nil {
		toSerialize["primary_gae_id"] = o.PrimaryGaeId
	}
	if o.RemoteApplicationPoolsCount != nil {
		toSerialize["remote_application_pools_count"] = o.RemoteApplicationPoolsCount
	}
	if o.RequireHomeSite != nil {
		toSerialize["require_home_site"] = o.RequireHomeSite
	}
	if o.Scope != nil {
		toSerialize["scope"] = o.Scope
	}
	if o.ShortcutLocations != nil {
		toSerialize["shortcut_locations"] = o.ShortcutLocations
	}
	if o.SupportedDisplayProtocols != nil {
		toSerialize["supported_display_protocols"] = o.SupportedDisplayProtocols
	}
	if o.UseHomeSite != nil {
		toSerialize["use_home_site"] = o.UseHomeSite
	}
	if o.UserCount != nil {
		toSerialize["user_count"] = o.UserCount
	}
	if o.UserOrGroupSiteOverrideCount != nil {
		toSerialize["user_or_group_site_override_count"] = o.UserOrGroupSiteOverrideCount
	}
	return json.Marshal(toSerialize)
}

type NullableGlobalApplicationEntitlementInfo struct {
	value *GlobalApplicationEntitlementInfo
	isSet bool
}

func (v NullableGlobalApplicationEntitlementInfo) Get() *GlobalApplicationEntitlementInfo {
	return v.value
}

func (v *NullableGlobalApplicationEntitlementInfo) Set(val *GlobalApplicationEntitlementInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalApplicationEntitlementInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalApplicationEntitlementInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalApplicationEntitlementInfo(val *GlobalApplicationEntitlementInfo) *NullableGlobalApplicationEntitlementInfo {
	return &NullableGlobalApplicationEntitlementInfo{value: val, isSet: true}
}

func (v NullableGlobalApplicationEntitlementInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalApplicationEntitlementInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
