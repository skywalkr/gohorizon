/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MachineDeleteSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MachineDeleteSpec{}

// MachineDeleteSpec Information required to delete machines.
type MachineDeleteSpec struct {
	MachineDeleteData *MachineDeleteData `json:"machine_delete_data,omitempty"`
	// Machine Ids representing the machines to be deleted.
	MachineIds []string `json:"machine_ids"`
}

type _MachineDeleteSpec MachineDeleteSpec

// NewMachineDeleteSpec instantiates a new MachineDeleteSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMachineDeleteSpec(machineIds []string) *MachineDeleteSpec {
	this := MachineDeleteSpec{}
	this.MachineIds = machineIds
	return &this
}

// NewMachineDeleteSpecWithDefaults instantiates a new MachineDeleteSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMachineDeleteSpecWithDefaults() *MachineDeleteSpec {
	this := MachineDeleteSpec{}
	return &this
}

// GetMachineDeleteData returns the MachineDeleteData field value if set, zero value otherwise.
func (o *MachineDeleteSpec) GetMachineDeleteData() MachineDeleteData {
	if o == nil || IsNil(o.MachineDeleteData) {
		var ret MachineDeleteData
		return ret
	}
	return *o.MachineDeleteData
}

// GetMachineDeleteDataOk returns a tuple with the MachineDeleteData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineDeleteSpec) GetMachineDeleteDataOk() (*MachineDeleteData, bool) {
	if o == nil || IsNil(o.MachineDeleteData) {
		return nil, false
	}
	return o.MachineDeleteData, true
}

// HasMachineDeleteData returns a boolean if a field has been set.
func (o *MachineDeleteSpec) HasMachineDeleteData() bool {
	if o != nil && !IsNil(o.MachineDeleteData) {
		return true
	}

	return false
}

// SetMachineDeleteData gets a reference to the given MachineDeleteData and assigns it to the MachineDeleteData field.
func (o *MachineDeleteSpec) SetMachineDeleteData(v MachineDeleteData) {
	o.MachineDeleteData = &v
}

// GetMachineIds returns the MachineIds field value
func (o *MachineDeleteSpec) GetMachineIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MachineIds
}

// GetMachineIdsOk returns a tuple with the MachineIds field value
// and a boolean to check if the value has been set.
func (o *MachineDeleteSpec) GetMachineIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MachineIds, true
}

// SetMachineIds sets field value
func (o *MachineDeleteSpec) SetMachineIds(v []string) {
	o.MachineIds = v
}

func (o MachineDeleteSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MachineDeleteSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MachineDeleteData) {
		toSerialize["machine_delete_data"] = o.MachineDeleteData
	}
	toSerialize["machine_ids"] = o.MachineIds
	return toSerialize, nil
}

func (o *MachineDeleteSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"machine_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMachineDeleteSpec := _MachineDeleteSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMachineDeleteSpec)

	if err != nil {
		return err
	}

	*o = MachineDeleteSpec(varMachineDeleteSpec)

	return err
}

type NullableMachineDeleteSpec struct {
	value *MachineDeleteSpec
	isSet bool
}

func (v NullableMachineDeleteSpec) Get() *MachineDeleteSpec {
	return v.value
}

func (v *NullableMachineDeleteSpec) Set(val *MachineDeleteSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableMachineDeleteSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableMachineDeleteSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMachineDeleteSpec(val *MachineDeleteSpec) *NullableMachineDeleteSpec {
	return &NullableMachineDeleteSpec{value: val, isSet: true}
}

func (v NullableMachineDeleteSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMachineDeleteSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


