/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// MachineDeleteSpec Information required to delete machines.
type MachineDeleteSpec struct {
	MachineDeleteData *MachineDeleteData `json:"machine_delete_data,omitempty"`
	// Machine Ids representing the machines to be deleted.
	MachineIds []string `json:"machine_ids"`
}

// NewMachineDeleteSpec instantiates a new MachineDeleteSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMachineDeleteSpec(machineIds []string) *MachineDeleteSpec {
	this := MachineDeleteSpec{}
	this.MachineIds = machineIds
	return &this
}

// NewMachineDeleteSpecWithDefaults instantiates a new MachineDeleteSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMachineDeleteSpecWithDefaults() *MachineDeleteSpec {
	this := MachineDeleteSpec{}
	return &this
}

// GetMachineDeleteData returns the MachineDeleteData field value if set, zero value otherwise.
func (o *MachineDeleteSpec) GetMachineDeleteData() MachineDeleteData {
	if o == nil || o.MachineDeleteData == nil {
		var ret MachineDeleteData
		return ret
	}
	return *o.MachineDeleteData
}

// GetMachineDeleteDataOk returns a tuple with the MachineDeleteData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineDeleteSpec) GetMachineDeleteDataOk() (*MachineDeleteData, bool) {
	if o == nil || o.MachineDeleteData == nil {
		return nil, false
	}
	return o.MachineDeleteData, true
}

// HasMachineDeleteData returns a boolean if a field has been set.
func (o *MachineDeleteSpec) HasMachineDeleteData() bool {
	if o != nil && o.MachineDeleteData != nil {
		return true
	}

	return false
}

// SetMachineDeleteData gets a reference to the given MachineDeleteData and assigns it to the MachineDeleteData field.
func (o *MachineDeleteSpec) SetMachineDeleteData(v MachineDeleteData) {
	o.MachineDeleteData = &v
}

// GetMachineIds returns the MachineIds field value
func (o *MachineDeleteSpec) GetMachineIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MachineIds
}

// GetMachineIdsOk returns a tuple with the MachineIds field value
// and a boolean to check if the value has been set.
func (o *MachineDeleteSpec) GetMachineIdsOk() (*[]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MachineIds, true
}

// SetMachineIds sets field value
func (o *MachineDeleteSpec) SetMachineIds(v []string) {
	o.MachineIds = v
}

func (o MachineDeleteSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MachineDeleteData != nil {
		toSerialize["machine_delete_data"] = o.MachineDeleteData
	}
	if true {
		toSerialize["machine_ids"] = o.MachineIds
	}
	return json.Marshal(toSerialize)
}

type NullableMachineDeleteSpec struct {
	value *MachineDeleteSpec
	isSet bool
}

func (v NullableMachineDeleteSpec) Get() *MachineDeleteSpec {
	return v.value
}

func (v *NullableMachineDeleteSpec) Set(val *MachineDeleteSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableMachineDeleteSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableMachineDeleteSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMachineDeleteSpec(val *MachineDeleteSpec) *NullableMachineDeleteSpec {
	return &NullableMachineDeleteSpec{value: val, isSet: true}
}

func (v NullableMachineDeleteSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMachineDeleteSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
