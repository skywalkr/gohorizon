/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2111
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// DesktopPoolDisplayProtocolSettingsUpdateSpec Applicable To: Automated and Manual desktop pool. <br>Display protocol setting for Automated and Manual desktop pool.
type DesktopPoolDisplayProtocolSettingsUpdateSpec struct {
	// Indicates whether the users can choose the protocol.
	AllowUsersToChooseProtocol bool `json:"allow_users_to_choose_protocol"`
	// The default display protocol for the desktop pool. * RDP: Microsoft Remote Desktop Protocol. * PCOIP: PCoIP protocol. * BLAST: BLAST protocol.
	DefaultDisplayProtocol string `json:"default_display_protocol"`
	// When renderer3d is disabled, the max_number_of_monitors and max_resolution_of_any_one_monitor' settings determine the amount ofvRAM assigned to machines in this desktop pool. The greater these values are, the more memory will be consumeon the associated ESX hosts. Existing virtual machines must be powered off and subsequently powered onfor the change to take effect. A restart will not cause the changes to take effect. If 3D is enabled and managedby Horizon, the maximum number of monitors must be 1 or 2. For Instant Clones, this value is inherited from snapshot of Master VM. This property is required if renderer3D is set to AUTOMATIC, SOFTWARE, HARDWARE, or DISABLED.
	MaxNumberOfMonitors *int32 `json:"max_number_of_monitors,omitempty"`
	// If 3D rendering is enabled and managed by Horizon, this must be set to the default value. When 3D rendering is disabled,the max_number_of_monitors and max_resolution_of_any_one_monitor' settings determine the amount of vRAM assignedto machines in this desktop pool. The greater these values are, the more memory will be consumed on the associated ESX hosts.This setting is only relevant on managed machines. Existing virtual machines must be powered off and subsequently poweredon for the change to take effect. A restart will not cause the changes to take effect. For Instant Clones,this value is inherited from snapshot of Master VM. This property has a default value of WUXGA.<br> This property is required if renderer3D is set to AUTOMATIC, SOFTWARE, HARDWARE or DISABLED. * WSXGA_PLUS: 1680x1050 resolution. * WUXGA: 1920x1200 resolution. * WQXGA: 2560x1600 resolution. * UHD: 3840x2160 resolution. * UHD_5K: 5120x2880 resolution. * UHD_8K: 7680x4320 resolution.
	MaxResolutionOfAnyOneMonitor *string `json:"max_resolution_of_any_one_monitor,omitempty"`
	// 3D rendering is supported on Windows 7 or later guests running on VMs with virtual hardware version8 or later. The default_display_protocol must set to PCOIP or BLAST and allow_users_to_choose_protocol must be set to false to enable 3D rendering protocol to enable 3D rendering. For instant clone source desktop pool 3D rendering always mapped to MANAGE_BY_VSPHERE_CLIENT. * MANAGE_BY_VSPHERE_CLIENT: 3D rendering managed by vSphere Client. * AUTOMATIC: 3D rendering is automatic. * SOFTWARE: 3D rendering is software dependent. The software renderer is supported (at minimum) on virtual hardware version 8 in a vSphere 5.0 environment. * HARDWARE: 3D rendering is hardware dependent. The hardware-based renderer is supported (at minimum) on virtual hardware version 9 in a vSphere 5.1 environment. * DISABLED: 3D rendering is disabled.
	Renderer3d *string `json:"renderer3d,omitempty"`
	// Applicable To: Automated and Manual pools.<br>Enable session collaboration feature. Session collaborationallows a user to share their remote session with other users.BLAST must be configured as a supported protocol in supported_display_protocols.
	SessionCollaborationEnabled *bool `json:"session_collaboration_enabled,omitempty"`
	// vRAM size for Horizon managed 3D rendering. More VRAM can improve 3D performance. Size is in MB. On ESXi 5.0 hosts, the renderer allows a maximum VRAM size of 128MB. On ESXi 5.1 and later hosts, the maximum VRAM size is 512MB. For Instant Clones, this value is inherited from snapshot of Master VM.This property is applicable when 3D renderer is not disabled. This property is required if renderer3d is set to AUTOMATIC, SOFTWARE, or HARDWARE.
	VramSizeMb *int32 `json:"vram_size_mb,omitempty"`
}

// NewDesktopPoolDisplayProtocolSettingsUpdateSpec instantiates a new DesktopPoolDisplayProtocolSettingsUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDesktopPoolDisplayProtocolSettingsUpdateSpec(allowUsersToChooseProtocol bool, defaultDisplayProtocol string) *DesktopPoolDisplayProtocolSettingsUpdateSpec {
	this := DesktopPoolDisplayProtocolSettingsUpdateSpec{}
	this.AllowUsersToChooseProtocol = allowUsersToChooseProtocol
	this.DefaultDisplayProtocol = defaultDisplayProtocol
	return &this
}

// NewDesktopPoolDisplayProtocolSettingsUpdateSpecWithDefaults instantiates a new DesktopPoolDisplayProtocolSettingsUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDesktopPoolDisplayProtocolSettingsUpdateSpecWithDefaults() *DesktopPoolDisplayProtocolSettingsUpdateSpec {
	this := DesktopPoolDisplayProtocolSettingsUpdateSpec{}
	return &this
}

// GetAllowUsersToChooseProtocol returns the AllowUsersToChooseProtocol field value
func (o *DesktopPoolDisplayProtocolSettingsUpdateSpec) GetAllowUsersToChooseProtocol() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowUsersToChooseProtocol
}

// GetAllowUsersToChooseProtocolOk returns a tuple with the AllowUsersToChooseProtocol field value
// and a boolean to check if the value has been set.
func (o *DesktopPoolDisplayProtocolSettingsUpdateSpec) GetAllowUsersToChooseProtocolOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowUsersToChooseProtocol, true
}

// SetAllowUsersToChooseProtocol sets field value
func (o *DesktopPoolDisplayProtocolSettingsUpdateSpec) SetAllowUsersToChooseProtocol(v bool) {
	o.AllowUsersToChooseProtocol = v
}

// GetDefaultDisplayProtocol returns the DefaultDisplayProtocol field value
func (o *DesktopPoolDisplayProtocolSettingsUpdateSpec) GetDefaultDisplayProtocol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultDisplayProtocol
}

// GetDefaultDisplayProtocolOk returns a tuple with the DefaultDisplayProtocol field value
// and a boolean to check if the value has been set.
func (o *DesktopPoolDisplayProtocolSettingsUpdateSpec) GetDefaultDisplayProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultDisplayProtocol, true
}

// SetDefaultDisplayProtocol sets field value
func (o *DesktopPoolDisplayProtocolSettingsUpdateSpec) SetDefaultDisplayProtocol(v string) {
	o.DefaultDisplayProtocol = v
}

// GetMaxNumberOfMonitors returns the MaxNumberOfMonitors field value if set, zero value otherwise.
func (o *DesktopPoolDisplayProtocolSettingsUpdateSpec) GetMaxNumberOfMonitors() int32 {
	if o == nil || o.MaxNumberOfMonitors == nil {
		var ret int32
		return ret
	}
	return *o.MaxNumberOfMonitors
}

// GetMaxNumberOfMonitorsOk returns a tuple with the MaxNumberOfMonitors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolDisplayProtocolSettingsUpdateSpec) GetMaxNumberOfMonitorsOk() (*int32, bool) {
	if o == nil || o.MaxNumberOfMonitors == nil {
		return nil, false
	}
	return o.MaxNumberOfMonitors, true
}

// HasMaxNumberOfMonitors returns a boolean if a field has been set.
func (o *DesktopPoolDisplayProtocolSettingsUpdateSpec) HasMaxNumberOfMonitors() bool {
	if o != nil && o.MaxNumberOfMonitors != nil {
		return true
	}

	return false
}

// SetMaxNumberOfMonitors gets a reference to the given int32 and assigns it to the MaxNumberOfMonitors field.
func (o *DesktopPoolDisplayProtocolSettingsUpdateSpec) SetMaxNumberOfMonitors(v int32) {
	o.MaxNumberOfMonitors = &v
}

// GetMaxResolutionOfAnyOneMonitor returns the MaxResolutionOfAnyOneMonitor field value if set, zero value otherwise.
func (o *DesktopPoolDisplayProtocolSettingsUpdateSpec) GetMaxResolutionOfAnyOneMonitor() string {
	if o == nil || o.MaxResolutionOfAnyOneMonitor == nil {
		var ret string
		return ret
	}
	return *o.MaxResolutionOfAnyOneMonitor
}

// GetMaxResolutionOfAnyOneMonitorOk returns a tuple with the MaxResolutionOfAnyOneMonitor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolDisplayProtocolSettingsUpdateSpec) GetMaxResolutionOfAnyOneMonitorOk() (*string, bool) {
	if o == nil || o.MaxResolutionOfAnyOneMonitor == nil {
		return nil, false
	}
	return o.MaxResolutionOfAnyOneMonitor, true
}

// HasMaxResolutionOfAnyOneMonitor returns a boolean if a field has been set.
func (o *DesktopPoolDisplayProtocolSettingsUpdateSpec) HasMaxResolutionOfAnyOneMonitor() bool {
	if o != nil && o.MaxResolutionOfAnyOneMonitor != nil {
		return true
	}

	return false
}

// SetMaxResolutionOfAnyOneMonitor gets a reference to the given string and assigns it to the MaxResolutionOfAnyOneMonitor field.
func (o *DesktopPoolDisplayProtocolSettingsUpdateSpec) SetMaxResolutionOfAnyOneMonitor(v string) {
	o.MaxResolutionOfAnyOneMonitor = &v
}

// GetRenderer3d returns the Renderer3d field value if set, zero value otherwise.
func (o *DesktopPoolDisplayProtocolSettingsUpdateSpec) GetRenderer3d() string {
	if o == nil || o.Renderer3d == nil {
		var ret string
		return ret
	}
	return *o.Renderer3d
}

// GetRenderer3dOk returns a tuple with the Renderer3d field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolDisplayProtocolSettingsUpdateSpec) GetRenderer3dOk() (*string, bool) {
	if o == nil || o.Renderer3d == nil {
		return nil, false
	}
	return o.Renderer3d, true
}

// HasRenderer3d returns a boolean if a field has been set.
func (o *DesktopPoolDisplayProtocolSettingsUpdateSpec) HasRenderer3d() bool {
	if o != nil && o.Renderer3d != nil {
		return true
	}

	return false
}

// SetRenderer3d gets a reference to the given string and assigns it to the Renderer3d field.
func (o *DesktopPoolDisplayProtocolSettingsUpdateSpec) SetRenderer3d(v string) {
	o.Renderer3d = &v
}

// GetSessionCollaborationEnabled returns the SessionCollaborationEnabled field value if set, zero value otherwise.
func (o *DesktopPoolDisplayProtocolSettingsUpdateSpec) GetSessionCollaborationEnabled() bool {
	if o == nil || o.SessionCollaborationEnabled == nil {
		var ret bool
		return ret
	}
	return *o.SessionCollaborationEnabled
}

// GetSessionCollaborationEnabledOk returns a tuple with the SessionCollaborationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolDisplayProtocolSettingsUpdateSpec) GetSessionCollaborationEnabledOk() (*bool, bool) {
	if o == nil || o.SessionCollaborationEnabled == nil {
		return nil, false
	}
	return o.SessionCollaborationEnabled, true
}

// HasSessionCollaborationEnabled returns a boolean if a field has been set.
func (o *DesktopPoolDisplayProtocolSettingsUpdateSpec) HasSessionCollaborationEnabled() bool {
	if o != nil && o.SessionCollaborationEnabled != nil {
		return true
	}

	return false
}

// SetSessionCollaborationEnabled gets a reference to the given bool and assigns it to the SessionCollaborationEnabled field.
func (o *DesktopPoolDisplayProtocolSettingsUpdateSpec) SetSessionCollaborationEnabled(v bool) {
	o.SessionCollaborationEnabled = &v
}

// GetVramSizeMb returns the VramSizeMb field value if set, zero value otherwise.
func (o *DesktopPoolDisplayProtocolSettingsUpdateSpec) GetVramSizeMb() int32 {
	if o == nil || o.VramSizeMb == nil {
		var ret int32
		return ret
	}
	return *o.VramSizeMb
}

// GetVramSizeMbOk returns a tuple with the VramSizeMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolDisplayProtocolSettingsUpdateSpec) GetVramSizeMbOk() (*int32, bool) {
	if o == nil || o.VramSizeMb == nil {
		return nil, false
	}
	return o.VramSizeMb, true
}

// HasVramSizeMb returns a boolean if a field has been set.
func (o *DesktopPoolDisplayProtocolSettingsUpdateSpec) HasVramSizeMb() bool {
	if o != nil && o.VramSizeMb != nil {
		return true
	}

	return false
}

// SetVramSizeMb gets a reference to the given int32 and assigns it to the VramSizeMb field.
func (o *DesktopPoolDisplayProtocolSettingsUpdateSpec) SetVramSizeMb(v int32) {
	o.VramSizeMb = &v
}

func (o DesktopPoolDisplayProtocolSettingsUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["allow_users_to_choose_protocol"] = o.AllowUsersToChooseProtocol
	}
	if true {
		toSerialize["default_display_protocol"] = o.DefaultDisplayProtocol
	}
	if o.MaxNumberOfMonitors != nil {
		toSerialize["max_number_of_monitors"] = o.MaxNumberOfMonitors
	}
	if o.MaxResolutionOfAnyOneMonitor != nil {
		toSerialize["max_resolution_of_any_one_monitor"] = o.MaxResolutionOfAnyOneMonitor
	}
	if o.Renderer3d != nil {
		toSerialize["renderer3d"] = o.Renderer3d
	}
	if o.SessionCollaborationEnabled != nil {
		toSerialize["session_collaboration_enabled"] = o.SessionCollaborationEnabled
	}
	if o.VramSizeMb != nil {
		toSerialize["vram_size_mb"] = o.VramSizeMb
	}
	return json.Marshal(toSerialize)
}

type NullableDesktopPoolDisplayProtocolSettingsUpdateSpec struct {
	value *DesktopPoolDisplayProtocolSettingsUpdateSpec
	isSet bool
}

func (v NullableDesktopPoolDisplayProtocolSettingsUpdateSpec) Get() *DesktopPoolDisplayProtocolSettingsUpdateSpec {
	return v.value
}

func (v *NullableDesktopPoolDisplayProtocolSettingsUpdateSpec) Set(val *DesktopPoolDisplayProtocolSettingsUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableDesktopPoolDisplayProtocolSettingsUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableDesktopPoolDisplayProtocolSettingsUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDesktopPoolDisplayProtocolSettingsUpdateSpec(val *DesktopPoolDisplayProtocolSettingsUpdateSpec) *NullableDesktopPoolDisplayProtocolSettingsUpdateSpec {
	return &NullableDesktopPoolDisplayProtocolSettingsUpdateSpec{value: val, isSet: true}
}

func (v NullableDesktopPoolDisplayProtocolSettingsUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDesktopPoolDisplayProtocolSettingsUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
