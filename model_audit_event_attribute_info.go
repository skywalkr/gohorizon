/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the AuditEventAttributeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditEventAttributeInfo{}

// AuditEventAttributeInfo Extended attributes related to events.
type AuditEventAttributeInfo struct {
	// Key value pairs representing Extended attributes related to the event. 
	EventData map[string]map[string]interface{} `json:"event_data,omitempty"`
	// Unique id representing an event. 
	Id *int64 `json:"id,omitempty"`
}

// NewAuditEventAttributeInfo instantiates a new AuditEventAttributeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditEventAttributeInfo() *AuditEventAttributeInfo {
	this := AuditEventAttributeInfo{}
	return &this
}

// NewAuditEventAttributeInfoWithDefaults instantiates a new AuditEventAttributeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditEventAttributeInfoWithDefaults() *AuditEventAttributeInfo {
	this := AuditEventAttributeInfo{}
	return &this
}

// GetEventData returns the EventData field value if set, zero value otherwise.
func (o *AuditEventAttributeInfo) GetEventData() map[string]map[string]interface{} {
	if o == nil || IsNil(o.EventData) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.EventData
}

// GetEventDataOk returns a tuple with the EventData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventAttributeInfo) GetEventDataOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.EventData) {
		return map[string]map[string]interface{}{}, false
	}
	return o.EventData, true
}

// HasEventData returns a boolean if a field has been set.
func (o *AuditEventAttributeInfo) HasEventData() bool {
	if o != nil && !IsNil(o.EventData) {
		return true
	}

	return false
}

// SetEventData gets a reference to the given map[string]map[string]interface{} and assigns it to the EventData field.
func (o *AuditEventAttributeInfo) SetEventData(v map[string]map[string]interface{}) {
	o.EventData = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AuditEventAttributeInfo) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEventAttributeInfo) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AuditEventAttributeInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *AuditEventAttributeInfo) SetId(v int64) {
	o.Id = &v
}

func (o AuditEventAttributeInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditEventAttributeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventData) {
		toSerialize["event_data"] = o.EventData
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

type NullableAuditEventAttributeInfo struct {
	value *AuditEventAttributeInfo
	isSet bool
}

func (v NullableAuditEventAttributeInfo) Get() *AuditEventAttributeInfo {
	return v.value
}

func (v *NullableAuditEventAttributeInfo) Set(val *AuditEventAttributeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditEventAttributeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditEventAttributeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditEventAttributeInfo(val *AuditEventAttributeInfo) *NullableAuditEventAttributeInfo {
	return &NullableAuditEventAttributeInfo{value: val, isSet: true}
}

func (v NullableAuditEventAttributeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditEventAttributeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


