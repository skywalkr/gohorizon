/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// CertificateOverrideData Certificate details and type information, which can be used to override thumbprint details.
type CertificateOverrideData struct {
	// Virtual Center certificate
	Certificate *string `json:"certificate,omitempty"`
	// Type of Certificate. * PEM: PEM encoded certificate type
	Type *string `json:"type,omitempty"`
}

// NewCertificateOverrideData instantiates a new CertificateOverrideData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateOverrideData() *CertificateOverrideData {
	this := CertificateOverrideData{}
	return &this
}

// NewCertificateOverrideDataWithDefaults instantiates a new CertificateOverrideData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateOverrideDataWithDefaults() *CertificateOverrideData {
	this := CertificateOverrideData{}
	return &this
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *CertificateOverrideData) GetCertificate() string {
	if o == nil || o.Certificate == nil {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateOverrideData) GetCertificateOk() (*string, bool) {
	if o == nil || o.Certificate == nil {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *CertificateOverrideData) HasCertificate() bool {
	if o != nil && o.Certificate != nil {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *CertificateOverrideData) SetCertificate(v string) {
	o.Certificate = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CertificateOverrideData) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateOverrideData) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CertificateOverrideData) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CertificateOverrideData) SetType(v string) {
	o.Type = &v
}

func (o CertificateOverrideData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Certificate != nil {
		toSerialize["certificate"] = o.Certificate
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableCertificateOverrideData struct {
	value *CertificateOverrideData
	isSet bool
}

func (v NullableCertificateOverrideData) Get() *CertificateOverrideData {
	return v.value
}

func (v *NullableCertificateOverrideData) Set(val *CertificateOverrideData) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateOverrideData) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateOverrideData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateOverrideData(val *CertificateOverrideData) *NullableCertificateOverrideData {
	return &NullableCertificateOverrideData{value: val, isSet: true}
}

func (v NullableCertificateOverrideData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateOverrideData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
