/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// FarmMonitorDetails Details of the Farm.
type FarmMonitorDetails struct {
	// Source of farm machines. This property is required if type is set to \"AUTOMATED\". * LINKED_CLONE: Linked clone share the same base image and use less storage space than full RDS Servers. * INSTANT_CLONE: Instant clone engine uses vmfork technology to create the instant clones. These clones take much less time for provisioning.
	Source *string `json:"source,omitempty"`
	// Farm type. * AUTOMATED: Automated Farm. * MANUAL: Manual farm.
	Type string `json:"type"`
}

// NewFarmMonitorDetails instantiates a new FarmMonitorDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFarmMonitorDetails(type_ string) *FarmMonitorDetails {
	this := FarmMonitorDetails{}
	this.Type = type_
	return &this
}

// NewFarmMonitorDetailsWithDefaults instantiates a new FarmMonitorDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFarmMonitorDetailsWithDefaults() *FarmMonitorDetails {
	this := FarmMonitorDetails{}
	return &this
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *FarmMonitorDetails) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmMonitorDetails) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *FarmMonitorDetails) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *FarmMonitorDetails) SetSource(v string) {
	o.Source = &v
}

// GetType returns the Type field value
func (o *FarmMonitorDetails) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FarmMonitorDetails) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FarmMonitorDetails) SetType(v string) {
	o.Type = v
}

func (o FarmMonitorDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableFarmMonitorDetails struct {
	value *FarmMonitorDetails
	isSet bool
}

func (v NullableFarmMonitorDetails) Get() *FarmMonitorDetails {
	return v.value
}

func (v *NullableFarmMonitorDetails) Set(val *FarmMonitorDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableFarmMonitorDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableFarmMonitorDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFarmMonitorDetails(val *FarmMonitorDetails) *NullableFarmMonitorDetails {
	return &NullableFarmMonitorDetails{value: val, isSet: true}
}

func (v NullableFarmMonitorDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFarmMonitorDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
