/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the DesktopPoolSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DesktopPoolSettings{}

// DesktopPoolSettings Information related to Desktop Pool Settings.
type DesktopPoolSettings struct {
	// Whether multiple sessions are allowed per user for this pool. This is valid for RDS desktop pools.For other Desktops, allow_multiple_sessions_per_user in settings will be applicable.Default value is false.
	AllowMutilpleSessionsPerUser *bool `json:"allow_mutilple_sessions_per_user,omitempty"`
	// Name of the category folder in the user's OS containing a shortcut to the desktop pool.Will be unset if the desktop does not belong to a category.This property defines valid folder names with a max length of 64 characters and up to 4 subdirectory levels.The subdirectories can be specified using a backslash, e.g. (dir1\\dir2\\dir3\\dir4). Folder names can't start orend with a backslash nor can there be 2 or more backslashes together. Combinations such as(\\dir1, dir1\\dir2\\, dir1\\\\dir2, dir1\\\\\\dir2) are invalid. The windows reserved keywords(CON, PRN, NUL, AUX, COM1 - COM9, LPT1 - LPT9 etc.) are not allowed in subdirectory names.
	CategoryFolderName *string `json:"category_folder_name,omitempty"`
	// Indicates whether this desktop is assigned to a workspace in Horizon Cloud Services. Default value is false.
	CloudAssigned *bool `json:"cloud_assigned,omitempty"`
	// Indicates whether this desktop is managed by Horizon Cloud Services.This can be false only when cloud_assigned is false. Default value is false.
	CloudManaged *bool `json:"cloud_managed,omitempty"`
	// List of tags for which the access to the desktop pool is restricted to.No list indicates that desktop pool can be accessed from any connection server.
	CsRestrictionTags []string `json:"cs_restriction_tags,omitempty"`
	// Indicates whether the desktop pool is in the process of being deleted.Default value is false.
	DeleteInProgress *bool `json:"delete_in_progress,omitempty"`
	DisplayProtocolSettings *DesktopPoolDisplayProtocolSettings `json:"display_protocol_settings,omitempty"`
	// Client restrictions to be applied to the desktop pool.Currently it is valid for RDS desktop pools only. Default value is false.
	EnableClientRestrictions *bool `json:"enable_client_restrictions,omitempty"`
	SessionSettings *DesktopPoolSessionSettings `json:"session_settings,omitempty"`
	// Supported session types for this desktop pool. If application sessions are selected to besupported then this desktop pool can be used for application pool creation. This will beuseful when the machines in the pool support application remoting. Default value of DESKTOP. * DESKTOP: Only desktop sessions are supported. * APPLICATION: Only application sessions are supported. * DESKTOP_AND_APPLICATION: Both desktop and application sessions are supported.
	SessionType *string `json:"session_type,omitempty"`
	// Locations of the category folder in the user's OS containing a shortcut to the desktop pool.The value will be present if categoryFolderName is set.
	ShortcutLocations []string `json:"shortcut_locations,omitempty"`
}

// NewDesktopPoolSettings instantiates a new DesktopPoolSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDesktopPoolSettings() *DesktopPoolSettings {
	this := DesktopPoolSettings{}
	return &this
}

// NewDesktopPoolSettingsWithDefaults instantiates a new DesktopPoolSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDesktopPoolSettingsWithDefaults() *DesktopPoolSettings {
	this := DesktopPoolSettings{}
	return &this
}

// GetAllowMutilpleSessionsPerUser returns the AllowMutilpleSessionsPerUser field value if set, zero value otherwise.
func (o *DesktopPoolSettings) GetAllowMutilpleSessionsPerUser() bool {
	if o == nil || IsNil(o.AllowMutilpleSessionsPerUser) {
		var ret bool
		return ret
	}
	return *o.AllowMutilpleSessionsPerUser
}

// GetAllowMutilpleSessionsPerUserOk returns a tuple with the AllowMutilpleSessionsPerUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolSettings) GetAllowMutilpleSessionsPerUserOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowMutilpleSessionsPerUser) {
		return nil, false
	}
	return o.AllowMutilpleSessionsPerUser, true
}

// HasAllowMutilpleSessionsPerUser returns a boolean if a field has been set.
func (o *DesktopPoolSettings) HasAllowMutilpleSessionsPerUser() bool {
	if o != nil && !IsNil(o.AllowMutilpleSessionsPerUser) {
		return true
	}

	return false
}

// SetAllowMutilpleSessionsPerUser gets a reference to the given bool and assigns it to the AllowMutilpleSessionsPerUser field.
func (o *DesktopPoolSettings) SetAllowMutilpleSessionsPerUser(v bool) {
	o.AllowMutilpleSessionsPerUser = &v
}

// GetCategoryFolderName returns the CategoryFolderName field value if set, zero value otherwise.
func (o *DesktopPoolSettings) GetCategoryFolderName() string {
	if o == nil || IsNil(o.CategoryFolderName) {
		var ret string
		return ret
	}
	return *o.CategoryFolderName
}

// GetCategoryFolderNameOk returns a tuple with the CategoryFolderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolSettings) GetCategoryFolderNameOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryFolderName) {
		return nil, false
	}
	return o.CategoryFolderName, true
}

// HasCategoryFolderName returns a boolean if a field has been set.
func (o *DesktopPoolSettings) HasCategoryFolderName() bool {
	if o != nil && !IsNil(o.CategoryFolderName) {
		return true
	}

	return false
}

// SetCategoryFolderName gets a reference to the given string and assigns it to the CategoryFolderName field.
func (o *DesktopPoolSettings) SetCategoryFolderName(v string) {
	o.CategoryFolderName = &v
}

// GetCloudAssigned returns the CloudAssigned field value if set, zero value otherwise.
func (o *DesktopPoolSettings) GetCloudAssigned() bool {
	if o == nil || IsNil(o.CloudAssigned) {
		var ret bool
		return ret
	}
	return *o.CloudAssigned
}

// GetCloudAssignedOk returns a tuple with the CloudAssigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolSettings) GetCloudAssignedOk() (*bool, bool) {
	if o == nil || IsNil(o.CloudAssigned) {
		return nil, false
	}
	return o.CloudAssigned, true
}

// HasCloudAssigned returns a boolean if a field has been set.
func (o *DesktopPoolSettings) HasCloudAssigned() bool {
	if o != nil && !IsNil(o.CloudAssigned) {
		return true
	}

	return false
}

// SetCloudAssigned gets a reference to the given bool and assigns it to the CloudAssigned field.
func (o *DesktopPoolSettings) SetCloudAssigned(v bool) {
	o.CloudAssigned = &v
}

// GetCloudManaged returns the CloudManaged field value if set, zero value otherwise.
func (o *DesktopPoolSettings) GetCloudManaged() bool {
	if o == nil || IsNil(o.CloudManaged) {
		var ret bool
		return ret
	}
	return *o.CloudManaged
}

// GetCloudManagedOk returns a tuple with the CloudManaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolSettings) GetCloudManagedOk() (*bool, bool) {
	if o == nil || IsNil(o.CloudManaged) {
		return nil, false
	}
	return o.CloudManaged, true
}

// HasCloudManaged returns a boolean if a field has been set.
func (o *DesktopPoolSettings) HasCloudManaged() bool {
	if o != nil && !IsNil(o.CloudManaged) {
		return true
	}

	return false
}

// SetCloudManaged gets a reference to the given bool and assigns it to the CloudManaged field.
func (o *DesktopPoolSettings) SetCloudManaged(v bool) {
	o.CloudManaged = &v
}

// GetCsRestrictionTags returns the CsRestrictionTags field value if set, zero value otherwise.
func (o *DesktopPoolSettings) GetCsRestrictionTags() []string {
	if o == nil || IsNil(o.CsRestrictionTags) {
		var ret []string
		return ret
	}
	return o.CsRestrictionTags
}

// GetCsRestrictionTagsOk returns a tuple with the CsRestrictionTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolSettings) GetCsRestrictionTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.CsRestrictionTags) {
		return nil, false
	}
	return o.CsRestrictionTags, true
}

// HasCsRestrictionTags returns a boolean if a field has been set.
func (o *DesktopPoolSettings) HasCsRestrictionTags() bool {
	if o != nil && !IsNil(o.CsRestrictionTags) {
		return true
	}

	return false
}

// SetCsRestrictionTags gets a reference to the given []string and assigns it to the CsRestrictionTags field.
func (o *DesktopPoolSettings) SetCsRestrictionTags(v []string) {
	o.CsRestrictionTags = v
}

// GetDeleteInProgress returns the DeleteInProgress field value if set, zero value otherwise.
func (o *DesktopPoolSettings) GetDeleteInProgress() bool {
	if o == nil || IsNil(o.DeleteInProgress) {
		var ret bool
		return ret
	}
	return *o.DeleteInProgress
}

// GetDeleteInProgressOk returns a tuple with the DeleteInProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolSettings) GetDeleteInProgressOk() (*bool, bool) {
	if o == nil || IsNil(o.DeleteInProgress) {
		return nil, false
	}
	return o.DeleteInProgress, true
}

// HasDeleteInProgress returns a boolean if a field has been set.
func (o *DesktopPoolSettings) HasDeleteInProgress() bool {
	if o != nil && !IsNil(o.DeleteInProgress) {
		return true
	}

	return false
}

// SetDeleteInProgress gets a reference to the given bool and assigns it to the DeleteInProgress field.
func (o *DesktopPoolSettings) SetDeleteInProgress(v bool) {
	o.DeleteInProgress = &v
}

// GetDisplayProtocolSettings returns the DisplayProtocolSettings field value if set, zero value otherwise.
func (o *DesktopPoolSettings) GetDisplayProtocolSettings() DesktopPoolDisplayProtocolSettings {
	if o == nil || IsNil(o.DisplayProtocolSettings) {
		var ret DesktopPoolDisplayProtocolSettings
		return ret
	}
	return *o.DisplayProtocolSettings
}

// GetDisplayProtocolSettingsOk returns a tuple with the DisplayProtocolSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolSettings) GetDisplayProtocolSettingsOk() (*DesktopPoolDisplayProtocolSettings, bool) {
	if o == nil || IsNil(o.DisplayProtocolSettings) {
		return nil, false
	}
	return o.DisplayProtocolSettings, true
}

// HasDisplayProtocolSettings returns a boolean if a field has been set.
func (o *DesktopPoolSettings) HasDisplayProtocolSettings() bool {
	if o != nil && !IsNil(o.DisplayProtocolSettings) {
		return true
	}

	return false
}

// SetDisplayProtocolSettings gets a reference to the given DesktopPoolDisplayProtocolSettings and assigns it to the DisplayProtocolSettings field.
func (o *DesktopPoolSettings) SetDisplayProtocolSettings(v DesktopPoolDisplayProtocolSettings) {
	o.DisplayProtocolSettings = &v
}

// GetEnableClientRestrictions returns the EnableClientRestrictions field value if set, zero value otherwise.
func (o *DesktopPoolSettings) GetEnableClientRestrictions() bool {
	if o == nil || IsNil(o.EnableClientRestrictions) {
		var ret bool
		return ret
	}
	return *o.EnableClientRestrictions
}

// GetEnableClientRestrictionsOk returns a tuple with the EnableClientRestrictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolSettings) GetEnableClientRestrictionsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableClientRestrictions) {
		return nil, false
	}
	return o.EnableClientRestrictions, true
}

// HasEnableClientRestrictions returns a boolean if a field has been set.
func (o *DesktopPoolSettings) HasEnableClientRestrictions() bool {
	if o != nil && !IsNil(o.EnableClientRestrictions) {
		return true
	}

	return false
}

// SetEnableClientRestrictions gets a reference to the given bool and assigns it to the EnableClientRestrictions field.
func (o *DesktopPoolSettings) SetEnableClientRestrictions(v bool) {
	o.EnableClientRestrictions = &v
}

// GetSessionSettings returns the SessionSettings field value if set, zero value otherwise.
func (o *DesktopPoolSettings) GetSessionSettings() DesktopPoolSessionSettings {
	if o == nil || IsNil(o.SessionSettings) {
		var ret DesktopPoolSessionSettings
		return ret
	}
	return *o.SessionSettings
}

// GetSessionSettingsOk returns a tuple with the SessionSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolSettings) GetSessionSettingsOk() (*DesktopPoolSessionSettings, bool) {
	if o == nil || IsNil(o.SessionSettings) {
		return nil, false
	}
	return o.SessionSettings, true
}

// HasSessionSettings returns a boolean if a field has been set.
func (o *DesktopPoolSettings) HasSessionSettings() bool {
	if o != nil && !IsNil(o.SessionSettings) {
		return true
	}

	return false
}

// SetSessionSettings gets a reference to the given DesktopPoolSessionSettings and assigns it to the SessionSettings field.
func (o *DesktopPoolSettings) SetSessionSettings(v DesktopPoolSessionSettings) {
	o.SessionSettings = &v
}

// GetSessionType returns the SessionType field value if set, zero value otherwise.
func (o *DesktopPoolSettings) GetSessionType() string {
	if o == nil || IsNil(o.SessionType) {
		var ret string
		return ret
	}
	return *o.SessionType
}

// GetSessionTypeOk returns a tuple with the SessionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolSettings) GetSessionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SessionType) {
		return nil, false
	}
	return o.SessionType, true
}

// HasSessionType returns a boolean if a field has been set.
func (o *DesktopPoolSettings) HasSessionType() bool {
	if o != nil && !IsNil(o.SessionType) {
		return true
	}

	return false
}

// SetSessionType gets a reference to the given string and assigns it to the SessionType field.
func (o *DesktopPoolSettings) SetSessionType(v string) {
	o.SessionType = &v
}

// GetShortcutLocations returns the ShortcutLocations field value if set, zero value otherwise.
func (o *DesktopPoolSettings) GetShortcutLocations() []string {
	if o == nil || IsNil(o.ShortcutLocations) {
		var ret []string
		return ret
	}
	return o.ShortcutLocations
}

// GetShortcutLocationsOk returns a tuple with the ShortcutLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolSettings) GetShortcutLocationsOk() ([]string, bool) {
	if o == nil || IsNil(o.ShortcutLocations) {
		return nil, false
	}
	return o.ShortcutLocations, true
}

// HasShortcutLocations returns a boolean if a field has been set.
func (o *DesktopPoolSettings) HasShortcutLocations() bool {
	if o != nil && !IsNil(o.ShortcutLocations) {
		return true
	}

	return false
}

// SetShortcutLocations gets a reference to the given []string and assigns it to the ShortcutLocations field.
func (o *DesktopPoolSettings) SetShortcutLocations(v []string) {
	o.ShortcutLocations = v
}

func (o DesktopPoolSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DesktopPoolSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowMutilpleSessionsPerUser) {
		toSerialize["allow_mutilple_sessions_per_user"] = o.AllowMutilpleSessionsPerUser
	}
	if !IsNil(o.CategoryFolderName) {
		toSerialize["category_folder_name"] = o.CategoryFolderName
	}
	if !IsNil(o.CloudAssigned) {
		toSerialize["cloud_assigned"] = o.CloudAssigned
	}
	if !IsNil(o.CloudManaged) {
		toSerialize["cloud_managed"] = o.CloudManaged
	}
	if !IsNil(o.CsRestrictionTags) {
		toSerialize["cs_restriction_tags"] = o.CsRestrictionTags
	}
	if !IsNil(o.DeleteInProgress) {
		toSerialize["delete_in_progress"] = o.DeleteInProgress
	}
	if !IsNil(o.DisplayProtocolSettings) {
		toSerialize["display_protocol_settings"] = o.DisplayProtocolSettings
	}
	if !IsNil(o.EnableClientRestrictions) {
		toSerialize["enable_client_restrictions"] = o.EnableClientRestrictions
	}
	if !IsNil(o.SessionSettings) {
		toSerialize["session_settings"] = o.SessionSettings
	}
	if !IsNil(o.SessionType) {
		toSerialize["session_type"] = o.SessionType
	}
	if !IsNil(o.ShortcutLocations) {
		toSerialize["shortcut_locations"] = o.ShortcutLocations
	}
	return toSerialize, nil
}

type NullableDesktopPoolSettings struct {
	value *DesktopPoolSettings
	isSet bool
}

func (v NullableDesktopPoolSettings) Get() *DesktopPoolSettings {
	return v.value
}

func (v *NullableDesktopPoolSettings) Set(val *DesktopPoolSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableDesktopPoolSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableDesktopPoolSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDesktopPoolSettings(val *DesktopPoolSettings) *NullableDesktopPoolSettings {
	return &NullableDesktopPoolSettings{value: val, isSet: true}
}

func (v NullableDesktopPoolSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDesktopPoolSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


