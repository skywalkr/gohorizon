/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// DesktopPoolSessionSettingsV2 Machine settings applicable when a user logs off or when a desktop pool is no longer keeping a machine as a spare.
type DesktopPoolSessionSettingsV2 struct {
	// Indicates whether multiple sessions are allowed per user in case of Floating User Assignment. Default value is false.
	AllowMultipleSessionsPerUser bool `json:"allow_multiple_sessions_per_user"`
	// Indicates whether the user can be allowed to reset or restart their machines. Default value is false.
	AllowUsersToResetMachines bool `json:"allow_users_to_reset_machines"`
	// Whether machines are to be deleted or refreshed after logoff in case of Floating User Assignment.This is applicable for automated desktops with virtual machines names based onpattern naming. This is not applicable for desktops that are using specified naming since dynamic creation and deletion of VMs is not supported.For Instant clone desktops this setting can only be set to DELETE. Default value is NEVER. * NEVER: Never delete or refresh the machine in the desktop pool. * DELETE: Delete the machine after user logoff. * REFRESH: Refresh the machine after user logoff.
	DeleteOrRefreshMachineAfterLogoff string `json:"delete_or_refresh_machine_after_logoff"`
	// Disconnected sessions timeout (in minutes). Will be set when disconnected_session_timeout_policy is set to AFTER.
	DisconnectedSessionTimeoutMinutes *int32 `json:"disconnected_session_timeout_minutes,omitempty"`
	// Log-off policy after disconnected session. Default value is NEVER. * IMMEDIATELY: Immediately Logoff after user disconnect. * AFTER: Logoff after the specified number of minutes after user disconnect. * NEVER: Do not logoff after user disconnect.
	DisconnectedSessionTimeoutPolicy string `json:"disconnected_session_timeout_policy"`
	// Application empty session timeout (in minutes). An empty session (that has no remote-ablewindow) is disconnected after the timeout. Default value is 1.Will be set when the empty_session_timeout_policy set to AFTER.
	EmptySessionTimeoutMinutes *int32 `json:"empty_session_timeout_minutes,omitempty"`
	// Application empty session timeout policy. Default value is AFTER. * IMMEDIATE: Empty session will be disconnected immediately. * NEVER: Empty session will never disconnected. * AFTER: Empty session will be disconnected after specified number of minutes.
	EmptySessionTimeoutPolicy string `json:"empty_session_timeout_policy"`
	// Indicates whether the empty application sessions are logged off (true) or disconnected (false) after timeout.Default value is false.
	LogoffAfterTimeout bool `json:"logoff_after_timeout"`
	// Power policy for the machines in the desktop pool after logoff. This setting is only relevant for managed machines.Default value is TAKE_NO_POWER_ACTION.For Instant clone desktops this setting can only be set to ALWAYS_POWERED_ON. * TAKE_NO_POWER_ACTION: No action will be taken when user logs off. * ALWAYS_POWERED_ON: Ensure machines in the Desktop pool are always powered on.The connection server will monitor and power on machines as necessary. * SUSPEND: Suspend when a user logs off or when desktop pool is no longer keeping a machine as a spare.This does not affect spare and newly provisioned machines. * POWER_OFF: Power off when a user logs off or when desktop pool is no longer keeping a machine as a spare.This does not affect spare and newly provisioned machines.
	PowerPolicy string `json:"power_policy"`
	// Application pre-launch session timeout (in minutes). A pre-launch session is disconnected after the timeout. Default value is 10.Will be required when the pre-launch session timeout policy is set to AFTER.
	PreLaunchSessionTimeoutMinutes *int32 `json:"pre_launch_session_timeout_minutes,omitempty"`
	// Application pre-launch session timeout policy. Default value is AFTER. * AFTER: Pre-launched session is disconnected after specified number of minutes. * NEVER: Pre-launched session is never disconnected.
	PreLaunchSessionTimeoutPolicy *string `json:"pre_launch_session_timeout_policy,omitempty"`
	// Whether and when to refresh the OS disks for dedicated-assignment, linked-clone and instant-clone machines.Default value is NEVER. * NEVER: The OS disk is never refreshed. * ALWAYS: The OS disk is refreshed every time the user logs off. * EVERY: The OS disk is refreshed at regular intervals of a specified number of days. The number of days is counted from the last refresh, or from the initial provisioning if no refresh has occurred yet. For example, if the specified value is 3 days, and three days have passed since the last refresh, the machine is refreshed after the user logs off. * AT_SIZE: The OS disk is refreshed when its current size reaches a specified percentage of its maximum allowable size. The maximum size of a linked clone's OS disk is the size of the replica's OS disk. With this option, the size of the linked clone's OS disk in the datastore is compared to maximum allowable size. This disk-utilization percentage does not reflect disk usage that you might see inside the machine's guest operating system.
	RefreshOsDiskAfterLogoff string `json:"refresh_os_disk_after_logoff"`
	// Regular interval at which to refresh the OS disk. Will be set when refresh_os_disk_after_logoff set to EVERY.
	RefreshPeriodDaysForReplicaOsDisk int32 `json:"refresh_period_days_for_replica_os_disk"`
	// With the 'AT_SIZE' option for refreshOsDiskAfterLogoff, the size of the linked clone's OS diskin the datastore is compared to its maximum allowable size. This disk-utilization percentage does not reflect disk usage that you might see inside the machine's guest operating system.Will be set when refresh_os_disk_after_logoff set to AT_SIZE.
	RefreshThresholdPercentageForReplicaOsDisk int32 `json:"refresh_threshold_percentage_for_replica_os_disk"`
}

// NewDesktopPoolSessionSettingsV2 instantiates a new DesktopPoolSessionSettingsV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDesktopPoolSessionSettingsV2(allowMultipleSessionsPerUser bool, allowUsersToResetMachines bool, deleteOrRefreshMachineAfterLogoff string, disconnectedSessionTimeoutPolicy string, emptySessionTimeoutPolicy string, logoffAfterTimeout bool, powerPolicy string, refreshOsDiskAfterLogoff string, refreshPeriodDaysForReplicaOsDisk int32, refreshThresholdPercentageForReplicaOsDisk int32) *DesktopPoolSessionSettingsV2 {
	this := DesktopPoolSessionSettingsV2{}
	this.AllowMultipleSessionsPerUser = allowMultipleSessionsPerUser
	this.AllowUsersToResetMachines = allowUsersToResetMachines
	this.DeleteOrRefreshMachineAfterLogoff = deleteOrRefreshMachineAfterLogoff
	this.DisconnectedSessionTimeoutPolicy = disconnectedSessionTimeoutPolicy
	this.EmptySessionTimeoutPolicy = emptySessionTimeoutPolicy
	this.LogoffAfterTimeout = logoffAfterTimeout
	this.PowerPolicy = powerPolicy
	this.RefreshOsDiskAfterLogoff = refreshOsDiskAfterLogoff
	this.RefreshPeriodDaysForReplicaOsDisk = refreshPeriodDaysForReplicaOsDisk
	this.RefreshThresholdPercentageForReplicaOsDisk = refreshThresholdPercentageForReplicaOsDisk
	return &this
}

// NewDesktopPoolSessionSettingsV2WithDefaults instantiates a new DesktopPoolSessionSettingsV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDesktopPoolSessionSettingsV2WithDefaults() *DesktopPoolSessionSettingsV2 {
	this := DesktopPoolSessionSettingsV2{}
	return &this
}

// GetAllowMultipleSessionsPerUser returns the AllowMultipleSessionsPerUser field value
func (o *DesktopPoolSessionSettingsV2) GetAllowMultipleSessionsPerUser() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowMultipleSessionsPerUser
}

// GetAllowMultipleSessionsPerUserOk returns a tuple with the AllowMultipleSessionsPerUser field value
// and a boolean to check if the value has been set.
func (o *DesktopPoolSessionSettingsV2) GetAllowMultipleSessionsPerUserOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowMultipleSessionsPerUser, true
}

// SetAllowMultipleSessionsPerUser sets field value
func (o *DesktopPoolSessionSettingsV2) SetAllowMultipleSessionsPerUser(v bool) {
	o.AllowMultipleSessionsPerUser = v
}

// GetAllowUsersToResetMachines returns the AllowUsersToResetMachines field value
func (o *DesktopPoolSessionSettingsV2) GetAllowUsersToResetMachines() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowUsersToResetMachines
}

// GetAllowUsersToResetMachinesOk returns a tuple with the AllowUsersToResetMachines field value
// and a boolean to check if the value has been set.
func (o *DesktopPoolSessionSettingsV2) GetAllowUsersToResetMachinesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowUsersToResetMachines, true
}

// SetAllowUsersToResetMachines sets field value
func (o *DesktopPoolSessionSettingsV2) SetAllowUsersToResetMachines(v bool) {
	o.AllowUsersToResetMachines = v
}

// GetDeleteOrRefreshMachineAfterLogoff returns the DeleteOrRefreshMachineAfterLogoff field value
func (o *DesktopPoolSessionSettingsV2) GetDeleteOrRefreshMachineAfterLogoff() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeleteOrRefreshMachineAfterLogoff
}

// GetDeleteOrRefreshMachineAfterLogoffOk returns a tuple with the DeleteOrRefreshMachineAfterLogoff field value
// and a boolean to check if the value has been set.
func (o *DesktopPoolSessionSettingsV2) GetDeleteOrRefreshMachineAfterLogoffOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeleteOrRefreshMachineAfterLogoff, true
}

// SetDeleteOrRefreshMachineAfterLogoff sets field value
func (o *DesktopPoolSessionSettingsV2) SetDeleteOrRefreshMachineAfterLogoff(v string) {
	o.DeleteOrRefreshMachineAfterLogoff = v
}

// GetDisconnectedSessionTimeoutMinutes returns the DisconnectedSessionTimeoutMinutes field value if set, zero value otherwise.
func (o *DesktopPoolSessionSettingsV2) GetDisconnectedSessionTimeoutMinutes() int32 {
	if o == nil || o.DisconnectedSessionTimeoutMinutes == nil {
		var ret int32
		return ret
	}
	return *o.DisconnectedSessionTimeoutMinutes
}

// GetDisconnectedSessionTimeoutMinutesOk returns a tuple with the DisconnectedSessionTimeoutMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolSessionSettingsV2) GetDisconnectedSessionTimeoutMinutesOk() (*int32, bool) {
	if o == nil || o.DisconnectedSessionTimeoutMinutes == nil {
		return nil, false
	}
	return o.DisconnectedSessionTimeoutMinutes, true
}

// HasDisconnectedSessionTimeoutMinutes returns a boolean if a field has been set.
func (o *DesktopPoolSessionSettingsV2) HasDisconnectedSessionTimeoutMinutes() bool {
	if o != nil && o.DisconnectedSessionTimeoutMinutes != nil {
		return true
	}

	return false
}

// SetDisconnectedSessionTimeoutMinutes gets a reference to the given int32 and assigns it to the DisconnectedSessionTimeoutMinutes field.
func (o *DesktopPoolSessionSettingsV2) SetDisconnectedSessionTimeoutMinutes(v int32) {
	o.DisconnectedSessionTimeoutMinutes = &v
}

// GetDisconnectedSessionTimeoutPolicy returns the DisconnectedSessionTimeoutPolicy field value
func (o *DesktopPoolSessionSettingsV2) GetDisconnectedSessionTimeoutPolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisconnectedSessionTimeoutPolicy
}

// GetDisconnectedSessionTimeoutPolicyOk returns a tuple with the DisconnectedSessionTimeoutPolicy field value
// and a boolean to check if the value has been set.
func (o *DesktopPoolSessionSettingsV2) GetDisconnectedSessionTimeoutPolicyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisconnectedSessionTimeoutPolicy, true
}

// SetDisconnectedSessionTimeoutPolicy sets field value
func (o *DesktopPoolSessionSettingsV2) SetDisconnectedSessionTimeoutPolicy(v string) {
	o.DisconnectedSessionTimeoutPolicy = v
}

// GetEmptySessionTimeoutMinutes returns the EmptySessionTimeoutMinutes field value if set, zero value otherwise.
func (o *DesktopPoolSessionSettingsV2) GetEmptySessionTimeoutMinutes() int32 {
	if o == nil || o.EmptySessionTimeoutMinutes == nil {
		var ret int32
		return ret
	}
	return *o.EmptySessionTimeoutMinutes
}

// GetEmptySessionTimeoutMinutesOk returns a tuple with the EmptySessionTimeoutMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolSessionSettingsV2) GetEmptySessionTimeoutMinutesOk() (*int32, bool) {
	if o == nil || o.EmptySessionTimeoutMinutes == nil {
		return nil, false
	}
	return o.EmptySessionTimeoutMinutes, true
}

// HasEmptySessionTimeoutMinutes returns a boolean if a field has been set.
func (o *DesktopPoolSessionSettingsV2) HasEmptySessionTimeoutMinutes() bool {
	if o != nil && o.EmptySessionTimeoutMinutes != nil {
		return true
	}

	return false
}

// SetEmptySessionTimeoutMinutes gets a reference to the given int32 and assigns it to the EmptySessionTimeoutMinutes field.
func (o *DesktopPoolSessionSettingsV2) SetEmptySessionTimeoutMinutes(v int32) {
	o.EmptySessionTimeoutMinutes = &v
}

// GetEmptySessionTimeoutPolicy returns the EmptySessionTimeoutPolicy field value
func (o *DesktopPoolSessionSettingsV2) GetEmptySessionTimeoutPolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmptySessionTimeoutPolicy
}

// GetEmptySessionTimeoutPolicyOk returns a tuple with the EmptySessionTimeoutPolicy field value
// and a boolean to check if the value has been set.
func (o *DesktopPoolSessionSettingsV2) GetEmptySessionTimeoutPolicyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmptySessionTimeoutPolicy, true
}

// SetEmptySessionTimeoutPolicy sets field value
func (o *DesktopPoolSessionSettingsV2) SetEmptySessionTimeoutPolicy(v string) {
	o.EmptySessionTimeoutPolicy = v
}

// GetLogoffAfterTimeout returns the LogoffAfterTimeout field value
func (o *DesktopPoolSessionSettingsV2) GetLogoffAfterTimeout() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.LogoffAfterTimeout
}

// GetLogoffAfterTimeoutOk returns a tuple with the LogoffAfterTimeout field value
// and a boolean to check if the value has been set.
func (o *DesktopPoolSessionSettingsV2) GetLogoffAfterTimeoutOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogoffAfterTimeout, true
}

// SetLogoffAfterTimeout sets field value
func (o *DesktopPoolSessionSettingsV2) SetLogoffAfterTimeout(v bool) {
	o.LogoffAfterTimeout = v
}

// GetPowerPolicy returns the PowerPolicy field value
func (o *DesktopPoolSessionSettingsV2) GetPowerPolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PowerPolicy
}

// GetPowerPolicyOk returns a tuple with the PowerPolicy field value
// and a boolean to check if the value has been set.
func (o *DesktopPoolSessionSettingsV2) GetPowerPolicyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PowerPolicy, true
}

// SetPowerPolicy sets field value
func (o *DesktopPoolSessionSettingsV2) SetPowerPolicy(v string) {
	o.PowerPolicy = v
}

// GetPreLaunchSessionTimeoutMinutes returns the PreLaunchSessionTimeoutMinutes field value if set, zero value otherwise.
func (o *DesktopPoolSessionSettingsV2) GetPreLaunchSessionTimeoutMinutes() int32 {
	if o == nil || o.PreLaunchSessionTimeoutMinutes == nil {
		var ret int32
		return ret
	}
	return *o.PreLaunchSessionTimeoutMinutes
}

// GetPreLaunchSessionTimeoutMinutesOk returns a tuple with the PreLaunchSessionTimeoutMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolSessionSettingsV2) GetPreLaunchSessionTimeoutMinutesOk() (*int32, bool) {
	if o == nil || o.PreLaunchSessionTimeoutMinutes == nil {
		return nil, false
	}
	return o.PreLaunchSessionTimeoutMinutes, true
}

// HasPreLaunchSessionTimeoutMinutes returns a boolean if a field has been set.
func (o *DesktopPoolSessionSettingsV2) HasPreLaunchSessionTimeoutMinutes() bool {
	if o != nil && o.PreLaunchSessionTimeoutMinutes != nil {
		return true
	}

	return false
}

// SetPreLaunchSessionTimeoutMinutes gets a reference to the given int32 and assigns it to the PreLaunchSessionTimeoutMinutes field.
func (o *DesktopPoolSessionSettingsV2) SetPreLaunchSessionTimeoutMinutes(v int32) {
	o.PreLaunchSessionTimeoutMinutes = &v
}

// GetPreLaunchSessionTimeoutPolicy returns the PreLaunchSessionTimeoutPolicy field value if set, zero value otherwise.
func (o *DesktopPoolSessionSettingsV2) GetPreLaunchSessionTimeoutPolicy() string {
	if o == nil || o.PreLaunchSessionTimeoutPolicy == nil {
		var ret string
		return ret
	}
	return *o.PreLaunchSessionTimeoutPolicy
}

// GetPreLaunchSessionTimeoutPolicyOk returns a tuple with the PreLaunchSessionTimeoutPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolSessionSettingsV2) GetPreLaunchSessionTimeoutPolicyOk() (*string, bool) {
	if o == nil || o.PreLaunchSessionTimeoutPolicy == nil {
		return nil, false
	}
	return o.PreLaunchSessionTimeoutPolicy, true
}

// HasPreLaunchSessionTimeoutPolicy returns a boolean if a field has been set.
func (o *DesktopPoolSessionSettingsV2) HasPreLaunchSessionTimeoutPolicy() bool {
	if o != nil && o.PreLaunchSessionTimeoutPolicy != nil {
		return true
	}

	return false
}

// SetPreLaunchSessionTimeoutPolicy gets a reference to the given string and assigns it to the PreLaunchSessionTimeoutPolicy field.
func (o *DesktopPoolSessionSettingsV2) SetPreLaunchSessionTimeoutPolicy(v string) {
	o.PreLaunchSessionTimeoutPolicy = &v
}

// GetRefreshOsDiskAfterLogoff returns the RefreshOsDiskAfterLogoff field value
func (o *DesktopPoolSessionSettingsV2) GetRefreshOsDiskAfterLogoff() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RefreshOsDiskAfterLogoff
}

// GetRefreshOsDiskAfterLogoffOk returns a tuple with the RefreshOsDiskAfterLogoff field value
// and a boolean to check if the value has been set.
func (o *DesktopPoolSessionSettingsV2) GetRefreshOsDiskAfterLogoffOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefreshOsDiskAfterLogoff, true
}

// SetRefreshOsDiskAfterLogoff sets field value
func (o *DesktopPoolSessionSettingsV2) SetRefreshOsDiskAfterLogoff(v string) {
	o.RefreshOsDiskAfterLogoff = v
}

// GetRefreshPeriodDaysForReplicaOsDisk returns the RefreshPeriodDaysForReplicaOsDisk field value
func (o *DesktopPoolSessionSettingsV2) GetRefreshPeriodDaysForReplicaOsDisk() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RefreshPeriodDaysForReplicaOsDisk
}

// GetRefreshPeriodDaysForReplicaOsDiskOk returns a tuple with the RefreshPeriodDaysForReplicaOsDisk field value
// and a boolean to check if the value has been set.
func (o *DesktopPoolSessionSettingsV2) GetRefreshPeriodDaysForReplicaOsDiskOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefreshPeriodDaysForReplicaOsDisk, true
}

// SetRefreshPeriodDaysForReplicaOsDisk sets field value
func (o *DesktopPoolSessionSettingsV2) SetRefreshPeriodDaysForReplicaOsDisk(v int32) {
	o.RefreshPeriodDaysForReplicaOsDisk = v
}

// GetRefreshThresholdPercentageForReplicaOsDisk returns the RefreshThresholdPercentageForReplicaOsDisk field value
func (o *DesktopPoolSessionSettingsV2) GetRefreshThresholdPercentageForReplicaOsDisk() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RefreshThresholdPercentageForReplicaOsDisk
}

// GetRefreshThresholdPercentageForReplicaOsDiskOk returns a tuple with the RefreshThresholdPercentageForReplicaOsDisk field value
// and a boolean to check if the value has been set.
func (o *DesktopPoolSessionSettingsV2) GetRefreshThresholdPercentageForReplicaOsDiskOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefreshThresholdPercentageForReplicaOsDisk, true
}

// SetRefreshThresholdPercentageForReplicaOsDisk sets field value
func (o *DesktopPoolSessionSettingsV2) SetRefreshThresholdPercentageForReplicaOsDisk(v int32) {
	o.RefreshThresholdPercentageForReplicaOsDisk = v
}

func (o DesktopPoolSessionSettingsV2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["allow_multiple_sessions_per_user"] = o.AllowMultipleSessionsPerUser
	}
	if true {
		toSerialize["allow_users_to_reset_machines"] = o.AllowUsersToResetMachines
	}
	if true {
		toSerialize["delete_or_refresh_machine_after_logoff"] = o.DeleteOrRefreshMachineAfterLogoff
	}
	if o.DisconnectedSessionTimeoutMinutes != nil {
		toSerialize["disconnected_session_timeout_minutes"] = o.DisconnectedSessionTimeoutMinutes
	}
	if true {
		toSerialize["disconnected_session_timeout_policy"] = o.DisconnectedSessionTimeoutPolicy
	}
	if o.EmptySessionTimeoutMinutes != nil {
		toSerialize["empty_session_timeout_minutes"] = o.EmptySessionTimeoutMinutes
	}
	if true {
		toSerialize["empty_session_timeout_policy"] = o.EmptySessionTimeoutPolicy
	}
	if true {
		toSerialize["logoff_after_timeout"] = o.LogoffAfterTimeout
	}
	if true {
		toSerialize["power_policy"] = o.PowerPolicy
	}
	if o.PreLaunchSessionTimeoutMinutes != nil {
		toSerialize["pre_launch_session_timeout_minutes"] = o.PreLaunchSessionTimeoutMinutes
	}
	if o.PreLaunchSessionTimeoutPolicy != nil {
		toSerialize["pre_launch_session_timeout_policy"] = o.PreLaunchSessionTimeoutPolicy
	}
	if true {
		toSerialize["refresh_os_disk_after_logoff"] = o.RefreshOsDiskAfterLogoff
	}
	if true {
		toSerialize["refresh_period_days_for_replica_os_disk"] = o.RefreshPeriodDaysForReplicaOsDisk
	}
	if true {
		toSerialize["refresh_threshold_percentage_for_replica_os_disk"] = o.RefreshThresholdPercentageForReplicaOsDisk
	}
	return json.Marshal(toSerialize)
}

type NullableDesktopPoolSessionSettingsV2 struct {
	value *DesktopPoolSessionSettingsV2
	isSet bool
}

func (v NullableDesktopPoolSessionSettingsV2) Get() *DesktopPoolSessionSettingsV2 {
	return v.value
}

func (v *NullableDesktopPoolSessionSettingsV2) Set(val *DesktopPoolSessionSettingsV2) {
	v.value = val
	v.isSet = true
}

func (v NullableDesktopPoolSessionSettingsV2) IsSet() bool {
	return v.isSet
}

func (v *NullableDesktopPoolSessionSettingsV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDesktopPoolSessionSettingsV2(val *DesktopPoolSessionSettingsV2) *NullableDesktopPoolSessionSettingsV2 {
	return &NullableDesktopPoolSessionSettingsV2{value: val, isSet: true}
}

func (v NullableDesktopPoolSessionSettingsV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDesktopPoolSessionSettingsV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
