/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2111
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// SessionInfo Information related to Session.
type SessionInfo struct {
	// Access group id associated with the session.  For a non-RDS desktop session, this is the desktop pool's access group id.  For an RDS desktop session, this is the RDS desktop pool's farm's access group id.  For an application session, this is the application's farm's access group id.<br>Supported Filters : 'Equals'.
	AccessGroupId *string `json:"access_group_id,omitempty"`
	// Version of agent This property need not be set.<br>Supported Filters : 'Equals'.
	AgentVersion *string `json:"agent_version,omitempty"`
	// Names of the applications launched in the session.  It will be only set when session_type is APPLICATION.<br>Supported Filters : 'Contains'.
	ApplicationNames *[]string `json:"application_names,omitempty"`
	// User SID for the broker user associated with the session.  It will be unset for non-broker sessions.<br>Supported Filters : 'Equals'.
	BrokerUserId *string `json:"broker_user_id,omitempty"`
	// Indicates whether the session is brokered from a remote pod.  It is set only if the Horizon View agent where the session resides is version 6.0 or later.<br>Supported Filters : 'Equals'.
	BrokeredRemotely *bool       `json:"brokered_remotely,omitempty"`
	ClientData       *ClientData `json:"client_data,omitempty"`
	// Unique desktop pool id for the session.  This is unset if the session is not brokered through a desktop, such as for direct console access.<br>Supported Filters : 'Equals'.
	DesktopPoolId *string `json:"desktop_pool_id,omitempty"`
	// Epoch time in milli seconds, when the session was last disconnected.  This will be unset if the session's machine has an error state, or if the session has never been disconnected.<br>Supported Filters : 'Equals'.
	DisconnectedTime *int64 `json:"disconnected_time,omitempty"`
	// Unique farm id for this RDS desktop or application session. This is unset if the session is not brokered through a farm, such as for application sessions or direct console access.<br>Supported Filters : 'Equals'.
	FarmId *string `json:"farm_id,omitempty"`
	// Unique id representing a session.<br>Supported Filters : 'Equals'.
	Id *string `json:"id,omitempty"`
	// Idle time duration in minutes, indicating how long the end user of the session has been idle for. This property need not be set.<br>Supported Filters : 'Equals'.
	IdleDuration *int64 `json:"idle_duration,omitempty"`
	// Duration of the last connection period of the session in milli seconds. If the session is currently connected, this is the duration that the session has been in connected state. If the session is currently disconnected, this is the duration of its previous connection period. This will be unset on error.<br>Supported Filters : 'Equals'.
	LastSessionDurationMs *int64 `json:"last_session_duration_ms,omitempty"`
	// Unique machine id for the session.  This is unset for RDS Desktop or application sessions. If desktop pool id is unset, it is the id of registered un-managed physical machine.<br>Supported Filters : 'Equals'.
	MachineId *string `json:"machine_id,omitempty"`
	// Unique RDS server id for the RDS desktop or application session. This property need not be set.<br>Supported Filters : 'Equals'.
	RdsServerId *string `json:"rds_server_id,omitempty"`
	// Indicates whether the session is running on remote pod resource.<br>Supported Filters : 'Equals'.
	ResourcedRemotely   *bool                `json:"resourced_remotely,omitempty"`
	SecurityGatewayData *SecurityGatewayData `json:"security_gateway_data,omitempty"`
	// Protocol for the session.  It will be unset for disconnected sessions.<br>Supported Filters : 'Equals'. * PCOIP: Display protocol is PCoIP. * RDP: Display protocol is RDP. * BLAST: Display protocol is BLAST. * CONSOLE: Display protocol is console. * UNKNOWN: Display protocol is unknown.
	SessionProtocol *string `json:"session_protocol,omitempty"`
	// State of session.<br>Supported Filters : 'Equals', 'NotEquals'. * CONNECTED: Session is connected * DISCONNECTED: Session is disconnected * PENDING: Session is pending
	SessionState *string `json:"session_state,omitempty"`
	// Type of session.<br>Supported Filters : 'Equals'. * DESKTOP: Desktop or RDS desktop session. * APPLICATION: Application session.
	SessionType *string `json:"session_type,omitempty"`
	// Epoch time in milli seconds, when the session was originally logged in.  The lifecycle of a session begins at login and ends at logout, with any number of connect and disconnect occurrences in between. The first connection time will be shortly after this time.  This property need not be set.<br>Supported Filters : 'Equals'.
	StartTime *int64 `json:"start_time,omitempty"`
	// Indicates whether the session is of unauthenticated access user.  This property need not be set.<br>Supported Filters : 'Equals'.
	Unauthenticated *bool `json:"unauthenticated,omitempty"`
	// Unique SID of the user logged into the session.  It may not match the broker user id for non-SSO scenarios.<br>Supported Filters : 'Equals'.
	UserId *string `json:"user_id,omitempty"`
}

// NewSessionInfo instantiates a new SessionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionInfo() *SessionInfo {
	this := SessionInfo{}
	return &this
}

// NewSessionInfoWithDefaults instantiates a new SessionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionInfoWithDefaults() *SessionInfo {
	this := SessionInfo{}
	return &this
}

// GetAccessGroupId returns the AccessGroupId field value if set, zero value otherwise.
func (o *SessionInfo) GetAccessGroupId() string {
	if o == nil || o.AccessGroupId == nil {
		var ret string
		return ret
	}
	return *o.AccessGroupId
}

// GetAccessGroupIdOk returns a tuple with the AccessGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetAccessGroupIdOk() (*string, bool) {
	if o == nil || o.AccessGroupId == nil {
		return nil, false
	}
	return o.AccessGroupId, true
}

// HasAccessGroupId returns a boolean if a field has been set.
func (o *SessionInfo) HasAccessGroupId() bool {
	if o != nil && o.AccessGroupId != nil {
		return true
	}

	return false
}

// SetAccessGroupId gets a reference to the given string and assigns it to the AccessGroupId field.
func (o *SessionInfo) SetAccessGroupId(v string) {
	o.AccessGroupId = &v
}

// GetAgentVersion returns the AgentVersion field value if set, zero value otherwise.
func (o *SessionInfo) GetAgentVersion() string {
	if o == nil || o.AgentVersion == nil {
		var ret string
		return ret
	}
	return *o.AgentVersion
}

// GetAgentVersionOk returns a tuple with the AgentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetAgentVersionOk() (*string, bool) {
	if o == nil || o.AgentVersion == nil {
		return nil, false
	}
	return o.AgentVersion, true
}

// HasAgentVersion returns a boolean if a field has been set.
func (o *SessionInfo) HasAgentVersion() bool {
	if o != nil && o.AgentVersion != nil {
		return true
	}

	return false
}

// SetAgentVersion gets a reference to the given string and assigns it to the AgentVersion field.
func (o *SessionInfo) SetAgentVersion(v string) {
	o.AgentVersion = &v
}

// GetApplicationNames returns the ApplicationNames field value if set, zero value otherwise.
func (o *SessionInfo) GetApplicationNames() []string {
	if o == nil || o.ApplicationNames == nil {
		var ret []string
		return ret
	}
	return *o.ApplicationNames
}

// GetApplicationNamesOk returns a tuple with the ApplicationNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetApplicationNamesOk() (*[]string, bool) {
	if o == nil || o.ApplicationNames == nil {
		return nil, false
	}
	return o.ApplicationNames, true
}

// HasApplicationNames returns a boolean if a field has been set.
func (o *SessionInfo) HasApplicationNames() bool {
	if o != nil && o.ApplicationNames != nil {
		return true
	}

	return false
}

// SetApplicationNames gets a reference to the given []string and assigns it to the ApplicationNames field.
func (o *SessionInfo) SetApplicationNames(v []string) {
	o.ApplicationNames = &v
}

// GetBrokerUserId returns the BrokerUserId field value if set, zero value otherwise.
func (o *SessionInfo) GetBrokerUserId() string {
	if o == nil || o.BrokerUserId == nil {
		var ret string
		return ret
	}
	return *o.BrokerUserId
}

// GetBrokerUserIdOk returns a tuple with the BrokerUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetBrokerUserIdOk() (*string, bool) {
	if o == nil || o.BrokerUserId == nil {
		return nil, false
	}
	return o.BrokerUserId, true
}

// HasBrokerUserId returns a boolean if a field has been set.
func (o *SessionInfo) HasBrokerUserId() bool {
	if o != nil && o.BrokerUserId != nil {
		return true
	}

	return false
}

// SetBrokerUserId gets a reference to the given string and assigns it to the BrokerUserId field.
func (o *SessionInfo) SetBrokerUserId(v string) {
	o.BrokerUserId = &v
}

// GetBrokeredRemotely returns the BrokeredRemotely field value if set, zero value otherwise.
func (o *SessionInfo) GetBrokeredRemotely() bool {
	if o == nil || o.BrokeredRemotely == nil {
		var ret bool
		return ret
	}
	return *o.BrokeredRemotely
}

// GetBrokeredRemotelyOk returns a tuple with the BrokeredRemotely field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetBrokeredRemotelyOk() (*bool, bool) {
	if o == nil || o.BrokeredRemotely == nil {
		return nil, false
	}
	return o.BrokeredRemotely, true
}

// HasBrokeredRemotely returns a boolean if a field has been set.
func (o *SessionInfo) HasBrokeredRemotely() bool {
	if o != nil && o.BrokeredRemotely != nil {
		return true
	}

	return false
}

// SetBrokeredRemotely gets a reference to the given bool and assigns it to the BrokeredRemotely field.
func (o *SessionInfo) SetBrokeredRemotely(v bool) {
	o.BrokeredRemotely = &v
}

// GetClientData returns the ClientData field value if set, zero value otherwise.
func (o *SessionInfo) GetClientData() ClientData {
	if o == nil || o.ClientData == nil {
		var ret ClientData
		return ret
	}
	return *o.ClientData
}

// GetClientDataOk returns a tuple with the ClientData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetClientDataOk() (*ClientData, bool) {
	if o == nil || o.ClientData == nil {
		return nil, false
	}
	return o.ClientData, true
}

// HasClientData returns a boolean if a field has been set.
func (o *SessionInfo) HasClientData() bool {
	if o != nil && o.ClientData != nil {
		return true
	}

	return false
}

// SetClientData gets a reference to the given ClientData and assigns it to the ClientData field.
func (o *SessionInfo) SetClientData(v ClientData) {
	o.ClientData = &v
}

// GetDesktopPoolId returns the DesktopPoolId field value if set, zero value otherwise.
func (o *SessionInfo) GetDesktopPoolId() string {
	if o == nil || o.DesktopPoolId == nil {
		var ret string
		return ret
	}
	return *o.DesktopPoolId
}

// GetDesktopPoolIdOk returns a tuple with the DesktopPoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetDesktopPoolIdOk() (*string, bool) {
	if o == nil || o.DesktopPoolId == nil {
		return nil, false
	}
	return o.DesktopPoolId, true
}

// HasDesktopPoolId returns a boolean if a field has been set.
func (o *SessionInfo) HasDesktopPoolId() bool {
	if o != nil && o.DesktopPoolId != nil {
		return true
	}

	return false
}

// SetDesktopPoolId gets a reference to the given string and assigns it to the DesktopPoolId field.
func (o *SessionInfo) SetDesktopPoolId(v string) {
	o.DesktopPoolId = &v
}

// GetDisconnectedTime returns the DisconnectedTime field value if set, zero value otherwise.
func (o *SessionInfo) GetDisconnectedTime() int64 {
	if o == nil || o.DisconnectedTime == nil {
		var ret int64
		return ret
	}
	return *o.DisconnectedTime
}

// GetDisconnectedTimeOk returns a tuple with the DisconnectedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetDisconnectedTimeOk() (*int64, bool) {
	if o == nil || o.DisconnectedTime == nil {
		return nil, false
	}
	return o.DisconnectedTime, true
}

// HasDisconnectedTime returns a boolean if a field has been set.
func (o *SessionInfo) HasDisconnectedTime() bool {
	if o != nil && o.DisconnectedTime != nil {
		return true
	}

	return false
}

// SetDisconnectedTime gets a reference to the given int64 and assigns it to the DisconnectedTime field.
func (o *SessionInfo) SetDisconnectedTime(v int64) {
	o.DisconnectedTime = &v
}

// GetFarmId returns the FarmId field value if set, zero value otherwise.
func (o *SessionInfo) GetFarmId() string {
	if o == nil || o.FarmId == nil {
		var ret string
		return ret
	}
	return *o.FarmId
}

// GetFarmIdOk returns a tuple with the FarmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetFarmIdOk() (*string, bool) {
	if o == nil || o.FarmId == nil {
		return nil, false
	}
	return o.FarmId, true
}

// HasFarmId returns a boolean if a field has been set.
func (o *SessionInfo) HasFarmId() bool {
	if o != nil && o.FarmId != nil {
		return true
	}

	return false
}

// SetFarmId gets a reference to the given string and assigns it to the FarmId field.
func (o *SessionInfo) SetFarmId(v string) {
	o.FarmId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SessionInfo) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SessionInfo) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SessionInfo) SetId(v string) {
	o.Id = &v
}

// GetIdleDuration returns the IdleDuration field value if set, zero value otherwise.
func (o *SessionInfo) GetIdleDuration() int64 {
	if o == nil || o.IdleDuration == nil {
		var ret int64
		return ret
	}
	return *o.IdleDuration
}

// GetIdleDurationOk returns a tuple with the IdleDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetIdleDurationOk() (*int64, bool) {
	if o == nil || o.IdleDuration == nil {
		return nil, false
	}
	return o.IdleDuration, true
}

// HasIdleDuration returns a boolean if a field has been set.
func (o *SessionInfo) HasIdleDuration() bool {
	if o != nil && o.IdleDuration != nil {
		return true
	}

	return false
}

// SetIdleDuration gets a reference to the given int64 and assigns it to the IdleDuration field.
func (o *SessionInfo) SetIdleDuration(v int64) {
	o.IdleDuration = &v
}

// GetLastSessionDurationMs returns the LastSessionDurationMs field value if set, zero value otherwise.
func (o *SessionInfo) GetLastSessionDurationMs() int64 {
	if o == nil || o.LastSessionDurationMs == nil {
		var ret int64
		return ret
	}
	return *o.LastSessionDurationMs
}

// GetLastSessionDurationMsOk returns a tuple with the LastSessionDurationMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetLastSessionDurationMsOk() (*int64, bool) {
	if o == nil || o.LastSessionDurationMs == nil {
		return nil, false
	}
	return o.LastSessionDurationMs, true
}

// HasLastSessionDurationMs returns a boolean if a field has been set.
func (o *SessionInfo) HasLastSessionDurationMs() bool {
	if o != nil && o.LastSessionDurationMs != nil {
		return true
	}

	return false
}

// SetLastSessionDurationMs gets a reference to the given int64 and assigns it to the LastSessionDurationMs field.
func (o *SessionInfo) SetLastSessionDurationMs(v int64) {
	o.LastSessionDurationMs = &v
}

// GetMachineId returns the MachineId field value if set, zero value otherwise.
func (o *SessionInfo) GetMachineId() string {
	if o == nil || o.MachineId == nil {
		var ret string
		return ret
	}
	return *o.MachineId
}

// GetMachineIdOk returns a tuple with the MachineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetMachineIdOk() (*string, bool) {
	if o == nil || o.MachineId == nil {
		return nil, false
	}
	return o.MachineId, true
}

// HasMachineId returns a boolean if a field has been set.
func (o *SessionInfo) HasMachineId() bool {
	if o != nil && o.MachineId != nil {
		return true
	}

	return false
}

// SetMachineId gets a reference to the given string and assigns it to the MachineId field.
func (o *SessionInfo) SetMachineId(v string) {
	o.MachineId = &v
}

// GetRdsServerId returns the RdsServerId field value if set, zero value otherwise.
func (o *SessionInfo) GetRdsServerId() string {
	if o == nil || o.RdsServerId == nil {
		var ret string
		return ret
	}
	return *o.RdsServerId
}

// GetRdsServerIdOk returns a tuple with the RdsServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetRdsServerIdOk() (*string, bool) {
	if o == nil || o.RdsServerId == nil {
		return nil, false
	}
	return o.RdsServerId, true
}

// HasRdsServerId returns a boolean if a field has been set.
func (o *SessionInfo) HasRdsServerId() bool {
	if o != nil && o.RdsServerId != nil {
		return true
	}

	return false
}

// SetRdsServerId gets a reference to the given string and assigns it to the RdsServerId field.
func (o *SessionInfo) SetRdsServerId(v string) {
	o.RdsServerId = &v
}

// GetResourcedRemotely returns the ResourcedRemotely field value if set, zero value otherwise.
func (o *SessionInfo) GetResourcedRemotely() bool {
	if o == nil || o.ResourcedRemotely == nil {
		var ret bool
		return ret
	}
	return *o.ResourcedRemotely
}

// GetResourcedRemotelyOk returns a tuple with the ResourcedRemotely field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetResourcedRemotelyOk() (*bool, bool) {
	if o == nil || o.ResourcedRemotely == nil {
		return nil, false
	}
	return o.ResourcedRemotely, true
}

// HasResourcedRemotely returns a boolean if a field has been set.
func (o *SessionInfo) HasResourcedRemotely() bool {
	if o != nil && o.ResourcedRemotely != nil {
		return true
	}

	return false
}

// SetResourcedRemotely gets a reference to the given bool and assigns it to the ResourcedRemotely field.
func (o *SessionInfo) SetResourcedRemotely(v bool) {
	o.ResourcedRemotely = &v
}

// GetSecurityGatewayData returns the SecurityGatewayData field value if set, zero value otherwise.
func (o *SessionInfo) GetSecurityGatewayData() SecurityGatewayData {
	if o == nil || o.SecurityGatewayData == nil {
		var ret SecurityGatewayData
		return ret
	}
	return *o.SecurityGatewayData
}

// GetSecurityGatewayDataOk returns a tuple with the SecurityGatewayData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetSecurityGatewayDataOk() (*SecurityGatewayData, bool) {
	if o == nil || o.SecurityGatewayData == nil {
		return nil, false
	}
	return o.SecurityGatewayData, true
}

// HasSecurityGatewayData returns a boolean if a field has been set.
func (o *SessionInfo) HasSecurityGatewayData() bool {
	if o != nil && o.SecurityGatewayData != nil {
		return true
	}

	return false
}

// SetSecurityGatewayData gets a reference to the given SecurityGatewayData and assigns it to the SecurityGatewayData field.
func (o *SessionInfo) SetSecurityGatewayData(v SecurityGatewayData) {
	o.SecurityGatewayData = &v
}

// GetSessionProtocol returns the SessionProtocol field value if set, zero value otherwise.
func (o *SessionInfo) GetSessionProtocol() string {
	if o == nil || o.SessionProtocol == nil {
		var ret string
		return ret
	}
	return *o.SessionProtocol
}

// GetSessionProtocolOk returns a tuple with the SessionProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetSessionProtocolOk() (*string, bool) {
	if o == nil || o.SessionProtocol == nil {
		return nil, false
	}
	return o.SessionProtocol, true
}

// HasSessionProtocol returns a boolean if a field has been set.
func (o *SessionInfo) HasSessionProtocol() bool {
	if o != nil && o.SessionProtocol != nil {
		return true
	}

	return false
}

// SetSessionProtocol gets a reference to the given string and assigns it to the SessionProtocol field.
func (o *SessionInfo) SetSessionProtocol(v string) {
	o.SessionProtocol = &v
}

// GetSessionState returns the SessionState field value if set, zero value otherwise.
func (o *SessionInfo) GetSessionState() string {
	if o == nil || o.SessionState == nil {
		var ret string
		return ret
	}
	return *o.SessionState
}

// GetSessionStateOk returns a tuple with the SessionState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetSessionStateOk() (*string, bool) {
	if o == nil || o.SessionState == nil {
		return nil, false
	}
	return o.SessionState, true
}

// HasSessionState returns a boolean if a field has been set.
func (o *SessionInfo) HasSessionState() bool {
	if o != nil && o.SessionState != nil {
		return true
	}

	return false
}

// SetSessionState gets a reference to the given string and assigns it to the SessionState field.
func (o *SessionInfo) SetSessionState(v string) {
	o.SessionState = &v
}

// GetSessionType returns the SessionType field value if set, zero value otherwise.
func (o *SessionInfo) GetSessionType() string {
	if o == nil || o.SessionType == nil {
		var ret string
		return ret
	}
	return *o.SessionType
}

// GetSessionTypeOk returns a tuple with the SessionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetSessionTypeOk() (*string, bool) {
	if o == nil || o.SessionType == nil {
		return nil, false
	}
	return o.SessionType, true
}

// HasSessionType returns a boolean if a field has been set.
func (o *SessionInfo) HasSessionType() bool {
	if o != nil && o.SessionType != nil {
		return true
	}

	return false
}

// SetSessionType gets a reference to the given string and assigns it to the SessionType field.
func (o *SessionInfo) SetSessionType(v string) {
	o.SessionType = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *SessionInfo) GetStartTime() int64 {
	if o == nil || o.StartTime == nil {
		var ret int64
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetStartTimeOk() (*int64, bool) {
	if o == nil || o.StartTime == nil {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *SessionInfo) HasStartTime() bool {
	if o != nil && o.StartTime != nil {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int64 and assigns it to the StartTime field.
func (o *SessionInfo) SetStartTime(v int64) {
	o.StartTime = &v
}

// GetUnauthenticated returns the Unauthenticated field value if set, zero value otherwise.
func (o *SessionInfo) GetUnauthenticated() bool {
	if o == nil || o.Unauthenticated == nil {
		var ret bool
		return ret
	}
	return *o.Unauthenticated
}

// GetUnauthenticatedOk returns a tuple with the Unauthenticated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetUnauthenticatedOk() (*bool, bool) {
	if o == nil || o.Unauthenticated == nil {
		return nil, false
	}
	return o.Unauthenticated, true
}

// HasUnauthenticated returns a boolean if a field has been set.
func (o *SessionInfo) HasUnauthenticated() bool {
	if o != nil && o.Unauthenticated != nil {
		return true
	}

	return false
}

// SetUnauthenticated gets a reference to the given bool and assigns it to the Unauthenticated field.
func (o *SessionInfo) SetUnauthenticated(v bool) {
	o.Unauthenticated = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *SessionInfo) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *SessionInfo) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *SessionInfo) SetUserId(v string) {
	o.UserId = &v
}

func (o SessionInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessGroupId != nil {
		toSerialize["access_group_id"] = o.AccessGroupId
	}
	if o.AgentVersion != nil {
		toSerialize["agent_version"] = o.AgentVersion
	}
	if o.ApplicationNames != nil {
		toSerialize["application_names"] = o.ApplicationNames
	}
	if o.BrokerUserId != nil {
		toSerialize["broker_user_id"] = o.BrokerUserId
	}
	if o.BrokeredRemotely != nil {
		toSerialize["brokered_remotely"] = o.BrokeredRemotely
	}
	if o.ClientData != nil {
		toSerialize["client_data"] = o.ClientData
	}
	if o.DesktopPoolId != nil {
		toSerialize["desktop_pool_id"] = o.DesktopPoolId
	}
	if o.DisconnectedTime != nil {
		toSerialize["disconnected_time"] = o.DisconnectedTime
	}
	if o.FarmId != nil {
		toSerialize["farm_id"] = o.FarmId
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IdleDuration != nil {
		toSerialize["idle_duration"] = o.IdleDuration
	}
	if o.LastSessionDurationMs != nil {
		toSerialize["last_session_duration_ms"] = o.LastSessionDurationMs
	}
	if o.MachineId != nil {
		toSerialize["machine_id"] = o.MachineId
	}
	if o.RdsServerId != nil {
		toSerialize["rds_server_id"] = o.RdsServerId
	}
	if o.ResourcedRemotely != nil {
		toSerialize["resourced_remotely"] = o.ResourcedRemotely
	}
	if o.SecurityGatewayData != nil {
		toSerialize["security_gateway_data"] = o.SecurityGatewayData
	}
	if o.SessionProtocol != nil {
		toSerialize["session_protocol"] = o.SessionProtocol
	}
	if o.SessionState != nil {
		toSerialize["session_state"] = o.SessionState
	}
	if o.SessionType != nil {
		toSerialize["session_type"] = o.SessionType
	}
	if o.StartTime != nil {
		toSerialize["start_time"] = o.StartTime
	}
	if o.Unauthenticated != nil {
		toSerialize["unauthenticated"] = o.Unauthenticated
	}
	if o.UserId != nil {
		toSerialize["user_id"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableSessionInfo struct {
	value *SessionInfo
	isSet bool
}

func (v NullableSessionInfo) Get() *SessionInfo {
	return v.value
}

func (v *NullableSessionInfo) Set(val *SessionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionInfo(val *SessionInfo) *NullableSessionInfo {
	return &NullableSessionInfo{value: val, isSet: true}
}

func (v NullableSessionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
