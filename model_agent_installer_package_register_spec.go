/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AgentInstallerPackageRegisterSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AgentInstallerPackageRegisterSpec{}

// AgentInstallerPackageRegisterSpec Information required to register an agent installer package.
type AgentInstallerPackageRegisterSpec struct {
	// URL of the metadata file concerning the agent installer package which is to be registered.
	MetadataFileUrl string `json:"metadata_file_url"`
}

type _AgentInstallerPackageRegisterSpec AgentInstallerPackageRegisterSpec

// NewAgentInstallerPackageRegisterSpec instantiates a new AgentInstallerPackageRegisterSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgentInstallerPackageRegisterSpec(metadataFileUrl string) *AgentInstallerPackageRegisterSpec {
	this := AgentInstallerPackageRegisterSpec{}
	this.MetadataFileUrl = metadataFileUrl
	return &this
}

// NewAgentInstallerPackageRegisterSpecWithDefaults instantiates a new AgentInstallerPackageRegisterSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgentInstallerPackageRegisterSpecWithDefaults() *AgentInstallerPackageRegisterSpec {
	this := AgentInstallerPackageRegisterSpec{}
	return &this
}

// GetMetadataFileUrl returns the MetadataFileUrl field value
func (o *AgentInstallerPackageRegisterSpec) GetMetadataFileUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetadataFileUrl
}

// GetMetadataFileUrlOk returns a tuple with the MetadataFileUrl field value
// and a boolean to check if the value has been set.
func (o *AgentInstallerPackageRegisterSpec) GetMetadataFileUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetadataFileUrl, true
}

// SetMetadataFileUrl sets field value
func (o *AgentInstallerPackageRegisterSpec) SetMetadataFileUrl(v string) {
	o.MetadataFileUrl = v
}

func (o AgentInstallerPackageRegisterSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AgentInstallerPackageRegisterSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["metadata_file_url"] = o.MetadataFileUrl
	return toSerialize, nil
}

func (o *AgentInstallerPackageRegisterSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metadata_file_url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAgentInstallerPackageRegisterSpec := _AgentInstallerPackageRegisterSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAgentInstallerPackageRegisterSpec)

	if err != nil {
		return err
	}

	*o = AgentInstallerPackageRegisterSpec(varAgentInstallerPackageRegisterSpec)

	return err
}

type NullableAgentInstallerPackageRegisterSpec struct {
	value *AgentInstallerPackageRegisterSpec
	isSet bool
}

func (v NullableAgentInstallerPackageRegisterSpec) Get() *AgentInstallerPackageRegisterSpec {
	return v.value
}

func (v *NullableAgentInstallerPackageRegisterSpec) Set(val *AgentInstallerPackageRegisterSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableAgentInstallerPackageRegisterSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableAgentInstallerPackageRegisterSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgentInstallerPackageRegisterSpec(val *AgentInstallerPackageRegisterSpec) *NullableAgentInstallerPackageRegisterSpec {
	return &NullableAgentInstallerPackageRegisterSpec{value: val, isSet: true}
}

func (v NullableAgentInstallerPackageRegisterSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgentInstallerPackageRegisterSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


