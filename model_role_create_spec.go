/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RoleCreateSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleCreateSpec{}

// RoleCreateSpec Information required to create a role.
type RoleCreateSpec struct {
	// Role description.
	Description *string `json:"description,omitempty"`
	// Role name. This property must contain only alphanumerics, underscores, and dashes.
	Name string `json:"name"`
	// Privileges for this role. When being created or updated, input non-selectable privileges are ignored. 
	Privileges []string `json:"privileges"`
}

type _RoleCreateSpec RoleCreateSpec

// NewRoleCreateSpec instantiates a new RoleCreateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleCreateSpec(name string, privileges []string) *RoleCreateSpec {
	this := RoleCreateSpec{}
	this.Name = name
	this.Privileges = privileges
	return &this
}

// NewRoleCreateSpecWithDefaults instantiates a new RoleCreateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleCreateSpecWithDefaults() *RoleCreateSpec {
	this := RoleCreateSpec{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RoleCreateSpec) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleCreateSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RoleCreateSpec) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RoleCreateSpec) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value
func (o *RoleCreateSpec) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RoleCreateSpec) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RoleCreateSpec) SetName(v string) {
	o.Name = v
}

// GetPrivileges returns the Privileges field value
func (o *RoleCreateSpec) GetPrivileges() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Privileges
}

// GetPrivilegesOk returns a tuple with the Privileges field value
// and a boolean to check if the value has been set.
func (o *RoleCreateSpec) GetPrivilegesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Privileges, true
}

// SetPrivileges sets field value
func (o *RoleCreateSpec) SetPrivileges(v []string) {
	o.Privileges = v
}

func (o RoleCreateSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleCreateSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["name"] = o.Name
	toSerialize["privileges"] = o.Privileges
	return toSerialize, nil
}

func (o *RoleCreateSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"privileges",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoleCreateSpec := _RoleCreateSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRoleCreateSpec)

	if err != nil {
		return err
	}

	*o = RoleCreateSpec(varRoleCreateSpec)

	return err
}

type NullableRoleCreateSpec struct {
	value *RoleCreateSpec
	isSet bool
}

func (v NullableRoleCreateSpec) Get() *RoleCreateSpec {
	return v.value
}

func (v *NullableRoleCreateSpec) Set(val *RoleCreateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleCreateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleCreateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleCreateSpec(val *RoleCreateSpec) *NullableRoleCreateSpec {
	return &NullableRoleCreateSpec{value: val, isSet: true}
}

func (v NullableRoleCreateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleCreateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


