/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DesktopPoolNetworkLabelAssignmentSettingsCreateSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DesktopPoolNetworkLabelAssignmentSettingsCreateSpec{}

// DesktopPoolNetworkLabelAssignmentSettingsCreateSpec Specification for an individual network label assignment, stipulating the label and how many times it may be assigned to machines with this spec.
type DesktopPoolNetworkLabelAssignmentSettingsCreateSpec struct {
	// Indicates whether or not this specification is enabled. While this specification is disabled, automatic network label assigment for this desktop pool will skip over the network label in this spec. <br> Default value is true. <br>
	Enabled *bool `json:"enabled,omitempty"`
	// The maximum number of times this network label can be assigned to a machine. <br>
	MaxLabel *int32 `json:"max_label,omitempty"`
	// The property specifies whether or not there is a maximum limit to the number of times this label may be assigned to machines within this spec. * UNLIMITED: The network label assignment specification has no limit on the number of labels to assign. * LIMITED: The network label assignment specification has a limited number of labels to assign.
	MaxLabelType string `json:"max_label_type"`
	// The network label name. <br>
	NetworkLabelName string `json:"network_label_name"`
}

type _DesktopPoolNetworkLabelAssignmentSettingsCreateSpec DesktopPoolNetworkLabelAssignmentSettingsCreateSpec

// NewDesktopPoolNetworkLabelAssignmentSettingsCreateSpec instantiates a new DesktopPoolNetworkLabelAssignmentSettingsCreateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDesktopPoolNetworkLabelAssignmentSettingsCreateSpec(maxLabelType string, networkLabelName string) *DesktopPoolNetworkLabelAssignmentSettingsCreateSpec {
	this := DesktopPoolNetworkLabelAssignmentSettingsCreateSpec{}
	this.MaxLabelType = maxLabelType
	this.NetworkLabelName = networkLabelName
	return &this
}

// NewDesktopPoolNetworkLabelAssignmentSettingsCreateSpecWithDefaults instantiates a new DesktopPoolNetworkLabelAssignmentSettingsCreateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDesktopPoolNetworkLabelAssignmentSettingsCreateSpecWithDefaults() *DesktopPoolNetworkLabelAssignmentSettingsCreateSpec {
	this := DesktopPoolNetworkLabelAssignmentSettingsCreateSpec{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *DesktopPoolNetworkLabelAssignmentSettingsCreateSpec) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolNetworkLabelAssignmentSettingsCreateSpec) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *DesktopPoolNetworkLabelAssignmentSettingsCreateSpec) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *DesktopPoolNetworkLabelAssignmentSettingsCreateSpec) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMaxLabel returns the MaxLabel field value if set, zero value otherwise.
func (o *DesktopPoolNetworkLabelAssignmentSettingsCreateSpec) GetMaxLabel() int32 {
	if o == nil || IsNil(o.MaxLabel) {
		var ret int32
		return ret
	}
	return *o.MaxLabel
}

// GetMaxLabelOk returns a tuple with the MaxLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolNetworkLabelAssignmentSettingsCreateSpec) GetMaxLabelOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxLabel) {
		return nil, false
	}
	return o.MaxLabel, true
}

// HasMaxLabel returns a boolean if a field has been set.
func (o *DesktopPoolNetworkLabelAssignmentSettingsCreateSpec) HasMaxLabel() bool {
	if o != nil && !IsNil(o.MaxLabel) {
		return true
	}

	return false
}

// SetMaxLabel gets a reference to the given int32 and assigns it to the MaxLabel field.
func (o *DesktopPoolNetworkLabelAssignmentSettingsCreateSpec) SetMaxLabel(v int32) {
	o.MaxLabel = &v
}

// GetMaxLabelType returns the MaxLabelType field value
func (o *DesktopPoolNetworkLabelAssignmentSettingsCreateSpec) GetMaxLabelType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MaxLabelType
}

// GetMaxLabelTypeOk returns a tuple with the MaxLabelType field value
// and a boolean to check if the value has been set.
func (o *DesktopPoolNetworkLabelAssignmentSettingsCreateSpec) GetMaxLabelTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxLabelType, true
}

// SetMaxLabelType sets field value
func (o *DesktopPoolNetworkLabelAssignmentSettingsCreateSpec) SetMaxLabelType(v string) {
	o.MaxLabelType = v
}

// GetNetworkLabelName returns the NetworkLabelName field value
func (o *DesktopPoolNetworkLabelAssignmentSettingsCreateSpec) GetNetworkLabelName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkLabelName
}

// GetNetworkLabelNameOk returns a tuple with the NetworkLabelName field value
// and a boolean to check if the value has been set.
func (o *DesktopPoolNetworkLabelAssignmentSettingsCreateSpec) GetNetworkLabelNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkLabelName, true
}

// SetNetworkLabelName sets field value
func (o *DesktopPoolNetworkLabelAssignmentSettingsCreateSpec) SetNetworkLabelName(v string) {
	o.NetworkLabelName = v
}

func (o DesktopPoolNetworkLabelAssignmentSettingsCreateSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DesktopPoolNetworkLabelAssignmentSettingsCreateSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.MaxLabel) {
		toSerialize["max_label"] = o.MaxLabel
	}
	toSerialize["max_label_type"] = o.MaxLabelType
	toSerialize["network_label_name"] = o.NetworkLabelName
	return toSerialize, nil
}

func (o *DesktopPoolNetworkLabelAssignmentSettingsCreateSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"max_label_type",
		"network_label_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDesktopPoolNetworkLabelAssignmentSettingsCreateSpec := _DesktopPoolNetworkLabelAssignmentSettingsCreateSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDesktopPoolNetworkLabelAssignmentSettingsCreateSpec)

	if err != nil {
		return err
	}

	*o = DesktopPoolNetworkLabelAssignmentSettingsCreateSpec(varDesktopPoolNetworkLabelAssignmentSettingsCreateSpec)

	return err
}

type NullableDesktopPoolNetworkLabelAssignmentSettingsCreateSpec struct {
	value *DesktopPoolNetworkLabelAssignmentSettingsCreateSpec
	isSet bool
}

func (v NullableDesktopPoolNetworkLabelAssignmentSettingsCreateSpec) Get() *DesktopPoolNetworkLabelAssignmentSettingsCreateSpec {
	return v.value
}

func (v *NullableDesktopPoolNetworkLabelAssignmentSettingsCreateSpec) Set(val *DesktopPoolNetworkLabelAssignmentSettingsCreateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableDesktopPoolNetworkLabelAssignmentSettingsCreateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableDesktopPoolNetworkLabelAssignmentSettingsCreateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDesktopPoolNetworkLabelAssignmentSettingsCreateSpec(val *DesktopPoolNetworkLabelAssignmentSettingsCreateSpec) *NullableDesktopPoolNetworkLabelAssignmentSettingsCreateSpec {
	return &NullableDesktopPoolNetworkLabelAssignmentSettingsCreateSpec{value: val, isSet: true}
}

func (v NullableDesktopPoolNetworkLabelAssignmentSettingsCreateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDesktopPoolNetworkLabelAssignmentSettingsCreateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


