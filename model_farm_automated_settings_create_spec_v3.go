/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FarmAutomatedSettingsCreateSpecV3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FarmAutomatedSettingsCreateSpecV3{}

// FarmAutomatedSettingsCreateSpecV3 Settings for Automated farm.
type FarmAutomatedSettingsCreateSpecV3 struct {
	CustomizationSettings FarmCustomizationSettingsCreateSpecV2 `json:"customization_settings"`
	// Indicates whether to enable provisioning immediately. Default value is true.
	EnableProvisioning *bool `json:"enable_provisioning,omitempty"`
	// RDS Server type for max sessions. * UNLIMITED: The RDS Server has an unlimited number of sessions. * LIMITED: The RDS Server has a limited number of sessions.
	MaxSessionType string `json:"max_session_type"`
	// Maximum number of sessions allowed for RDS Server. This is required if max_session_type is set to LIMITED.
	MaxSessions *int32 `json:"max_sessions,omitempty"`
	// Minimum number of ready (provisioned) RDS Servers during Instant clone maintenance operations. Use this setting to perform machine maintenance operations in a rolling fashion. Increasing this count may decrease the concurrency for Instant clone maintenance operations for the automated farm. Default value is 0.
	MinReadyVms *int32 `json:"min_ready_vms,omitempty"`
	// Network interface card settings for RDS Servers provisioned for this farm. A NIC may appear at most once in these settings and must be present on this RDS Server's parent's snapshot. Not all NICs need be configured. Any that are not will use default settings.
	Nics []FarmNetworkInterfaceCardSettingsCreateSpec `json:"nics,omitempty"`
	PatternNamingSettings FarmRDSServersPatternNamingSettingsCreateSpec `json:"pattern_naming_settings"`
	ProvisioningSettings FarmProvisioningSettingsCreateSpecV2 `json:"provisioning_settings"`
	// Indicates whether provisioning on all VMs stops on error. Default value is true.
	StopProvisioningOnError *bool `json:"stop_provisioning_on_error,omitempty"`
	StorageSettings FarmStorageSettingsCreateSpec `json:"storage_settings"`
	// Transparent page sharing scope for the farm. Default value is VM. * VM: Inter-VM page sharing is not permitted. * FARM: Inter-VM page sharing among VMs belonging to the same automated farm is permitted. * POD: Inter-VM page sharing among VMs belonging to the same Pod is permitted. * GLOBAL: Inter-VM page sharing among all VMs on the same host is permitted.
	TransparentPageSharingScope *string `json:"transparent_page_sharing_scope,omitempty"`
	// ID of the virtual center server.
	VcenterId string `json:"vcenter_id"`
}

type _FarmAutomatedSettingsCreateSpecV3 FarmAutomatedSettingsCreateSpecV3

// NewFarmAutomatedSettingsCreateSpecV3 instantiates a new FarmAutomatedSettingsCreateSpecV3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFarmAutomatedSettingsCreateSpecV3(customizationSettings FarmCustomizationSettingsCreateSpecV2, maxSessionType string, patternNamingSettings FarmRDSServersPatternNamingSettingsCreateSpec, provisioningSettings FarmProvisioningSettingsCreateSpecV2, storageSettings FarmStorageSettingsCreateSpec, vcenterId string) *FarmAutomatedSettingsCreateSpecV3 {
	this := FarmAutomatedSettingsCreateSpecV3{}
	this.CustomizationSettings = customizationSettings
	this.MaxSessionType = maxSessionType
	this.PatternNamingSettings = patternNamingSettings
	this.ProvisioningSettings = provisioningSettings
	this.StorageSettings = storageSettings
	this.VcenterId = vcenterId
	return &this
}

// NewFarmAutomatedSettingsCreateSpecV3WithDefaults instantiates a new FarmAutomatedSettingsCreateSpecV3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFarmAutomatedSettingsCreateSpecV3WithDefaults() *FarmAutomatedSettingsCreateSpecV3 {
	this := FarmAutomatedSettingsCreateSpecV3{}
	return &this
}

// GetCustomizationSettings returns the CustomizationSettings field value
func (o *FarmAutomatedSettingsCreateSpecV3) GetCustomizationSettings() FarmCustomizationSettingsCreateSpecV2 {
	if o == nil {
		var ret FarmCustomizationSettingsCreateSpecV2
		return ret
	}

	return o.CustomizationSettings
}

// GetCustomizationSettingsOk returns a tuple with the CustomizationSettings field value
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsCreateSpecV3) GetCustomizationSettingsOk() (*FarmCustomizationSettingsCreateSpecV2, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomizationSettings, true
}

// SetCustomizationSettings sets field value
func (o *FarmAutomatedSettingsCreateSpecV3) SetCustomizationSettings(v FarmCustomizationSettingsCreateSpecV2) {
	o.CustomizationSettings = v
}

// GetEnableProvisioning returns the EnableProvisioning field value if set, zero value otherwise.
func (o *FarmAutomatedSettingsCreateSpecV3) GetEnableProvisioning() bool {
	if o == nil || IsNil(o.EnableProvisioning) {
		var ret bool
		return ret
	}
	return *o.EnableProvisioning
}

// GetEnableProvisioningOk returns a tuple with the EnableProvisioning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsCreateSpecV3) GetEnableProvisioningOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableProvisioning) {
		return nil, false
	}
	return o.EnableProvisioning, true
}

// HasEnableProvisioning returns a boolean if a field has been set.
func (o *FarmAutomatedSettingsCreateSpecV3) HasEnableProvisioning() bool {
	if o != nil && !IsNil(o.EnableProvisioning) {
		return true
	}

	return false
}

// SetEnableProvisioning gets a reference to the given bool and assigns it to the EnableProvisioning field.
func (o *FarmAutomatedSettingsCreateSpecV3) SetEnableProvisioning(v bool) {
	o.EnableProvisioning = &v
}

// GetMaxSessionType returns the MaxSessionType field value
func (o *FarmAutomatedSettingsCreateSpecV3) GetMaxSessionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MaxSessionType
}

// GetMaxSessionTypeOk returns a tuple with the MaxSessionType field value
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsCreateSpecV3) GetMaxSessionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxSessionType, true
}

// SetMaxSessionType sets field value
func (o *FarmAutomatedSettingsCreateSpecV3) SetMaxSessionType(v string) {
	o.MaxSessionType = v
}

// GetMaxSessions returns the MaxSessions field value if set, zero value otherwise.
func (o *FarmAutomatedSettingsCreateSpecV3) GetMaxSessions() int32 {
	if o == nil || IsNil(o.MaxSessions) {
		var ret int32
		return ret
	}
	return *o.MaxSessions
}

// GetMaxSessionsOk returns a tuple with the MaxSessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsCreateSpecV3) GetMaxSessionsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxSessions) {
		return nil, false
	}
	return o.MaxSessions, true
}

// HasMaxSessions returns a boolean if a field has been set.
func (o *FarmAutomatedSettingsCreateSpecV3) HasMaxSessions() bool {
	if o != nil && !IsNil(o.MaxSessions) {
		return true
	}

	return false
}

// SetMaxSessions gets a reference to the given int32 and assigns it to the MaxSessions field.
func (o *FarmAutomatedSettingsCreateSpecV3) SetMaxSessions(v int32) {
	o.MaxSessions = &v
}

// GetMinReadyVms returns the MinReadyVms field value if set, zero value otherwise.
func (o *FarmAutomatedSettingsCreateSpecV3) GetMinReadyVms() int32 {
	if o == nil || IsNil(o.MinReadyVms) {
		var ret int32
		return ret
	}
	return *o.MinReadyVms
}

// GetMinReadyVmsOk returns a tuple with the MinReadyVms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsCreateSpecV3) GetMinReadyVmsOk() (*int32, bool) {
	if o == nil || IsNil(o.MinReadyVms) {
		return nil, false
	}
	return o.MinReadyVms, true
}

// HasMinReadyVms returns a boolean if a field has been set.
func (o *FarmAutomatedSettingsCreateSpecV3) HasMinReadyVms() bool {
	if o != nil && !IsNil(o.MinReadyVms) {
		return true
	}

	return false
}

// SetMinReadyVms gets a reference to the given int32 and assigns it to the MinReadyVms field.
func (o *FarmAutomatedSettingsCreateSpecV3) SetMinReadyVms(v int32) {
	o.MinReadyVms = &v
}

// GetNics returns the Nics field value if set, zero value otherwise.
func (o *FarmAutomatedSettingsCreateSpecV3) GetNics() []FarmNetworkInterfaceCardSettingsCreateSpec {
	if o == nil || IsNil(o.Nics) {
		var ret []FarmNetworkInterfaceCardSettingsCreateSpec
		return ret
	}
	return o.Nics
}

// GetNicsOk returns a tuple with the Nics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsCreateSpecV3) GetNicsOk() ([]FarmNetworkInterfaceCardSettingsCreateSpec, bool) {
	if o == nil || IsNil(o.Nics) {
		return nil, false
	}
	return o.Nics, true
}

// HasNics returns a boolean if a field has been set.
func (o *FarmAutomatedSettingsCreateSpecV3) HasNics() bool {
	if o != nil && !IsNil(o.Nics) {
		return true
	}

	return false
}

// SetNics gets a reference to the given []FarmNetworkInterfaceCardSettingsCreateSpec and assigns it to the Nics field.
func (o *FarmAutomatedSettingsCreateSpecV3) SetNics(v []FarmNetworkInterfaceCardSettingsCreateSpec) {
	o.Nics = v
}

// GetPatternNamingSettings returns the PatternNamingSettings field value
func (o *FarmAutomatedSettingsCreateSpecV3) GetPatternNamingSettings() FarmRDSServersPatternNamingSettingsCreateSpec {
	if o == nil {
		var ret FarmRDSServersPatternNamingSettingsCreateSpec
		return ret
	}

	return o.PatternNamingSettings
}

// GetPatternNamingSettingsOk returns a tuple with the PatternNamingSettings field value
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsCreateSpecV3) GetPatternNamingSettingsOk() (*FarmRDSServersPatternNamingSettingsCreateSpec, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PatternNamingSettings, true
}

// SetPatternNamingSettings sets field value
func (o *FarmAutomatedSettingsCreateSpecV3) SetPatternNamingSettings(v FarmRDSServersPatternNamingSettingsCreateSpec) {
	o.PatternNamingSettings = v
}

// GetProvisioningSettings returns the ProvisioningSettings field value
func (o *FarmAutomatedSettingsCreateSpecV3) GetProvisioningSettings() FarmProvisioningSettingsCreateSpecV2 {
	if o == nil {
		var ret FarmProvisioningSettingsCreateSpecV2
		return ret
	}

	return o.ProvisioningSettings
}

// GetProvisioningSettingsOk returns a tuple with the ProvisioningSettings field value
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsCreateSpecV3) GetProvisioningSettingsOk() (*FarmProvisioningSettingsCreateSpecV2, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProvisioningSettings, true
}

// SetProvisioningSettings sets field value
func (o *FarmAutomatedSettingsCreateSpecV3) SetProvisioningSettings(v FarmProvisioningSettingsCreateSpecV2) {
	o.ProvisioningSettings = v
}

// GetStopProvisioningOnError returns the StopProvisioningOnError field value if set, zero value otherwise.
func (o *FarmAutomatedSettingsCreateSpecV3) GetStopProvisioningOnError() bool {
	if o == nil || IsNil(o.StopProvisioningOnError) {
		var ret bool
		return ret
	}
	return *o.StopProvisioningOnError
}

// GetStopProvisioningOnErrorOk returns a tuple with the StopProvisioningOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsCreateSpecV3) GetStopProvisioningOnErrorOk() (*bool, bool) {
	if o == nil || IsNil(o.StopProvisioningOnError) {
		return nil, false
	}
	return o.StopProvisioningOnError, true
}

// HasStopProvisioningOnError returns a boolean if a field has been set.
func (o *FarmAutomatedSettingsCreateSpecV3) HasStopProvisioningOnError() bool {
	if o != nil && !IsNil(o.StopProvisioningOnError) {
		return true
	}

	return false
}

// SetStopProvisioningOnError gets a reference to the given bool and assigns it to the StopProvisioningOnError field.
func (o *FarmAutomatedSettingsCreateSpecV3) SetStopProvisioningOnError(v bool) {
	o.StopProvisioningOnError = &v
}

// GetStorageSettings returns the StorageSettings field value
func (o *FarmAutomatedSettingsCreateSpecV3) GetStorageSettings() FarmStorageSettingsCreateSpec {
	if o == nil {
		var ret FarmStorageSettingsCreateSpec
		return ret
	}

	return o.StorageSettings
}

// GetStorageSettingsOk returns a tuple with the StorageSettings field value
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsCreateSpecV3) GetStorageSettingsOk() (*FarmStorageSettingsCreateSpec, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageSettings, true
}

// SetStorageSettings sets field value
func (o *FarmAutomatedSettingsCreateSpecV3) SetStorageSettings(v FarmStorageSettingsCreateSpec) {
	o.StorageSettings = v
}

// GetTransparentPageSharingScope returns the TransparentPageSharingScope field value if set, zero value otherwise.
func (o *FarmAutomatedSettingsCreateSpecV3) GetTransparentPageSharingScope() string {
	if o == nil || IsNil(o.TransparentPageSharingScope) {
		var ret string
		return ret
	}
	return *o.TransparentPageSharingScope
}

// GetTransparentPageSharingScopeOk returns a tuple with the TransparentPageSharingScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsCreateSpecV3) GetTransparentPageSharingScopeOk() (*string, bool) {
	if o == nil || IsNil(o.TransparentPageSharingScope) {
		return nil, false
	}
	return o.TransparentPageSharingScope, true
}

// HasTransparentPageSharingScope returns a boolean if a field has been set.
func (o *FarmAutomatedSettingsCreateSpecV3) HasTransparentPageSharingScope() bool {
	if o != nil && !IsNil(o.TransparentPageSharingScope) {
		return true
	}

	return false
}

// SetTransparentPageSharingScope gets a reference to the given string and assigns it to the TransparentPageSharingScope field.
func (o *FarmAutomatedSettingsCreateSpecV3) SetTransparentPageSharingScope(v string) {
	o.TransparentPageSharingScope = &v
}

// GetVcenterId returns the VcenterId field value
func (o *FarmAutomatedSettingsCreateSpecV3) GetVcenterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VcenterId
}

// GetVcenterIdOk returns a tuple with the VcenterId field value
// and a boolean to check if the value has been set.
func (o *FarmAutomatedSettingsCreateSpecV3) GetVcenterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VcenterId, true
}

// SetVcenterId sets field value
func (o *FarmAutomatedSettingsCreateSpecV3) SetVcenterId(v string) {
	o.VcenterId = v
}

func (o FarmAutomatedSettingsCreateSpecV3) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FarmAutomatedSettingsCreateSpecV3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["customization_settings"] = o.CustomizationSettings
	if !IsNil(o.EnableProvisioning) {
		toSerialize["enable_provisioning"] = o.EnableProvisioning
	}
	toSerialize["max_session_type"] = o.MaxSessionType
	if !IsNil(o.MaxSessions) {
		toSerialize["max_sessions"] = o.MaxSessions
	}
	if !IsNil(o.MinReadyVms) {
		toSerialize["min_ready_vms"] = o.MinReadyVms
	}
	if !IsNil(o.Nics) {
		toSerialize["nics"] = o.Nics
	}
	toSerialize["pattern_naming_settings"] = o.PatternNamingSettings
	toSerialize["provisioning_settings"] = o.ProvisioningSettings
	if !IsNil(o.StopProvisioningOnError) {
		toSerialize["stop_provisioning_on_error"] = o.StopProvisioningOnError
	}
	toSerialize["storage_settings"] = o.StorageSettings
	if !IsNil(o.TransparentPageSharingScope) {
		toSerialize["transparent_page_sharing_scope"] = o.TransparentPageSharingScope
	}
	toSerialize["vcenter_id"] = o.VcenterId
	return toSerialize, nil
}

func (o *FarmAutomatedSettingsCreateSpecV3) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"customization_settings",
		"max_session_type",
		"pattern_naming_settings",
		"provisioning_settings",
		"storage_settings",
		"vcenter_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFarmAutomatedSettingsCreateSpecV3 := _FarmAutomatedSettingsCreateSpecV3{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFarmAutomatedSettingsCreateSpecV3)

	if err != nil {
		return err
	}

	*o = FarmAutomatedSettingsCreateSpecV3(varFarmAutomatedSettingsCreateSpecV3)

	return err
}

type NullableFarmAutomatedSettingsCreateSpecV3 struct {
	value *FarmAutomatedSettingsCreateSpecV3
	isSet bool
}

func (v NullableFarmAutomatedSettingsCreateSpecV3) Get() *FarmAutomatedSettingsCreateSpecV3 {
	return v.value
}

func (v *NullableFarmAutomatedSettingsCreateSpecV3) Set(val *FarmAutomatedSettingsCreateSpecV3) {
	v.value = val
	v.isSet = true
}

func (v NullableFarmAutomatedSettingsCreateSpecV3) IsSet() bool {
	return v.isSet
}

func (v *NullableFarmAutomatedSettingsCreateSpecV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFarmAutomatedSettingsCreateSpecV3(val *FarmAutomatedSettingsCreateSpecV3) *NullableFarmAutomatedSettingsCreateSpecV3 {
	return &NullableFarmAutomatedSettingsCreateSpecV3{value: val, isSet: true}
}

func (v NullableFarmAutomatedSettingsCreateSpecV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFarmAutomatedSettingsCreateSpecV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


