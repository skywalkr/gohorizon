/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApplicationAntiAffinityData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationAntiAffinityData{}

// ApplicationAntiAffinityData Anti-affinity data required to create an application pool.
type ApplicationAntiAffinityData struct {
	// Maximum number of other applications that can be running on the RDS Server before the RDS Server is rejected for new application sessions.
	AntiAffinityCount int32 `json:"anti_affinity_count"`
	// Set of pattern strings to match against process names on a RDS Server when attempting to launch a session for this Application. For each application running on an RDSServer that matches one of the patterns, the tally against the count threshold is incremented.<br>Pattern strings may contain wildcard characters. '*' matches zero or more characters. '?' matches exactly one character.
	AntiAffinityPatterns []string `json:"anti_affinity_patterns"`
}

type _ApplicationAntiAffinityData ApplicationAntiAffinityData

// NewApplicationAntiAffinityData instantiates a new ApplicationAntiAffinityData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationAntiAffinityData(antiAffinityCount int32, antiAffinityPatterns []string) *ApplicationAntiAffinityData {
	this := ApplicationAntiAffinityData{}
	this.AntiAffinityCount = antiAffinityCount
	this.AntiAffinityPatterns = antiAffinityPatterns
	return &this
}

// NewApplicationAntiAffinityDataWithDefaults instantiates a new ApplicationAntiAffinityData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationAntiAffinityDataWithDefaults() *ApplicationAntiAffinityData {
	this := ApplicationAntiAffinityData{}
	return &this
}

// GetAntiAffinityCount returns the AntiAffinityCount field value
func (o *ApplicationAntiAffinityData) GetAntiAffinityCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AntiAffinityCount
}

// GetAntiAffinityCountOk returns a tuple with the AntiAffinityCount field value
// and a boolean to check if the value has been set.
func (o *ApplicationAntiAffinityData) GetAntiAffinityCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AntiAffinityCount, true
}

// SetAntiAffinityCount sets field value
func (o *ApplicationAntiAffinityData) SetAntiAffinityCount(v int32) {
	o.AntiAffinityCount = v
}

// GetAntiAffinityPatterns returns the AntiAffinityPatterns field value
func (o *ApplicationAntiAffinityData) GetAntiAffinityPatterns() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AntiAffinityPatterns
}

// GetAntiAffinityPatternsOk returns a tuple with the AntiAffinityPatterns field value
// and a boolean to check if the value has been set.
func (o *ApplicationAntiAffinityData) GetAntiAffinityPatternsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AntiAffinityPatterns, true
}

// SetAntiAffinityPatterns sets field value
func (o *ApplicationAntiAffinityData) SetAntiAffinityPatterns(v []string) {
	o.AntiAffinityPatterns = v
}

func (o ApplicationAntiAffinityData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationAntiAffinityData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["anti_affinity_count"] = o.AntiAffinityCount
	toSerialize["anti_affinity_patterns"] = o.AntiAffinityPatterns
	return toSerialize, nil
}

func (o *ApplicationAntiAffinityData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"anti_affinity_count",
		"anti_affinity_patterns",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApplicationAntiAffinityData := _ApplicationAntiAffinityData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApplicationAntiAffinityData)

	if err != nil {
		return err
	}

	*o = ApplicationAntiAffinityData(varApplicationAntiAffinityData)

	return err
}

type NullableApplicationAntiAffinityData struct {
	value *ApplicationAntiAffinityData
	isSet bool
}

func (v NullableApplicationAntiAffinityData) Get() *ApplicationAntiAffinityData {
	return v.value
}

func (v *NullableApplicationAntiAffinityData) Set(val *ApplicationAntiAffinityData) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationAntiAffinityData) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationAntiAffinityData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationAntiAffinityData(val *ApplicationAntiAffinityData) *NullableApplicationAntiAffinityData {
	return &NullableApplicationAntiAffinityData{value: val, isSet: true}
}

func (v NullableApplicationAntiAffinityData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationAntiAffinityData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


