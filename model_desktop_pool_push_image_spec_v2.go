/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DesktopPoolPushImageSpecV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DesktopPoolPushImageSpecV2{}

// DesktopPoolPushImageSpecV2 Information required to schedule push image operation on a desktop pool.
type DesktopPoolPushImageSpecV2 struct {
	// Indicates whether to add Virtual TPM device. Default: false
	AddVirtualTpm *bool `json:"add_virtual_tpm,omitempty"`
	// Indicates the number of cores per socket for the CPU in the compute profile to be configured on clones.  If set, both compute_profile_num_cpus and compute_profile_ram_mb need to be set. 
	ComputeProfileNumCoresPerSocket *int32 `json:"compute_profile_num_cores_per_socket,omitempty"`
	// Indicates the number of CPUs in the compute profile to be configured on clones.  If set, this must be a multiple of compute_profile_num_cores_per_socket.
	ComputeProfileNumCpus *int32 `json:"compute_profile_num_cpus,omitempty"`
	// Indicates the RAM in MB in the compute profile to be configured on clones.
	ComputeProfileRamMb *int32 `json:"compute_profile_ram_mb,omitempty"`
	// New image management stream for the desktop pool.<br>Either parent VM and snapshot or image management stream and tag are to be specified.
	ImStreamId *string `json:"im_stream_id,omitempty"`
	// New image management tag for the desktop pool. This must be a tag of the image management stream.
	ImTagId *string `json:"im_tag_id,omitempty"`
	// Determines when to perform the operation on machines which have an active session. * FORCE_LOGOFF: Users will be forced to log off when the system is ready to execute the operation. Before being forcibly logged off, users may have a grace period in which to save their work which can be configured in Global Settings. * WAIT_FOR_LOGOFF: Wait for connected users to disconnect before the task starts. The operation starts immediately when there are no active sessions.
	LogoffPolicy string `json:"logoff_policy"`
	// Set of machines from the desktop pool on which the new image is to be applied. This can be set when selective_push_image is set to true.
	MachineIds []string `json:"machine_ids,omitempty"`
	// New base image virtual machine for the desktop pool. This must be in the same datacenter as the base image of the desktop pool.<br>Either parent VM and snapshot or image management stream and tag are to be specified.
	ParentVmId *string `json:"parent_vm_id,omitempty"`
	// Indicates whether selective push image is to be applied. If set to true, the new image will be applied to specified machine_ids in the desktop pool. The image published with this option will be held as a pending image, unless it is promoted or cancelled. The default value is false.
	SelectivePushImage *bool `json:"selective_push_image,omitempty"`
	// New base image snapshot for the desktop pool. This must be a snapshot of the parent VM.
	SnapshotId *string `json:"snapshot_id,omitempty"`
	// When to start the operation. If unset or the time is in the past, the operation will begin immediately. Measured as epoch time.
	StartTime *int64 `json:"start_time,omitempty"`
	// Indicates that the operation should stop on first error. Default: true
	StopOnFirstError *bool `json:"stop_on_first_error,omitempty"`
}

type _DesktopPoolPushImageSpecV2 DesktopPoolPushImageSpecV2

// NewDesktopPoolPushImageSpecV2 instantiates a new DesktopPoolPushImageSpecV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDesktopPoolPushImageSpecV2(logoffPolicy string) *DesktopPoolPushImageSpecV2 {
	this := DesktopPoolPushImageSpecV2{}
	this.LogoffPolicy = logoffPolicy
	return &this
}

// NewDesktopPoolPushImageSpecV2WithDefaults instantiates a new DesktopPoolPushImageSpecV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDesktopPoolPushImageSpecV2WithDefaults() *DesktopPoolPushImageSpecV2 {
	this := DesktopPoolPushImageSpecV2{}
	return &this
}

// GetAddVirtualTpm returns the AddVirtualTpm field value if set, zero value otherwise.
func (o *DesktopPoolPushImageSpecV2) GetAddVirtualTpm() bool {
	if o == nil || IsNil(o.AddVirtualTpm) {
		var ret bool
		return ret
	}
	return *o.AddVirtualTpm
}

// GetAddVirtualTpmOk returns a tuple with the AddVirtualTpm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolPushImageSpecV2) GetAddVirtualTpmOk() (*bool, bool) {
	if o == nil || IsNil(o.AddVirtualTpm) {
		return nil, false
	}
	return o.AddVirtualTpm, true
}

// HasAddVirtualTpm returns a boolean if a field has been set.
func (o *DesktopPoolPushImageSpecV2) HasAddVirtualTpm() bool {
	if o != nil && !IsNil(o.AddVirtualTpm) {
		return true
	}

	return false
}

// SetAddVirtualTpm gets a reference to the given bool and assigns it to the AddVirtualTpm field.
func (o *DesktopPoolPushImageSpecV2) SetAddVirtualTpm(v bool) {
	o.AddVirtualTpm = &v
}

// GetComputeProfileNumCoresPerSocket returns the ComputeProfileNumCoresPerSocket field value if set, zero value otherwise.
func (o *DesktopPoolPushImageSpecV2) GetComputeProfileNumCoresPerSocket() int32 {
	if o == nil || IsNil(o.ComputeProfileNumCoresPerSocket) {
		var ret int32
		return ret
	}
	return *o.ComputeProfileNumCoresPerSocket
}

// GetComputeProfileNumCoresPerSocketOk returns a tuple with the ComputeProfileNumCoresPerSocket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolPushImageSpecV2) GetComputeProfileNumCoresPerSocketOk() (*int32, bool) {
	if o == nil || IsNil(o.ComputeProfileNumCoresPerSocket) {
		return nil, false
	}
	return o.ComputeProfileNumCoresPerSocket, true
}

// HasComputeProfileNumCoresPerSocket returns a boolean if a field has been set.
func (o *DesktopPoolPushImageSpecV2) HasComputeProfileNumCoresPerSocket() bool {
	if o != nil && !IsNil(o.ComputeProfileNumCoresPerSocket) {
		return true
	}

	return false
}

// SetComputeProfileNumCoresPerSocket gets a reference to the given int32 and assigns it to the ComputeProfileNumCoresPerSocket field.
func (o *DesktopPoolPushImageSpecV2) SetComputeProfileNumCoresPerSocket(v int32) {
	o.ComputeProfileNumCoresPerSocket = &v
}

// GetComputeProfileNumCpus returns the ComputeProfileNumCpus field value if set, zero value otherwise.
func (o *DesktopPoolPushImageSpecV2) GetComputeProfileNumCpus() int32 {
	if o == nil || IsNil(o.ComputeProfileNumCpus) {
		var ret int32
		return ret
	}
	return *o.ComputeProfileNumCpus
}

// GetComputeProfileNumCpusOk returns a tuple with the ComputeProfileNumCpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolPushImageSpecV2) GetComputeProfileNumCpusOk() (*int32, bool) {
	if o == nil || IsNil(o.ComputeProfileNumCpus) {
		return nil, false
	}
	return o.ComputeProfileNumCpus, true
}

// HasComputeProfileNumCpus returns a boolean if a field has been set.
func (o *DesktopPoolPushImageSpecV2) HasComputeProfileNumCpus() bool {
	if o != nil && !IsNil(o.ComputeProfileNumCpus) {
		return true
	}

	return false
}

// SetComputeProfileNumCpus gets a reference to the given int32 and assigns it to the ComputeProfileNumCpus field.
func (o *DesktopPoolPushImageSpecV2) SetComputeProfileNumCpus(v int32) {
	o.ComputeProfileNumCpus = &v
}

// GetComputeProfileRamMb returns the ComputeProfileRamMb field value if set, zero value otherwise.
func (o *DesktopPoolPushImageSpecV2) GetComputeProfileRamMb() int32 {
	if o == nil || IsNil(o.ComputeProfileRamMb) {
		var ret int32
		return ret
	}
	return *o.ComputeProfileRamMb
}

// GetComputeProfileRamMbOk returns a tuple with the ComputeProfileRamMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolPushImageSpecV2) GetComputeProfileRamMbOk() (*int32, bool) {
	if o == nil || IsNil(o.ComputeProfileRamMb) {
		return nil, false
	}
	return o.ComputeProfileRamMb, true
}

// HasComputeProfileRamMb returns a boolean if a field has been set.
func (o *DesktopPoolPushImageSpecV2) HasComputeProfileRamMb() bool {
	if o != nil && !IsNil(o.ComputeProfileRamMb) {
		return true
	}

	return false
}

// SetComputeProfileRamMb gets a reference to the given int32 and assigns it to the ComputeProfileRamMb field.
func (o *DesktopPoolPushImageSpecV2) SetComputeProfileRamMb(v int32) {
	o.ComputeProfileRamMb = &v
}

// GetImStreamId returns the ImStreamId field value if set, zero value otherwise.
func (o *DesktopPoolPushImageSpecV2) GetImStreamId() string {
	if o == nil || IsNil(o.ImStreamId) {
		var ret string
		return ret
	}
	return *o.ImStreamId
}

// GetImStreamIdOk returns a tuple with the ImStreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolPushImageSpecV2) GetImStreamIdOk() (*string, bool) {
	if o == nil || IsNil(o.ImStreamId) {
		return nil, false
	}
	return o.ImStreamId, true
}

// HasImStreamId returns a boolean if a field has been set.
func (o *DesktopPoolPushImageSpecV2) HasImStreamId() bool {
	if o != nil && !IsNil(o.ImStreamId) {
		return true
	}

	return false
}

// SetImStreamId gets a reference to the given string and assigns it to the ImStreamId field.
func (o *DesktopPoolPushImageSpecV2) SetImStreamId(v string) {
	o.ImStreamId = &v
}

// GetImTagId returns the ImTagId field value if set, zero value otherwise.
func (o *DesktopPoolPushImageSpecV2) GetImTagId() string {
	if o == nil || IsNil(o.ImTagId) {
		var ret string
		return ret
	}
	return *o.ImTagId
}

// GetImTagIdOk returns a tuple with the ImTagId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolPushImageSpecV2) GetImTagIdOk() (*string, bool) {
	if o == nil || IsNil(o.ImTagId) {
		return nil, false
	}
	return o.ImTagId, true
}

// HasImTagId returns a boolean if a field has been set.
func (o *DesktopPoolPushImageSpecV2) HasImTagId() bool {
	if o != nil && !IsNil(o.ImTagId) {
		return true
	}

	return false
}

// SetImTagId gets a reference to the given string and assigns it to the ImTagId field.
func (o *DesktopPoolPushImageSpecV2) SetImTagId(v string) {
	o.ImTagId = &v
}

// GetLogoffPolicy returns the LogoffPolicy field value
func (o *DesktopPoolPushImageSpecV2) GetLogoffPolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LogoffPolicy
}

// GetLogoffPolicyOk returns a tuple with the LogoffPolicy field value
// and a boolean to check if the value has been set.
func (o *DesktopPoolPushImageSpecV2) GetLogoffPolicyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogoffPolicy, true
}

// SetLogoffPolicy sets field value
func (o *DesktopPoolPushImageSpecV2) SetLogoffPolicy(v string) {
	o.LogoffPolicy = v
}

// GetMachineIds returns the MachineIds field value if set, zero value otherwise.
func (o *DesktopPoolPushImageSpecV2) GetMachineIds() []string {
	if o == nil || IsNil(o.MachineIds) {
		var ret []string
		return ret
	}
	return o.MachineIds
}

// GetMachineIdsOk returns a tuple with the MachineIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolPushImageSpecV2) GetMachineIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.MachineIds) {
		return nil, false
	}
	return o.MachineIds, true
}

// HasMachineIds returns a boolean if a field has been set.
func (o *DesktopPoolPushImageSpecV2) HasMachineIds() bool {
	if o != nil && !IsNil(o.MachineIds) {
		return true
	}

	return false
}

// SetMachineIds gets a reference to the given []string and assigns it to the MachineIds field.
func (o *DesktopPoolPushImageSpecV2) SetMachineIds(v []string) {
	o.MachineIds = v
}

// GetParentVmId returns the ParentVmId field value if set, zero value otherwise.
func (o *DesktopPoolPushImageSpecV2) GetParentVmId() string {
	if o == nil || IsNil(o.ParentVmId) {
		var ret string
		return ret
	}
	return *o.ParentVmId
}

// GetParentVmIdOk returns a tuple with the ParentVmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolPushImageSpecV2) GetParentVmIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentVmId) {
		return nil, false
	}
	return o.ParentVmId, true
}

// HasParentVmId returns a boolean if a field has been set.
func (o *DesktopPoolPushImageSpecV2) HasParentVmId() bool {
	if o != nil && !IsNil(o.ParentVmId) {
		return true
	}

	return false
}

// SetParentVmId gets a reference to the given string and assigns it to the ParentVmId field.
func (o *DesktopPoolPushImageSpecV2) SetParentVmId(v string) {
	o.ParentVmId = &v
}

// GetSelectivePushImage returns the SelectivePushImage field value if set, zero value otherwise.
func (o *DesktopPoolPushImageSpecV2) GetSelectivePushImage() bool {
	if o == nil || IsNil(o.SelectivePushImage) {
		var ret bool
		return ret
	}
	return *o.SelectivePushImage
}

// GetSelectivePushImageOk returns a tuple with the SelectivePushImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolPushImageSpecV2) GetSelectivePushImageOk() (*bool, bool) {
	if o == nil || IsNil(o.SelectivePushImage) {
		return nil, false
	}
	return o.SelectivePushImage, true
}

// HasSelectivePushImage returns a boolean if a field has been set.
func (o *DesktopPoolPushImageSpecV2) HasSelectivePushImage() bool {
	if o != nil && !IsNil(o.SelectivePushImage) {
		return true
	}

	return false
}

// SetSelectivePushImage gets a reference to the given bool and assigns it to the SelectivePushImage field.
func (o *DesktopPoolPushImageSpecV2) SetSelectivePushImage(v bool) {
	o.SelectivePushImage = &v
}

// GetSnapshotId returns the SnapshotId field value if set, zero value otherwise.
func (o *DesktopPoolPushImageSpecV2) GetSnapshotId() string {
	if o == nil || IsNil(o.SnapshotId) {
		var ret string
		return ret
	}
	return *o.SnapshotId
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolPushImageSpecV2) GetSnapshotIdOk() (*string, bool) {
	if o == nil || IsNil(o.SnapshotId) {
		return nil, false
	}
	return o.SnapshotId, true
}

// HasSnapshotId returns a boolean if a field has been set.
func (o *DesktopPoolPushImageSpecV2) HasSnapshotId() bool {
	if o != nil && !IsNil(o.SnapshotId) {
		return true
	}

	return false
}

// SetSnapshotId gets a reference to the given string and assigns it to the SnapshotId field.
func (o *DesktopPoolPushImageSpecV2) SetSnapshotId(v string) {
	o.SnapshotId = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *DesktopPoolPushImageSpecV2) GetStartTime() int64 {
	if o == nil || IsNil(o.StartTime) {
		var ret int64
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolPushImageSpecV2) GetStartTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *DesktopPoolPushImageSpecV2) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int64 and assigns it to the StartTime field.
func (o *DesktopPoolPushImageSpecV2) SetStartTime(v int64) {
	o.StartTime = &v
}

// GetStopOnFirstError returns the StopOnFirstError field value if set, zero value otherwise.
func (o *DesktopPoolPushImageSpecV2) GetStopOnFirstError() bool {
	if o == nil || IsNil(o.StopOnFirstError) {
		var ret bool
		return ret
	}
	return *o.StopOnFirstError
}

// GetStopOnFirstErrorOk returns a tuple with the StopOnFirstError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolPushImageSpecV2) GetStopOnFirstErrorOk() (*bool, bool) {
	if o == nil || IsNil(o.StopOnFirstError) {
		return nil, false
	}
	return o.StopOnFirstError, true
}

// HasStopOnFirstError returns a boolean if a field has been set.
func (o *DesktopPoolPushImageSpecV2) HasStopOnFirstError() bool {
	if o != nil && !IsNil(o.StopOnFirstError) {
		return true
	}

	return false
}

// SetStopOnFirstError gets a reference to the given bool and assigns it to the StopOnFirstError field.
func (o *DesktopPoolPushImageSpecV2) SetStopOnFirstError(v bool) {
	o.StopOnFirstError = &v
}

func (o DesktopPoolPushImageSpecV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DesktopPoolPushImageSpecV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddVirtualTpm) {
		toSerialize["add_virtual_tpm"] = o.AddVirtualTpm
	}
	if !IsNil(o.ComputeProfileNumCoresPerSocket) {
		toSerialize["compute_profile_num_cores_per_socket"] = o.ComputeProfileNumCoresPerSocket
	}
	if !IsNil(o.ComputeProfileNumCpus) {
		toSerialize["compute_profile_num_cpus"] = o.ComputeProfileNumCpus
	}
	if !IsNil(o.ComputeProfileRamMb) {
		toSerialize["compute_profile_ram_mb"] = o.ComputeProfileRamMb
	}
	if !IsNil(o.ImStreamId) {
		toSerialize["im_stream_id"] = o.ImStreamId
	}
	if !IsNil(o.ImTagId) {
		toSerialize["im_tag_id"] = o.ImTagId
	}
	toSerialize["logoff_policy"] = o.LogoffPolicy
	if !IsNil(o.MachineIds) {
		toSerialize["machine_ids"] = o.MachineIds
	}
	if !IsNil(o.ParentVmId) {
		toSerialize["parent_vm_id"] = o.ParentVmId
	}
	if !IsNil(o.SelectivePushImage) {
		toSerialize["selective_push_image"] = o.SelectivePushImage
	}
	if !IsNil(o.SnapshotId) {
		toSerialize["snapshot_id"] = o.SnapshotId
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !IsNil(o.StopOnFirstError) {
		toSerialize["stop_on_first_error"] = o.StopOnFirstError
	}
	return toSerialize, nil
}

func (o *DesktopPoolPushImageSpecV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"logoff_policy",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDesktopPoolPushImageSpecV2 := _DesktopPoolPushImageSpecV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDesktopPoolPushImageSpecV2)

	if err != nil {
		return err
	}

	*o = DesktopPoolPushImageSpecV2(varDesktopPoolPushImageSpecV2)

	return err
}

type NullableDesktopPoolPushImageSpecV2 struct {
	value *DesktopPoolPushImageSpecV2
	isSet bool
}

func (v NullableDesktopPoolPushImageSpecV2) Get() *DesktopPoolPushImageSpecV2 {
	return v.value
}

func (v *NullableDesktopPoolPushImageSpecV2) Set(val *DesktopPoolPushImageSpecV2) {
	v.value = val
	v.isSet = true
}

func (v NullableDesktopPoolPushImageSpecV2) IsSet() bool {
	return v.isSet
}

func (v *NullableDesktopPoolPushImageSpecV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDesktopPoolPushImageSpecV2(val *DesktopPoolPushImageSpecV2) *NullableDesktopPoolPushImageSpecV2 {
	return &NullableDesktopPoolPushImageSpecV2{value: val, isSet: true}
}

func (v NullableDesktopPoolPushImageSpecV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDesktopPoolPushImageSpecV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


