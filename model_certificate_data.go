/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the CertificateData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateData{}

// CertificateData Certificate information of the remote server.
type CertificateData struct {
	// Indicates if admin override is allowed.
	AllowAdminOverride *bool `json:"allow_admin_override,omitempty"`
	// The certificate in string form.
	Certificate *string `json:"certificate,omitempty"`
	// The encoding of the certificate.
	CertificateEncoding *string `json:"certificate_encoding,omitempty"`
	// The reason(s) why the certificate could not be validated.
	InvalidReasons []string `json:"invalid_reasons,omitempty"`
	// A digest of the certificate.
	SslCertThumbprint *string `json:"ssl_cert_thumbprint,omitempty"`
	// Algorithm used to compute the thumbprint.
	SslCertThumbprintAlgorithm *string `json:"ssl_cert_thumbprint_algorithm,omitempty"`
	// Indicates if certificate is valid.
	Valid *bool `json:"valid,omitempty"`
}

// NewCertificateData instantiates a new CertificateData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateData() *CertificateData {
	this := CertificateData{}
	return &this
}

// NewCertificateDataWithDefaults instantiates a new CertificateData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateDataWithDefaults() *CertificateData {
	this := CertificateData{}
	return &this
}

// GetAllowAdminOverride returns the AllowAdminOverride field value if set, zero value otherwise.
func (o *CertificateData) GetAllowAdminOverride() bool {
	if o == nil || IsNil(o.AllowAdminOverride) {
		var ret bool
		return ret
	}
	return *o.AllowAdminOverride
}

// GetAllowAdminOverrideOk returns a tuple with the AllowAdminOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateData) GetAllowAdminOverrideOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowAdminOverride) {
		return nil, false
	}
	return o.AllowAdminOverride, true
}

// HasAllowAdminOverride returns a boolean if a field has been set.
func (o *CertificateData) HasAllowAdminOverride() bool {
	if o != nil && !IsNil(o.AllowAdminOverride) {
		return true
	}

	return false
}

// SetAllowAdminOverride gets a reference to the given bool and assigns it to the AllowAdminOverride field.
func (o *CertificateData) SetAllowAdminOverride(v bool) {
	o.AllowAdminOverride = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *CertificateData) GetCertificate() string {
	if o == nil || IsNil(o.Certificate) {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateData) GetCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *CertificateData) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *CertificateData) SetCertificate(v string) {
	o.Certificate = &v
}

// GetCertificateEncoding returns the CertificateEncoding field value if set, zero value otherwise.
func (o *CertificateData) GetCertificateEncoding() string {
	if o == nil || IsNil(o.CertificateEncoding) {
		var ret string
		return ret
	}
	return *o.CertificateEncoding
}

// GetCertificateEncodingOk returns a tuple with the CertificateEncoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateData) GetCertificateEncodingOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateEncoding) {
		return nil, false
	}
	return o.CertificateEncoding, true
}

// HasCertificateEncoding returns a boolean if a field has been set.
func (o *CertificateData) HasCertificateEncoding() bool {
	if o != nil && !IsNil(o.CertificateEncoding) {
		return true
	}

	return false
}

// SetCertificateEncoding gets a reference to the given string and assigns it to the CertificateEncoding field.
func (o *CertificateData) SetCertificateEncoding(v string) {
	o.CertificateEncoding = &v
}

// GetInvalidReasons returns the InvalidReasons field value if set, zero value otherwise.
func (o *CertificateData) GetInvalidReasons() []string {
	if o == nil || IsNil(o.InvalidReasons) {
		var ret []string
		return ret
	}
	return o.InvalidReasons
}

// GetInvalidReasonsOk returns a tuple with the InvalidReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateData) GetInvalidReasonsOk() ([]string, bool) {
	if o == nil || IsNil(o.InvalidReasons) {
		return nil, false
	}
	return o.InvalidReasons, true
}

// HasInvalidReasons returns a boolean if a field has been set.
func (o *CertificateData) HasInvalidReasons() bool {
	if o != nil && !IsNil(o.InvalidReasons) {
		return true
	}

	return false
}

// SetInvalidReasons gets a reference to the given []string and assigns it to the InvalidReasons field.
func (o *CertificateData) SetInvalidReasons(v []string) {
	o.InvalidReasons = v
}

// GetSslCertThumbprint returns the SslCertThumbprint field value if set, zero value otherwise.
func (o *CertificateData) GetSslCertThumbprint() string {
	if o == nil || IsNil(o.SslCertThumbprint) {
		var ret string
		return ret
	}
	return *o.SslCertThumbprint
}

// GetSslCertThumbprintOk returns a tuple with the SslCertThumbprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateData) GetSslCertThumbprintOk() (*string, bool) {
	if o == nil || IsNil(o.SslCertThumbprint) {
		return nil, false
	}
	return o.SslCertThumbprint, true
}

// HasSslCertThumbprint returns a boolean if a field has been set.
func (o *CertificateData) HasSslCertThumbprint() bool {
	if o != nil && !IsNil(o.SslCertThumbprint) {
		return true
	}

	return false
}

// SetSslCertThumbprint gets a reference to the given string and assigns it to the SslCertThumbprint field.
func (o *CertificateData) SetSslCertThumbprint(v string) {
	o.SslCertThumbprint = &v
}

// GetSslCertThumbprintAlgorithm returns the SslCertThumbprintAlgorithm field value if set, zero value otherwise.
func (o *CertificateData) GetSslCertThumbprintAlgorithm() string {
	if o == nil || IsNil(o.SslCertThumbprintAlgorithm) {
		var ret string
		return ret
	}
	return *o.SslCertThumbprintAlgorithm
}

// GetSslCertThumbprintAlgorithmOk returns a tuple with the SslCertThumbprintAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateData) GetSslCertThumbprintAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.SslCertThumbprintAlgorithm) {
		return nil, false
	}
	return o.SslCertThumbprintAlgorithm, true
}

// HasSslCertThumbprintAlgorithm returns a boolean if a field has been set.
func (o *CertificateData) HasSslCertThumbprintAlgorithm() bool {
	if o != nil && !IsNil(o.SslCertThumbprintAlgorithm) {
		return true
	}

	return false
}

// SetSslCertThumbprintAlgorithm gets a reference to the given string and assigns it to the SslCertThumbprintAlgorithm field.
func (o *CertificateData) SetSslCertThumbprintAlgorithm(v string) {
	o.SslCertThumbprintAlgorithm = &v
}

// GetValid returns the Valid field value if set, zero value otherwise.
func (o *CertificateData) GetValid() bool {
	if o == nil || IsNil(o.Valid) {
		var ret bool
		return ret
	}
	return *o.Valid
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateData) GetValidOk() (*bool, bool) {
	if o == nil || IsNil(o.Valid) {
		return nil, false
	}
	return o.Valid, true
}

// HasValid returns a boolean if a field has been set.
func (o *CertificateData) HasValid() bool {
	if o != nil && !IsNil(o.Valid) {
		return true
	}

	return false
}

// SetValid gets a reference to the given bool and assigns it to the Valid field.
func (o *CertificateData) SetValid(v bool) {
	o.Valid = &v
}

func (o CertificateData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowAdminOverride) {
		toSerialize["allow_admin_override"] = o.AllowAdminOverride
	}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.CertificateEncoding) {
		toSerialize["certificate_encoding"] = o.CertificateEncoding
	}
	if !IsNil(o.InvalidReasons) {
		toSerialize["invalid_reasons"] = o.InvalidReasons
	}
	if !IsNil(o.SslCertThumbprint) {
		toSerialize["ssl_cert_thumbprint"] = o.SslCertThumbprint
	}
	if !IsNil(o.SslCertThumbprintAlgorithm) {
		toSerialize["ssl_cert_thumbprint_algorithm"] = o.SslCertThumbprintAlgorithm
	}
	if !IsNil(o.Valid) {
		toSerialize["valid"] = o.Valid
	}
	return toSerialize, nil
}

type NullableCertificateData struct {
	value *CertificateData
	isSet bool
}

func (v NullableCertificateData) Get() *CertificateData {
	return v.value
}

func (v *NullableCertificateData) Set(val *CertificateData) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateData) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateData(val *CertificateData) *NullableCertificateData {
	return &NullableCertificateData{value: val, isSet: true}
}

func (v NullableCertificateData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


