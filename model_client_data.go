/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// ClientData Client data associated with the session.
type ClientData struct {
	// IP address of the client machine for the session.  This property need not be set.<br>Supported Filters : 'Equals'.
	Address *string `json:"address,omitempty"`
	// Client location for the session.  This property need not be set.<br>Supported Filters : 'Equals'.
	LocationId *string `json:"location_id,omitempty"`
	// Client machine hostname for the session.  This property need not be set.<br>Supported Filters : 'Equals'.
	Name *string `json:"name,omitempty"`
	// Client type for the session.  This property need not be set.<br>Supported Filters : 'Equals'. * WINDOWS: Client type is Windows client. * MAC: Client type is Mac client. * HTMLACCESS: Client type is Web client. * LINUX: Client type is Linux client. * IOS: Client type is iOS client. * ANDROID: Client type is Android client. * OTHER: Client type is other.
	Type *string `json:"type,omitempty"`
	// Client version for the session.  This property need not be set.<br>Supported Filters : 'Equals'.
	Version *string `json:"version,omitempty"`
}

// NewClientData instantiates a new ClientData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientData() *ClientData {
	this := ClientData{}
	return &this
}

// NewClientDataWithDefaults instantiates a new ClientData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientDataWithDefaults() *ClientData {
	this := ClientData{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *ClientData) GetAddress() string {
	if o == nil || o.Address == nil {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientData) GetAddressOk() (*string, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *ClientData) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *ClientData) SetAddress(v string) {
	o.Address = &v
}

// GetLocationId returns the LocationId field value if set, zero value otherwise.
func (o *ClientData) GetLocationId() string {
	if o == nil || o.LocationId == nil {
		var ret string
		return ret
	}
	return *o.LocationId
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientData) GetLocationIdOk() (*string, bool) {
	if o == nil || o.LocationId == nil {
		return nil, false
	}
	return o.LocationId, true
}

// HasLocationId returns a boolean if a field has been set.
func (o *ClientData) HasLocationId() bool {
	if o != nil && o.LocationId != nil {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given string and assigns it to the LocationId field.
func (o *ClientData) SetLocationId(v string) {
	o.LocationId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ClientData) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientData) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ClientData) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ClientData) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ClientData) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientData) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ClientData) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ClientData) SetType(v string) {
	o.Type = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ClientData) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientData) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ClientData) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ClientData) SetVersion(v string) {
	o.Version = &v
}

func (o ClientData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if o.LocationId != nil {
		toSerialize["location_id"] = o.LocationId
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableClientData struct {
	value *ClientData
	isSet bool
}

func (v NullableClientData) Get() *ClientData {
	return v.value
}

func (v *NullableClientData) Set(val *ClientData) {
	v.value = val
	v.isSet = true
}

func (v NullableClientData) IsSet() bool {
	return v.isSet
}

func (v *NullableClientData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientData(val *ClientData) *NullableClientData {
	return &NullableClientData{value: val, isSet: true}
}

func (v NullableClientData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
