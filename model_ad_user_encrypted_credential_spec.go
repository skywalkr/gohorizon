/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// ADUserEncryptedCredentialSpec Specification for validating AD user's encrypted credentials.
type ADUserEncryptedCredentialSpec struct {
	// The domain of user. Note that domain is optional if UPN is supplied.
	Domain *string `json:"domain,omitempty"`
	// Encrypted password for the user.
	EncryptedPassword string `json:"encrypted_password"`
	// The keyId of the cluster's SSO KeyPair used to encrypt the protectedPasswordKey.
	KeyId string `json:"key_id"`
	// Decryption key for the password. This key is itself encrypted with cluster's SSO keypair.
	ProtectedPasswordKey string `json:"protected_password_key"`
	// The username or UPN.
	Username string `json:"username"`
}

// NewADUserEncryptedCredentialSpec instantiates a new ADUserEncryptedCredentialSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewADUserEncryptedCredentialSpec(encryptedPassword string, keyId string, protectedPasswordKey string, username string) *ADUserEncryptedCredentialSpec {
	this := ADUserEncryptedCredentialSpec{}
	this.EncryptedPassword = encryptedPassword
	this.KeyId = keyId
	this.ProtectedPasswordKey = protectedPasswordKey
	this.Username = username
	return &this
}

// NewADUserEncryptedCredentialSpecWithDefaults instantiates a new ADUserEncryptedCredentialSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewADUserEncryptedCredentialSpecWithDefaults() *ADUserEncryptedCredentialSpec {
	this := ADUserEncryptedCredentialSpec{}
	return &this
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *ADUserEncryptedCredentialSpec) GetDomain() string {
	if o == nil || o.Domain == nil {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADUserEncryptedCredentialSpec) GetDomainOk() (*string, bool) {
	if o == nil || o.Domain == nil {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *ADUserEncryptedCredentialSpec) HasDomain() bool {
	if o != nil && o.Domain != nil {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *ADUserEncryptedCredentialSpec) SetDomain(v string) {
	o.Domain = &v
}

// GetEncryptedPassword returns the EncryptedPassword field value
func (o *ADUserEncryptedCredentialSpec) GetEncryptedPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EncryptedPassword
}

// GetEncryptedPasswordOk returns a tuple with the EncryptedPassword field value
// and a boolean to check if the value has been set.
func (o *ADUserEncryptedCredentialSpec) GetEncryptedPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EncryptedPassword, true
}

// SetEncryptedPassword sets field value
func (o *ADUserEncryptedCredentialSpec) SetEncryptedPassword(v string) {
	o.EncryptedPassword = v
}

// GetKeyId returns the KeyId field value
func (o *ADUserEncryptedCredentialSpec) GetKeyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyId
}

// GetKeyIdOk returns a tuple with the KeyId field value
// and a boolean to check if the value has been set.
func (o *ADUserEncryptedCredentialSpec) GetKeyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyId, true
}

// SetKeyId sets field value
func (o *ADUserEncryptedCredentialSpec) SetKeyId(v string) {
	o.KeyId = v
}

// GetProtectedPasswordKey returns the ProtectedPasswordKey field value
func (o *ADUserEncryptedCredentialSpec) GetProtectedPasswordKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProtectedPasswordKey
}

// GetProtectedPasswordKeyOk returns a tuple with the ProtectedPasswordKey field value
// and a boolean to check if the value has been set.
func (o *ADUserEncryptedCredentialSpec) GetProtectedPasswordKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProtectedPasswordKey, true
}

// SetProtectedPasswordKey sets field value
func (o *ADUserEncryptedCredentialSpec) SetProtectedPasswordKey(v string) {
	o.ProtectedPasswordKey = v
}

// GetUsername returns the Username field value
func (o *ADUserEncryptedCredentialSpec) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *ADUserEncryptedCredentialSpec) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *ADUserEncryptedCredentialSpec) SetUsername(v string) {
	o.Username = v
}

func (o ADUserEncryptedCredentialSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Domain != nil {
		toSerialize["domain"] = o.Domain
	}
	if true {
		toSerialize["encrypted_password"] = o.EncryptedPassword
	}
	if true {
		toSerialize["key_id"] = o.KeyId
	}
	if true {
		toSerialize["protected_password_key"] = o.ProtectedPasswordKey
	}
	if true {
		toSerialize["username"] = o.Username
	}
	return json.Marshal(toSerialize)
}

type NullableADUserEncryptedCredentialSpec struct {
	value *ADUserEncryptedCredentialSpec
	isSet bool
}

func (v NullableADUserEncryptedCredentialSpec) Get() *ADUserEncryptedCredentialSpec {
	return v.value
}

func (v *NullableADUserEncryptedCredentialSpec) Set(val *ADUserEncryptedCredentialSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableADUserEncryptedCredentialSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableADUserEncryptedCredentialSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableADUserEncryptedCredentialSpec(val *ADUserEncryptedCredentialSpec) *NullableADUserEncryptedCredentialSpec {
	return &NullableADUserEncryptedCredentialSpec{value: val, isSet: true}
}

func (v NullableADUserEncryptedCredentialSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableADUserEncryptedCredentialSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
