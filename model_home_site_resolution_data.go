/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// HomeSiteResolutionData Information representing data for a home site resolution.
type HomeSiteResolutionData struct {
	// SID of the group through which the user gets this home site.
	GroupId *string `json:"group_id,omitempty"`
	// ID of the Home Site Configuration.
	Id *string `json:"id,omitempty"`
	// Indicates whether this is the resolved home site.
	Resolved *bool `json:"resolved,omitempty"`
	// ID of the Site configured as Home Site.
	SiteId *string `json:"site_id,omitempty"`
	// Indicates whether the home site is directly assigned to the user or group and whether it is associated with a global entitlement. * USER_OVERRIDE: Indicates that a home site override is associated with a global entitlement for the user. * GROUP_OVERRIDE: Indicates that a home site override is associated with a global entitlement for a group that the user belongs to. * USER_DEFAULT: Indicates that a home site is directly assigned to the user. * GROUP_DEFAULT: Indicates that a home site is directly assigned to a group that the user belongs to.
	Type *string `json:"type,omitempty"`
}

// NewHomeSiteResolutionData instantiates a new HomeSiteResolutionData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHomeSiteResolutionData() *HomeSiteResolutionData {
	this := HomeSiteResolutionData{}
	return &this
}

// NewHomeSiteResolutionDataWithDefaults instantiates a new HomeSiteResolutionData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHomeSiteResolutionDataWithDefaults() *HomeSiteResolutionData {
	this := HomeSiteResolutionData{}
	return &this
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *HomeSiteResolutionData) GetGroupId() string {
	if o == nil || o.GroupId == nil {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HomeSiteResolutionData) GetGroupIdOk() (*string, bool) {
	if o == nil || o.GroupId == nil {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *HomeSiteResolutionData) HasGroupId() bool {
	if o != nil && o.GroupId != nil {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *HomeSiteResolutionData) SetGroupId(v string) {
	o.GroupId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *HomeSiteResolutionData) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HomeSiteResolutionData) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *HomeSiteResolutionData) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *HomeSiteResolutionData) SetId(v string) {
	o.Id = &v
}

// GetResolved returns the Resolved field value if set, zero value otherwise.
func (o *HomeSiteResolutionData) GetResolved() bool {
	if o == nil || o.Resolved == nil {
		var ret bool
		return ret
	}
	return *o.Resolved
}

// GetResolvedOk returns a tuple with the Resolved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HomeSiteResolutionData) GetResolvedOk() (*bool, bool) {
	if o == nil || o.Resolved == nil {
		return nil, false
	}
	return o.Resolved, true
}

// HasResolved returns a boolean if a field has been set.
func (o *HomeSiteResolutionData) HasResolved() bool {
	if o != nil && o.Resolved != nil {
		return true
	}

	return false
}

// SetResolved gets a reference to the given bool and assigns it to the Resolved field.
func (o *HomeSiteResolutionData) SetResolved(v bool) {
	o.Resolved = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *HomeSiteResolutionData) GetSiteId() string {
	if o == nil || o.SiteId == nil {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HomeSiteResolutionData) GetSiteIdOk() (*string, bool) {
	if o == nil || o.SiteId == nil {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *HomeSiteResolutionData) HasSiteId() bool {
	if o != nil && o.SiteId != nil {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *HomeSiteResolutionData) SetSiteId(v string) {
	o.SiteId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *HomeSiteResolutionData) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HomeSiteResolutionData) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *HomeSiteResolutionData) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *HomeSiteResolutionData) SetType(v string) {
	o.Type = &v
}

func (o HomeSiteResolutionData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GroupId != nil {
		toSerialize["group_id"] = o.GroupId
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Resolved != nil {
		toSerialize["resolved"] = o.Resolved
	}
	if o.SiteId != nil {
		toSerialize["site_id"] = o.SiteId
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableHomeSiteResolutionData struct {
	value *HomeSiteResolutionData
	isSet bool
}

func (v NullableHomeSiteResolutionData) Get() *HomeSiteResolutionData {
	return v.value
}

func (v *NullableHomeSiteResolutionData) Set(val *HomeSiteResolutionData) {
	v.value = val
	v.isSet = true
}

func (v NullableHomeSiteResolutionData) IsSet() bool {
	return v.isSet
}

func (v *NullableHomeSiteResolutionData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHomeSiteResolutionData(val *HomeSiteResolutionData) *NullableHomeSiteResolutionData {
	return &NullableHomeSiteResolutionData{value: val, isSet: true}
}

func (v NullableHomeSiteResolutionData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHomeSiteResolutionData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
