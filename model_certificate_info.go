/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the CertificateInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateInfo{}

// CertificateInfo Certificate information of connection server.
type CertificateInfo struct {
	// Indicates how the certificate would be used. * MACHINE: vdm certificates
	CertificateUsage *string `json:"certificate_usage,omitempty"`
	DnssubjectAlternativeNames []string `json:"dnssubject_alternative_names,omitempty"`
	// Indicates whether certificate is currently used by server or not.
	InUse *bool `json:"in_use,omitempty"`
	// Indicates the reason for invalid certificate.
	InvalidReasons []string `json:"invalid_reasons,omitempty"`
	// Indicates whether certificate is valid or not.
	IsValid *bool `json:"is_valid,omitempty"`
	// Issuer name of certificate.
	IssuerName *string `json:"issuer_name,omitempty"`
	// Serial number of certificate.
	SerialNumber *string `json:"serial_number,omitempty"`
	// SHA1 thumbprint of certificate.
	Sha1Thumbprint *string `json:"sha1_thumbprint,omitempty"`
	// Signature algorithm of certificate.
	SignatureAlgorithm *string `json:"signature_algorithm,omitempty"`
	// Subject name of certificate.
	SubjectName *string `json:"subject_name,omitempty"`
	// Certificate valid from. Numeric version of ISO 8601 format.
	ValidFrom *string `json:"valid_from,omitempty"`
	// Certificate valid until. Numeric version of ISO 8601 format.
	ValidUntil *string `json:"valid_until,omitempty"`
}

// NewCertificateInfo instantiates a new CertificateInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateInfo() *CertificateInfo {
	this := CertificateInfo{}
	return &this
}

// NewCertificateInfoWithDefaults instantiates a new CertificateInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateInfoWithDefaults() *CertificateInfo {
	this := CertificateInfo{}
	return &this
}

// GetCertificateUsage returns the CertificateUsage field value if set, zero value otherwise.
func (o *CertificateInfo) GetCertificateUsage() string {
	if o == nil || IsNil(o.CertificateUsage) {
		var ret string
		return ret
	}
	return *o.CertificateUsage
}

// GetCertificateUsageOk returns a tuple with the CertificateUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfo) GetCertificateUsageOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateUsage) {
		return nil, false
	}
	return o.CertificateUsage, true
}

// HasCertificateUsage returns a boolean if a field has been set.
func (o *CertificateInfo) HasCertificateUsage() bool {
	if o != nil && !IsNil(o.CertificateUsage) {
		return true
	}

	return false
}

// SetCertificateUsage gets a reference to the given string and assigns it to the CertificateUsage field.
func (o *CertificateInfo) SetCertificateUsage(v string) {
	o.CertificateUsage = &v
}

// GetDnssubjectAlternativeNames returns the DnssubjectAlternativeNames field value if set, zero value otherwise.
func (o *CertificateInfo) GetDnssubjectAlternativeNames() []string {
	if o == nil || IsNil(o.DnssubjectAlternativeNames) {
		var ret []string
		return ret
	}
	return o.DnssubjectAlternativeNames
}

// GetDnssubjectAlternativeNamesOk returns a tuple with the DnssubjectAlternativeNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfo) GetDnssubjectAlternativeNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.DnssubjectAlternativeNames) {
		return nil, false
	}
	return o.DnssubjectAlternativeNames, true
}

// HasDnssubjectAlternativeNames returns a boolean if a field has been set.
func (o *CertificateInfo) HasDnssubjectAlternativeNames() bool {
	if o != nil && !IsNil(o.DnssubjectAlternativeNames) {
		return true
	}

	return false
}

// SetDnssubjectAlternativeNames gets a reference to the given []string and assigns it to the DnssubjectAlternativeNames field.
func (o *CertificateInfo) SetDnssubjectAlternativeNames(v []string) {
	o.DnssubjectAlternativeNames = v
}

// GetInUse returns the InUse field value if set, zero value otherwise.
func (o *CertificateInfo) GetInUse() bool {
	if o == nil || IsNil(o.InUse) {
		var ret bool
		return ret
	}
	return *o.InUse
}

// GetInUseOk returns a tuple with the InUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfo) GetInUseOk() (*bool, bool) {
	if o == nil || IsNil(o.InUse) {
		return nil, false
	}
	return o.InUse, true
}

// HasInUse returns a boolean if a field has been set.
func (o *CertificateInfo) HasInUse() bool {
	if o != nil && !IsNil(o.InUse) {
		return true
	}

	return false
}

// SetInUse gets a reference to the given bool and assigns it to the InUse field.
func (o *CertificateInfo) SetInUse(v bool) {
	o.InUse = &v
}

// GetInvalidReasons returns the InvalidReasons field value if set, zero value otherwise.
func (o *CertificateInfo) GetInvalidReasons() []string {
	if o == nil || IsNil(o.InvalidReasons) {
		var ret []string
		return ret
	}
	return o.InvalidReasons
}

// GetInvalidReasonsOk returns a tuple with the InvalidReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfo) GetInvalidReasonsOk() ([]string, bool) {
	if o == nil || IsNil(o.InvalidReasons) {
		return nil, false
	}
	return o.InvalidReasons, true
}

// HasInvalidReasons returns a boolean if a field has been set.
func (o *CertificateInfo) HasInvalidReasons() bool {
	if o != nil && !IsNil(o.InvalidReasons) {
		return true
	}

	return false
}

// SetInvalidReasons gets a reference to the given []string and assigns it to the InvalidReasons field.
func (o *CertificateInfo) SetInvalidReasons(v []string) {
	o.InvalidReasons = v
}

// GetIsValid returns the IsValid field value if set, zero value otherwise.
func (o *CertificateInfo) GetIsValid() bool {
	if o == nil || IsNil(o.IsValid) {
		var ret bool
		return ret
	}
	return *o.IsValid
}

// GetIsValidOk returns a tuple with the IsValid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfo) GetIsValidOk() (*bool, bool) {
	if o == nil || IsNil(o.IsValid) {
		return nil, false
	}
	return o.IsValid, true
}

// HasIsValid returns a boolean if a field has been set.
func (o *CertificateInfo) HasIsValid() bool {
	if o != nil && !IsNil(o.IsValid) {
		return true
	}

	return false
}

// SetIsValid gets a reference to the given bool and assigns it to the IsValid field.
func (o *CertificateInfo) SetIsValid(v bool) {
	o.IsValid = &v
}

// GetIssuerName returns the IssuerName field value if set, zero value otherwise.
func (o *CertificateInfo) GetIssuerName() string {
	if o == nil || IsNil(o.IssuerName) {
		var ret string
		return ret
	}
	return *o.IssuerName
}

// GetIssuerNameOk returns a tuple with the IssuerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfo) GetIssuerNameOk() (*string, bool) {
	if o == nil || IsNil(o.IssuerName) {
		return nil, false
	}
	return o.IssuerName, true
}

// HasIssuerName returns a boolean if a field has been set.
func (o *CertificateInfo) HasIssuerName() bool {
	if o != nil && !IsNil(o.IssuerName) {
		return true
	}

	return false
}

// SetIssuerName gets a reference to the given string and assigns it to the IssuerName field.
func (o *CertificateInfo) SetIssuerName(v string) {
	o.IssuerName = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *CertificateInfo) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfo) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *CertificateInfo) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *CertificateInfo) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetSha1Thumbprint returns the Sha1Thumbprint field value if set, zero value otherwise.
func (o *CertificateInfo) GetSha1Thumbprint() string {
	if o == nil || IsNil(o.Sha1Thumbprint) {
		var ret string
		return ret
	}
	return *o.Sha1Thumbprint
}

// GetSha1ThumbprintOk returns a tuple with the Sha1Thumbprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfo) GetSha1ThumbprintOk() (*string, bool) {
	if o == nil || IsNil(o.Sha1Thumbprint) {
		return nil, false
	}
	return o.Sha1Thumbprint, true
}

// HasSha1Thumbprint returns a boolean if a field has been set.
func (o *CertificateInfo) HasSha1Thumbprint() bool {
	if o != nil && !IsNil(o.Sha1Thumbprint) {
		return true
	}

	return false
}

// SetSha1Thumbprint gets a reference to the given string and assigns it to the Sha1Thumbprint field.
func (o *CertificateInfo) SetSha1Thumbprint(v string) {
	o.Sha1Thumbprint = &v
}

// GetSignatureAlgorithm returns the SignatureAlgorithm field value if set, zero value otherwise.
func (o *CertificateInfo) GetSignatureAlgorithm() string {
	if o == nil || IsNil(o.SignatureAlgorithm) {
		var ret string
		return ret
	}
	return *o.SignatureAlgorithm
}

// GetSignatureAlgorithmOk returns a tuple with the SignatureAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfo) GetSignatureAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.SignatureAlgorithm) {
		return nil, false
	}
	return o.SignatureAlgorithm, true
}

// HasSignatureAlgorithm returns a boolean if a field has been set.
func (o *CertificateInfo) HasSignatureAlgorithm() bool {
	if o != nil && !IsNil(o.SignatureAlgorithm) {
		return true
	}

	return false
}

// SetSignatureAlgorithm gets a reference to the given string and assigns it to the SignatureAlgorithm field.
func (o *CertificateInfo) SetSignatureAlgorithm(v string) {
	o.SignatureAlgorithm = &v
}

// GetSubjectName returns the SubjectName field value if set, zero value otherwise.
func (o *CertificateInfo) GetSubjectName() string {
	if o == nil || IsNil(o.SubjectName) {
		var ret string
		return ret
	}
	return *o.SubjectName
}

// GetSubjectNameOk returns a tuple with the SubjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfo) GetSubjectNameOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectName) {
		return nil, false
	}
	return o.SubjectName, true
}

// HasSubjectName returns a boolean if a field has been set.
func (o *CertificateInfo) HasSubjectName() bool {
	if o != nil && !IsNil(o.SubjectName) {
		return true
	}

	return false
}

// SetSubjectName gets a reference to the given string and assigns it to the SubjectName field.
func (o *CertificateInfo) SetSubjectName(v string) {
	o.SubjectName = &v
}

// GetValidFrom returns the ValidFrom field value if set, zero value otherwise.
func (o *CertificateInfo) GetValidFrom() string {
	if o == nil || IsNil(o.ValidFrom) {
		var ret string
		return ret
	}
	return *o.ValidFrom
}

// GetValidFromOk returns a tuple with the ValidFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfo) GetValidFromOk() (*string, bool) {
	if o == nil || IsNil(o.ValidFrom) {
		return nil, false
	}
	return o.ValidFrom, true
}

// HasValidFrom returns a boolean if a field has been set.
func (o *CertificateInfo) HasValidFrom() bool {
	if o != nil && !IsNil(o.ValidFrom) {
		return true
	}

	return false
}

// SetValidFrom gets a reference to the given string and assigns it to the ValidFrom field.
func (o *CertificateInfo) SetValidFrom(v string) {
	o.ValidFrom = &v
}

// GetValidUntil returns the ValidUntil field value if set, zero value otherwise.
func (o *CertificateInfo) GetValidUntil() string {
	if o == nil || IsNil(o.ValidUntil) {
		var ret string
		return ret
	}
	return *o.ValidUntil
}

// GetValidUntilOk returns a tuple with the ValidUntil field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateInfo) GetValidUntilOk() (*string, bool) {
	if o == nil || IsNil(o.ValidUntil) {
		return nil, false
	}
	return o.ValidUntil, true
}

// HasValidUntil returns a boolean if a field has been set.
func (o *CertificateInfo) HasValidUntil() bool {
	if o != nil && !IsNil(o.ValidUntil) {
		return true
	}

	return false
}

// SetValidUntil gets a reference to the given string and assigns it to the ValidUntil field.
func (o *CertificateInfo) SetValidUntil(v string) {
	o.ValidUntil = &v
}

func (o CertificateInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CertificateUsage) {
		toSerialize["certificate_usage"] = o.CertificateUsage
	}
	if !IsNil(o.DnssubjectAlternativeNames) {
		toSerialize["dnssubject_alternative_names"] = o.DnssubjectAlternativeNames
	}
	if !IsNil(o.InUse) {
		toSerialize["in_use"] = o.InUse
	}
	if !IsNil(o.InvalidReasons) {
		toSerialize["invalid_reasons"] = o.InvalidReasons
	}
	if !IsNil(o.IsValid) {
		toSerialize["is_valid"] = o.IsValid
	}
	if !IsNil(o.IssuerName) {
		toSerialize["issuer_name"] = o.IssuerName
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serial_number"] = o.SerialNumber
	}
	if !IsNil(o.Sha1Thumbprint) {
		toSerialize["sha1_thumbprint"] = o.Sha1Thumbprint
	}
	if !IsNil(o.SignatureAlgorithm) {
		toSerialize["signature_algorithm"] = o.SignatureAlgorithm
	}
	if !IsNil(o.SubjectName) {
		toSerialize["subject_name"] = o.SubjectName
	}
	if !IsNil(o.ValidFrom) {
		toSerialize["valid_from"] = o.ValidFrom
	}
	if !IsNil(o.ValidUntil) {
		toSerialize["valid_until"] = o.ValidUntil
	}
	return toSerialize, nil
}

type NullableCertificateInfo struct {
	value *CertificateInfo
	isSet bool
}

func (v NullableCertificateInfo) Get() *CertificateInfo {
	return v.value
}

func (v *NullableCertificateInfo) Set(val *CertificateInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateInfo(val *CertificateInfo) *NullableCertificateInfo {
	return &NullableCertificateInfo{value: val, isSet: true}
}

func (v NullableCertificateInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


