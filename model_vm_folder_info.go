/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2111
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// VMFolderInfo Information related to VM folder.
type VMFolderInfo struct {
	// Child nodes of the VM folder.
	Children *[]VMFolderInfo `json:"children,omitempty"`
	// Datacenter id for this VM folder.
	DatacenterId *string `json:"datacenter_id,omitempty"`
	// Unique ID representing the VM folder.
	Id *string `json:"id,omitempty"`
	// Reasons that may preclude this VM folder from being used in desktop pool or farm.
	IncompatibleReasons *[]string `json:"incompatible_reasons,omitempty"`
	// VM folder name.
	Name *string `json:"name,omitempty"`
	// VM folder path.
	Path *string `json:"path,omitempty"`
	// VM folder type. * DATACENTER: A datacenter that serves as a folder suitable for use in desktop pool/farm. * FOLDER: A regular folder suitable for use in desktop pool/farm. * OTHER: Other folder type that cannot be used in desktop pool/farm.
	Type *string `json:"type,omitempty"`
	// Virtual Center id for this VM folder.
	VcenterId *string `json:"vcenter_id,omitempty"`
}

// NewVMFolderInfo instantiates a new VMFolderInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMFolderInfo() *VMFolderInfo {
	this := VMFolderInfo{}
	return &this
}

// NewVMFolderInfoWithDefaults instantiates a new VMFolderInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMFolderInfoWithDefaults() *VMFolderInfo {
	this := VMFolderInfo{}
	return &this
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *VMFolderInfo) GetChildren() []VMFolderInfo {
	if o == nil || o.Children == nil {
		var ret []VMFolderInfo
		return ret
	}
	return *o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMFolderInfo) GetChildrenOk() (*[]VMFolderInfo, bool) {
	if o == nil || o.Children == nil {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *VMFolderInfo) HasChildren() bool {
	if o != nil && o.Children != nil {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []VMFolderInfo and assigns it to the Children field.
func (o *VMFolderInfo) SetChildren(v []VMFolderInfo) {
	o.Children = &v
}

// GetDatacenterId returns the DatacenterId field value if set, zero value otherwise.
func (o *VMFolderInfo) GetDatacenterId() string {
	if o == nil || o.DatacenterId == nil {
		var ret string
		return ret
	}
	return *o.DatacenterId
}

// GetDatacenterIdOk returns a tuple with the DatacenterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMFolderInfo) GetDatacenterIdOk() (*string, bool) {
	if o == nil || o.DatacenterId == nil {
		return nil, false
	}
	return o.DatacenterId, true
}

// HasDatacenterId returns a boolean if a field has been set.
func (o *VMFolderInfo) HasDatacenterId() bool {
	if o != nil && o.DatacenterId != nil {
		return true
	}

	return false
}

// SetDatacenterId gets a reference to the given string and assigns it to the DatacenterId field.
func (o *VMFolderInfo) SetDatacenterId(v string) {
	o.DatacenterId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VMFolderInfo) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMFolderInfo) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VMFolderInfo) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VMFolderInfo) SetId(v string) {
	o.Id = &v
}

// GetIncompatibleReasons returns the IncompatibleReasons field value if set, zero value otherwise.
func (o *VMFolderInfo) GetIncompatibleReasons() []string {
	if o == nil || o.IncompatibleReasons == nil {
		var ret []string
		return ret
	}
	return *o.IncompatibleReasons
}

// GetIncompatibleReasonsOk returns a tuple with the IncompatibleReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMFolderInfo) GetIncompatibleReasonsOk() (*[]string, bool) {
	if o == nil || o.IncompatibleReasons == nil {
		return nil, false
	}
	return o.IncompatibleReasons, true
}

// HasIncompatibleReasons returns a boolean if a field has been set.
func (o *VMFolderInfo) HasIncompatibleReasons() bool {
	if o != nil && o.IncompatibleReasons != nil {
		return true
	}

	return false
}

// SetIncompatibleReasons gets a reference to the given []string and assigns it to the IncompatibleReasons field.
func (o *VMFolderInfo) SetIncompatibleReasons(v []string) {
	o.IncompatibleReasons = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VMFolderInfo) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMFolderInfo) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VMFolderInfo) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VMFolderInfo) SetName(v string) {
	o.Name = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *VMFolderInfo) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMFolderInfo) GetPathOk() (*string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *VMFolderInfo) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *VMFolderInfo) SetPath(v string) {
	o.Path = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *VMFolderInfo) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMFolderInfo) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *VMFolderInfo) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *VMFolderInfo) SetType(v string) {
	o.Type = &v
}

// GetVcenterId returns the VcenterId field value if set, zero value otherwise.
func (o *VMFolderInfo) GetVcenterId() string {
	if o == nil || o.VcenterId == nil {
		var ret string
		return ret
	}
	return *o.VcenterId
}

// GetVcenterIdOk returns a tuple with the VcenterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMFolderInfo) GetVcenterIdOk() (*string, bool) {
	if o == nil || o.VcenterId == nil {
		return nil, false
	}
	return o.VcenterId, true
}

// HasVcenterId returns a boolean if a field has been set.
func (o *VMFolderInfo) HasVcenterId() bool {
	if o != nil && o.VcenterId != nil {
		return true
	}

	return false
}

// SetVcenterId gets a reference to the given string and assigns it to the VcenterId field.
func (o *VMFolderInfo) SetVcenterId(v string) {
	o.VcenterId = &v
}

func (o VMFolderInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Children != nil {
		toSerialize["children"] = o.Children
	}
	if o.DatacenterId != nil {
		toSerialize["datacenter_id"] = o.DatacenterId
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IncompatibleReasons != nil {
		toSerialize["incompatible_reasons"] = o.IncompatibleReasons
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.VcenterId != nil {
		toSerialize["vcenter_id"] = o.VcenterId
	}
	return json.Marshal(toSerialize)
}

type NullableVMFolderInfo struct {
	value *VMFolderInfo
	isSet bool
}

func (v NullableVMFolderInfo) Get() *VMFolderInfo {
	return v.value
}

func (v *NullableVMFolderInfo) Set(val *VMFolderInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVMFolderInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVMFolderInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMFolderInfo(val *VMFolderInfo) *NullableVMFolderInfo {
	return &NullableVMFolderInfo{value: val, isSet: true}
}

func (v NullableVMFolderInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMFolderInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
