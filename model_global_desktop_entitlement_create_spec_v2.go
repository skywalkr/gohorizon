/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GlobalDesktopEntitlementCreateSpecV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GlobalDesktopEntitlementCreateSpecV2{}

// GlobalDesktopEntitlementCreateSpecV2 Information required to create Global Desktop Entitlement.
type GlobalDesktopEntitlementCreateSpecV2 struct {
	// Indicates whether users can have multiple sessions when accessed from different client devices, this is also called Class room mode and applicable only to floating user assignment. If value is set to true, the desktop pools that are associated with this Global Desktop Entitlement  must also allow users to have multiple sessions with allowMultipleSessionsPerUser. Default value is false.
	AllowMultipleSessionsPerUser *bool `json:"allow_multiple_sessions_per_user,omitempty"`
	// Indicates whether the users can choose the protocol used. If set to true, the desktop pools that are associated with this Global Desktop Entitlement must also allow users to choose display protocol with allowUsersToChooseProtocol. Default value is true.
	AllowUsersToChooseProtocol *bool `json:"allow_users_to_choose_protocol,omitempty"`
	// Indicates whether users are allowed to reset/restart their machines. If set to true, the desktop pools that are associated with this Global Desktop Entitlement must also allow users to reset/restart machines with allowUsersToResetMachines. Default value is false.
	AllowUsersToResetMachines *bool `json:"allow_users_to_reset_machines,omitempty"`
	// Name of the category folder in the user's OS containing a shortcut to the entitlement. Unset if the entitlement does not belong to a category.
	CategoryFolderName *string `json:"category_folder_name,omitempty"`
	// Indicates whether this global desktop entitlement is managed from cloud. Default value is false.
	CloudManaged *bool `json:"cloud_managed,omitempty"`
	// List of connection server restriction tags to which the access to the global desktop entitlement is restricted. Empty or null list means that entitlement can be accessed from any connection server
	CsRestrictionTags []string `json:"cs_restriction_tags,omitempty"`
	// Indicates whether global desktop entitlement is dedicated. If so, only dedicated desktop pools can be associated with this Global Desktop Entitlement. Otherwise, only floating desktop pools, can be associated with it. Can only be set at time of creation. Default value is false.
	Dedicated *bool `json:"dedicated,omitempty"`
	// The default display protocol for the Global Desktop Entitlement. Clients connecting through this Global Desktop Entitlement that do not specify a protocol will use this value, not the value specified directly on the desktop pool to which they connect (if different).This property has a default value of \"PCOIP\". * RDP: Microsoft Remote Desktop Protocol. * PCOIP: PCoIP protocol. * BLAST: BLAST protocol.
	DefaultDisplayProtocol *string `json:"default_display_protocol,omitempty"`
	// Description of Global Desktop Entitlement. 
	Description *string `json:"description,omitempty"`
	// Indicates whether users should see the hostname of the machine assigned to them instead of displayName when they connect using Horizon Client. This is applicable for dedicated Global Desktop Entitlements only. If no machine is assigned to the user then \"display_name (No machine assigned)\" will be displayed in the client. Default value is false.
	DisplayAssignedMachineName *bool `json:"display_assigned_machine_name,omitempty"`
	// Indicates whether users should see the alias of the machine assigned to them instead of display_name when they connect using Horizon Client. This is applicable for dedicated Global Desktop Entitlements only.  Default value is false.
	DisplayMachineAlias *bool `json:"display_machine_alias,omitempty"`
	// Name that users will see when they connect using Horizon Client. If display_name is left blank, it defaults to name. 
	DisplayName *string `json:"display_name,omitempty"`
	// Indicates whether client restrictions to be applied to Global Desktop Entitlement. Currently it is valid for RDSH pools. Default value is false.
	EnableClientRestrictions *bool `json:"enable_client_restrictions,omitempty"`
	// Indicates if this Global Desktop Entitlement is enabled.Default value is true.
	Enabled *bool `json:"enabled,omitempty"`
	// ID of the federated access group with which the global desktop entitlement is to be associated. They can also be used for delegated administration.
	FederatedAccessGroupId string `json:"federated_access_group_id"`
	// Indicates if automatic session clean up is enabled. This cannot be enabled when this Global Desktop Entitlement is associated with a Desktop pool that has dedicated user assignment. Default value is false.
	MultipleSessionAutoClean *bool `json:"multiple_session_auto_clean,omitempty"`
	// Unique name used to identify the Global Desktop Entitlement. 
	Name string `json:"name"`
	// Indicates whether we fail if a home site isn't defined for this Global Desktop Entitlement. Default value is false.
	RequireHomeSite *bool `json:"require_home_site,omitempty"`
	// Scope for this global desktop entitlement. Visibility and Placement policies are defined by this value. This property has a default value of \"ALL_SITES\". * WITHIN_POD: Within POD Policy: Local pod will be used for this policy. If this policy is for visibility, search for existing session will happen only in local pod. If this policy is for placement, session will always be placed on local pod. * WITHIN_SITE: Within Site Policy: Site will be used for this policy. If this policy is for visibility, search for existing session will happen only from site. If this policy is for placement, session will be placed on site. * ALL_SITES: All Sites Policy: Any pod can be used for this action. If this policy is for visibility, search for existing session will span all pods in LMV set. If this policy is for placement, session can be placed on any pod in LMV set.
	Scope *string `json:"scope,omitempty"`
	// Session collaboration allows a user to share their remote session with other users. Blast must be configured as a supported protocol. Indicates if the desktop pools that are associated with this Global Desktop Entitlement must also have session collaboration enabled with enableCollaboration. Default value is false.
	SessionCollaborationEnabled *bool `json:"session_collaboration_enabled,omitempty"`
	// Locations of the category folder in the user's OS containing a shortcut to the desktop. This property is required if category_folder_name is set.
	ShortcutLocationsV2 []string `json:"shortcut_locations_v2,omitempty"`
	// Indicates whether a pod in the user's home site is used to start the search or the current site is used. Default value is false.
	UseHomeSite *bool `json:"use_home_site,omitempty"`
}

type _GlobalDesktopEntitlementCreateSpecV2 GlobalDesktopEntitlementCreateSpecV2

// NewGlobalDesktopEntitlementCreateSpecV2 instantiates a new GlobalDesktopEntitlementCreateSpecV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalDesktopEntitlementCreateSpecV2(federatedAccessGroupId string, name string) *GlobalDesktopEntitlementCreateSpecV2 {
	this := GlobalDesktopEntitlementCreateSpecV2{}
	this.FederatedAccessGroupId = federatedAccessGroupId
	this.Name = name
	return &this
}

// NewGlobalDesktopEntitlementCreateSpecV2WithDefaults instantiates a new GlobalDesktopEntitlementCreateSpecV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalDesktopEntitlementCreateSpecV2WithDefaults() *GlobalDesktopEntitlementCreateSpecV2 {
	this := GlobalDesktopEntitlementCreateSpecV2{}
	return &this
}

// GetAllowMultipleSessionsPerUser returns the AllowMultipleSessionsPerUser field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetAllowMultipleSessionsPerUser() bool {
	if o == nil || IsNil(o.AllowMultipleSessionsPerUser) {
		var ret bool
		return ret
	}
	return *o.AllowMultipleSessionsPerUser
}

// GetAllowMultipleSessionsPerUserOk returns a tuple with the AllowMultipleSessionsPerUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetAllowMultipleSessionsPerUserOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowMultipleSessionsPerUser) {
		return nil, false
	}
	return o.AllowMultipleSessionsPerUser, true
}

// HasAllowMultipleSessionsPerUser returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) HasAllowMultipleSessionsPerUser() bool {
	if o != nil && !IsNil(o.AllowMultipleSessionsPerUser) {
		return true
	}

	return false
}

// SetAllowMultipleSessionsPerUser gets a reference to the given bool and assigns it to the AllowMultipleSessionsPerUser field.
func (o *GlobalDesktopEntitlementCreateSpecV2) SetAllowMultipleSessionsPerUser(v bool) {
	o.AllowMultipleSessionsPerUser = &v
}

// GetAllowUsersToChooseProtocol returns the AllowUsersToChooseProtocol field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetAllowUsersToChooseProtocol() bool {
	if o == nil || IsNil(o.AllowUsersToChooseProtocol) {
		var ret bool
		return ret
	}
	return *o.AllowUsersToChooseProtocol
}

// GetAllowUsersToChooseProtocolOk returns a tuple with the AllowUsersToChooseProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetAllowUsersToChooseProtocolOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowUsersToChooseProtocol) {
		return nil, false
	}
	return o.AllowUsersToChooseProtocol, true
}

// HasAllowUsersToChooseProtocol returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) HasAllowUsersToChooseProtocol() bool {
	if o != nil && !IsNil(o.AllowUsersToChooseProtocol) {
		return true
	}

	return false
}

// SetAllowUsersToChooseProtocol gets a reference to the given bool and assigns it to the AllowUsersToChooseProtocol field.
func (o *GlobalDesktopEntitlementCreateSpecV2) SetAllowUsersToChooseProtocol(v bool) {
	o.AllowUsersToChooseProtocol = &v
}

// GetAllowUsersToResetMachines returns the AllowUsersToResetMachines field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetAllowUsersToResetMachines() bool {
	if o == nil || IsNil(o.AllowUsersToResetMachines) {
		var ret bool
		return ret
	}
	return *o.AllowUsersToResetMachines
}

// GetAllowUsersToResetMachinesOk returns a tuple with the AllowUsersToResetMachines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetAllowUsersToResetMachinesOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowUsersToResetMachines) {
		return nil, false
	}
	return o.AllowUsersToResetMachines, true
}

// HasAllowUsersToResetMachines returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) HasAllowUsersToResetMachines() bool {
	if o != nil && !IsNil(o.AllowUsersToResetMachines) {
		return true
	}

	return false
}

// SetAllowUsersToResetMachines gets a reference to the given bool and assigns it to the AllowUsersToResetMachines field.
func (o *GlobalDesktopEntitlementCreateSpecV2) SetAllowUsersToResetMachines(v bool) {
	o.AllowUsersToResetMachines = &v
}

// GetCategoryFolderName returns the CategoryFolderName field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetCategoryFolderName() string {
	if o == nil || IsNil(o.CategoryFolderName) {
		var ret string
		return ret
	}
	return *o.CategoryFolderName
}

// GetCategoryFolderNameOk returns a tuple with the CategoryFolderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetCategoryFolderNameOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryFolderName) {
		return nil, false
	}
	return o.CategoryFolderName, true
}

// HasCategoryFolderName returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) HasCategoryFolderName() bool {
	if o != nil && !IsNil(o.CategoryFolderName) {
		return true
	}

	return false
}

// SetCategoryFolderName gets a reference to the given string and assigns it to the CategoryFolderName field.
func (o *GlobalDesktopEntitlementCreateSpecV2) SetCategoryFolderName(v string) {
	o.CategoryFolderName = &v
}

// GetCloudManaged returns the CloudManaged field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetCloudManaged() bool {
	if o == nil || IsNil(o.CloudManaged) {
		var ret bool
		return ret
	}
	return *o.CloudManaged
}

// GetCloudManagedOk returns a tuple with the CloudManaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetCloudManagedOk() (*bool, bool) {
	if o == nil || IsNil(o.CloudManaged) {
		return nil, false
	}
	return o.CloudManaged, true
}

// HasCloudManaged returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) HasCloudManaged() bool {
	if o != nil && !IsNil(o.CloudManaged) {
		return true
	}

	return false
}

// SetCloudManaged gets a reference to the given bool and assigns it to the CloudManaged field.
func (o *GlobalDesktopEntitlementCreateSpecV2) SetCloudManaged(v bool) {
	o.CloudManaged = &v
}

// GetCsRestrictionTags returns the CsRestrictionTags field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetCsRestrictionTags() []string {
	if o == nil || IsNil(o.CsRestrictionTags) {
		var ret []string
		return ret
	}
	return o.CsRestrictionTags
}

// GetCsRestrictionTagsOk returns a tuple with the CsRestrictionTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetCsRestrictionTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.CsRestrictionTags) {
		return nil, false
	}
	return o.CsRestrictionTags, true
}

// HasCsRestrictionTags returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) HasCsRestrictionTags() bool {
	if o != nil && !IsNil(o.CsRestrictionTags) {
		return true
	}

	return false
}

// SetCsRestrictionTags gets a reference to the given []string and assigns it to the CsRestrictionTags field.
func (o *GlobalDesktopEntitlementCreateSpecV2) SetCsRestrictionTags(v []string) {
	o.CsRestrictionTags = v
}

// GetDedicated returns the Dedicated field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetDedicated() bool {
	if o == nil || IsNil(o.Dedicated) {
		var ret bool
		return ret
	}
	return *o.Dedicated
}

// GetDedicatedOk returns a tuple with the Dedicated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetDedicatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Dedicated) {
		return nil, false
	}
	return o.Dedicated, true
}

// HasDedicated returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) HasDedicated() bool {
	if o != nil && !IsNil(o.Dedicated) {
		return true
	}

	return false
}

// SetDedicated gets a reference to the given bool and assigns it to the Dedicated field.
func (o *GlobalDesktopEntitlementCreateSpecV2) SetDedicated(v bool) {
	o.Dedicated = &v
}

// GetDefaultDisplayProtocol returns the DefaultDisplayProtocol field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetDefaultDisplayProtocol() string {
	if o == nil || IsNil(o.DefaultDisplayProtocol) {
		var ret string
		return ret
	}
	return *o.DefaultDisplayProtocol
}

// GetDefaultDisplayProtocolOk returns a tuple with the DefaultDisplayProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetDefaultDisplayProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultDisplayProtocol) {
		return nil, false
	}
	return o.DefaultDisplayProtocol, true
}

// HasDefaultDisplayProtocol returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) HasDefaultDisplayProtocol() bool {
	if o != nil && !IsNil(o.DefaultDisplayProtocol) {
		return true
	}

	return false
}

// SetDefaultDisplayProtocol gets a reference to the given string and assigns it to the DefaultDisplayProtocol field.
func (o *GlobalDesktopEntitlementCreateSpecV2) SetDefaultDisplayProtocol(v string) {
	o.DefaultDisplayProtocol = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GlobalDesktopEntitlementCreateSpecV2) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayAssignedMachineName returns the DisplayAssignedMachineName field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetDisplayAssignedMachineName() bool {
	if o == nil || IsNil(o.DisplayAssignedMachineName) {
		var ret bool
		return ret
	}
	return *o.DisplayAssignedMachineName
}

// GetDisplayAssignedMachineNameOk returns a tuple with the DisplayAssignedMachineName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetDisplayAssignedMachineNameOk() (*bool, bool) {
	if o == nil || IsNil(o.DisplayAssignedMachineName) {
		return nil, false
	}
	return o.DisplayAssignedMachineName, true
}

// HasDisplayAssignedMachineName returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) HasDisplayAssignedMachineName() bool {
	if o != nil && !IsNil(o.DisplayAssignedMachineName) {
		return true
	}

	return false
}

// SetDisplayAssignedMachineName gets a reference to the given bool and assigns it to the DisplayAssignedMachineName field.
func (o *GlobalDesktopEntitlementCreateSpecV2) SetDisplayAssignedMachineName(v bool) {
	o.DisplayAssignedMachineName = &v
}

// GetDisplayMachineAlias returns the DisplayMachineAlias field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetDisplayMachineAlias() bool {
	if o == nil || IsNil(o.DisplayMachineAlias) {
		var ret bool
		return ret
	}
	return *o.DisplayMachineAlias
}

// GetDisplayMachineAliasOk returns a tuple with the DisplayMachineAlias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetDisplayMachineAliasOk() (*bool, bool) {
	if o == nil || IsNil(o.DisplayMachineAlias) {
		return nil, false
	}
	return o.DisplayMachineAlias, true
}

// HasDisplayMachineAlias returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) HasDisplayMachineAlias() bool {
	if o != nil && !IsNil(o.DisplayMachineAlias) {
		return true
	}

	return false
}

// SetDisplayMachineAlias gets a reference to the given bool and assigns it to the DisplayMachineAlias field.
func (o *GlobalDesktopEntitlementCreateSpecV2) SetDisplayMachineAlias(v bool) {
	o.DisplayMachineAlias = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *GlobalDesktopEntitlementCreateSpecV2) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEnableClientRestrictions returns the EnableClientRestrictions field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetEnableClientRestrictions() bool {
	if o == nil || IsNil(o.EnableClientRestrictions) {
		var ret bool
		return ret
	}
	return *o.EnableClientRestrictions
}

// GetEnableClientRestrictionsOk returns a tuple with the EnableClientRestrictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetEnableClientRestrictionsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableClientRestrictions) {
		return nil, false
	}
	return o.EnableClientRestrictions, true
}

// HasEnableClientRestrictions returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) HasEnableClientRestrictions() bool {
	if o != nil && !IsNil(o.EnableClientRestrictions) {
		return true
	}

	return false
}

// SetEnableClientRestrictions gets a reference to the given bool and assigns it to the EnableClientRestrictions field.
func (o *GlobalDesktopEntitlementCreateSpecV2) SetEnableClientRestrictions(v bool) {
	o.EnableClientRestrictions = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *GlobalDesktopEntitlementCreateSpecV2) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetFederatedAccessGroupId returns the FederatedAccessGroupId field value
func (o *GlobalDesktopEntitlementCreateSpecV2) GetFederatedAccessGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FederatedAccessGroupId
}

// GetFederatedAccessGroupIdOk returns a tuple with the FederatedAccessGroupId field value
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetFederatedAccessGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FederatedAccessGroupId, true
}

// SetFederatedAccessGroupId sets field value
func (o *GlobalDesktopEntitlementCreateSpecV2) SetFederatedAccessGroupId(v string) {
	o.FederatedAccessGroupId = v
}

// GetMultipleSessionAutoClean returns the MultipleSessionAutoClean field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetMultipleSessionAutoClean() bool {
	if o == nil || IsNil(o.MultipleSessionAutoClean) {
		var ret bool
		return ret
	}
	return *o.MultipleSessionAutoClean
}

// GetMultipleSessionAutoCleanOk returns a tuple with the MultipleSessionAutoClean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetMultipleSessionAutoCleanOk() (*bool, bool) {
	if o == nil || IsNil(o.MultipleSessionAutoClean) {
		return nil, false
	}
	return o.MultipleSessionAutoClean, true
}

// HasMultipleSessionAutoClean returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) HasMultipleSessionAutoClean() bool {
	if o != nil && !IsNil(o.MultipleSessionAutoClean) {
		return true
	}

	return false
}

// SetMultipleSessionAutoClean gets a reference to the given bool and assigns it to the MultipleSessionAutoClean field.
func (o *GlobalDesktopEntitlementCreateSpecV2) SetMultipleSessionAutoClean(v bool) {
	o.MultipleSessionAutoClean = &v
}

// GetName returns the Name field value
func (o *GlobalDesktopEntitlementCreateSpecV2) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GlobalDesktopEntitlementCreateSpecV2) SetName(v string) {
	o.Name = v
}

// GetRequireHomeSite returns the RequireHomeSite field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetRequireHomeSite() bool {
	if o == nil || IsNil(o.RequireHomeSite) {
		var ret bool
		return ret
	}
	return *o.RequireHomeSite
}

// GetRequireHomeSiteOk returns a tuple with the RequireHomeSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetRequireHomeSiteOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireHomeSite) {
		return nil, false
	}
	return o.RequireHomeSite, true
}

// HasRequireHomeSite returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) HasRequireHomeSite() bool {
	if o != nil && !IsNil(o.RequireHomeSite) {
		return true
	}

	return false
}

// SetRequireHomeSite gets a reference to the given bool and assigns it to the RequireHomeSite field.
func (o *GlobalDesktopEntitlementCreateSpecV2) SetRequireHomeSite(v bool) {
	o.RequireHomeSite = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *GlobalDesktopEntitlementCreateSpecV2) SetScope(v string) {
	o.Scope = &v
}

// GetSessionCollaborationEnabled returns the SessionCollaborationEnabled field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetSessionCollaborationEnabled() bool {
	if o == nil || IsNil(o.SessionCollaborationEnabled) {
		var ret bool
		return ret
	}
	return *o.SessionCollaborationEnabled
}

// GetSessionCollaborationEnabledOk returns a tuple with the SessionCollaborationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetSessionCollaborationEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SessionCollaborationEnabled) {
		return nil, false
	}
	return o.SessionCollaborationEnabled, true
}

// HasSessionCollaborationEnabled returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) HasSessionCollaborationEnabled() bool {
	if o != nil && !IsNil(o.SessionCollaborationEnabled) {
		return true
	}

	return false
}

// SetSessionCollaborationEnabled gets a reference to the given bool and assigns it to the SessionCollaborationEnabled field.
func (o *GlobalDesktopEntitlementCreateSpecV2) SetSessionCollaborationEnabled(v bool) {
	o.SessionCollaborationEnabled = &v
}

// GetShortcutLocationsV2 returns the ShortcutLocationsV2 field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetShortcutLocationsV2() []string {
	if o == nil || IsNil(o.ShortcutLocationsV2) {
		var ret []string
		return ret
	}
	return o.ShortcutLocationsV2
}

// GetShortcutLocationsV2Ok returns a tuple with the ShortcutLocationsV2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetShortcutLocationsV2Ok() ([]string, bool) {
	if o == nil || IsNil(o.ShortcutLocationsV2) {
		return nil, false
	}
	return o.ShortcutLocationsV2, true
}

// HasShortcutLocationsV2 returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) HasShortcutLocationsV2() bool {
	if o != nil && !IsNil(o.ShortcutLocationsV2) {
		return true
	}

	return false
}

// SetShortcutLocationsV2 gets a reference to the given []string and assigns it to the ShortcutLocationsV2 field.
func (o *GlobalDesktopEntitlementCreateSpecV2) SetShortcutLocationsV2(v []string) {
	o.ShortcutLocationsV2 = v
}

// GetUseHomeSite returns the UseHomeSite field value if set, zero value otherwise.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetUseHomeSite() bool {
	if o == nil || IsNil(o.UseHomeSite) {
		var ret bool
		return ret
	}
	return *o.UseHomeSite
}

// GetUseHomeSiteOk returns a tuple with the UseHomeSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) GetUseHomeSiteOk() (*bool, bool) {
	if o == nil || IsNil(o.UseHomeSite) {
		return nil, false
	}
	return o.UseHomeSite, true
}

// HasUseHomeSite returns a boolean if a field has been set.
func (o *GlobalDesktopEntitlementCreateSpecV2) HasUseHomeSite() bool {
	if o != nil && !IsNil(o.UseHomeSite) {
		return true
	}

	return false
}

// SetUseHomeSite gets a reference to the given bool and assigns it to the UseHomeSite field.
func (o *GlobalDesktopEntitlementCreateSpecV2) SetUseHomeSite(v bool) {
	o.UseHomeSite = &v
}

func (o GlobalDesktopEntitlementCreateSpecV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GlobalDesktopEntitlementCreateSpecV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowMultipleSessionsPerUser) {
		toSerialize["allow_multiple_sessions_per_user"] = o.AllowMultipleSessionsPerUser
	}
	if !IsNil(o.AllowUsersToChooseProtocol) {
		toSerialize["allow_users_to_choose_protocol"] = o.AllowUsersToChooseProtocol
	}
	if !IsNil(o.AllowUsersToResetMachines) {
		toSerialize["allow_users_to_reset_machines"] = o.AllowUsersToResetMachines
	}
	if !IsNil(o.CategoryFolderName) {
		toSerialize["category_folder_name"] = o.CategoryFolderName
	}
	if !IsNil(o.CloudManaged) {
		toSerialize["cloud_managed"] = o.CloudManaged
	}
	if !IsNil(o.CsRestrictionTags) {
		toSerialize["cs_restriction_tags"] = o.CsRestrictionTags
	}
	if !IsNil(o.Dedicated) {
		toSerialize["dedicated"] = o.Dedicated
	}
	if !IsNil(o.DefaultDisplayProtocol) {
		toSerialize["default_display_protocol"] = o.DefaultDisplayProtocol
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplayAssignedMachineName) {
		toSerialize["display_assigned_machine_name"] = o.DisplayAssignedMachineName
	}
	if !IsNil(o.DisplayMachineAlias) {
		toSerialize["display_machine_alias"] = o.DisplayMachineAlias
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.EnableClientRestrictions) {
		toSerialize["enable_client_restrictions"] = o.EnableClientRestrictions
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	toSerialize["federated_access_group_id"] = o.FederatedAccessGroupId
	if !IsNil(o.MultipleSessionAutoClean) {
		toSerialize["multiple_session_auto_clean"] = o.MultipleSessionAutoClean
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.RequireHomeSite) {
		toSerialize["require_home_site"] = o.RequireHomeSite
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.SessionCollaborationEnabled) {
		toSerialize["session_collaboration_enabled"] = o.SessionCollaborationEnabled
	}
	if !IsNil(o.ShortcutLocationsV2) {
		toSerialize["shortcut_locations_v2"] = o.ShortcutLocationsV2
	}
	if !IsNil(o.UseHomeSite) {
		toSerialize["use_home_site"] = o.UseHomeSite
	}
	return toSerialize, nil
}

func (o *GlobalDesktopEntitlementCreateSpecV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"federated_access_group_id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGlobalDesktopEntitlementCreateSpecV2 := _GlobalDesktopEntitlementCreateSpecV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGlobalDesktopEntitlementCreateSpecV2)

	if err != nil {
		return err
	}

	*o = GlobalDesktopEntitlementCreateSpecV2(varGlobalDesktopEntitlementCreateSpecV2)

	return err
}

type NullableGlobalDesktopEntitlementCreateSpecV2 struct {
	value *GlobalDesktopEntitlementCreateSpecV2
	isSet bool
}

func (v NullableGlobalDesktopEntitlementCreateSpecV2) Get() *GlobalDesktopEntitlementCreateSpecV2 {
	return v.value
}

func (v *NullableGlobalDesktopEntitlementCreateSpecV2) Set(val *GlobalDesktopEntitlementCreateSpecV2) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalDesktopEntitlementCreateSpecV2) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalDesktopEntitlementCreateSpecV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalDesktopEntitlementCreateSpecV2(val *GlobalDesktopEntitlementCreateSpecV2) *NullableGlobalDesktopEntitlementCreateSpecV2 {
	return &NullableGlobalDesktopEntitlementCreateSpecV2{value: val, isSet: true}
}

func (v NullableGlobalDesktopEntitlementCreateSpecV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalDesktopEntitlementCreateSpecV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


