/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FarmStorageSettingsUpdateSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FarmStorageSettingsUpdateSpec{}

// FarmStorageSettingsUpdateSpec Virtual center storage settings for the farm.
type FarmStorageSettingsUpdateSpec struct {
	// List of IDs of the datastore used to store the RDS Server. This can be modified only if there are no current operations ( operation is NONE).
	Datastores []FarmDatastoreSettingsUpdateSpec `json:"datastores"`
	// Datastore to store replica disks for instant clone machines. This is required if use_separate_datastores_replica_and_os_disks is set to true. This can be modified only if there are no current operations ( operation is NONE).
	ReplicaDiskDatastoreId *string `json:"replica_disk_datastore_id,omitempty"`
}

type _FarmStorageSettingsUpdateSpec FarmStorageSettingsUpdateSpec

// NewFarmStorageSettingsUpdateSpec instantiates a new FarmStorageSettingsUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFarmStorageSettingsUpdateSpec(datastores []FarmDatastoreSettingsUpdateSpec) *FarmStorageSettingsUpdateSpec {
	this := FarmStorageSettingsUpdateSpec{}
	this.Datastores = datastores
	return &this
}

// NewFarmStorageSettingsUpdateSpecWithDefaults instantiates a new FarmStorageSettingsUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFarmStorageSettingsUpdateSpecWithDefaults() *FarmStorageSettingsUpdateSpec {
	this := FarmStorageSettingsUpdateSpec{}
	return &this
}

// GetDatastores returns the Datastores field value
func (o *FarmStorageSettingsUpdateSpec) GetDatastores() []FarmDatastoreSettingsUpdateSpec {
	if o == nil {
		var ret []FarmDatastoreSettingsUpdateSpec
		return ret
	}

	return o.Datastores
}

// GetDatastoresOk returns a tuple with the Datastores field value
// and a boolean to check if the value has been set.
func (o *FarmStorageSettingsUpdateSpec) GetDatastoresOk() ([]FarmDatastoreSettingsUpdateSpec, bool) {
	if o == nil {
		return nil, false
	}
	return o.Datastores, true
}

// SetDatastores sets field value
func (o *FarmStorageSettingsUpdateSpec) SetDatastores(v []FarmDatastoreSettingsUpdateSpec) {
	o.Datastores = v
}

// GetReplicaDiskDatastoreId returns the ReplicaDiskDatastoreId field value if set, zero value otherwise.
func (o *FarmStorageSettingsUpdateSpec) GetReplicaDiskDatastoreId() string {
	if o == nil || IsNil(o.ReplicaDiskDatastoreId) {
		var ret string
		return ret
	}
	return *o.ReplicaDiskDatastoreId
}

// GetReplicaDiskDatastoreIdOk returns a tuple with the ReplicaDiskDatastoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmStorageSettingsUpdateSpec) GetReplicaDiskDatastoreIdOk() (*string, bool) {
	if o == nil || IsNil(o.ReplicaDiskDatastoreId) {
		return nil, false
	}
	return o.ReplicaDiskDatastoreId, true
}

// HasReplicaDiskDatastoreId returns a boolean if a field has been set.
func (o *FarmStorageSettingsUpdateSpec) HasReplicaDiskDatastoreId() bool {
	if o != nil && !IsNil(o.ReplicaDiskDatastoreId) {
		return true
	}

	return false
}

// SetReplicaDiskDatastoreId gets a reference to the given string and assigns it to the ReplicaDiskDatastoreId field.
func (o *FarmStorageSettingsUpdateSpec) SetReplicaDiskDatastoreId(v string) {
	o.ReplicaDiskDatastoreId = &v
}

func (o FarmStorageSettingsUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FarmStorageSettingsUpdateSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["datastores"] = o.Datastores
	if !IsNil(o.ReplicaDiskDatastoreId) {
		toSerialize["replica_disk_datastore_id"] = o.ReplicaDiskDatastoreId
	}
	return toSerialize, nil
}

func (o *FarmStorageSettingsUpdateSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"datastores",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFarmStorageSettingsUpdateSpec := _FarmStorageSettingsUpdateSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFarmStorageSettingsUpdateSpec)

	if err != nil {
		return err
	}

	*o = FarmStorageSettingsUpdateSpec(varFarmStorageSettingsUpdateSpec)

	return err
}

type NullableFarmStorageSettingsUpdateSpec struct {
	value *FarmStorageSettingsUpdateSpec
	isSet bool
}

func (v NullableFarmStorageSettingsUpdateSpec) Get() *FarmStorageSettingsUpdateSpec {
	return v.value
}

func (v *NullableFarmStorageSettingsUpdateSpec) Set(val *FarmStorageSettingsUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableFarmStorageSettingsUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableFarmStorageSettingsUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFarmStorageSettingsUpdateSpec(val *FarmStorageSettingsUpdateSpec) *NullableFarmStorageSettingsUpdateSpec {
	return &NullableFarmStorageSettingsUpdateSpec{value: val, isSet: true}
}

func (v NullableFarmStorageSettingsUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFarmStorageSettingsUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


