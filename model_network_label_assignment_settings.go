/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the NetworkLabelAssignmentSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkLabelAssignmentSettings{}

// NetworkLabelAssignmentSettings Specification for an individual network label assignment, stipulating the label and how many times it may be assigned to machines with this spec.
type NetworkLabelAssignmentSettings struct {
	// Whether or not this specification is enabled. While this specification is disabled, automatic network label assigment for this desktop pool will skip over the network label in this spec.
	Enabled *bool `json:"enabled,omitempty"`
	// The maximum number of times this label can be assigned to a machine. Note this count only encompasses this spec. That is, this label may be used for other NICs and in other Desktop pools, but those assignments will not be counted towards this total. This count also does not include assignments of this label to machines not under the control of View.
	MaxLabel *int32 `json:"max_label,omitempty"`
	// This type specifies whether or not there is a maximum limit to the number of times this label may be assigned to machines within this spec. While this specification is enabled and unlimited, specs after this one in the NIC's network label specification list will never be used. * UNLIMITED: The network label assignment specification has no limit on the number of labels to assign. * LIMITED: The network label assignment specification has a limited number of labels to assign.
	MaxLabelType *string `json:"max_label_type,omitempty"`
	// The network label id for this spec. This network label must not have any incompatibility reasons that would preclude it from automatic machine assignment.
	NetworkLabelName *string `json:"network_label_name,omitempty"`
}

// NewNetworkLabelAssignmentSettings instantiates a new NetworkLabelAssignmentSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkLabelAssignmentSettings() *NetworkLabelAssignmentSettings {
	this := NetworkLabelAssignmentSettings{}
	return &this
}

// NewNetworkLabelAssignmentSettingsWithDefaults instantiates a new NetworkLabelAssignmentSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkLabelAssignmentSettingsWithDefaults() *NetworkLabelAssignmentSettings {
	this := NetworkLabelAssignmentSettings{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *NetworkLabelAssignmentSettings) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkLabelAssignmentSettings) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *NetworkLabelAssignmentSettings) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *NetworkLabelAssignmentSettings) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMaxLabel returns the MaxLabel field value if set, zero value otherwise.
func (o *NetworkLabelAssignmentSettings) GetMaxLabel() int32 {
	if o == nil || IsNil(o.MaxLabel) {
		var ret int32
		return ret
	}
	return *o.MaxLabel
}

// GetMaxLabelOk returns a tuple with the MaxLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkLabelAssignmentSettings) GetMaxLabelOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxLabel) {
		return nil, false
	}
	return o.MaxLabel, true
}

// HasMaxLabel returns a boolean if a field has been set.
func (o *NetworkLabelAssignmentSettings) HasMaxLabel() bool {
	if o != nil && !IsNil(o.MaxLabel) {
		return true
	}

	return false
}

// SetMaxLabel gets a reference to the given int32 and assigns it to the MaxLabel field.
func (o *NetworkLabelAssignmentSettings) SetMaxLabel(v int32) {
	o.MaxLabel = &v
}

// GetMaxLabelType returns the MaxLabelType field value if set, zero value otherwise.
func (o *NetworkLabelAssignmentSettings) GetMaxLabelType() string {
	if o == nil || IsNil(o.MaxLabelType) {
		var ret string
		return ret
	}
	return *o.MaxLabelType
}

// GetMaxLabelTypeOk returns a tuple with the MaxLabelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkLabelAssignmentSettings) GetMaxLabelTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MaxLabelType) {
		return nil, false
	}
	return o.MaxLabelType, true
}

// HasMaxLabelType returns a boolean if a field has been set.
func (o *NetworkLabelAssignmentSettings) HasMaxLabelType() bool {
	if o != nil && !IsNil(o.MaxLabelType) {
		return true
	}

	return false
}

// SetMaxLabelType gets a reference to the given string and assigns it to the MaxLabelType field.
func (o *NetworkLabelAssignmentSettings) SetMaxLabelType(v string) {
	o.MaxLabelType = &v
}

// GetNetworkLabelName returns the NetworkLabelName field value if set, zero value otherwise.
func (o *NetworkLabelAssignmentSettings) GetNetworkLabelName() string {
	if o == nil || IsNil(o.NetworkLabelName) {
		var ret string
		return ret
	}
	return *o.NetworkLabelName
}

// GetNetworkLabelNameOk returns a tuple with the NetworkLabelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkLabelAssignmentSettings) GetNetworkLabelNameOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkLabelName) {
		return nil, false
	}
	return o.NetworkLabelName, true
}

// HasNetworkLabelName returns a boolean if a field has been set.
func (o *NetworkLabelAssignmentSettings) HasNetworkLabelName() bool {
	if o != nil && !IsNil(o.NetworkLabelName) {
		return true
	}

	return false
}

// SetNetworkLabelName gets a reference to the given string and assigns it to the NetworkLabelName field.
func (o *NetworkLabelAssignmentSettings) SetNetworkLabelName(v string) {
	o.NetworkLabelName = &v
}

func (o NetworkLabelAssignmentSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkLabelAssignmentSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.MaxLabel) {
		toSerialize["max_label"] = o.MaxLabel
	}
	if !IsNil(o.MaxLabelType) {
		toSerialize["max_label_type"] = o.MaxLabelType
	}
	if !IsNil(o.NetworkLabelName) {
		toSerialize["network_label_name"] = o.NetworkLabelName
	}
	return toSerialize, nil
}

type NullableNetworkLabelAssignmentSettings struct {
	value *NetworkLabelAssignmentSettings
	isSet bool
}

func (v NullableNetworkLabelAssignmentSettings) Get() *NetworkLabelAssignmentSettings {
	return v.value
}

func (v *NullableNetworkLabelAssignmentSettings) Set(val *NetworkLabelAssignmentSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkLabelAssignmentSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkLabelAssignmentSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkLabelAssignmentSettings(val *NetworkLabelAssignmentSettings) *NullableNetworkLabelAssignmentSettings {
	return &NullableNetworkLabelAssignmentSettings{value: val, isSet: true}
}

func (v NullableNetworkLabelAssignmentSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkLabelAssignmentSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


