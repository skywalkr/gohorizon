/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HomeSiteResolutionSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HomeSiteResolutionSpec{}

// HomeSiteResolutionSpec Information required for home site resolution.<br>Only one of Global Desktop Entitlement ID and Global Application Entitlement ID may be set.
type HomeSiteResolutionSpec struct {
	// ID of the Global Application Entitlement this home site resolution is for.
	GlobalApplicationEntitlementId *string `json:"global_application_entitlement_id,omitempty"`
	// ID of the Global Desktop Entitlement this home site resolution is for.
	GlobalDesktopEntitlementId *string `json:"global_desktop_entitlement_id,omitempty"`
	// SID of the user for whom home site is to be resolved.
	UserId string `json:"user_id"`
}

type _HomeSiteResolutionSpec HomeSiteResolutionSpec

// NewHomeSiteResolutionSpec instantiates a new HomeSiteResolutionSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHomeSiteResolutionSpec(userId string) *HomeSiteResolutionSpec {
	this := HomeSiteResolutionSpec{}
	this.UserId = userId
	return &this
}

// NewHomeSiteResolutionSpecWithDefaults instantiates a new HomeSiteResolutionSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHomeSiteResolutionSpecWithDefaults() *HomeSiteResolutionSpec {
	this := HomeSiteResolutionSpec{}
	return &this
}

// GetGlobalApplicationEntitlementId returns the GlobalApplicationEntitlementId field value if set, zero value otherwise.
func (o *HomeSiteResolutionSpec) GetGlobalApplicationEntitlementId() string {
	if o == nil || IsNil(o.GlobalApplicationEntitlementId) {
		var ret string
		return ret
	}
	return *o.GlobalApplicationEntitlementId
}

// GetGlobalApplicationEntitlementIdOk returns a tuple with the GlobalApplicationEntitlementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HomeSiteResolutionSpec) GetGlobalApplicationEntitlementIdOk() (*string, bool) {
	if o == nil || IsNil(o.GlobalApplicationEntitlementId) {
		return nil, false
	}
	return o.GlobalApplicationEntitlementId, true
}

// HasGlobalApplicationEntitlementId returns a boolean if a field has been set.
func (o *HomeSiteResolutionSpec) HasGlobalApplicationEntitlementId() bool {
	if o != nil && !IsNil(o.GlobalApplicationEntitlementId) {
		return true
	}

	return false
}

// SetGlobalApplicationEntitlementId gets a reference to the given string and assigns it to the GlobalApplicationEntitlementId field.
func (o *HomeSiteResolutionSpec) SetGlobalApplicationEntitlementId(v string) {
	o.GlobalApplicationEntitlementId = &v
}

// GetGlobalDesktopEntitlementId returns the GlobalDesktopEntitlementId field value if set, zero value otherwise.
func (o *HomeSiteResolutionSpec) GetGlobalDesktopEntitlementId() string {
	if o == nil || IsNil(o.GlobalDesktopEntitlementId) {
		var ret string
		return ret
	}
	return *o.GlobalDesktopEntitlementId
}

// GetGlobalDesktopEntitlementIdOk returns a tuple with the GlobalDesktopEntitlementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HomeSiteResolutionSpec) GetGlobalDesktopEntitlementIdOk() (*string, bool) {
	if o == nil || IsNil(o.GlobalDesktopEntitlementId) {
		return nil, false
	}
	return o.GlobalDesktopEntitlementId, true
}

// HasGlobalDesktopEntitlementId returns a boolean if a field has been set.
func (o *HomeSiteResolutionSpec) HasGlobalDesktopEntitlementId() bool {
	if o != nil && !IsNil(o.GlobalDesktopEntitlementId) {
		return true
	}

	return false
}

// SetGlobalDesktopEntitlementId gets a reference to the given string and assigns it to the GlobalDesktopEntitlementId field.
func (o *HomeSiteResolutionSpec) SetGlobalDesktopEntitlementId(v string) {
	o.GlobalDesktopEntitlementId = &v
}

// GetUserId returns the UserId field value
func (o *HomeSiteResolutionSpec) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *HomeSiteResolutionSpec) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *HomeSiteResolutionSpec) SetUserId(v string) {
	o.UserId = v
}

func (o HomeSiteResolutionSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HomeSiteResolutionSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GlobalApplicationEntitlementId) {
		toSerialize["global_application_entitlement_id"] = o.GlobalApplicationEntitlementId
	}
	if !IsNil(o.GlobalDesktopEntitlementId) {
		toSerialize["global_desktop_entitlement_id"] = o.GlobalDesktopEntitlementId
	}
	toSerialize["user_id"] = o.UserId
	return toSerialize, nil
}

func (o *HomeSiteResolutionSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHomeSiteResolutionSpec := _HomeSiteResolutionSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHomeSiteResolutionSpec)

	if err != nil {
		return err
	}

	*o = HomeSiteResolutionSpec(varHomeSiteResolutionSpec)

	return err
}

type NullableHomeSiteResolutionSpec struct {
	value *HomeSiteResolutionSpec
	isSet bool
}

func (v NullableHomeSiteResolutionSpec) Get() *HomeSiteResolutionSpec {
	return v.value
}

func (v *NullableHomeSiteResolutionSpec) Set(val *HomeSiteResolutionSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableHomeSiteResolutionSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableHomeSiteResolutionSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHomeSiteResolutionSpec(val *HomeSiteResolutionSpec) *NullableHomeSiteResolutionSpec {
	return &NullableHomeSiteResolutionSpec{value: val, isSet: true}
}

func (v NullableHomeSiteResolutionSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHomeSiteResolutionSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


