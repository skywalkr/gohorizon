/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CertificateSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateSpec{}

// CertificateSpec Certificate spec for importing ssl certificate to connection server's personal store.
type CertificateSpec struct {
	// Certificate chain.
	CertificateChain string `json:"certificate_chain" validate:"regexp=^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$"`
	// Password for pfx certificate type.
	CertificatePassword []string `json:"certificate_password,omitempty"`
	// Indicates the type of certificate based on usage. * MACHINE: vdm certificates
	CertificateUsage string `json:"certificate_usage"`
	// Certificate Type.
	Format string `json:"format"`
}

type _CertificateSpec CertificateSpec

// NewCertificateSpec instantiates a new CertificateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateSpec(certificateChain string, certificateUsage string, format string) *CertificateSpec {
	this := CertificateSpec{}
	this.CertificateChain = certificateChain
	this.CertificateUsage = certificateUsage
	this.Format = format
	return &this
}

// NewCertificateSpecWithDefaults instantiates a new CertificateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateSpecWithDefaults() *CertificateSpec {
	this := CertificateSpec{}
	return &this
}

// GetCertificateChain returns the CertificateChain field value
func (o *CertificateSpec) GetCertificateChain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CertificateChain
}

// GetCertificateChainOk returns a tuple with the CertificateChain field value
// and a boolean to check if the value has been set.
func (o *CertificateSpec) GetCertificateChainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertificateChain, true
}

// SetCertificateChain sets field value
func (o *CertificateSpec) SetCertificateChain(v string) {
	o.CertificateChain = v
}

// GetCertificatePassword returns the CertificatePassword field value if set, zero value otherwise.
func (o *CertificateSpec) GetCertificatePassword() []string {
	if o == nil || IsNil(o.CertificatePassword) {
		var ret []string
		return ret
	}
	return o.CertificatePassword
}

// GetCertificatePasswordOk returns a tuple with the CertificatePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateSpec) GetCertificatePasswordOk() ([]string, bool) {
	if o == nil || IsNil(o.CertificatePassword) {
		return nil, false
	}
	return o.CertificatePassword, true
}

// HasCertificatePassword returns a boolean if a field has been set.
func (o *CertificateSpec) HasCertificatePassword() bool {
	if o != nil && !IsNil(o.CertificatePassword) {
		return true
	}

	return false
}

// SetCertificatePassword gets a reference to the given []string and assigns it to the CertificatePassword field.
func (o *CertificateSpec) SetCertificatePassword(v []string) {
	o.CertificatePassword = v
}

// GetCertificateUsage returns the CertificateUsage field value
func (o *CertificateSpec) GetCertificateUsage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CertificateUsage
}

// GetCertificateUsageOk returns a tuple with the CertificateUsage field value
// and a boolean to check if the value has been set.
func (o *CertificateSpec) GetCertificateUsageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertificateUsage, true
}

// SetCertificateUsage sets field value
func (o *CertificateSpec) SetCertificateUsage(v string) {
	o.CertificateUsage = v
}

// GetFormat returns the Format field value
func (o *CertificateSpec) GetFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Format
}

// GetFormatOk returns a tuple with the Format field value
// and a boolean to check if the value has been set.
func (o *CertificateSpec) GetFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Format, true
}

// SetFormat sets field value
func (o *CertificateSpec) SetFormat(v string) {
	o.Format = v
}

func (o CertificateSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["certificate_chain"] = o.CertificateChain
	if !IsNil(o.CertificatePassword) {
		toSerialize["certificate_password"] = o.CertificatePassword
	}
	toSerialize["certificate_usage"] = o.CertificateUsage
	toSerialize["format"] = o.Format
	return toSerialize, nil
}

func (o *CertificateSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"certificate_chain",
		"certificate_usage",
		"format",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCertificateSpec := _CertificateSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCertificateSpec)

	if err != nil {
		return err
	}

	*o = CertificateSpec(varCertificateSpec)

	return err
}

type NullableCertificateSpec struct {
	value *CertificateSpec
	isSet bool
}

func (v NullableCertificateSpec) Get() *CertificateSpec {
	return v.value
}

func (v *NullableCertificateSpec) Set(val *CertificateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateSpec(val *CertificateSpec) *NullableCertificateSpec {
	return &NullableCertificateSpec{value: val, isSet: true}
}

func (v NullableCertificateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


