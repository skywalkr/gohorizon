/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the HostOrClusterContainer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostOrClusterContainer{}

// HostOrClusterContainer Details of the host or cluster container node.
type HostOrClusterContainer struct {
	// Contents of the container. These may be hosts or clusters or further nested containers.
	Children []HostOrClusterInfo `json:"children,omitempty"`
	// Host or cluster container node display name.
	Name *string `json:"name,omitempty"`
	// Host or cluster container node path.
	Path *string `json:"path,omitempty"`
	// Type of container. * FOLDER: A folder container. * OTHER: Other container type.
	Type *string `json:"type,omitempty"`
}

// NewHostOrClusterContainer instantiates a new HostOrClusterContainer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostOrClusterContainer() *HostOrClusterContainer {
	this := HostOrClusterContainer{}
	return &this
}

// NewHostOrClusterContainerWithDefaults instantiates a new HostOrClusterContainer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostOrClusterContainerWithDefaults() *HostOrClusterContainer {
	this := HostOrClusterContainer{}
	return &this
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *HostOrClusterContainer) GetChildren() []HostOrClusterInfo {
	if o == nil || IsNil(o.Children) {
		var ret []HostOrClusterInfo
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostOrClusterContainer) GetChildrenOk() ([]HostOrClusterInfo, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *HostOrClusterContainer) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []HostOrClusterInfo and assigns it to the Children field.
func (o *HostOrClusterContainer) SetChildren(v []HostOrClusterInfo) {
	o.Children = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HostOrClusterContainer) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostOrClusterContainer) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HostOrClusterContainer) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *HostOrClusterContainer) SetName(v string) {
	o.Name = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *HostOrClusterContainer) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostOrClusterContainer) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *HostOrClusterContainer) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *HostOrClusterContainer) SetPath(v string) {
	o.Path = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *HostOrClusterContainer) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostOrClusterContainer) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *HostOrClusterContainer) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *HostOrClusterContainer) SetType(v string) {
	o.Type = &v
}

func (o HostOrClusterContainer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HostOrClusterContainer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableHostOrClusterContainer struct {
	value *HostOrClusterContainer
	isSet bool
}

func (v NullableHostOrClusterContainer) Get() *HostOrClusterContainer {
	return v.value
}

func (v *NullableHostOrClusterContainer) Set(val *HostOrClusterContainer) {
	v.value = val
	v.isSet = true
}

func (v NullableHostOrClusterContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableHostOrClusterContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostOrClusterContainer(val *HostOrClusterContainer) *NullableHostOrClusterContainer {
	return &NullableHostOrClusterContainer{value: val, isSet: true}
}

func (v NullableHostOrClusterContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostOrClusterContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


