/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2111
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// HomeSiteResolutionInfo Information related to home site resolution for a user and a global entitlement.<br>Only one of Global Desktop Entitlement ID and Global Application Entitlement ID will be set.<br>Resolution Data will only be available if home site configuration exists for the global entitlement.
type HomeSiteResolutionInfo struct {
	// ID of the Global Application Entitlement this home site resolution is for.
	GlobalApplicationEntitlementId *string `json:"global_application_entitlement_id,omitempty"`
	// ID of the Global Desktop Entitlement this home site resolution is for.
	GlobalDesktopEntitlementId *string `json:"global_desktop_entitlement_id,omitempty"`
	// Home Site Resolution Data for this Global Entitlement.
	ResolutionData *[]HomeSiteResolutionData `json:"resolution_data,omitempty"`
}

// NewHomeSiteResolutionInfo instantiates a new HomeSiteResolutionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHomeSiteResolutionInfo() *HomeSiteResolutionInfo {
	this := HomeSiteResolutionInfo{}
	return &this
}

// NewHomeSiteResolutionInfoWithDefaults instantiates a new HomeSiteResolutionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHomeSiteResolutionInfoWithDefaults() *HomeSiteResolutionInfo {
	this := HomeSiteResolutionInfo{}
	return &this
}

// GetGlobalApplicationEntitlementId returns the GlobalApplicationEntitlementId field value if set, zero value otherwise.
func (o *HomeSiteResolutionInfo) GetGlobalApplicationEntitlementId() string {
	if o == nil || o.GlobalApplicationEntitlementId == nil {
		var ret string
		return ret
	}
	return *o.GlobalApplicationEntitlementId
}

// GetGlobalApplicationEntitlementIdOk returns a tuple with the GlobalApplicationEntitlementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HomeSiteResolutionInfo) GetGlobalApplicationEntitlementIdOk() (*string, bool) {
	if o == nil || o.GlobalApplicationEntitlementId == nil {
		return nil, false
	}
	return o.GlobalApplicationEntitlementId, true
}

// HasGlobalApplicationEntitlementId returns a boolean if a field has been set.
func (o *HomeSiteResolutionInfo) HasGlobalApplicationEntitlementId() bool {
	if o != nil && o.GlobalApplicationEntitlementId != nil {
		return true
	}

	return false
}

// SetGlobalApplicationEntitlementId gets a reference to the given string and assigns it to the GlobalApplicationEntitlementId field.
func (o *HomeSiteResolutionInfo) SetGlobalApplicationEntitlementId(v string) {
	o.GlobalApplicationEntitlementId = &v
}

// GetGlobalDesktopEntitlementId returns the GlobalDesktopEntitlementId field value if set, zero value otherwise.
func (o *HomeSiteResolutionInfo) GetGlobalDesktopEntitlementId() string {
	if o == nil || o.GlobalDesktopEntitlementId == nil {
		var ret string
		return ret
	}
	return *o.GlobalDesktopEntitlementId
}

// GetGlobalDesktopEntitlementIdOk returns a tuple with the GlobalDesktopEntitlementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HomeSiteResolutionInfo) GetGlobalDesktopEntitlementIdOk() (*string, bool) {
	if o == nil || o.GlobalDesktopEntitlementId == nil {
		return nil, false
	}
	return o.GlobalDesktopEntitlementId, true
}

// HasGlobalDesktopEntitlementId returns a boolean if a field has been set.
func (o *HomeSiteResolutionInfo) HasGlobalDesktopEntitlementId() bool {
	if o != nil && o.GlobalDesktopEntitlementId != nil {
		return true
	}

	return false
}

// SetGlobalDesktopEntitlementId gets a reference to the given string and assigns it to the GlobalDesktopEntitlementId field.
func (o *HomeSiteResolutionInfo) SetGlobalDesktopEntitlementId(v string) {
	o.GlobalDesktopEntitlementId = &v
}

// GetResolutionData returns the ResolutionData field value if set, zero value otherwise.
func (o *HomeSiteResolutionInfo) GetResolutionData() []HomeSiteResolutionData {
	if o == nil || o.ResolutionData == nil {
		var ret []HomeSiteResolutionData
		return ret
	}
	return *o.ResolutionData
}

// GetResolutionDataOk returns a tuple with the ResolutionData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HomeSiteResolutionInfo) GetResolutionDataOk() (*[]HomeSiteResolutionData, bool) {
	if o == nil || o.ResolutionData == nil {
		return nil, false
	}
	return o.ResolutionData, true
}

// HasResolutionData returns a boolean if a field has been set.
func (o *HomeSiteResolutionInfo) HasResolutionData() bool {
	if o != nil && o.ResolutionData != nil {
		return true
	}

	return false
}

// SetResolutionData gets a reference to the given []HomeSiteResolutionData and assigns it to the ResolutionData field.
func (o *HomeSiteResolutionInfo) SetResolutionData(v []HomeSiteResolutionData) {
	o.ResolutionData = &v
}

func (o HomeSiteResolutionInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GlobalApplicationEntitlementId != nil {
		toSerialize["global_application_entitlement_id"] = o.GlobalApplicationEntitlementId
	}
	if o.GlobalDesktopEntitlementId != nil {
		toSerialize["global_desktop_entitlement_id"] = o.GlobalDesktopEntitlementId
	}
	if o.ResolutionData != nil {
		toSerialize["resolution_data"] = o.ResolutionData
	}
	return json.Marshal(toSerialize)
}

type NullableHomeSiteResolutionInfo struct {
	value *HomeSiteResolutionInfo
	isSet bool
}

func (v NullableHomeSiteResolutionInfo) Get() *HomeSiteResolutionInfo {
	return v.value
}

func (v *NullableHomeSiteResolutionInfo) Set(val *HomeSiteResolutionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableHomeSiteResolutionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableHomeSiteResolutionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHomeSiteResolutionInfo(val *HomeSiteResolutionInfo) *NullableHomeSiteResolutionInfo {
	return &NullableHomeSiteResolutionInfo{value: val, isSet: true}
}

func (v NullableHomeSiteResolutionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHomeSiteResolutionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
