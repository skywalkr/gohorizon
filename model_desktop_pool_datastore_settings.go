/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// DesktopPoolDatastoreSettings Settings for a Virtual Center datastore.
type DesktopPoolDatastoreSettings struct {
	// Id of the datastore.
	DatastoreId *string `json:"datastore_id,omitempty"`
	// Whether datastore represents a Storage DRS cluster.
	SdrsCluster *bool `json:"sdrs_cluster,omitempty"`
	// Storage overcommit determines how Horizon places new machines on the selected datastores. With an aggressive overcommit level, Horizon reserves less space for sparse disk growth, but fits more machines on the datastore. * NONE: No overcommit. * CONSERVATIVE: Conservative. * MODERATE: Moderate. * AGGRESSIVE: Aggressive. * UNBOUNDED: Unbounded.
	StorageOvercommit *string `json:"storage_overcommit,omitempty"`
}

// NewDesktopPoolDatastoreSettings instantiates a new DesktopPoolDatastoreSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDesktopPoolDatastoreSettings() *DesktopPoolDatastoreSettings {
	this := DesktopPoolDatastoreSettings{}
	return &this
}

// NewDesktopPoolDatastoreSettingsWithDefaults instantiates a new DesktopPoolDatastoreSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDesktopPoolDatastoreSettingsWithDefaults() *DesktopPoolDatastoreSettings {
	this := DesktopPoolDatastoreSettings{}
	return &this
}

// GetDatastoreId returns the DatastoreId field value if set, zero value otherwise.
func (o *DesktopPoolDatastoreSettings) GetDatastoreId() string {
	if o == nil || o.DatastoreId == nil {
		var ret string
		return ret
	}
	return *o.DatastoreId
}

// GetDatastoreIdOk returns a tuple with the DatastoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolDatastoreSettings) GetDatastoreIdOk() (*string, bool) {
	if o == nil || o.DatastoreId == nil {
		return nil, false
	}
	return o.DatastoreId, true
}

// HasDatastoreId returns a boolean if a field has been set.
func (o *DesktopPoolDatastoreSettings) HasDatastoreId() bool {
	if o != nil && o.DatastoreId != nil {
		return true
	}

	return false
}

// SetDatastoreId gets a reference to the given string and assigns it to the DatastoreId field.
func (o *DesktopPoolDatastoreSettings) SetDatastoreId(v string) {
	o.DatastoreId = &v
}

// GetSdrsCluster returns the SdrsCluster field value if set, zero value otherwise.
func (o *DesktopPoolDatastoreSettings) GetSdrsCluster() bool {
	if o == nil || o.SdrsCluster == nil {
		var ret bool
		return ret
	}
	return *o.SdrsCluster
}

// GetSdrsClusterOk returns a tuple with the SdrsCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolDatastoreSettings) GetSdrsClusterOk() (*bool, bool) {
	if o == nil || o.SdrsCluster == nil {
		return nil, false
	}
	return o.SdrsCluster, true
}

// HasSdrsCluster returns a boolean if a field has been set.
func (o *DesktopPoolDatastoreSettings) HasSdrsCluster() bool {
	if o != nil && o.SdrsCluster != nil {
		return true
	}

	return false
}

// SetSdrsCluster gets a reference to the given bool and assigns it to the SdrsCluster field.
func (o *DesktopPoolDatastoreSettings) SetSdrsCluster(v bool) {
	o.SdrsCluster = &v
}

// GetStorageOvercommit returns the StorageOvercommit field value if set, zero value otherwise.
func (o *DesktopPoolDatastoreSettings) GetStorageOvercommit() string {
	if o == nil || o.StorageOvercommit == nil {
		var ret string
		return ret
	}
	return *o.StorageOvercommit
}

// GetStorageOvercommitOk returns a tuple with the StorageOvercommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolDatastoreSettings) GetStorageOvercommitOk() (*string, bool) {
	if o == nil || o.StorageOvercommit == nil {
		return nil, false
	}
	return o.StorageOvercommit, true
}

// HasStorageOvercommit returns a boolean if a field has been set.
func (o *DesktopPoolDatastoreSettings) HasStorageOvercommit() bool {
	if o != nil && o.StorageOvercommit != nil {
		return true
	}

	return false
}

// SetStorageOvercommit gets a reference to the given string and assigns it to the StorageOvercommit field.
func (o *DesktopPoolDatastoreSettings) SetStorageOvercommit(v string) {
	o.StorageOvercommit = &v
}

func (o DesktopPoolDatastoreSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DatastoreId != nil {
		toSerialize["datastore_id"] = o.DatastoreId
	}
	if o.SdrsCluster != nil {
		toSerialize["sdrs_cluster"] = o.SdrsCluster
	}
	if o.StorageOvercommit != nil {
		toSerialize["storage_overcommit"] = o.StorageOvercommit
	}
	return json.Marshal(toSerialize)
}

type NullableDesktopPoolDatastoreSettings struct {
	value *DesktopPoolDatastoreSettings
	isSet bool
}

func (v NullableDesktopPoolDatastoreSettings) Get() *DesktopPoolDatastoreSettings {
	return v.value
}

func (v *NullableDesktopPoolDatastoreSettings) Set(val *DesktopPoolDatastoreSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableDesktopPoolDatastoreSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableDesktopPoolDatastoreSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDesktopPoolDatastoreSettings(val *DesktopPoolDatastoreSettings) *NullableDesktopPoolDatastoreSettings {
	return &NullableDesktopPoolDatastoreSettings{value: val, isSet: true}
}

func (v NullableDesktopPoolDatastoreSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDesktopPoolDatastoreSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
