/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the AppVolumesApplicationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppVolumesApplicationInfo{}

// AppVolumesApplicationInfo Information about the application available in App volumes Manager.
type AppVolumesApplicationInfo struct {
	// Shortcut ID of AVM managed application.
	AvmShortcutId *string `json:"avm_shortcut_id,omitempty"`
	// Path to application executable.
	ExecutablePath *string `json:"executable_path,omitempty"`
	// Set of file types reported by the application as supported. If unset, this application does not present any file type support.
	FileTypes []ApplicationFileTypeData `json:"file_types,omitempty"`
	// Application name information, as sent by RDSServer/machine during application discovery.
	Name *string `json:"name,omitempty"`
	// This represents the different file types reported by Application that can be passed from horizon agent to horizon client via connection server. If unset, this application does not present any other file type support.
	OtherFileTypes []ApplicationOtherFileTypeData `json:"other_file_types,omitempty"`
	// Application publisher
	Publisher *string `json:"publisher,omitempty"`
	// Application version.
	Version *string `json:"version,omitempty"`
}

// NewAppVolumesApplicationInfo instantiates a new AppVolumesApplicationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppVolumesApplicationInfo() *AppVolumesApplicationInfo {
	this := AppVolumesApplicationInfo{}
	return &this
}

// NewAppVolumesApplicationInfoWithDefaults instantiates a new AppVolumesApplicationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppVolumesApplicationInfoWithDefaults() *AppVolumesApplicationInfo {
	this := AppVolumesApplicationInfo{}
	return &this
}

// GetAvmShortcutId returns the AvmShortcutId field value if set, zero value otherwise.
func (o *AppVolumesApplicationInfo) GetAvmShortcutId() string {
	if o == nil || IsNil(o.AvmShortcutId) {
		var ret string
		return ret
	}
	return *o.AvmShortcutId
}

// GetAvmShortcutIdOk returns a tuple with the AvmShortcutId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppVolumesApplicationInfo) GetAvmShortcutIdOk() (*string, bool) {
	if o == nil || IsNil(o.AvmShortcutId) {
		return nil, false
	}
	return o.AvmShortcutId, true
}

// HasAvmShortcutId returns a boolean if a field has been set.
func (o *AppVolumesApplicationInfo) HasAvmShortcutId() bool {
	if o != nil && !IsNil(o.AvmShortcutId) {
		return true
	}

	return false
}

// SetAvmShortcutId gets a reference to the given string and assigns it to the AvmShortcutId field.
func (o *AppVolumesApplicationInfo) SetAvmShortcutId(v string) {
	o.AvmShortcutId = &v
}

// GetExecutablePath returns the ExecutablePath field value if set, zero value otherwise.
func (o *AppVolumesApplicationInfo) GetExecutablePath() string {
	if o == nil || IsNil(o.ExecutablePath) {
		var ret string
		return ret
	}
	return *o.ExecutablePath
}

// GetExecutablePathOk returns a tuple with the ExecutablePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppVolumesApplicationInfo) GetExecutablePathOk() (*string, bool) {
	if o == nil || IsNil(o.ExecutablePath) {
		return nil, false
	}
	return o.ExecutablePath, true
}

// HasExecutablePath returns a boolean if a field has been set.
func (o *AppVolumesApplicationInfo) HasExecutablePath() bool {
	if o != nil && !IsNil(o.ExecutablePath) {
		return true
	}

	return false
}

// SetExecutablePath gets a reference to the given string and assigns it to the ExecutablePath field.
func (o *AppVolumesApplicationInfo) SetExecutablePath(v string) {
	o.ExecutablePath = &v
}

// GetFileTypes returns the FileTypes field value if set, zero value otherwise.
func (o *AppVolumesApplicationInfo) GetFileTypes() []ApplicationFileTypeData {
	if o == nil || IsNil(o.FileTypes) {
		var ret []ApplicationFileTypeData
		return ret
	}
	return o.FileTypes
}

// GetFileTypesOk returns a tuple with the FileTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppVolumesApplicationInfo) GetFileTypesOk() ([]ApplicationFileTypeData, bool) {
	if o == nil || IsNil(o.FileTypes) {
		return nil, false
	}
	return o.FileTypes, true
}

// HasFileTypes returns a boolean if a field has been set.
func (o *AppVolumesApplicationInfo) HasFileTypes() bool {
	if o != nil && !IsNil(o.FileTypes) {
		return true
	}

	return false
}

// SetFileTypes gets a reference to the given []ApplicationFileTypeData and assigns it to the FileTypes field.
func (o *AppVolumesApplicationInfo) SetFileTypes(v []ApplicationFileTypeData) {
	o.FileTypes = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AppVolumesApplicationInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppVolumesApplicationInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AppVolumesApplicationInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AppVolumesApplicationInfo) SetName(v string) {
	o.Name = &v
}

// GetOtherFileTypes returns the OtherFileTypes field value if set, zero value otherwise.
func (o *AppVolumesApplicationInfo) GetOtherFileTypes() []ApplicationOtherFileTypeData {
	if o == nil || IsNil(o.OtherFileTypes) {
		var ret []ApplicationOtherFileTypeData
		return ret
	}
	return o.OtherFileTypes
}

// GetOtherFileTypesOk returns a tuple with the OtherFileTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppVolumesApplicationInfo) GetOtherFileTypesOk() ([]ApplicationOtherFileTypeData, bool) {
	if o == nil || IsNil(o.OtherFileTypes) {
		return nil, false
	}
	return o.OtherFileTypes, true
}

// HasOtherFileTypes returns a boolean if a field has been set.
func (o *AppVolumesApplicationInfo) HasOtherFileTypes() bool {
	if o != nil && !IsNil(o.OtherFileTypes) {
		return true
	}

	return false
}

// SetOtherFileTypes gets a reference to the given []ApplicationOtherFileTypeData and assigns it to the OtherFileTypes field.
func (o *AppVolumesApplicationInfo) SetOtherFileTypes(v []ApplicationOtherFileTypeData) {
	o.OtherFileTypes = v
}

// GetPublisher returns the Publisher field value if set, zero value otherwise.
func (o *AppVolumesApplicationInfo) GetPublisher() string {
	if o == nil || IsNil(o.Publisher) {
		var ret string
		return ret
	}
	return *o.Publisher
}

// GetPublisherOk returns a tuple with the Publisher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppVolumesApplicationInfo) GetPublisherOk() (*string, bool) {
	if o == nil || IsNil(o.Publisher) {
		return nil, false
	}
	return o.Publisher, true
}

// HasPublisher returns a boolean if a field has been set.
func (o *AppVolumesApplicationInfo) HasPublisher() bool {
	if o != nil && !IsNil(o.Publisher) {
		return true
	}

	return false
}

// SetPublisher gets a reference to the given string and assigns it to the Publisher field.
func (o *AppVolumesApplicationInfo) SetPublisher(v string) {
	o.Publisher = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AppVolumesApplicationInfo) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppVolumesApplicationInfo) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *AppVolumesApplicationInfo) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *AppVolumesApplicationInfo) SetVersion(v string) {
	o.Version = &v
}

func (o AppVolumesApplicationInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppVolumesApplicationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AvmShortcutId) {
		toSerialize["avm_shortcut_id"] = o.AvmShortcutId
	}
	if !IsNil(o.ExecutablePath) {
		toSerialize["executable_path"] = o.ExecutablePath
	}
	if !IsNil(o.FileTypes) {
		toSerialize["file_types"] = o.FileTypes
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OtherFileTypes) {
		toSerialize["other_file_types"] = o.OtherFileTypes
	}
	if !IsNil(o.Publisher) {
		toSerialize["publisher"] = o.Publisher
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableAppVolumesApplicationInfo struct {
	value *AppVolumesApplicationInfo
	isSet bool
}

func (v NullableAppVolumesApplicationInfo) Get() *AppVolumesApplicationInfo {
	return v.value
}

func (v *NullableAppVolumesApplicationInfo) Set(val *AppVolumesApplicationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAppVolumesApplicationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAppVolumesApplicationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppVolumesApplicationInfo(val *AppVolumesApplicationInfo) *NullableAppVolumesApplicationInfo {
	return &NullableAppVolumesApplicationInfo{value: val, isSet: true}
}

func (v NullableAppVolumesApplicationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppVolumesApplicationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


