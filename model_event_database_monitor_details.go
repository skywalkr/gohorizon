/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2111
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// EventDatabaseMonitorDetails struct for EventDatabaseMonitorDetails
type EventDatabaseMonitorDetails struct {
	// The name of the database.
	DatabaseName *string `json:"database_name,omitempty"`
	// The port of the database server.
	Port *int32 `json:"port,omitempty"`
	// The prefix for event tables in the database.
	Prefix *string `json:"prefix,omitempty"`
	// The name or ip address of the database server.
	ServerName *string `json:"server_name,omitempty"`
	// The type of the database. * ORACLE: An Oracle database. * SQL_SERVER: A SQL server database. * POSTGRESQL: A PostgreSQL database.
	Type *string `json:"type,omitempty"`
	// The username used to connect to the database.
	UserName *string `json:"user_name,omitempty"`
}

// NewEventDatabaseMonitorDetails instantiates a new EventDatabaseMonitorDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventDatabaseMonitorDetails() *EventDatabaseMonitorDetails {
	this := EventDatabaseMonitorDetails{}
	return &this
}

// NewEventDatabaseMonitorDetailsWithDefaults instantiates a new EventDatabaseMonitorDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventDatabaseMonitorDetailsWithDefaults() *EventDatabaseMonitorDetails {
	this := EventDatabaseMonitorDetails{}
	return &this
}

// GetDatabaseName returns the DatabaseName field value if set, zero value otherwise.
func (o *EventDatabaseMonitorDetails) GetDatabaseName() string {
	if o == nil || o.DatabaseName == nil {
		var ret string
		return ret
	}
	return *o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDatabaseMonitorDetails) GetDatabaseNameOk() (*string, bool) {
	if o == nil || o.DatabaseName == nil {
		return nil, false
	}
	return o.DatabaseName, true
}

// HasDatabaseName returns a boolean if a field has been set.
func (o *EventDatabaseMonitorDetails) HasDatabaseName() bool {
	if o != nil && o.DatabaseName != nil {
		return true
	}

	return false
}

// SetDatabaseName gets a reference to the given string and assigns it to the DatabaseName field.
func (o *EventDatabaseMonitorDetails) SetDatabaseName(v string) {
	o.DatabaseName = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *EventDatabaseMonitorDetails) GetPort() int32 {
	if o == nil || o.Port == nil {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDatabaseMonitorDetails) GetPortOk() (*int32, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *EventDatabaseMonitorDetails) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *EventDatabaseMonitorDetails) SetPort(v int32) {
	o.Port = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *EventDatabaseMonitorDetails) GetPrefix() string {
	if o == nil || o.Prefix == nil {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDatabaseMonitorDetails) GetPrefixOk() (*string, bool) {
	if o == nil || o.Prefix == nil {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *EventDatabaseMonitorDetails) HasPrefix() bool {
	if o != nil && o.Prefix != nil {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *EventDatabaseMonitorDetails) SetPrefix(v string) {
	o.Prefix = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *EventDatabaseMonitorDetails) GetServerName() string {
	if o == nil || o.ServerName == nil {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDatabaseMonitorDetails) GetServerNameOk() (*string, bool) {
	if o == nil || o.ServerName == nil {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *EventDatabaseMonitorDetails) HasServerName() bool {
	if o != nil && o.ServerName != nil {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *EventDatabaseMonitorDetails) SetServerName(v string) {
	o.ServerName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EventDatabaseMonitorDetails) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDatabaseMonitorDetails) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EventDatabaseMonitorDetails) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EventDatabaseMonitorDetails) SetType(v string) {
	o.Type = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *EventDatabaseMonitorDetails) GetUserName() string {
	if o == nil || o.UserName == nil {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDatabaseMonitorDetails) GetUserNameOk() (*string, bool) {
	if o == nil || o.UserName == nil {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *EventDatabaseMonitorDetails) HasUserName() bool {
	if o != nil && o.UserName != nil {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *EventDatabaseMonitorDetails) SetUserName(v string) {
	o.UserName = &v
}

func (o EventDatabaseMonitorDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DatabaseName != nil {
		toSerialize["database_name"] = o.DatabaseName
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if o.Prefix != nil {
		toSerialize["prefix"] = o.Prefix
	}
	if o.ServerName != nil {
		toSerialize["server_name"] = o.ServerName
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.UserName != nil {
		toSerialize["user_name"] = o.UserName
	}
	return json.Marshal(toSerialize)
}

type NullableEventDatabaseMonitorDetails struct {
	value *EventDatabaseMonitorDetails
	isSet bool
}

func (v NullableEventDatabaseMonitorDetails) Get() *EventDatabaseMonitorDetails {
	return v.value
}

func (v *NullableEventDatabaseMonitorDetails) Set(val *EventDatabaseMonitorDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableEventDatabaseMonitorDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableEventDatabaseMonitorDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventDatabaseMonitorDetails(val *EventDatabaseMonitorDetails) *NullableEventDatabaseMonitorDetails {
	return &NullableEventDatabaseMonitorDetails{value: val, isSet: true}
}

func (v NullableEventDatabaseMonitorDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventDatabaseMonitorDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
