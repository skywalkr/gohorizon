/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the VirtualMachineInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualMachineInfo{}

// VirtualMachineInfo Information related to a Virtual Machine.
type VirtualMachineInfo struct {
	// Hardware version for this VM.
	HardwareVersion *int32 `json:"hardware_version,omitempty"`
	// Unique ID representing a VM.
	Id *string `json:"id,omitempty"`
	// Reasons that may preclude this Virtual Machine from having its snapshots used in linked or instant clone desktop or farm.
	IncompatibleReasons []string `json:"incompatible_reasons,omitempty"`
	// VM name.
	Name *string `json:"name,omitempty"`
	// Operating system. * UNKNOWN: Unknown * WINDOWS_XP: Windows XP * WINDOWS_VISTA: Windows Vista * WINDOWS_7: Windows 7 * WINDOWS_8: Windows 8 * WINDOWS_10: Windows 10 * WINDOWS_11: Windows 11 * WINDOWS_SERVER_2003: Windows Server 2003 * WINDOWS_SERVER_2008: Windows Server 2008 * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2 * WINDOWS_SERVER_2012: Windows Server 2012 * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2 * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above * LINUX_OTHER: Linux (other) * LINUX_SERVER_OTHER: Linux server (other) * LINUX_UBUNTU: Linux (Ubuntu) * LINUX_RHEL: Linux (Red Hat Enterprise) * LINUX_SUSE: Linux (Suse) * LINUX_CENTOS: Linux (CentOS)
	OperatingSystem *string `json:"operating_system,omitempty"`
	// Operating system display name from Virtual Center.
	OperatingSystemDisplayName *string `json:"operating_system_display_name,omitempty"`
	// VM path.
	Path *string `json:"path,omitempty"`
	// Virtual GPU type.
	VGputype *string `json:"v_gputype,omitempty"`
}

// NewVirtualMachineInfo instantiates a new VirtualMachineInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualMachineInfo() *VirtualMachineInfo {
	this := VirtualMachineInfo{}
	return &this
}

// NewVirtualMachineInfoWithDefaults instantiates a new VirtualMachineInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualMachineInfoWithDefaults() *VirtualMachineInfo {
	this := VirtualMachineInfo{}
	return &this
}

// GetHardwareVersion returns the HardwareVersion field value if set, zero value otherwise.
func (o *VirtualMachineInfo) GetHardwareVersion() int32 {
	if o == nil || IsNil(o.HardwareVersion) {
		var ret int32
		return ret
	}
	return *o.HardwareVersion
}

// GetHardwareVersionOk returns a tuple with the HardwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMachineInfo) GetHardwareVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.HardwareVersion) {
		return nil, false
	}
	return o.HardwareVersion, true
}

// HasHardwareVersion returns a boolean if a field has been set.
func (o *VirtualMachineInfo) HasHardwareVersion() bool {
	if o != nil && !IsNil(o.HardwareVersion) {
		return true
	}

	return false
}

// SetHardwareVersion gets a reference to the given int32 and assigns it to the HardwareVersion field.
func (o *VirtualMachineInfo) SetHardwareVersion(v int32) {
	o.HardwareVersion = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VirtualMachineInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMachineInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VirtualMachineInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VirtualMachineInfo) SetId(v string) {
	o.Id = &v
}

// GetIncompatibleReasons returns the IncompatibleReasons field value if set, zero value otherwise.
func (o *VirtualMachineInfo) GetIncompatibleReasons() []string {
	if o == nil || IsNil(o.IncompatibleReasons) {
		var ret []string
		return ret
	}
	return o.IncompatibleReasons
}

// GetIncompatibleReasonsOk returns a tuple with the IncompatibleReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMachineInfo) GetIncompatibleReasonsOk() ([]string, bool) {
	if o == nil || IsNil(o.IncompatibleReasons) {
		return nil, false
	}
	return o.IncompatibleReasons, true
}

// HasIncompatibleReasons returns a boolean if a field has been set.
func (o *VirtualMachineInfo) HasIncompatibleReasons() bool {
	if o != nil && !IsNil(o.IncompatibleReasons) {
		return true
	}

	return false
}

// SetIncompatibleReasons gets a reference to the given []string and assigns it to the IncompatibleReasons field.
func (o *VirtualMachineInfo) SetIncompatibleReasons(v []string) {
	o.IncompatibleReasons = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VirtualMachineInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMachineInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VirtualMachineInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VirtualMachineInfo) SetName(v string) {
	o.Name = &v
}

// GetOperatingSystem returns the OperatingSystem field value if set, zero value otherwise.
func (o *VirtualMachineInfo) GetOperatingSystem() string {
	if o == nil || IsNil(o.OperatingSystem) {
		var ret string
		return ret
	}
	return *o.OperatingSystem
}

// GetOperatingSystemOk returns a tuple with the OperatingSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMachineInfo) GetOperatingSystemOk() (*string, bool) {
	if o == nil || IsNil(o.OperatingSystem) {
		return nil, false
	}
	return o.OperatingSystem, true
}

// HasOperatingSystem returns a boolean if a field has been set.
func (o *VirtualMachineInfo) HasOperatingSystem() bool {
	if o != nil && !IsNil(o.OperatingSystem) {
		return true
	}

	return false
}

// SetOperatingSystem gets a reference to the given string and assigns it to the OperatingSystem field.
func (o *VirtualMachineInfo) SetOperatingSystem(v string) {
	o.OperatingSystem = &v
}

// GetOperatingSystemDisplayName returns the OperatingSystemDisplayName field value if set, zero value otherwise.
func (o *VirtualMachineInfo) GetOperatingSystemDisplayName() string {
	if o == nil || IsNil(o.OperatingSystemDisplayName) {
		var ret string
		return ret
	}
	return *o.OperatingSystemDisplayName
}

// GetOperatingSystemDisplayNameOk returns a tuple with the OperatingSystemDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMachineInfo) GetOperatingSystemDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.OperatingSystemDisplayName) {
		return nil, false
	}
	return o.OperatingSystemDisplayName, true
}

// HasOperatingSystemDisplayName returns a boolean if a field has been set.
func (o *VirtualMachineInfo) HasOperatingSystemDisplayName() bool {
	if o != nil && !IsNil(o.OperatingSystemDisplayName) {
		return true
	}

	return false
}

// SetOperatingSystemDisplayName gets a reference to the given string and assigns it to the OperatingSystemDisplayName field.
func (o *VirtualMachineInfo) SetOperatingSystemDisplayName(v string) {
	o.OperatingSystemDisplayName = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *VirtualMachineInfo) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMachineInfo) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *VirtualMachineInfo) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *VirtualMachineInfo) SetPath(v string) {
	o.Path = &v
}

// GetVGputype returns the VGputype field value if set, zero value otherwise.
func (o *VirtualMachineInfo) GetVGputype() string {
	if o == nil || IsNil(o.VGputype) {
		var ret string
		return ret
	}
	return *o.VGputype
}

// GetVGputypeOk returns a tuple with the VGputype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMachineInfo) GetVGputypeOk() (*string, bool) {
	if o == nil || IsNil(o.VGputype) {
		return nil, false
	}
	return o.VGputype, true
}

// HasVGputype returns a boolean if a field has been set.
func (o *VirtualMachineInfo) HasVGputype() bool {
	if o != nil && !IsNil(o.VGputype) {
		return true
	}

	return false
}

// SetVGputype gets a reference to the given string and assigns it to the VGputype field.
func (o *VirtualMachineInfo) SetVGputype(v string) {
	o.VGputype = &v
}

func (o VirtualMachineInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualMachineInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HardwareVersion) {
		toSerialize["hardware_version"] = o.HardwareVersion
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IncompatibleReasons) {
		toSerialize["incompatible_reasons"] = o.IncompatibleReasons
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OperatingSystem) {
		toSerialize["operating_system"] = o.OperatingSystem
	}
	if !IsNil(o.OperatingSystemDisplayName) {
		toSerialize["operating_system_display_name"] = o.OperatingSystemDisplayName
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.VGputype) {
		toSerialize["v_gputype"] = o.VGputype
	}
	return toSerialize, nil
}

type NullableVirtualMachineInfo struct {
	value *VirtualMachineInfo
	isSet bool
}

func (v NullableVirtualMachineInfo) Get() *VirtualMachineInfo {
	return v.value
}

func (v *NullableVirtualMachineInfo) Set(val *VirtualMachineInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualMachineInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualMachineInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualMachineInfo(val *VirtualMachineInfo) *NullableVirtualMachineInfo {
	return &NullableVirtualMachineInfo{value: val, isSet: true}
}

func (v NullableVirtualMachineInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualMachineInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


