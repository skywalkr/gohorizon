openapi: 3.0.1
info:
  description: Welcome to the Horizon Server API Reference documentation. This API
    reference provides comprehensive information about status of all Horizon Server
    components and resources.
  license:
    name: Copyright Â© 1998 - 2020 VMware, Inc. All rights reserved.
  title: Horizon Server API
servers:
- url: //localhost/rest
tags:
- description: APIs for Authentication and Authorization
  name: Auth
- description: APIs for configuration
  name: Config
- description: APIs for entitlement of resources
  name: Entitlements
- description: APIs for resources that are external to Horizon environment. These
    APIs make live calls to the external systems
  name: External
- description: APIs for inventory resources
  name: Inventory
- description: APIs for monitoring services
  name: Monitor
paths:
  /config/v1/environment-properties:
    get:
      deprecated: false
      operationId: getEnvironmentUsingGET
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnvironmentInfo'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Retrieves the environment settings.
      tags:
      - Config
  /config/v1/ic-domain-accounts:
    get:
      deprecated: false
      operationId: listICDomainAccounts
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/InstantCloneDomainAccountInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists instant clone domain accounts of the environment.
      tags:
      - Config
    post:
      deprecated: false
      operationId: createICDomainAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantCloneDomainAccountCreateSpec'
        description: Instant clone domain account object to be created.
        required: true
      responses:
        "201":
          content: {}
          description: Created
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
        "409":
          content: {}
          description: Conflict
      security:
      - Bearer: []
      summary: Creates instant clone domain account.
      tags:
      - Config
      x-codegen-request-body-name: body
  /config/v1/ic-domain-accounts/{id}:
    delete:
      deprecated: false
      operationId: deleteICDomainAccount
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Deletes instant clone domain account.
      tags:
      - Config
    get:
      deprecated: false
      operationId: getICDomainAccount
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InstantCloneDomainAccountInfo'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Gets instant clone domain account.
      tags:
      - Config
    put:
      deprecated: false
      operationId: updateICDomainAccount
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantCloneDomainAccountUpdateSpec'
        description: Instant clone domain account object to be updated.
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Updates instant clone domain account.
      tags:
      - Config
      x-codegen-request-body-name: body
  /config/v1/im-assets:
    get:
      deprecated: false
      operationId: listIMAssets
      parameters:
      - allowEmptyValue: false
        description: Image management version ID
        in: query
        name: im_version_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/ImageManagementAssetInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists image management assets.
      tags:
      - Config
    post:
      deprecated: false
      operationId: createIMAsset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageManagementAssetCreateSpec'
        description: Image management asset object to be created.
        required: true
      responses:
        "201":
          content: {}
          description: Created
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
        "409":
          content: {}
          description: Conflict
      security:
      - Bearer: []
      summary: Creates image management asset.
      tags:
      - Config
      x-codegen-request-body-name: body
  /config/v1/im-assets/action/bulk-create:
    post:
      deprecated: false
      operationId: createIMAssets
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/ImageManagementAssetCreateSpec'
              type: array
        description: List of Image management asset object to be created in bulk.
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BulkItemResponseInfo'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Creates one or more image management assets. Each of the index of result
        in the response, correspond to the index of the original asset.
      tags:
      - Config
      x-codegen-request-body-name: body
  /config/v1/im-assets/{id}:
    delete:
      deprecated: false
      operationId: deleteIMAsset
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Deletes image management asset.
      tags:
      - Config
    get:
      deprecated: false
      operationId: getIMAsset
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ImageManagementAssetInfo'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Gets image management asset.
      tags:
      - Config
    put:
      deprecated: false
      operationId: updateIMAsset
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageManagementAssetUpdateSpec'
        description: Image management asset object to be updated.
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Updates image management asset.
      tags:
      - Config
      x-codegen-request-body-name: body
  /config/v1/im-streams:
    get:
      deprecated: false
      operationId: listIMStreams
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/ImageManagementStreamInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists image management streams.
      tags:
      - Config
    post:
      deprecated: false
      operationId: createIMStream
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageManagementStreamCreateSpec'
        description: Image management stream object to be created.
        required: true
      responses:
        "201":
          content: {}
          description: Created
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
        "409":
          content: {}
          description: Conflict
      security:
      - Bearer: []
      summary: Creates image management stream.
      tags:
      - Config
      x-codegen-request-body-name: body
  /config/v1/im-streams/action/bulk-create:
    post:
      deprecated: false
      operationId: createIMStreams
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/ImageManagementStreamCreateSpec'
              type: array
        description: List of Image management stream object to be created in bulk.
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BulkItemResponseInfo'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Creates one or more image management streams. Each of the index of
        result in the response, correspond to the index of the original stream.
      tags:
      - Config
      x-codegen-request-body-name: body
  /config/v1/im-streams/{id}:
    delete:
      deprecated: false
      operationId: deleteIMStream
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Deletes image management stream.
      tags:
      - Config
    get:
      deprecated: false
      operationId: getIMStream
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ImageManagementStreamInfo'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Gets image management stream.
      tags:
      - Config
    put:
      deprecated: false
      operationId: updateIMStream
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageManagementStreamUpdateSpec'
        description: Image management stream object to be updated.
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Updates image management stream.
      tags:
      - Config
      x-codegen-request-body-name: body
  /config/v1/im-tags:
    get:
      deprecated: false
      operationId: listIMTags
      parameters:
      - allowEmptyValue: false
        description: Image management stream ID
        in: query
        name: im_stream_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/ImageManagementTagInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists image management tags.
      tags:
      - Config
    post:
      deprecated: false
      operationId: createIMTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageManagementTagCreateSpec'
        description: Image management tag object to be created.
        required: true
      responses:
        "201":
          content: {}
          description: Created
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
        "409":
          content: {}
          description: Conflict
      security:
      - Bearer: []
      summary: Creates image management tag.
      tags:
      - Config
      x-codegen-request-body-name: body
  /config/v1/im-tags/action/bulk-create:
    post:
      deprecated: false
      operationId: createIMTags
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/ImageManagementTagCreateSpec'
              type: array
        description: List of Image management tag object to be created in bulk.
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BulkItemResponseInfo'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Creates one or more image management tags. Each of the index of result
        in the response, correspond to the index of the original tag.
      tags:
      - Config
      x-codegen-request-body-name: body
  /config/v1/im-tags/{id}:
    delete:
      deprecated: false
      operationId: deleteIMTag
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Deletes image management tag.
      tags:
      - Config
    get:
      deprecated: false
      operationId: getIMTag
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ImageManagementTagInfo'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Gets image management tag.
      tags:
      - Config
    put:
      deprecated: false
      operationId: updateIMTag
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageManagementTagUpdateSpec'
        description: Image management tag object to be updated.
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Updates image management tag.
      tags:
      - Config
      x-codegen-request-body-name: body
  /config/v1/im-versions:
    get:
      deprecated: false
      operationId: listIMVersions
      parameters:
      - allowEmptyValue: false
        description: Image management stream ID
        in: query
        name: im_stream_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/ImageManagementVersionInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists image management versions.
      tags:
      - Config
    post:
      deprecated: false
      operationId: createIMVersion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageManagementVersionCreateSpec'
        description: Image management version object to be created.
        required: true
      responses:
        "201":
          content: {}
          description: Created
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
        "409":
          content: {}
          description: Conflict
      security:
      - Bearer: []
      summary: Creates image management version.
      tags:
      - Config
      x-codegen-request-body-name: body
  /config/v1/im-versions/action/bulk-create:
    post:
      deprecated: false
      operationId: createIMVersions
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/ImageManagementVersionCreateSpec'
              type: array
        description: List of Image management version object to be created in bulk.
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BulkItemResponseInfo'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Creates one or more image management versions. Each of the index of
        result in the response, correspond to the index of the original version.
      tags:
      - Config
      x-codegen-request-body-name: body
  /config/v1/im-versions/{id}:
    delete:
      deprecated: false
      operationId: deleteIMVersion
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Deletes image management version.
      tags:
      - Config
    get:
      deprecated: false
      operationId: getIMVersion
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ImageManagementVersionInfo'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Gets image management version.
      tags:
      - Config
    put:
      deprecated: false
      operationId: updateIMVersion
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageManagementVersionUpdateSpec'
        description: Image management version object to be updated.
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Updates image management version.
      tags:
      - Config
      x-codegen-request-body-name: body
  /config/v1/rcx/clients:
    post:
      deprecated: false
      operationId: registerRCXClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RCXClientRegisterSpec'
        description: RCX client object to be registered.
        required: true
      responses:
        "201":
          content: {}
          description: Created
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
        "409":
          content: {}
          description: Conflict
      security:
      - Bearer: []
      summary: Registers the RCX client
      tags:
      - Config
      x-codegen-request-body-name: body
  /config/v1/rcx/clients/{id}:
    delete:
      deprecated: false
      operationId: unregisterRCXClient
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Unregisters the given RCX Client
      tags:
      - Config
    put:
      deprecated: false
      operationId: updateRCXClient
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RCXClientUpdateSpec'
        description: RCX client object to be updated.
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Updates the given RCX client.
      tags:
      - Config
      x-codegen-request-body-name: body
  /config/v1/rcx/servers:
    get:
      deprecated: false
      operationId: listRCXServers
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/RCXServerInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists RCX servers of the cluster.
      tags:
      - Config
  /config/v1/settings:
    get:
      deprecated: false
      operationId: getSettingsUsingGET
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SettingsInfo'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Retrieves the configuration settings.
      tags:
      - Config
    put:
      deprecated: false
      operationId: updateSettingsUsingPUT
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettingsUpdateSpec'
        description: Configuration settings object to be updated.
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Updates the configuration settings.
      tags:
      - Config
      x-codegen-request-body-name: body
  /config/v1/settings/feature:
    get:
      deprecated: false
      operationId: getFeatureSettingsUsingGET
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FeatureSettings'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Retrieves the feature settings.
      tags:
      - Config
    put:
      deprecated: false
      operationId: updateFeatureSettingsUsingPUT
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeatureSettingsUpdateSpec'
        description: Feature settings object to be updated.
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Updates the feature settings.
      tags:
      - Config
      x-codegen-request-body-name: body
  /config/v1/settings/general:
    get:
      deprecated: false
      operationId: getGeneralSettingsUsingGET
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GeneralSettings'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Retrieves the general settings.
      tags:
      - Config
    put:
      deprecated: false
      operationId: updateGeneralSettingsUsingPUT
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeneralSettingsUpdateSpec'
        description: General settings object to be updated.
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Updates the general settings.
      tags:
      - Config
      x-codegen-request-body-name: body
  /config/v1/settings/security:
    get:
      deprecated: false
      operationId: getSecuritySettingsUsingGET
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SecuritySettings'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Retrieves the security settings.
      tags:
      - Config
    put:
      deprecated: false
      operationId: updateSecuritySettingsUsingPUT
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecuritySettingsUpdateSpec'
        description: Security settings object to be updated.
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Updates the security settings.
      tags:
      - Config
      x-codegen-request-body-name: body
  /config/v1/virtual-centers:
    get:
      deprecated: false
      operationId: listVCInfo
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/VirtualCenterInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists Virtual Centers configured in the environment.
      tags:
      - Config
  /entitlements/v1/application-pools:
    delete:
      deprecated: false
      description: The input spec must not contain duplicate Ids.
      operationId: bulkDeleteApplicationPoolEntitlements
      requestBody:
        content:
          '*/*':
            schema:
              items:
                $ref: '#/components/schemas/EntitlementSpec'
              type: array
        description: Specifications for bulk application entitlements to be deleted.
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BulkEntitlementResponseInfo'
                type: array
          description: Created
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Delete the bulk entitlements for a set of application pools
      tags:
      - Entitlements
      x-codegen-request-body-name: body
    get:
      deprecated: false
      description: This API supports <b>Pagination</b> and <b>Filters.</b><br/>For
        Pagination, optional query params of 'page' and 'size' need to be sent.<br/>For
        Filters, refer to 'EntitlementInfo' model description to find supported filters
        on specific field.<br/>For full information on using Filters, refer to 'Horizon
        Server REST Pagination and Filter Guide' of 'VMware Horizon Server API' in
        documentation.
      operationId: listApplicationPoolEntitlements
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/EntitlementInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists the entitlements for Application Pools in the environment.
      tags:
      - Entitlements
    post:
      deprecated: false
      description: The input spec must not contain duplicate Ids.
      operationId: bulkCreateApplicationPoolEntitlements
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/EntitlementSpec'
              type: array
        description: Specifications for bulk application entitlements to be created.
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BulkEntitlementResponseInfo'
                type: array
          description: Created
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Create the bulk entitlements for a set of application pools
      tags:
      - Entitlements
      x-codegen-request-body-name: body
  /entitlements/v1/application-pools/{id}:
    get:
      deprecated: false
      operationId: getApplicationPoolEntitlements
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntitlementInfo'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Returns the IDs of users or groups entitled to a given application
        pool.
      tags:
      - Entitlements
  /entitlements/v1/desktop-pools:
    delete:
      deprecated: false
      description: The input spec must not contain duplicate Ids.
      operationId: bulkDeleteDesktopPoolEntitlements
      requestBody:
        content:
          '*/*':
            schema:
              items:
                $ref: '#/components/schemas/EntitlementSpec'
              type: array
        description: Specifications for bulk desktop entitlements to be deleted.
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BulkEntitlementResponseInfo'
                type: array
          description: Created
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Delete the bulk entitlements for a set of desktop pools
      tags:
      - Entitlements
      x-codegen-request-body-name: body
    get:
      deprecated: false
      description: This API supports <b>Pagination</b> and <b>Filters.</b><br/>For
        Pagination, optional query params of 'page' and 'size' need to be sent.<br/>For
        Filters, refer to 'EntitlementInfo' model description to find supported filters
        on specific field.<br/>For full information on using Filters, refer to 'Horizon
        Server REST Pagination and Filter Guide' of 'VMware Horizon Server API' in
        documentation.
      operationId: listDesktopPoolEntitlements
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/EntitlementInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists the entitlements for Desktop Pools in the environment.
      tags:
      - Entitlements
    post:
      deprecated: false
      description: The input spec must not contain duplicate Ids.
      operationId: bulkCreateDesktopPoolEntitlements
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/EntitlementSpec'
              type: array
        description: Specifications for bulk desktop entitlements to be created.
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BulkEntitlementResponseInfo'
                type: array
          description: Created
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Create the bulk entitlements for a set of desktop pools
      tags:
      - Entitlements
      x-codegen-request-body-name: body
  /entitlements/v1/desktop-pools/{id}:
    get:
      deprecated: false
      operationId: getDesktopPoolEntitlements
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntitlementInfo'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Returns the IDs of users or groups entitled to a given desktop pool.
      tags:
      - Entitlements
  /external/v1/ad-domains:
    get:
      deprecated: false
      operationId: listADDomains
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/ADDomainInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists information related to AD Domains of the environment.
      tags:
      - External
  /external/v1/ad-users-or-groups:
    get:
      deprecated: false
      description: This API supports <b>Pagination</b> and <b>Filters.</b><br/>For
        Pagination, optional query params of 'page' and 'size' needs to be send.<br/>For
        Filters, refer to 'ADUserOrGroupSummary' model description to find supported
        filters on specific field.<br/>For full information on using Filters, refer
        to 'Horizon Server REST Pagination and Filter Guide' of 'VMware Horizon Server
        API' in code.vmware.com
      operationId: listADUserOrGroupSummary
      parameters:
      - allowEmptyValue: false
        description: "Presence of this query param indicates to filter only groups\
          \ or only users. \n If passed as \"true\", then only groups are returned.\n\
          \ If passed as \"false\", then only users are returned.\n If not passed\
          \ passed at all, then both types are returned."
        in: query
        name: group_only
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/ADUserOrGroupSummary'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists AD users or groups information.
      tags:
      - External
  /external/v1/ad-users-or-groups/action/change-user-password:
    post:
      deprecated: false
      operationId: changeUserPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ADUserChangePasswordSpec'
        description: AD user password object to be changed.
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ADUserInfo'
          description: OK
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
        "403":
          content: {}
          description: Access to the resource is forbidden
      security:
      - Bearer: []
      summary: Changes the password of AD User
      tags:
      - External
      x-codegen-request-body-name: body
  /external/v1/ad-users-or-groups/action/validate-user-encrypted-credentials:
    post:
      deprecated: false
      operationId: validateADUserEncryptedCredentials
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ADUserEncryptedCredentialSpec'
        description: AD user encrypted credentials object to be validated.
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ADUserInfo'
          description: OK
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
        "403":
          content: {}
          description: Access to the resource is forbidden
      security:
      - Bearer: []
      summary: Validates the encrypted credentials of AD User
      tags:
      - External
      x-codegen-request-body-name: body
  /external/v1/ad-users-or-groups/{id}:
    get:
      deprecated: false
      operationId: getADUserOrGroupInfo
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ADUserOrGroupInfo'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Get information related to AD User or Group
      tags:
      - External
  /external/v1/base-snapshots:
    get:
      deprecated: false
      operationId: listBaseSnapshots
      parameters:
      - allowEmptyValue: false
        description: VM ID
        example: vm-1
        in: query
        name: base_vm_id
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: Virtual Center ID
        example: d0325b13-2bf1-4fa4-b027-e780004f2d1e
        in: query
        name: vcenter_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BaseSnapshotInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Lists all the VM snapshots from the vCenter for a given VM.
      tags:
      - External
  /external/v1/base-vms:
    get:
      deprecated: false
      operationId: listBaseVMs
      parameters:
      - allowEmptyValue: false
        description: Datacenter ID
        in: query
        name: datacenter_id
        schema:
          type: string
      - allowEmptyValue: false
        description: Virtual Center ID
        in: query
        name: vcenter_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BaseVMInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Lists all the VMs from a vCenter or a datacenter in that vCenter which
        may be suitable as snapshots for instant/linked clone desktop or farm creation.
      tags:
      - External
  /external/v1/customization-specifications:
    get:
      deprecated: false
      operationId: listCustomizationSpecs
      parameters:
      - allowEmptyValue: false
        description: Virtual Center ID
        in: query
        name: vcenter_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/CustomizationSpecInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Lists all the customization specifications from the vCenter.
      tags:
      - External
  /external/v1/datacenters:
    get:
      deprecated: false
      operationId: listDatacenters
      parameters:
      - allowEmptyValue: false
        description: Virtual Center ID
        in: query
        name: vcenter_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/DatacenterInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Lists all the datacenters of a vCenter.
      tags:
      - External
  /external/v1/datastore-paths:
    get:
      deprecated: false
      operationId: listDatastorePaths
      parameters:
      - allowEmptyValue: false
        description: Datastore ID
        example: datastore-29
        in: query
        name: datastore_id
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: Virtual Center ID
        example: d0325b13-2bf1-4fa4-b027-e780004f2d1e
        in: query
        name: vcenter_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/DatastorePathInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Lists all the folder paths within a Datastore from vCenter.
      tags:
      - External
  /external/v1/datastores:
    get:
      deprecated: false
      operationId: listdatastores
      parameters:
      - allowEmptyValue: false
        description: Host or Cluster ID
        example: domain-c85
        in: query
        name: host_or_cluster_id
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: Virtual Center ID
        example: d0325b13-2bf1-4fa4-b027-e780004f2d1e
        in: query
        name: vcenter_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/DatastoreInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Lists all the datastoress from the vCenter for the given host or cluster.
      tags:
      - External
  /external/v1/hosts-or-clusters:
    get:
      deprecated: false
      operationId: listHostsOrClusters
      parameters:
      - allowEmptyValue: false
        description: Datacenter ID
        in: query
        name: datacenter_id
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: Virtual Center ID
        in: query
        name: vcenter_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/HostOrClusterInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Lists all the hosts or clusters of the datacenter.
      tags:
      - External
  /external/v1/network-interface-cards:
    get:
      deprecated: false
      description: If the base VM and snapshot are specified, then the NICs  present
        on the given snapshot are listed.<br/> If the template is specified then the
        NICs present on the given template are listed.
      operationId: listNetworkInterfaceCards
      parameters:
      - allowEmptyValue: false
        description: Base Snapshot ID
        in: query
        name: base_snapshot_id
        schema:
          type: string
      - allowEmptyValue: false
        description: Base VM ID
        in: query
        name: base_vm_id
        schema:
          type: string
      - allowEmptyValue: false
        description: Virtual Center ID
        in: query
        name: vcenter_id
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: VM Template ID
        in: query
        name: vm_template_id
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/NetworkInterfaceCardInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Returns a list of network interface cards (NICs) suitable for configuration
        on a desktop pool/farm.
      tags:
      - External
  /external/v1/network-labels:
    get:
      deprecated: false
      description: API retrieves by filtering on the network type (if specified) that
        may be suitable for configuration with a desktop pool/farm's network interface
        card.
      operationId: listNetworkLabels
      parameters:
      - allowEmptyValue: false
        description: Host or Cluster ID
        in: query
        name: host_or_cluster_id
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: |-
          Network Type
          * NETWORK: Standard network.
          * OPAQUE_NETWORK: Opaque network.
          * DISTRUBUTED_VIRTUAL_PORT_GROUP: DVS Port group.
        in: query
        name: network_type
        schema:
          enum:
          - NETWORK
          - OPAQUE_NETWORK
          - DISTRUBUTED_VIRTUAL_PORT_GROUP
          type: string
      - allowEmptyValue: false
        description: Virtual Center ID
        in: query
        name: vcenter_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/NetworkLabelInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Retrieves all network labels on the given host or cluster
      tags:
      - External
  /external/v1/resource-pools:
    get:
      deprecated: false
      operationId: listResourcePools
      parameters:
      - allowEmptyValue: false
        description: Host or Cluster ID
        example: domain-c85
        in: query
        name: host_or_cluster_id
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: Virtual Center ID
        example: d0325b13-2bf1-4fa4-b027-e780004f2d1e
        in: query
        name: vcenter_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/ResourcePoolInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Lists all the resource pools from the vCenter for the given host or
        cluster.
      tags:
      - External
  /external/v1/vm-folders:
    get:
      deprecated: false
      operationId: listVMFolders
      parameters:
      - allowEmptyValue: false
        description: Datacenter ID
        example: datacenter-1
        in: query
        name: datacenter_id
        required: true
        schema:
          type: string
      - allowEmptyValue: false
        description: Virtual Center ID
        example: d0325b13-2bf1-4fa4-b027-e780004f2d1e
        in: query
        name: vcenter_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/VMFolderInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Lists all the VM folders from the vCenter for the given datacenter.
      tags:
      - External
  /external/v1/vm-templates:
    get:
      deprecated: false
      operationId: listVMTemplates
      parameters:
      - allowEmptyValue: false
        description: Datacenter ID
        in: query
        name: datacenter_id
        schema:
          type: string
      - allowEmptyValue: false
        description: Virtual Center ID
        in: query
        name: vcenter_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/VMTemplateInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Lists all the VM templates from a vCenter or a datacenter for the given
        vCenter which may be suitable for full clone desktop pool creation.
      tags:
      - External
  /inventory/v1/application-icons:
    get:
      deprecated: false
      operationId: listApplicationIcons
      parameters:
      - allowEmptyValue: false
        description: Application Pool ID
        in: query
        name: application_pool_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/ApplicationIconInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Lists the application icons for the given application pool.
      tags:
      - Inventory
  /inventory/v1/application-icons/{id}:
    get:
      deprecated: false
      operationId: getApplicationIcon
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApplicationIconInfo'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Gets application icon.
      tags:
      - Inventory
  /inventory/v1/application-pools:
    get:
      deprecated: false
      description: This API supports <b>Pagination</b> and <b>Filters.</b><br/>For
        Pagination, optional query params of 'page' and 'size' needs to be send.<br/>For
        filters, refer to 'ApplicationPoolInfo' model description to find supported
        filters on specific field.<br/>For full information on using filters, refer
        to 'Horizon Server REST Pagination and Filter Guide' of 'VMware Horizon Server
        API' in code.vmware.com
      operationId: listApplicationPools
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/ApplicationPoolInfo'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists the application pools in the environment.
      tags:
      - Inventory
    post:
      deprecated: false
      operationId: createApplicationPool
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationPoolCreateSpec'
        description: Application pool object to be created.
        required: true
      responses:
        "201":
          content: {}
          description: Created
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
        "409":
          content: {}
          description: Conflict
      security:
      - Bearer: []
      summary: Creates an application pool.
      tags:
      - Inventory
      x-codegen-request-body-name: body
  /inventory/v1/application-pools/{id}:
    delete:
      deprecated: false
      operationId: deleteApplicationPool
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Deletes application pool.
      tags:
      - Inventory
    get:
      deprecated: false
      operationId: getApplicationPool
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApplicationPoolInfo'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Gets application pool.
      tags:
      - Inventory
    put:
      deprecated: false
      operationId: updateApplicationPool
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationPoolUpdateSpec'
        description: Application pool object to be updated.
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Updates application pool.
      tags:
      - Inventory
      x-codegen-request-body-name: body
  /inventory/v1/desktop-pools:
    get:
      deprecated: false
      operationId: listDesktopPools
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/DesktopPoolInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists the Desktop Pools in the environment.
      tags:
      - Inventory
  /inventory/v1/desktop-pools/{id}:
    get:
      deprecated: false
      operationId: getDesktopPool
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DesktopPoolInfo'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Gets the Desktop Pool information.
      tags:
      - Inventory
  /inventory/v1/desktop-pools/{id}/action/add-machines:
    post:
      deprecated: false
      operationId: addMachines
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: List of Machine Ids representing the machines to be added to
          the desktop pool.
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BulkItemResponseInfo'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Adds machines to the given manual desktop pool.
      tags:
      - Inventory
      x-codegen-request-body-name: body
  /inventory/v1/desktop-pools/{id}/action/add-machines-by-name:
    post:
      deprecated: false
      operationId: addMachinesByName
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/MachineSpecifiedName'
              type: array
        description: List of MachineSpecifiedName representing the machines to be
          added to the desktop pool.
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BulkItemResponseInfo'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Adds the named machines to the given desktop pool.
      tags:
      - Inventory
      x-codegen-request-body-name: body
  /inventory/v1/desktop-pools/{id}/action/remove-machines:
    post:
      deprecated: false
      operationId: removeMachines
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: List of Machine Ids representing the machines to be removed from
          the desktop pool.
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BulkItemResponseInfo'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Removes machines from the given manual desktop pool.
      tags:
      - Inventory
      x-codegen-request-body-name: body
  /inventory/v1/desktop-pools/{id}/installed-applications:
    get:
      deprecated: false
      operationId: listInstalledApplications
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/InstalledApplicationInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Lists the installed applications on the given desktop pool.
      tags:
      - Inventory
  /inventory/v1/farms:
    get:
      deprecated: false
      operationId: listFarms
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/FarmInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists the Farms in the environment.
      tags:
      - Inventory
  /inventory/v1/farms/{id}:
    get:
      deprecated: false
      operationId: getFarm
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FarmInfo'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Gets the Farm information.
      tags:
      - Inventory
  /inventory/v1/farms/{id}/installed-applications:
    get:
      deprecated: false
      operationId: listInstalledApplications_1
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/InstalledApplicationInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Lists the installed applications on the given farm.
      tags:
      - Inventory
  /inventory/v1/machines:
    delete:
      deprecated: false
      operationId: deleteMachines
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/MachineDeleteSpec'
        description: The machines and specification for deletion.
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BulkItemResponseInfo'
                type: array
          description: OK
        "204":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BulkItemResponseInfo'
                type: array
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Deletes the specified machines.
      tags:
      - Inventory
      x-codegen-request-body-name: body
    get:
      deprecated: false
      description: This API supports <b>Pagination</b> and <b>Filters.</b><br/>For
        Pagination, optional query params of 'page' and 'size' need to be sent.<br/>For
        Filters, refer to 'MachineInfo' model description to find supported filters
        on specific field.<br/>For full information on using Filters, refer to 'Horizon
        Server REST Pagination and Filter Guide' of 'VMware Horizon Server API' in
        code.vmware.com
      operationId: listMachinesUsingGET
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/MachineInfo'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists the Machines in the environment.
      tags:
      - Inventory
  /inventory/v1/machines/action/enter-maintenance:
    post:
      deprecated: false
      description: When in maintenance mode, users cannot access the machines. Each
        response entity in the result corresponds to a machine id in the input.
      operationId: enterMaintenance
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: List of Machine Ids representing the machines to be put into
          maintenance mode.
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BulkItemResponseInfo'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Puts the machines into maintenance mode.
      tags:
      - Inventory
      x-codegen-request-body-name: body
  /inventory/v1/machines/action/exit-maintenance:
    post:
      deprecated: false
      description: Each response entity in the result corresponds to a machine id
        in the input.
      operationId: exitMaintenance
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: List of Machine Ids representing the machines to be put out of
          maintenance mode.
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BulkItemResponseInfo'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Puts the machines out of maintenance mode.
      tags:
      - Inventory
      x-codegen-request-body-name: body
  /inventory/v1/machines/action/rebuild:
    post:
      deprecated: false
      description: Each response entity in the result corresponds to a machine id
        in the input.
      operationId: rebuildMachines
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: List of Machine Ids representing the machines to be rebuilt.
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BulkItemResponseInfo'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Rebuilds the specified machines.
      tags:
      - Inventory
      x-codegen-request-body-name: body
  /inventory/v1/machines/action/recover:
    post:
      deprecated: false
      description: Each response entity in the result corresponds to a machine id
        in the input.
      operationId: recoverMachines
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: List of Machine Ids representing the machines to be recovered.
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BulkItemResponseInfo'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Recovers the specified machines.
      tags:
      - Inventory
      x-codegen-request-body-name: body
  /inventory/v1/machines/action/reset:
    post:
      deprecated: false
      description: Each response entity in the result corresponds to a machine id
        in the input.
      operationId: resetMachines
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: List of Machine Ids representing the machines to be reset.
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BulkItemResponseInfo'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Resets the specified machines.
      tags:
      - Inventory
      x-codegen-request-body-name: body
  /inventory/v1/machines/action/restart:
    post:
      deprecated: false
      description: Each response entity in the result corresponds to a machine id
        in the input.
      operationId: restartMachines
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: List of Machine Ids representing the machines to be restarted.
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BulkItemResponseInfo'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Restarts the specified machines.
      tags:
      - Inventory
      x-codegen-request-body-name: body
  /inventory/v1/machines/{id}:
    delete:
      deprecated: false
      operationId: deleteMachine
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/MachineDeleteData'
        description: The specification applicable to deleting the machine.
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Deletes the machine.
      tags:
      - Inventory
      x-codegen-request-body-name: body
    get:
      deprecated: false
      operationId: getMachineUsingGET
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MachineInfo'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Gets the Machine information.
      tags:
      - Inventory
  /inventory/v1/machines/{id}/action/assign-users:
    post:
      deprecated: false
      description: Each response entity in the result corresponds to a user SID in
        the input.
      operationId: assignUsers
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: List of User SIDs representing the users to be assigned to the
          machine.
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BulkItemResponseInfo'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Assigns the specified users to the machine.
      tags:
      - Inventory
      x-codegen-request-body-name: body
  /inventory/v1/machines/{id}/action/unassign-users:
    post:
      deprecated: false
      description: Each response entity in the result corresponds to a user SID in
        the input.
      operationId: unassignUsers
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: List of User SIDs representing the users to be un-assigned from
          the machine.
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BulkItemResponseInfo'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Un-assigns the specified users from the machine.
      tags:
      - Inventory
      x-codegen-request-body-name: body
  /inventory/v1/sessions:
    get:
      deprecated: false
      description: This API supports <b>Pagination</b>.<br/>For Pagination, optional
        query params of 'page' and 'size' needs to be send.<br/>
      operationId: listSessionInfo
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/SessionInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists the Session information in the environment.
      tags:
      - Inventory
  /inventory/v1/sessions/action/disconnect:
    post:
      deprecated: false
      operationId: disconnectSessions
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: List of session ids to be disconnected.
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BulkItemResponseInfo'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Disconnects user sessions
      tags:
      - Inventory
      x-codegen-request-body-name: body
  /inventory/v1/sessions/action/logoff:
    post:
      deprecated: false
      operationId: logOffSessions
      parameters:
      - allowEmptyValue: false
        description: |-
          Indicates to Log off session forcibly.
           If passed as "true", then sessions are logoff forcibly, even if they are locked.
           If passed as "false" or not passed at all, then sessions will be normally logged off, if they are not locked.
        example: false
        in: query
        name: forced
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: List of session ids to be logged off.
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BulkItemResponseInfo'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Logs off user sessions, if they are not locked.
      tags:
      - Inventory
      x-codegen-request-body-name: body
  /inventory/v1/sessions/action/reset:
    post:
      deprecated: false
      operationId: resetSessions
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: List of session ids to be reset.
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BulkItemResponseInfo'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Resets machine of user sessions. The machine must be managed by Virtual
        Center and the session cannot be an application or an RDS desktop session.
      tags:
      - Inventory
      x-codegen-request-body-name: body
  /inventory/v1/sessions/action/restart:
    post:
      deprecated: false
      operationId: restartSessions
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: List of session ids to be restarted.
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BulkItemResponseInfo'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Restarts machine of user sessions. The machine must be managed by Virtual
        Center and the session cannot be an application or an RDS desktop session.
      tags:
      - Inventory
      x-codegen-request-body-name: body
  /inventory/v1/sessions/action/send-message:
    post:
      deprecated: false
      operationId: sendMessageToSessions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionSendMessageSpec'
        description: Message information object to be sent to sessions.
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/BulkItemResponseInfo'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Sends the message to user sessions
      tags:
      - Inventory
      x-codegen-request-body-name: body
  /inventory/v1/sessions/{id}:
    get:
      deprecated: false
      operationId: getSessionInfo
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SessionInfo'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Gets the Session information.
      tags:
      - Inventory
  /inventory/v2/desktop-pools:
    get:
      deprecated: false
      description: This API supports <b>Pagination</b>.<br/>For Pagination, optional
        query params of 'page' and 'size' needs to be send.<br/>
      operationId: listDesktopPoolsV2
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/DesktopPoolInfoV2'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists the desktop pools in the environment.
      tags:
      - Inventory
  /inventory/v2/desktop-pools/{id}:
    get:
      deprecated: false
      operationId: getDesktopPoolV2
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DesktopPoolInfoV2'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Gets the desktop pool information.
      tags:
      - Inventory
  /login:
    post:
      deprecated: false
      description: 'Note: UPN(e.g. testadmin@example.com) based login is not supported.<br/>
        Only Administrators on Root access group are allowed to login.'
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLogin'
        description: Login credentials needed for Authentication
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthTokens'
          description: OK
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: User is not authenticated
      summary: Logs in a user. Returns access token and refresh token.
      tags:
      - Auth
      x-codegen-request-body-name: body
  /logout:
    post:
      deprecated: false
      operationId: logoutUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
        description: Refresh token needed for Logout
        required: true
      responses:
        "200":
          content: {}
          description: OK
        "400":
          content: {}
          description: Bad Request
        "500":
          content: {}
          description: Internal Server Error
      summary: Logs out a user.
      tags:
      - Auth
      x-codegen-request-body-name: body
  /monitor/ad-domains:
    get:
      deprecated: false
      operationId: listADDomainMonitors
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/ADDomainMonitorInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists monitoring information related to AD Domains of the environment.
      tags:
      - Monitor
  /monitor/connection-servers:
    get:
      deprecated: false
      operationId: listConnectionServerMonitors
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/ConnectionServerMonitorInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists monitoring information related to Connection Servers of the environment.
      tags:
      - Monitor
  /monitor/event-database:
    get:
      deprecated: false
      operationId: getEventDatabaseMonitor
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EventDatabaseMonitorInfo'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Returns monitoring information related to Event database of the environment.
      tags:
      - Monitor
  /monitor/farms:
    get:
      deprecated: false
      operationId: listFarmMonitors
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/FarmMonitorInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists monitoring information related to Farms of the environment.
      tags:
      - Monitor
  /monitor/gateways:
    get:
      deprecated: false
      operationId: listGatewayMonitorInfoV1
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/GatewayMonitorInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists monitoring information related to Gateways registered in the
        environment.
      tags:
      - Monitor
  /monitor/rds-servers:
    get:
      deprecated: false
      operationId: listRDSServerMonitors
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/RDSServerMonitorInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists monitoring information related to RDS Servers of the environment.
      tags:
      - Monitor
  /monitor/saml-authenticators:
    get:
      deprecated: false
      operationId: listSAMLAuthenticatorMonitorsV1
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/SAMLAuthenticatorMonitorInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists monitoring information related to SAML Authenticators of the
        environment.
      tags:
      - Monitor
  /monitor/v1/connection-servers/{id}:
    get:
      deprecated: false
      operationId: getConnectionServerMonitorInfoV2
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConnectionServerMonitorInfoV2'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Gets monitoring information related to Connection Server.
      tags:
      - Monitor
  /monitor/v1/farms/{id}:
    get:
      deprecated: false
      operationId: getFarmMonitorInfo
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FarmMonitorInfo'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Gets monitoring information related to farm.
      tags:
      - Monitor
  /monitor/v1/gateways/{id}:
    get:
      deprecated: false
      operationId: getGatewayMonitorInfo
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GatewayMonitorInfoV2'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Gets monitoring information related to a Gateway.
      tags:
      - Monitor
  /monitor/v1/pods:
    get:
      deprecated: false
      operationId: listPodMonitorInfosV1
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/PodMonitorInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists monitoring information related to the remote pods.
      tags:
      - Monitor
  /monitor/v1/pods/{id}:
    get:
      deprecated: false
      operationId: getPodMonitorInfoV2
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PodMonitorInfoV2'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Gets monitoring information related to the remote pod.
      tags:
      - Monitor
  /monitor/v1/rds-servers/{id}:
    get:
      deprecated: false
      operationId: getRDSServerMonitors
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RDSServerMonitorInfo'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Gets monitoring information related to RDS Server.
      tags:
      - Monitor
  /monitor/v1/saml-authenticators/{id}:
    get:
      deprecated: false
      operationId: getSAMLAuthenticatorMonitorInfo
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SAMLAuthenticatorMonitorInfoV2'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Gets Monitoring Information related to a SAML Authenticator
      tags:
      - Monitor
  /monitor/v1/true-sso:
    get:
      deprecated: false
      operationId: listTrueSSOMonitorInfos
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/TrueSSOMonitorInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists monitoring information related to True SSO connectors.
      tags:
      - Monitor
  /monitor/v1/true-sso/{id}:
    get:
      deprecated: false
      operationId: getTrueSSOMonitorInfo
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TrueSSOMonitorInfo'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Gets monitoring information related to a True SSO connector.
      tags:
      - Monitor
  /monitor/v1/view-composers/{vcId}:
    get:
      deprecated: false
      operationId: getViewComposerByVCId
      parameters:
      - description: vcId
        in: path
        name: vcId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ViewComposerMonitorInfoV2'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Gets monitoring information of view composer for a given virtual center
      tags:
      - Monitor
  /monitor/v1/virtual-centers/{id}:
    get:
      deprecated: false
      operationId: getVirtualCenterMonitorInfo
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/VirtualCenterMonitorInfoV2'
          description: OK
        "401":
          content: {}
          description: User is not authenticated
        "404":
          content: {}
          description: Not Found
      security:
      - Bearer: []
      summary: Gets monitoring information related to Virtual Center.
      tags:
      - Monitor
  /monitor/v2/ad-domains:
    get:
      deprecated: false
      operationId: listADDomainMonitorInfosV2
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/ADDomainMonitorInfoV2'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists monitoring information related to AD Domains of the environment.
      tags:
      - Monitor
  /monitor/v2/connection-servers:
    get:
      deprecated: false
      operationId: listConnectionServerMonitorsV2
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/ConnectionServerMonitorInfoV2'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists monitoring information related to Connection Servers of the environment.
      tags:
      - Monitor
  /monitor/v2/gateways:
    get:
      deprecated: false
      operationId: listGatewayMonitorInfoV2
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/GatewayMonitorInfoV2'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists monitoring information related to Gateways registered in the
        environment.
      tags:
      - Monitor
  /monitor/v2/pods:
    get:
      deprecated: false
      operationId: listPodMonitorInfosV2
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/PodMonitorInfoV2'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists monitoring information related to the remote pods.
      tags:
      - Monitor
  /monitor/v2/saml-authenticators:
    get:
      deprecated: false
      operationId: listSAMLAuthenticatorMonitorsV2
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/SAMLAuthenticatorMonitorInfoV2'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists monitoring information related to SAML Authenticators of the
        environment.
      tags:
      - Monitor
  /monitor/v2/view-composers:
    get:
      deprecated: false
      operationId: listViewComposerMonitorsV2
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/ViewComposerMonitorInfoV2'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists monitoring information related to View Composers of the environment.
      tags:
      - Monitor
  /monitor/v2/virtual-centers:
    get:
      deprecated: false
      operationId: listVirtualCenterMonitorsV2
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/VirtualCenterMonitorInfoV2'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists monitoring information related to Virtual Centers of the environment.
      tags:
      - Monitor
  /monitor/view-composers:
    get:
      deprecated: false
      operationId: listViewComposerMonitorsV1
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/ViewComposerMonitorInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists monitoring information related to View Composers of the environment.
      tags:
      - Monitor
  /monitor/virtual-centers:
    get:
      deprecated: false
      operationId: listVirtualCenterMonitors
      responses:
        "200":
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/VirtualCenterMonitorInfo'
                type: array
          description: OK
        "401":
          content: {}
          description: User is not authenticated
      security:
      - Bearer: []
      summary: Lists monitoring information related to Virtual Centers of the environment.
      tags:
      - Monitor
  /refresh:
    post:
      deprecated: false
      operationId: refreshAccessToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
        description: Refresh token needed to generate new Access Token
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessToken'
          description: OK
        "400":
          content: {}
          description: Bad Request
        "500":
          content: {}
          description: Internal Server Error
      summary: Refreshes access token from refresh token.
      tags:
      - Auth
      x-codegen-request-body-name: body
components:
  schemas:
    ADDomainInfo:
      description: Information related to AD Domains of the environment.
      example:
        netbios_name: AD-EXAMPLE1
        id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
        dns_name: example.com
      properties:
        dns_name:
          description: DNS name of the AD Domain.
          example: example.com
          type: string
        id:
          description: Unique ID representing AD Domain.
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
          type: string
        netbios_name:
          description: NetBIOS name of the AD Domain.
          example: AD-EXAMPLE1
          type: string
      required:
      - dns_name
      - id
      - netbios_name
      title: ADDomainInfo
      type: object
    ADDomainMonitorConnectionServer:
      description: Information about the AD Domain connection from connection server.
      example:
        trust_relationship: TWO_WAY
        name: cs1.example.com
        id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
        status: FULLY_ACCESSIBLE
      properties:
        id:
          description: Unique ID of the connection server.
          example: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          type: string
        name:
          description: Connection server host name or IP address.
          example: cs1.example.com
          type: string
        status:
          description: |-
            Status of the connection to the domain.
            * UNCONTACTABLE: No domain controllers appear to be present on the network for this domain.
            * FULLY_ACCESSIBLE: The domain controller(s) are accepting bind operations.
            * CANNOT_BIND: The domain controller(s) are only accepting LDAP ping operations.
            * UNKNOWN: Cannot determine accessibility.
          enum:
          - UNCONTACTABLE
          - FULLY_ACCESSIBLE
          - CANNOT_BIND
          - UNKNOWN
          example: FULLY_ACCESSIBLE
          type: string
        trust_relationship:
          description: |-
            The trust relationship for the domain.
            * PRIMARY_DOMAIN: The domain is the domain that the broker is present in.
            * FROM_BROKER: The domain is trusted by the domain that the broker is in.
            * TO_BROKER: The domain trusts the broker's domain (this is for completeness and generally will not be used).
            * TWO_WAY: The domain has a two way trust relationship with the broker's domain.
            * TWO_WAY_FOREST: The domain is in the same forest as the broker's domain, implies two way trust.
            * MANUAL: The domain was manually configured (the trust has not been detected).
            * UNKNOWN: The trust relationship could not be determined.
          enum:
          - PRIMARY_DOMAIN
          - FROM_BROKER
          - TO_BROKER
          - TWO_WAY
          - TWO_WAY_FOREST
          - MANUAL
          - UNKNOWN
          example: TWO_WAY
          type: string
      required:
      - id
      - name
      - status
      - trust_relationship
      title: ADDomainMonitorConnectionServer
      type: object
    ADDomainMonitorConnectionServerV2:
      description: Information about the AD Domain connection from connection server.
      example:
        trust_relationship: TWO_WAY
        last_updated_timestamp: 1582029025748
        name: cs1.example.com
        id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
        status: FULLY_ACCESSIBLE
      properties:
        id:
          description: Unique ID of the connection server.
          example: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          type: string
        last_updated_timestamp:
          description: The timestamp in milliseconds when the last update was obtained.
            Measured as epoch time.
          example: 1582029025748
          format: int64
          type: integer
        name:
          description: Connection server host name or IP address.
          example: cs1.example.com
          type: string
        status:
          description: |-
            Status of the connection to the domain.
            * UNCONTACTABLE: No domain controllers appear to be present on the network for this domain.
            * FULLY_ACCESSIBLE: The domain controller(s) are accepting bind operations.
            * CANNOT_BIND: The domain controller(s) are only accepting LDAP ping operations.
            * UNKNOWN: Cannot determine accessibility.
          enum:
          - UNCONTACTABLE
          - FULLY_ACCESSIBLE
          - CANNOT_BIND
          - UNKNOWN
          example: FULLY_ACCESSIBLE
          type: string
        trust_relationship:
          description: |-
            The trust relationship for the domain.
            * PRIMARY_DOMAIN: The domain is the domain that the broker is present in.
            * FROM_BROKER: The domain is trusted by the domain that the broker is in.
            * TO_BROKER: The domain trusts the broker's domain (this is for completeness and generally will not be used).
            * TWO_WAY: The domain has a two way trust relationship with the broker's domain.
            * TWO_WAY_FOREST: The domain is in the same forest as the broker's domain, implies two way trust.
            * MANUAL: The domain was manually configured (the trust has not been detected).
            * UNKNOWN: The trust relationship could not be determined.
          enum:
          - PRIMARY_DOMAIN
          - FROM_BROKER
          - TO_BROKER
          - TWO_WAY
          - TWO_WAY_FOREST
          - MANUAL
          - UNKNOWN
          example: TWO_WAY
          type: string
      required:
      - id
      - name
      - status
      - trust_relationship
      title: ADDomainMonitorConnectionServerV2
      type: object
    ADDomainMonitorInfo:
      description: Monitoring information related to AD Domain.
      example:
        netbios_name: AD-EXAMPLE1
        nt4_domain: true
        connection_servers:
        - trust_relationship: TWO_WAY
          name: cs1.example.com
          id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          status: FULLY_ACCESSIBLE
        - trust_relationship: TWO_WAY
          name: cs1.example.com
          id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          status: FULLY_ACCESSIBLE
        dns_name: ad-example1.example.com
      properties:
        connection_servers:
          description: Information about the AD Domain connections from each of the
            connection servers.
          items:
            $ref: '#/components/schemas/ADDomainMonitorConnectionServer'
          type: array
        dns_name:
          description: The DNS name for the domain.
          example: ad-example1.example.com
          type: string
        netbios_name:
          description: The NetBIOS name for the domain.
          example: AD-EXAMPLE1
          type: string
        nt4_domain:
          description: If this is an NT4 domain or not.
          example: true
          type: boolean
      required:
      - dns_name
      - netbios_name
      - nt4_domain
      title: ADDomainMonitorInfo
      type: object
    ADDomainMonitorInfoV2:
      description: Monitoring information related to AD Domain.
      example:
        netbios_name: AD-EXAMPLE1
        nt4_domain: true
        connection_servers:
        - trust_relationship: TWO_WAY
          last_updated_timestamp: 1582029025748
          name: cs1.example.com
          id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          status: FULLY_ACCESSIBLE
        - trust_relationship: TWO_WAY
          last_updated_timestamp: 1582029025748
          name: cs1.example.com
          id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          status: FULLY_ACCESSIBLE
        dns_name: ad-example1.example.com
      properties:
        connection_servers:
          description: Information about the AD Domain connections from each of the
            connection servers.
          items:
            $ref: '#/components/schemas/ADDomainMonitorConnectionServerV2'
          type: array
        dns_name:
          description: The DNS name for the domain.
          example: ad-example1.example.com
          type: string
        netbios_name:
          description: The NetBIOS name for the domain.
          example: AD-EXAMPLE1
          type: string
        nt4_domain:
          description: If this is an NT4 domain or not.
          example: true
          type: boolean
      required:
      - dns_name
      - netbios_name
      - nt4_domain
      title: ADDomainMonitorInfoV2
      type: object
    ADUserChangePasswordSpec:
      description: Specification for changing AD user's password.
      properties:
        domain:
          description: The domain of user. Note that domain is optional if UPN is
            supplied.
          example: example.com
          type: string
        key_id:
          description: The keyId of the cluster's SSO KeyPair used to encrypt the
            password key.
          example: ut0yGq7CbhtBUGfW3ngjkvjQ2cc=
          type: string
        new_encrypted_password:
          description: New password for the user in encrypted format.
          example: 4TGdfggfwrrGUPSg4/JK/tYub7lUI8pGtyHd/ty5g8h5=
          type: string
        old_encrypted_password:
          description: Old password for the user in encrypted format.
          example: 9QYxpdXrcrOGPSSz1/K/pJu8QlYT7pDkaKg/rb3hlw4=
          type: string
        protected_password_key:
          description: Decryption key for the password. This key is itself encrypted
            with cluster's SSO keypair.
          example: Qvvjglg5iZinyuldroueo/hQFyqydMMDJPmfYGgIebqxbU9chJ9I8iM9SCBRHSkSW9y+RMQOfC
          type: string
        username:
          description: The username or UPN.
          example: testuser or testuser@example.com
          type: string
      required:
      - key_id
      - new_encrypted_password
      - old_encrypted_password
      - protected_password_key
      - username
      title: ADUserChangePasswordSpec
      type: object
    ADUserEncryptedCredentialSpec:
      description: Specification for validating AD user's encrypted credentials.
      properties:
        domain:
          description: The domain of user. Note that domain is optional if UPN is
            supplied.
          example: example.com
          type: string
        encrypted_password:
          description: Encrypted password for the user.
          example: 9QYxpdXrcrOGPSSz1/K/pJu8QlYT7pDkaKg/rb3hlw4=
          type: string
        key_id:
          description: The keyId of the cluster's SSO KeyPair used to encrypt the
            protectedPasswordKey.
          example: ut0yGq7CbhtBUGfW3ngjkvjQ2cc=
          type: string
        protected_password_key:
          description: Decryption key for the password. This key is itself encrypted
            with cluster's SSO keypair.
          example: Qvvjglg5iZinyuldroueo/hQFyqydMMDJPmfYGgIebqxbU9chJ9I8iM9SCBRHSkSW9y+RM
          type: string
        username:
          description: The username or UPN.
          example: testuser or testuser@example.com
          type: string
      required:
      - encrypted_password
      - key_id
      - protected_password_key
      - username
      title: ADUserEncryptedCredentialSpec
      type: object
    ADUserInfo:
      description: Information related to AD User.
      example:
        user_principal_name: testuser@example.com
        group_sids:
        - S-1-5-21-544
        - S-1-5-21-1111111111-2222222222-3333333333-513
        domain: example.com
        user_sid: S-1-5-21-544
        user_guid: 5F5A45D9-15C0-4654-8FCF-D589C0EF3ECA
        group_guids:
        - 5F5A45D9-15C0-4654-8FCF-D589C0EF3ECA
        - 6H8S6Y4-35D3-6534-5ERC-A678E3YG4FAD
        username: testuser
      properties:
        domain:
          description: DNS name of the domain in which this user or group belongs
            to.
          example: example.com
          type: string
        group_guids:
          description: Guids of the user's groups in RFC 4122 format.
          example:
          - 5F5A45D9-15C0-4654-8FCF-D589C0EF3ECA
          - 6H8S6Y4-35D3-6534-5ERC-A678E3YG4FAD
          items:
            type: string
          type: array
        group_sids:
          description: List of unique SIDs of the groups, this user or group belongs
            to.
          example:
          - S-1-5-21-544
          - S-1-5-21-1111111111-2222222222-3333333333-513
          items:
            type: string
          type: array
        user_guid:
          description: GUID of the user in RFC 4122 format.
          example: 5F5A45D9-15C0-4654-8FCF-D589C0EF3ECA
          type: string
        user_principal_name:
          description: User Principal name(UPN) of this user.
          example: testuser@example.com
          type: string
        user_sid:
          description: Unique SID representing this AD User.
          example: S-1-5-21-544
          type: string
        username:
          description: Username of this user.
          example: testuser
          type: string
      required:
      - user_guid
      - user_sid
      title: ADUserInfo
      type: object
    ADUserOrGroupInfo:
      description: Information related to AD User or Group.
      example:
        container: example.com/Users
        description: Test User account
        last_name: User
        display_name: example.com\\testuser
        user_principal_name: testuser@example.com
        login_name: testuser
        user_count: 2
        phone: 1-877-486-9273
        domain: example.com
        distinguished_name: CN=Test User,CN=Users,DC=example,DC=com
        name: Test User
        guid: 5F5A45D9-15C0-4654-8FCF-D589C0EF3ECA
        kiosk_user: false
        group_membership_ids:
        - S-1-5-21-544
        - S-1-5-21-1111111111-2222222222-3333333333-513
        id: S-1-5-21-1111111111-2222222222-3333333333-500
        long_display_name: testuser@example.com (Test User)
        first_name: Test
        user_display_name: Test User
        email: testuser@example.com
        sub_group_count: 2
        group: false
      properties:
        container:
          description: AD container for this user or group.
          example: example.com/Users
          type: string
        description:
          description: |-
            Description number of this user or group.
            Supported Filters : 'Equals', 'StartsWith', 'Contains'.
          example: Test User account
          type: string
        display_name:
          description: Login name with domain of this user or group.
          example: example.com\\testuser
          type: string
        distinguished_name:
          description: Active Directory distinguished name for this user or group.
          example: CN=Test User,CN=Users,DC=example,DC=com
          type: string
        domain:
          description: |-
            DNS name of the domain in which this user or group belongs.
            Supported Filters : 'Equals'.
             Also, if 'Or' filter is used anywhere in filter string for this model class, then that 'Or' filter should nest only 'Equals' filter on 'domain' field.
          example: example.com
          type: string
        email:
          description: |-
            Email address of this user or group.
            Supported Filters : 'Equals', 'StartsWith', 'Contains'.
          example: testuser@example.com
          type: string
        first_name:
          description: First name of this user or group.
          example: Test
          type: string
        group:
          description: |-
            Indicates if this object represents a group.
            This field is NOT supported in filter string. To use any filter on 'group', use 'group_only' query param directly.
          example: false
          type: boolean
        group_membership_ids:
          description: List of unique SIDs of the groups, this user or group belongs
            to.
          example:
          - S-1-5-21-544
          - S-1-5-21-1111111111-2222222222-3333333333-513
          items:
            type: string
          type: array
        guid:
          description: |-
            GUID of the user or group in RFC 4122 format.
            Supported Filters : 'Equals'.
          example: 5F5A45D9-15C0-4654-8FCF-D589C0EF3ECA
          type: string
        id:
          description: Unique SID representing this AD User or Group.
          example: S-1-5-21-1111111111-2222222222-3333333333-500
          type: string
        kiosk_user:
          description: Indicates if this user or group is a "kiosk user" that supports
            client authentication. Client authentication is the process of supporting
            client devices directly logging into resources.
          example: false
          type: boolean
        last_name:
          description: Last name of this user or group.
          example: User
          type: string
        login_name:
          description: |-
            Login name of this user or group.
             Supported Filters : 'Equals', 'StartsWith', 'Contains'.
          example: testuser
          type: string
        long_display_name:
          description: Login name, domain and name for this user or group, else display
            name
          example: testuser@example.com (Test User)
          type: string
        name:
          description: |-
            Name of this user or group.
             Supported Filters : 'Equals', 'StartsWith', 'Contains'.
          example: Test User
          type: string
        phone:
          description: |-
            Phone number of this user.
            Supported Filters : 'Equals', 'StartsWith', 'Contains'.
          example: 1-877-486-9273
          type: string
        sub_group_count:
          description: Number of subgroups in this group, or 0 if not a group.
          example: 2
          format: int32
          type: integer
        user_count:
          description: Number of users in this group, or 0 if not a group.
          example: 2
          format: int32
          type: integer
        user_display_name:
          description: User or group's display name. This corresponds with displayName
            attribute in AD.
          example: Test User
          type: string
        user_principal_name:
          description: User Principal name(UPN) of this user.
          example: testuser@example.com
          type: string
      required:
      - domain
      - group
      - guid
      - id
      title: ADUserOrGroupInfo
      type: object
    ADUserOrGroupSummary:
      description: |-
        Summary information related to AD Users or Groups.
         List API returning this summary information can use search filter query to filter on specific fields supported by filters.
         Supported Filters : 'And', 'Or', 'Equals', 'StartsWith', 'Contains'.
        See the field description to know the filter types it supports.
      example:
        container: example.com/Users
        description: Test User account
        last_name: User
        display_name: example.com\\testuser
        user_principal_name: testuser@example.com
        login_name: testuser
        phone: 1-877-486-9273
        domain: example.com
        distinguished_name: CN=Test User,CN=Users,DC=example,DC=com
        name: Test User
        guid: 5F5A45D9-15C0-4654-8FCF-D589C0EF3ECA
        kiosk_user: false
        id: S-1-5-21-1111111111-2222222222-3333333333-500
        long_display_name: testuser@example.com (Test User)
        first_name: Test
        user_display_name: Test User
        email: testuser@example.com
        group: false
      properties:
        container:
          description: AD container for this user or group.
          example: example.com/Users
          type: string
        description:
          description: |-
            Description number of this user or group.
            Supported Filters : 'Equals', 'StartsWith', 'Contains'.
          example: Test User account
          type: string
        display_name:
          description: Login name with domain of this user or group.
          example: example.com\\testuser
          type: string
        distinguished_name:
          description: Active Directory distinguished name for this user or group.
          example: CN=Test User,CN=Users,DC=example,DC=com
          type: string
        domain:
          description: |-
            DNS name of the domain in which this user or group belongs.
            Supported Filters : 'Equals'.
             Also, if 'Or' filter is used anywhere in filter string for this model class, then that 'Or' filter should nest only 'Equals' filter on 'domain' field.
          example: example.com
          type: string
        email:
          description: |-
            Email address of this user or group.
            Supported Filters : 'Equals', 'StartsWith', 'Contains'.
          example: testuser@example.com
          type: string
        first_name:
          description: First name of this user or group.
          example: Test
          type: string
        group:
          description: |-
            Indicates if this object represents a group.
            This field is NOT supported in filter string. To use any filter on 'group', use 'group_only' query param directly.
          example: false
          type: boolean
        guid:
          description: |-
            GUID of the user or group in RFC 4122 format.
            Supported Filters : 'Equals'.
          example: 5F5A45D9-15C0-4654-8FCF-D589C0EF3ECA
          type: string
        id:
          description: Unique SID representing this AD User or Group.
          example: S-1-5-21-1111111111-2222222222-3333333333-500
          type: string
        kiosk_user:
          description: Indicates if this user or group is a "kiosk user" that supports
            client authentication. Client authentication is the process of supporting
            client devices directly logging into resources.
          example: false
          type: boolean
        last_name:
          description: Last name of this user or group.
          example: User
          type: string
        login_name:
          description: |-
            Login name of this user or group.
             Supported Filters : 'Equals', 'StartsWith', 'Contains'.
          example: testuser
          type: string
        long_display_name:
          description: Login name, domain and name for this user or group, else display
            name
          example: testuser@example.com (Test User)
          type: string
        name:
          description: |-
            Name of this user or group.
             Supported Filters : 'Equals', 'StartsWith', 'Contains'.
          example: Test User
          type: string
        phone:
          description: |-
            Phone number of this user.
            Supported Filters : 'Equals', 'StartsWith', 'Contains'.
          example: 1-877-486-9273
          type: string
        user_display_name:
          description: User or group's display name. This corresponds with displayName
            attribute in AD.
          example: Test User
          type: string
        user_principal_name:
          description: User Principal name(UPN) of this user.
          example: testuser@example.com
          type: string
      required:
      - domain
      - group
      - guid
      - id
      title: ADUserOrGroupSummary
      type: object
    AccessToken:
      description: Access Token
      example:
        access_token: <jwt.access.token>
      properties:
        access_token:
          description: Access Token to be used in API calls.
          example: <jwt.access.token>
          type: string
      required:
      - access_token
      title: AccessToken
      type: object
    ApplicationAntiAffinityData:
      description: Anti-affinity data required to create an application pool.
      example:
        anti_affinity_patterns:
        - '*pad.exe'
        - '*notepad.???'
        anti_affinity_count: 10
      properties:
        anti_affinity_count:
          description: Maximum number of other applications that can be running on
            the RDS Server before the RDS Server is rejected for new application sessions.
          example: 10
          format: int32
          type: integer
        anti_affinity_patterns:
          description: Set of pattern strings to match against process names on a
            RDS Server when attempting to launch a session for this Application. For
            each application running on an RDSServer that matches one of the patterns,
            the tally against the count threshold is incremented.<br>Pattern strings
            may contain wildcard characters. '*' matches zero or more characters.
            '?' matches exactly one character.
          example:
          - '*pad.exe'
          - '*notepad.???'
          items:
            type: string
          type: array
      required:
      - anti_affinity_count
      - anti_affinity_patterns
      title: ApplicationAntiAffinityData
      type: object
    ApplicationFileTypeData:
      description: Information about the file type supported by the application.
      example:
        description: Firefox Document
        type: .html
      properties:
        description:
          description: Friendly name for the file type. If unset, no friendly name
            will be displayed.
          example: Firefox Document
          type: string
        type:
          description: File type supported by this application. This value is case
            insensitive. If multiple file types are specified using the same (case
            insensitive) name and description, all but one will be ignored.
          example: .html
          type: string
      required:
      - type
      title: ApplicationFileTypeData
      type: object
    ApplicationIconInfo:
      description: Application icon information.
      example:
        icon_source: HORIZON_AGENT
        data: data
        width: 16
        id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
        application_pool_ids:
        - 855ea6c5-720a-41e1-96f4-958c90e6e424
        - 1453c2a3-e549-4301-af12-d62210d18d54
        icon_hash: 13a5d8a8410445b51edf45b6eee2cd8d
        height: 16
      properties:
        application_pool_ids:
          description: An application icon could be shared by multiple application
            pools. This is a set of application pool IDs this icon represents.
          example:
          - 855ea6c5-720a-41e1-96f4-958c90e6e424
          - 1453c2a3-e549-4301-af12-d62210d18d54
          items:
            type: string
          type: array
        data:
          description: Icon image data in PNG format.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        height:
          description: Icon height.
          example: 16
          format: int32
          type: integer
        icon_hash:
          description: MD5 hash of icon image data, to enable quick icon lookup.
          example: 13a5d8a8410445b51edf45b6eee2cd8d
          type: string
        icon_source:
          description: |-
            Source of the application icon. The icon can be from Machine/RDS Agent or custom icon.
            * HORIZON_AGENT: When the icon is from machine/RDS agent.
            * HORIZON_CONNECTION_SERVER: When the icon is uploaded by the administrator through connection server.
          enum:
          - HORIZON_AGENT
          - HORIZON_CONNECTION_SERVER
          example: HORIZON_AGENT
          type: string
        id:
          description: Unique ID representing application icon.
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
          type: string
        width:
          description: Icon width.
          example: 16
          format: int32
          type: integer
      title: ApplicationIconInfo
      type: object
    ApplicationOtherFileTypeData:
      description: Information about different file types supported by Application
        that can be passed from agent to client via Connection Server.
      example:
        name: https
        description: Firefox URL
        type: URL
      properties:
        description:
          description: Friendly name for the file type. If unset, no friendly name
            will be displayed.
          example: Firefox URL
          type: string
        name:
          description: The name for other file type data.
          example: https
          type: string
        type:
          description: |-
            Other file type currently supported.
            * URL: URL scheme types supported by application.
          enum:
          - URL
          example: URL
          type: string
      required:
      - name
      - type
      title: ApplicationOtherFileTypeData
      type: object
    ApplicationPoolCreateSpec:
      description: Information required to create an application pool.
      example:
        shortcut_locations:
        - START_MENU
        - START_MENU
        desktop_pool_id: 0103796c-102b-4ed3-953f-3dfe3d23e0fe
        description: description
        anti_affinity_data:
          anti_affinity_patterns:
          - '*pad.exe'
          - '*notepad.???'
          anti_affinity_count: 10
        display_name: Firefox
        version: 72.0.2
        enabled: true
        max_multi_sessions: 5
        multi_session_mode: DISABLED
        category_folder_name: dir1\dir2\dir3\dir4
        cs_restriction_tags:
        - Internal
        - External
        name: Firefox
        enable_pre_launch: false
        executable_path: C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Firefox.lnk
        publisher: Mozilla Corporation
        start_folder: start_folder
        parameters: -p myprofile
        supported_file_types_data:
          enable_auto_update_file_types: true
          enable_auto_update_other_file_types: true
          other_file_types:
          - name: https
            description: Firefox URL
            type: URL
          - name: https
            description: Firefox URL
            type: URL
          file_types:
          - description: Firefox Document
            type: .html
          - description: Firefox Document
            type: .html
        enable_client_restrictions: false
        farm_id: 855ea6c5-720a-41e1-96f4-958c90e6e424
      properties:
        anti_affinity_data:
          $ref: '#/components/schemas/ApplicationAntiAffinityData'
        category_folder_name:
          description: Name of the category folder in the user's OS containing a shortcut
            to the application. Unset if the application does not belong to a category.
          example: dir1\dir2\dir3\dir4
          type: string
        cs_restriction_tags:
          description: Connection server restrictions. Application pool can be accessed
            from only those connection server instances that have a matching tag in
            this list. Null or empty list means that the application pool can be accessed
            from any connection server.
          example:
          - Internal
          - External
          items:
            type: string
          type: array
        description:
          description: Notes about the application pool.
          type: string
        desktop_pool_id:
          description: ID of the desktop pool from which this application pool is
            to be created. Once an application pool is created from a desktop pool,
            it is always associated with that desktop pool, and cannot be removed
            from the desktop pool, or added to another desktop pool. Either this or
            farm id should be set.
          example: 0103796c-102b-4ed3-953f-3dfe3d23e0fe
          type: string
        display_name:
          description: The display name is the name that users will see in Horizon
            client. If the display name is left blank, it defaults to name.
          example: Firefox
          type: string
        enable_client_restrictions:
          description: Indicates whether client restrictions are to be applied to
            application pool. Currently it is valid for application pool created from
            farm. Default value is false.
          example: false
          type: boolean
        enable_pre_launch:
          description: Whether to pre-launch the application. Default value is false.
          example: false
          type: boolean
        enabled:
          description: Indicates whether the application pool is enabled. Default
            value is true
          example: true
          type: boolean
        executable_path:
          description: Path to application executable.
          example: C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Firefox.lnk
          type: string
        farm_id:
          description: ID of the farm from which this application pool is to be created.
            Once an application pool is created from a farm, it is always associated
            with that farm, and cannot be removed from the farm, or added to another
            farm. Either this or desktop pool id should be set.
          example: 855ea6c5-720a-41e1-96f4-958c90e6e424
          type: string
        max_multi_sessions:
          description: Maximum number of multi-sessions a user can have in this application
            pool. This property is required if multi-session mode is set to "ENABLED_DEFAULT_OFF",
            "ENABLED_DEFAULT_ON", or "ENABLED_ENFORCED"Default value is 1.
          example: 5
          format: int32
          type: integer
        multi_session_mode:
          description: |-
            Multi-session mode for the application pool. An application launched in multi-session mode does not support reconnect behavior when user logs in from a different client instance. Multi-session mode should be disabled when pre-launch is enabled.Default value is "DISABLED"
            * DISABLED: Multi-session is not supported for this application.
            * ENABLED_DEFAULT_OFF: Multi-session is supported for this application but is disabled by default. The client would need to explicitly request multi-session launch, if wanted. If a legacy client is used, this will always result in a single-session application launch.
            * ENABLED_DEFAULT_ON: Multi-session mode is supported for this application and is enabled by default. The client can request explicitly for single-session launch, if wanted. If a legacy client is used, this will always result in a multi-session application launch.
            * ENABLED_ENFORCED: Multi-session is supported for this application and it is enforced. The client can not select to launch this application as a single-session application.
          enum:
          - DISABLED
          - ENABLED_DEFAULT_OFF
          - ENABLED_DEFAULT_ON
          - ENABLED_ENFORCED
          example: DISABLED
          type: string
        name:
          description: The application pool name is the unique identifier used to
            identify this application pool. This property must contain only alphanumerics,
            underscores, and dashes. The maximum length is 64 characters.
          example: Firefox
          type: string
        parameters:
          description: Parameters to pass to application when launching.
          example: -p myprofile
          type: string
        publisher:
          description: Application publisher
          example: Mozilla Corporation
          type: string
        shortcut_locations:
          description: Locations of the category folder in the user's OS containing
            a shortcut to the desktop. The value must be set if category folder name
            is provided.
          items:
            enum:
            - START_MENU
            - DESKTOP
            type: string
          type: array
        start_folder:
          description: Starting folder for application
          type: string
        supported_file_types_data:
          $ref: '#/components/schemas/ApplicationSupportedFileTypesData'
        version:
          description: Application version.
          example: 72.0.2
          type: string
      required:
      - executable_path
      - name
      title: ApplicationPoolCreateSpec
      type: object
    ApplicationPoolInfo:
      description: 'Application pool information.<br>List API returning this summary
        information can use search filter query to filter on specific fields supported
        by filters.<br> Supported Filters : ''And'', ''Or'', ''Equals'', ''StartsWith'',
        ''Contains'' and ''EndsWith''.<br>See the field description to know the filter
        types it supports.'
      example:
        access_group_id: 6fd4638a-381f-4518-aed6-042aa3d9f14c
        shortcut_locations:
        - START_MENU
        - START_MENU
        desktop_pool_id: 0103796c-102b-4ed3-953f-3dfe3d23e0fe
        description: description
        anti_affinity_data:
          anti_affinity_patterns:
          - '*pad.exe'
          - '*notepad.???'
          anti_affinity_count: 10
        display_name: Firefox
        version: 72.0.2
        enabled: true
        max_multi_sessions: 5
        multi_session_mode: ENABLED_ENFORCED
        category_folder_name: dir1\dir2\dir3\dir4
        cs_restriction_tags:
        - Internal
        - External
        customized_icon_ids:
        - e8d7bf41-0fcd-477a-b7e0-1338b3868d26
        - b5453336-01c6-4d44-b2f4-7bcdbcf7b82e
        name: Firefox
        enable_pre_launch: false
        executable_path: C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Firefox.lnk
        publisher: Mozilla Corporation
        start_folder: start_folder
        icon_ids:
        - 200fd5fd-26d6-490e-b023-509cbe19c0ac
        - 920b7766-87b4-4712-9dac-1e7afcba28a6
        id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
        parameters: parameters
        supported_file_types_data:
          enable_auto_update_file_types: true
          enable_auto_update_other_file_types: true
          other_file_types:
          - name: https
            description: Firefox URL
            type: URL
          - name: https
            description: Firefox URL
            type: URL
          file_types:
          - description: Firefox Document
            type: .html
          - description: Firefox Document
            type: .html
        enable_client_restrictions: false
        farm_id: 855ea6c5-720a-41e1-96f4-958c90e6e424
      properties:
        access_group_id:
          description: 'Access groups can organize the entities (like application
            pools, desktop pools) in the organization. They can also be used for delegated
            administration. For application pool, this is the same as that of the
            farm or desktop pool that the application pool belongs to.<br>Supported
            Filters: ''Equals''.'
          example: 6fd4638a-381f-4518-aed6-042aa3d9f14c
          type: string
        anti_affinity_data:
          $ref: '#/components/schemas/ApplicationAntiAffinityData'
        category_folder_name:
          description: Name of the category folder in the user's OS containing a shortcut
            to the application. Unset if the application does not belong to a category.
          example: dir1\dir2\dir3\dir4
          type: string
        cs_restriction_tags:
          description: Connection server restrictions. Application pool can be accessed
            from only those connection server instances that have a matching tag in
            this list. Null or empty list means that the application pool can be accessed
            from any connection server.
          example:
          - Internal
          - External
          items:
            type: string
          type: array
        customized_icon_ids:
          description: List of customized icon IDs associated with the application
            which the user has configured.
          example:
          - e8d7bf41-0fcd-477a-b7e0-1338b3868d26
          - b5453336-01c6-4d44-b2f4-7bcdbcf7b82e
          items:
            type: string
          type: array
        description:
          description: 'Notes about the application pool.<br>Supported Filters: ''Equals'',
            ''StartsWith'' and ''Contains''.'
          type: string
        desktop_pool_id:
          description: 'ID of the desktop pool from which this application pool is
            created. Either this or farm id will be set.<br>Supported Filters: ''Equals''.'
          example: 0103796c-102b-4ed3-953f-3dfe3d23e0fe
          type: string
        display_name:
          description: 'The display name is the name that users will see when they
            connect to view client. If the display name is left blank, it defaults
            to name.<br>Supported Filters: ''Equals'', ''StartsWith'' and ''Contains''.'
          example: Firefox
          type: string
        enable_client_restrictions:
          description: 'Indicates whether client restrictions are to be applied to
            application pool. Currently it is valid for application pool created from
            farm.<br>Supported Filters: ''Equals''.'
          example: false
          type: boolean
        enable_pre_launch:
          description: 'Whether to pre-launch the application.<br>Supported Filters:
            ''Equals''.'
          example: false
          type: boolean
        enabled:
          description: 'Indicates whether the application pool is enabled.<br>Supported
            Filters: ''Equals''.'
          example: true
          type: boolean
        executable_path:
          description: 'Path to application executable.<br>Supported Filters: ''Equals'',
            ''StartsWith'', ''EndsWith'' and ''Contains''.'
          example: C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Firefox.lnk
          type: string
        farm_id:
          description: 'ID of the farm from which this application pool is created.
            Either this or desktop pool id will be set.<br>Supported Filters: ''Equals''.'
          example: 855ea6c5-720a-41e1-96f4-958c90e6e424
          type: string
        icon_ids:
          description: List of icon IDs associated with the application which are
            fetched from the agent.
          example:
          - 200fd5fd-26d6-490e-b023-509cbe19c0ac
          - 920b7766-87b4-4712-9dac-1e7afcba28a6
          items:
            type: string
          type: array
        id:
          description: Unique ID representing application pool.
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
          type: string
        max_multi_sessions:
          description: Maximum number of multi-sessions a user can have in this application
            pool. This property is required if multi-session mode is set to "ENABLED_DEFAULT_OFF",
            "ENABLED_DEFAULT_ON", or "ENABLED_ENFORCED"
          example: 5
          format: int32
          type: integer
        multi_session_mode:
          description: |-
            Multi-session mode for the application pool. An application launched in multi-session mode does not support reconnect behavior when user logs in from a different client instance. Multi-session mode should be disabled when pre-launch is enabled.<br>Supported Filters: 'Equals'.
            * DISABLED: Multi-session is not supported for this application.
            * ENABLED_DEFAULT_OFF: Multi-session is supported for this application but is disabled by default. The client would need to explicitly request multi-session launch, if wanted. If a legacy client is used, this will always result in a single-session application launch.
            * ENABLED_DEFAULT_ON: Multi-session mode is supported for this application and is enabled by default. The client can request explicitly for single-session launch, if wanted. If a legacy client is used, this will always result in a multi-session application launch.
            * ENABLED_ENFORCED: Multi-session is supported for this application and it is enforced. The client can not select to launch this application as a single-session application.
          enum:
          - DISABLED
          - ENABLED_DEFAULT_OFF
          - ENABLED_DEFAULT_ON
          - ENABLED_ENFORCED
          example: ENABLED_ENFORCED
          type: string
        name:
          description: 'The application name is the unique identifier used to identify
            this application pool. This property must contain only alphanumerics,
            underscores, and dashes. The maximum length is 64 characters.<br>Supported
            Filters: ''Equals'', ''StartsWith'' and ''Contains''.'
          example: Firefox
          type: string
        parameters:
          description: Parameters to pass to application when launching.
          type: string
        publisher:
          description: 'Application publisher.<br>Supported Filters: ''Equals'', ''StartsWith''
            and ''Contains''.'
          example: Mozilla Corporation
          type: string
        shortcut_locations:
          description: Locations of the category folder in the user's OS containing
            a shortcut to the application. The value must be set if category folder
            name is provided.
          items:
            enum:
            - START_MENU
            - DESKTOP
            type: string
          type: array
        start_folder:
          description: Starting folder for application.
          type: string
        supported_file_types_data:
          $ref: '#/components/schemas/ApplicationSupportedFileTypesData'
        version:
          description: 'Application version.<br>Supported Filters: ''Equals'', ''StartsWith''
            and ''Contains''.'
          example: 72.0.2
          type: string
      required:
      - access_group_id
      - enabled
      - executable_path
      - id
      - name
      title: ApplicationPoolInfo
      type: object
    ApplicationPoolUpdateSpec:
      description: Information required to update an application pool.
      example:
        shortcut_locations:
        - START_MENU
        - START_MENU
        description: description
        anti_affinity_data:
          anti_affinity_patterns:
          - '*pad.exe'
          - '*notepad.???'
          anti_affinity_count: 10
        display_name: Firefox
        version: 72.0.2
        enabled: true
        max_multi_sessions: 5
        multi_session_mode: ENABLED_ENFORCED
        category_folder_name: dir1\dir2\dir3\dir4
        cs_restriction_tags:
        - Internal
        - External
        enable_pre_launch: false
        executable_path: C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Firefox.lnk
        publisher: Mozilla Corporation
        start_folder: start_folder
        parameters: -p myprofile
        supported_file_types_data:
          enable_auto_update_file_types: true
          enable_auto_update_other_file_types: true
          other_file_types:
          - name: https
            description: Firefox URL
            type: URL
          - name: https
            description: Firefox URL
            type: URL
          file_types:
          - description: Firefox Document
            type: .html
          - description: Firefox Document
            type: .html
        enable_client_restrictions: false
      properties:
        anti_affinity_data:
          $ref: '#/components/schemas/ApplicationAntiAffinityData'
        category_folder_name:
          description: Name of the category folder in the user's OS containing a shortcut
            to the application. Unset if the application does not belong to a category.
          example: dir1\dir2\dir3\dir4
          type: string
        cs_restriction_tags:
          description: Connection server restrictions. Application pool can be accessed
            from only those connection server instances that have a matching tag in
            this list. Null or empty list means that the application pool can be accessed
            from any connection server.
          example:
          - Internal
          - External
          items:
            type: string
          type: array
        description:
          description: Notes about the application pool.
          type: string
        display_name:
          description: The display name is the name that users will see in Horizon
            client. If the display name is left blank, it defaults to name.
          example: Firefox
          type: string
        enable_client_restrictions:
          description: Indicates whether client restrictions are to be applied to
            application pool. Currently it is valid for application pool created from
            farm. Default value is false.
          example: false
          type: boolean
        enable_pre_launch:
          description: Whether to pre-launch the application. Default value is false.
          example: false
          type: boolean
        enabled:
          description: Indicates whether the application pool is enabled. Default
            value is true
          example: true
          type: boolean
        executable_path:
          description: Path to application executable.
          example: C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Firefox.lnk
          type: string
        max_multi_sessions:
          description: Maximum number of multi-sessions a user can have in this application
            pool. This property is required if multi-session mode is set to "ENABLED_DEFAULT_OFF",
            "ENABLED_DEFAULT_ON", or "ENABLED_ENFORCED"Default value is 1.
          example: 5
          format: int32
          type: integer
        multi_session_mode:
          description: |-
            Multi-session mode for the application pool. An application launched in multi-session mode does not support reconnect behavior when user logs in from a different client instance. Multi-session mode should be disabled when pre-launch is enabled.Default value is "DISABLED"
            * DISABLED: Multi-session is not supported for this application.
            * ENABLED_DEFAULT_OFF: Multi-session is supported for this application but is disabled by default. The client would need to explicitly request multi-session launch, if wanted. If a legacy client is used, this will always result in a single-session application launch.
            * ENABLED_DEFAULT_ON: Multi-session mode is supported for this application and is enabled by default. The client can request explicitly for single-session launch, if wanted. If a legacy client is used, this will always result in a multi-session application launch.
            * ENABLED_ENFORCED: Multi-session is supported for this application and it is enforced. The client can not select to launch this application as a single-session application.
          enum:
          - DISABLED
          - ENABLED_DEFAULT_OFF
          - ENABLED_DEFAULT_ON
          - ENABLED_ENFORCED
          example: ENABLED_ENFORCED
          type: string
        parameters:
          description: Parameters to pass to application when launching.
          example: -p myprofile
          type: string
        publisher:
          description: Application publisher
          example: Mozilla Corporation
          type: string
        shortcut_locations:
          description: Locations of the category folder in the user's OS containing
            a shortcut to the application. The value must be set if category folder
            name is provided.
          items:
            enum:
            - START_MENU
            - DESKTOP
            type: string
          type: array
        start_folder:
          description: Starting folder for application
          type: string
        supported_file_types_data:
          $ref: '#/components/schemas/ApplicationSupportedFileTypesData'
        version:
          description: Application version.
          example: 72.0.2
          type: string
      required:
      - enabled
      - executable_path
      title: ApplicationPoolUpdateSpec
      type: object
    ApplicationSupportedFileTypesData:
      description: Information about the file types supported by the application.
      example:
        enable_auto_update_file_types: true
        enable_auto_update_other_file_types: true
        other_file_types:
        - name: https
          description: Firefox URL
          type: URL
        - name: https
          description: Firefox URL
          type: URL
        file_types:
        - description: Firefox Document
          type: .html
        - description: Firefox Document
          type: .html
      properties:
        enable_auto_update_file_types:
          description: Whether or not the file types supported by this application
            should be allowed to automatically update to reflect changes reported
            by the agent. Typically this should be set to false if the application
            has manually configured supported file types. Default is true.
          example: true
          type: boolean
        enable_auto_update_other_file_types:
          description: Whether or not the other file types supported by this application
            should be allowed to automatically update to reflect changes reported
            by the agent. Typically this should be set to false if the application
            has manually configured supported file types.
          example: true
          type: boolean
        file_types:
          description: Set of file types reported by the application as supported
            (if this application is discovered) or as specified by the administrator
            (if this application is manually configured). If unset, this application
            does not present any file type support.
          items:
            $ref: '#/components/schemas/ApplicationFileTypeData'
          type: array
        other_file_types:
          description: This represents the different file types reported by Application
            that can be passed from agent to client via broker or as specified by
            the administrator (if this application is manually configured). If unset,
            this application does not present any other file type support.
          items:
            $ref: '#/components/schemas/ApplicationOtherFileTypeData'
          type: array
      required:
      - enable_auto_update_file_types
      - enable_auto_update_other_file_types
      title: ApplicationSupportedFileTypesData
      type: object
    AuthLogin:
      description: Login Request
      example:
        password: <password>
        domain: AD-TEST-DOMAIN
        username: Administrator
      properties:
        domain:
          description: Domain
          example: AD-TEST-DOMAIN
          type: string
        password:
          description: User password
          example: <password>
          items:
            type: string
          type: array
        username:
          description: User Name
          example: Administrator
          type: string
      required:
      - domain
      - password
      - username
      title: AuthLogin
      type: object
    AuthTokens:
      description: Authentication Tokens
      example:
        access_token: <jwt.access.token>
        refresh_token: <jwt.refresh.token>
      properties:
        access_token:
          description: Access Token to be used in API calls.
          example: <jwt.access.token>
          type: string
        refresh_token:
          description: Refresh Token to be used to get a new Access token.
          example: <jwt.refresh.token>
          type: string
      required:
      - access_token
      - refresh_token
      title: AuthTokens
      type: object
    BaseSnapshotInfo:
      description: Information related to VM snapshot.
      example:
        max_number_of_monitors: 1
        renderer3d: DISABLED
        memory_reservation_mb: 0
        total_video_memory_mb: 8.0
        max_resolution_of_any_one_monitor: 1600x1200
        vcenter_id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
        incompatible_reasons:
        - POWERED_ON
        - POWERED_ON
        disk_size_mb: 42949
        description: Base image snapshot
        created_timestamp: 1582181947320
        hardware_version: 13
        path: /Snapshot1
        vgpu_type: vgpu_type
        name: Snapshot1
        memory_mb: 4096
        id: snapshot-4
      properties:
        created_timestamp:
          description: Epoch time in milli seconds, when the VM snapshot was created.
          example: 1582181947320
          format: int64
          type: integer
        description:
          description: Description of the VM snapshot.
          example: Base image snapshot
          type: string
        disk_size_mb:
          description: Sum of capacities of all the virtual disks in the VM snapshot,
            in MB.
          example: 42949
          format: int64
          type: integer
        hardware_version:
          description: VM snapshot hardware version
          example: 13
          format: int32
          type: integer
        id:
          description: Unique ID representing the VM snapshot.
          example: snapshot-4
          type: string
        incompatible_reasons:
          description: Reasons that may preclude this VM snapshot from being used
            in linked/instant clone desktop pool or farm creation.
          items:
            enum:
            - POWERED_ON
            - INCOMPATIBLE_HARDWARE_VERSION
            type: string
          type: array
        max_number_of_monitors:
          description: Maximum number of monitors set in SVGA settings for the VM
            snapshot in vCenter.
          example: 1
          format: int32
          type: integer
        max_resolution_of_any_one_monitor:
          description: Maximum resolution of any one monitor set in SVGA settings
            for the VM snapshot in vCenter.
          example: 1600x1200
          type: string
        memory_mb:
          description: The physical memory size of VM snapshot, in MB
          example: 4096
          format: int32
          type: integer
        memory_reservation_mb:
          description: Amount of memory that is guaranteed available to the virtual
            machine, in MB.
          example: 0
          format: int64
          type: integer
        name:
          description: VM snapshot name.
          example: Snapshot1
          type: string
        path:
          description: VM snapshot path.
          example: /Snapshot1
          type: string
        renderer3d:
          description: |-
            Indicate how the virtual video device for the VM snapshot renders 3D graphics. Will be set only if VM snapshot supports 3D functions.
            * MANAGE_BY_VSPHERE_CLIENT: 3D rendering managed by vSphere Client.
            * AUTOMATIC: 3D rendering is automatic.
            * SOFTWARE: 3D rendering is software dependent. The software renderer is supported (at minimum) on virtual hardware version 8 in a vSphere 5.0 environment.
            * HARDWARE: 3D rendering is hardware dependent. The hardware-based renderer is supported (at minimum) on virtual hardware version 9 in a vSphere 5.1 environment.
            * DISABLED: 3D rendering is disabled.
          enum:
          - MANAGE_BY_VSPHERE_CLIENT
          - AUTOMATIC
          - SOFTWARE
          - HARDWARE
          - DISABLED
          example: DISABLED
          type: string
        total_video_memory_mb:
          description: Total video memory in MB set in SVGA settings for the VM snapshot
            in vCenter.
          example: 8.0
          format: double
          type: number
        vcenter_id:
          description: Virtual Center id for this VM snapshot.
          example: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          type: string
        vgpu_type:
          description: NVIDIA GRID vGPU type configured on this VM snapshot.
          type: string
      title: BaseSnapshotInfo
      type: object
    BaseVMInfo:
      description: Information related to base VM.
      example:
        operating_system_display_name: Microsoft Windows 10 (64-bit)
        path: /Datacenter/vm/VMs/Win10
        vcenter_id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
        incompatible_reasons:
        - IN_USE_BY_DESKTOP_POOL
        - IN_USE_BY_DESKTOP_POOL
        name: Win10
        operating_system: WINDOWS_10
        id: vm-416
        network_type: STANDARD_NETWORK
        datacenter_id: datacenter-1
      properties:
        datacenter_id:
          description: Datacenter id for this VM.
          example: datacenter-1
          type: string
        id:
          description: Unique ID representing a VM.
          example: vm-416
          type: string
        incompatible_reasons:
          description: Reasons that may preclude this BaseVM from having its snapshots
            used in linked or instant clone desktop or farm creation.
          items:
            enum:
            - IN_USE_BY_DESKTOP_POOL
            - IN_USE_BY_LINKED_CLONE_DESKTOP_POOL
            - VIEW_COMPOSER_REPLICA
            - UNSUPPORTED_OS_FOR_FARM
            - UNSUPPORTED_OS
            - NO_SNAPSHOTS
            - INSTANT_INTERNAL
            - IN_USE_BY_INSTANT_CLONE_DESKTOP_POOL
            type: string
          type: array
        name:
          description: VM name.
          example: Win10
          type: string
        network_type:
          description: |-
            Type of network base VM belongs to.
            * STANDARD_NETWORK: Standard network.
            * OPAQUE_NETWORK: Opaque network.
            * DISTRUBUTED_VIRTUAL_PORT_GROUP: DVS port group.
          enum:
          - STANDARD_NETWORK
          - OPAQUE_NETWORK
          - DISTRUBUTED_VIRTUAL_PORT_GROUP
          example: STANDARD_NETWORK
          type: string
        operating_system:
          description: |-
            Operating system.
            * UNKNOWN: Unknown
            * WINDOWS_XP: Windows XP
            * WINDOWS_VISTA: Windows Vista
            * WINDOWS_7: Windows 7
            * WINDOWS_8: Windows 8
            * WINDOWS_10: Windows 10
            * WINDOWS_SERVER_2003: Windows Server 2003
            * WINDOWS_SERVER_2008: Windows Server 2008
            * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2
            * WINDOWS_SERVER_2012: Windows Server 2012
            * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2
            * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above
            * LINUX_OTHER: Linux (other)
            * LINUX_SERVER_OTHER: Linux server (other)
            * LINUX_UBUNTU: Linux (Ubuntu)
            * LINUX_RHEL: Linux (Red Hat Enterprise)
            * LINUX_SUSE: Linux (Suse)
            * LINUX_CENTOS: Linux (CentOS)
          enum:
          - UNKNOWN
          - WINDOWS_XP
          - WINDOWS_VISTA
          - WINDOWS_7
          - WINDOWS_8
          - WINDOWS_10
          - WINDOWS_SERVER_2003
          - WINDOWS_SERVER_2008
          - WINDOWS_SERVER_2008_R2
          - WINDOWS_SERVER_2012
          - WINDOWS_SERVER_2012_R2
          - WINDOWS_SERVER_2016_OR_ABOVE
          - LINUX_OTHER
          - LINUX_SERVER_OTHER
          - LINUX_UBUNTU
          - LINUX_RHEL
          - LINUX_SUSE
          - LINUX_CENTOS
          example: WINDOWS_10
          type: string
        operating_system_display_name:
          description: Operating system display name from Virtual Center.
          example: Microsoft Windows 10 (64-bit)
          type: string
        path:
          description: VM path.
          example: /Datacenter/vm/VMs/Win10
          type: string
        vcenter_id:
          description: Virtual Center id for this VM.
          example: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          type: string
      required:
      - datacenter_id
      - id
      - name
      - network_type
      - operating_system
      - operating_system_display_name
      - path
      - vcenter_id
      title: BaseVMInfo
      type: object
    BulkEntitlementResponseInfo:
      description: Response for each of the entitlement operation for a resource in
        a bulk entitlement operation.
      example:
        status_code: 200
        details:
        - status_code: 200
          ad_user_or_group_id: S-1-5-21-2898529287-1016622242-505487308-500
          error_messages:
          - Entity does not exists.
          - Property is mandatory.
          timestamp: 1561939200000
        - status_code: 200
          ad_user_or_group_id: S-1-5-21-2898529287-1016622242-505487308-500
          error_messages:
          - Entity does not exists.
          - Property is mandatory.
          timestamp: 1561939200000
        id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
        error_messages:
        - Entity does not exists.
        - Property is mandatory.
        timestamp: 1561939200000
      properties:
        details:
          description: List of entitlement response info objects correpsonding to
            each of the given ad-user-or-group SID.
          items:
            $ref: '#/components/schemas/EntitlementResponseInfo'
          type: array
        error_messages:
          description: Reasons for the failure of the operation.
          example:
          - Entity does not exists.
          - Property is mandatory.
          items:
            type: string
          type: array
        id:
          description: Unique ID representing the resource for the entitlement operation.
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
          type: string
        status_code:
          description: Response HTTP status code of the operation.
          example: 200
          format: int32
          type: integer
        timestamp:
          description: Timestamp in milliseconds when the operation failed. Measured
            as epoch time.
          example: 1561939200000
          format: int64
          type: integer
      title: BulkEntitlementResponseInfo
      type: object
    BulkItemResponseInfo:
      description: Response for each of the operation in a bulk operation.
      example:
        status_code: 200
        id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
        error_messages:
        - Entity does not exists.
        - Property is mandatory.
        timestamp: 1561939200000
      properties:
        error_messages:
          description: Reasons for the failure of the operation.
          example:
          - Entity does not exists.
          - Property is mandatory.
          items:
            type: string
          type: array
        id:
          description: Unique ID representing the entity on which the operation was
            performed. Will not be populated for create operation if the operation
            fails.
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
          type: string
        status_code:
          description: Response HTTP status code of the operation.
          example: 200
          format: int32
          type: integer
        timestamp:
          description: Timestamp in milliseconds when the operation failed. Measured
            as epoch time.
          example: 1561939200000
          format: int64
          type: integer
      required:
      - status_code
      - timestamp
      title: BulkItemResponseInfo
      type: object
    CertificateMonitorInfo:
      description: Monitoring data about server's certificate.
      example:
        valid: true
        valid_to: 1561939200000
        valid_from: 1561939200000
      properties:
        valid:
          description: Indicates if the certificate is valid.
          example: true
          type: boolean
        valid_from:
          description: Start time of the certificate validity in milliseconds. Measured
            as epoch time.
          example: 1561939200000
          format: int64
          type: integer
        valid_to:
          description: Expiration time of the certificate validity in milliseconds.
            Measured as epoch time.
          example: 1561939200000
          format: int64
          type: integer
      required:
      - valid
      - valid_from
      - valid_to
      title: CertificateMonitorInfo
      type: object
    CertificateOverrideData:
      description: Certificate details and type information, which can be used to
        override thumbprint details.
      example:
        certificate: certificate
        type: PEM
      properties:
        certificate:
          description: Virtual Center certificate
          type: string
        type:
          description: |-
            Type of Certificate.
            * PEM: PEM encoded certificate type
          enum:
          - PEM
          example: PEM
          type: string
      title: CertificateOverrideData
      type: object
    CertificateServerDetails:
      example:
        name: SSOConnector
        status: OK
      properties:
        name:
          description: Certificate Server name.
          example: SSOConnector
          type: string
        status:
          description: |-
            Certificate Server status.
            * OK: The state of the certificate server is OK as reported by the enrollment servers.
            * WARN: At least one enrollment server reports a warning on this certificate server.
            * ERROR: At least one enrollment server reports an error on this certificate server.
          enum:
          - OK
          - WARN
          - ERROR
          example: OK
          type: string
      required:
      - name
      - status
      title: CertificateServerDetails
      type: object
    CertificateThumbprint:
      description: Information about the SSL Certificate thumbprints
      example:
        ssl_cert_thumbprint: 8f:92:9d:3b:a7:85:55:88:60:cd:e1:c8:1e:70:9a:8b:37:6d:a6:e6
        ssl_cert_thumbprint_algorithm: SHA_1
      properties:
        ssl_cert_thumbprint:
          description: A digest of the certificate.
          example: 8f:92:9d:3b:a7:85:55:88:60:cd:e1:c8:1e:70:9a:8b:37:6d:a6:e6
          type: string
        ssl_cert_thumbprint_algorithm:
          description: |-
            Algorithm used to compute the thumbprint.
            * SHA_1: SHA-1 hashing algorithm.
            * SHA_256: SHA-256 hashing algorithm.
          enum:
          - SHA_1
          - SHA_256
          example: SHA_1
          type: string
      required:
      - ssl_cert_thumbprint
      - ssl_cert_thumbprint_algorithm
      title: CertificateThumbprint
      type: object
    ClientData:
      description: Client data associated with the session.
      example:
        address: 127.0.0.1
        name: EXAMPLE-CLIENT1
        type: WINDOWS
        version: 5.4.0
        location_id: 6bda20e66cda315084edc8b5c67f9cf1e3b0f4559ba990b1004a
      properties:
        address:
          description: "IP address of the client machine for the session. \nThis property\
            \ need not be set."
          example: 127.0.0.1
          type: string
        location_id:
          description: "Client location for the session. \nThis property need not\
            \ be set."
          example: 6bda20e66cda315084edc8b5c67f9cf1e3b0f4559ba990b1004a
          type: string
        name:
          description: "Client machine hostname for the session. \nThis property need\
            \ not be set."
          example: EXAMPLE-CLIENT1
          type: string
        type:
          description: "Client type for the session. \nThis property need not be set.\n\
            * WINDOWS: Client type is Windows client.\n* MAC: Client type is Mac client.\n\
            * HTMLACCESS: Client type is Web client.\n* LINUX: Client type is Linux\
            \ client.\n* IOS: Client type is iOS client.\n* ANDROID: Client type is\
            \ Android client.\n* OTHER: Client type is other."
          enum:
          - WINDOWS
          - MAC
          - HTMLACCESS
          - LINUX
          - IOS
          - ANDROID
          - OTHER
          example: WINDOWS
          type: string
        version:
          description: "Client version for the session. \nThis property need not be\
            \ set."
          example: 5.4.0
          type: string
      title: ClientData
      type: object
    ConnectionServerMonitorCSReplication:
      description: Replication status with respect to Peer Connection Servers in the
        same cluster.
      example:
        server_name: cs1.example.com
        status: OK
      properties:
        server_name:
          description: Connection Server host name or IP address.
          example: cs1.example.com
          type: string
        status:
          description: |-
            LDAP replication status.
            * OK: The connection to the Connection Server is working properly.
            * ERROR: There is a problem with LDAP replication to the Connection Server.
          enum:
          - OK
          - ERROR
          example: OK
          type: string
      required:
      - server_name
      - status
      title: ConnectionServerMonitorCSReplication
      type: object
    ConnectionServerMonitorDetails:
      description: Details of the Connection Server.
      example:
        build: 12345678.0.1
        version: 7.9.0
      properties:
        build:
          description: Connection Server build number.
          example: 12345678.0.1
          type: string
        version:
          description: Connection Server version number.
          example: 7.9.0
          type: string
      required:
      - build
      - version
      title: ConnectionServerMonitorDetails
      type: object
    ConnectionServerMonitorInfo:
      description: Monitoring information related to Connection Server.
      example:
        session_protocol_data:
        - session_count: 341
          session_protocol: BLAST
        - session_count: 341
          session_protocol: BLAST
        tunnel_connection_count: 1234
        cs_replications:
        - server_name: cs1.example.com
          status: OK
        - server_name: cs1.example.com
          status: OK
        connection_count: 1234
        certificate:
          valid: true
          valid_to: 1561939200000
          valid_from: 1561939200000
        name: cs1.example.com
        default_certificate: false
        details:
          build: 12345678.0.1
          version: 7.9.0
        id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
        services:
        - service_name: BLAST_SECURE_GATEWAY
          status: UP
        - service_name: BLAST_SECURE_GATEWAY
          status: UP
        session_threshold: 2000
        status: OK
      properties:
        certificate:
          $ref: '#/components/schemas/CertificateMonitorInfo'
        connection_count:
          description: Number of connections to this Connection Server.
          example: 1234
          format: int32
          type: integer
        cs_replications:
          description: Connection Server replication status with respect to the Peer
            Connection Servers in the same cluster.
          items:
            $ref: '#/components/schemas/ConnectionServerMonitorCSReplication'
          type: array
        default_certificate:
          description: Indicates whether server has the default certificate.
          example: false
          type: boolean
        details:
          $ref: '#/components/schemas/ConnectionServerMonitorDetails'
        id:
          description: Unique ID of the Connection Server.
          example: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          type: string
        name:
          description: Connection Server host name or IP address.
          example: cs1.example.com
          type: string
        services:
          description: Connection Server related Windows services information.
          items:
            $ref: '#/components/schemas/ConnectionServerMonitorServiceStatus'
          type: array
        session_protocol_data:
          description: PCoIP, RDP or BLAST protocol sessions details when clients
            connect directly to the connection server.
          items:
            $ref: '#/components/schemas/ConnectionServerSessionProtocolData'
          type: array
        session_threshold:
          description: The maximum number of connections allowed for the connection
            server through the Horizon client. If all of the secure gateways (HTTP(S)/PCOIP/BLAST)
            are enabled, this field denotes the maximum number of connections allowed
            for the connection server.If none of the secure gateways(HTTP(S)/PCOIP/BLAST)
            are enabled, sessionThreshold value will not be set.
          example: 2000
          format: int32
          type: integer
        status:
          description: |-
            Status of the Connection Server.
            * OK: The Connection Server is working properly.
            * ERROR: Error occurred when connecting to Connection Server.
            * NOT_RESPONDING: The Connection Server is not responding.
            * UNKNOWN: Status of Connection Server is unknown.
          enum:
          - OK
          - ERROR
          - NOT_RESPONDING
          - UNKNOWN
          example: OK
          type: string
        tunnel_connection_count:
          description: Number of connections tunneled through this Connection Server.
          example: 1234
          format: int32
          type: integer
      required:
      - certificate
      - details
      - id
      - name
      - status
      title: ConnectionServerMonitorInfo
      type: object
    ConnectionServerMonitorInfoV2:
      description: Monitoring information related to Connection Server.
      example:
        session_protocol_data:
        - session_count: 341
          session_protocol: BLAST
        - session_count: 341
          session_protocol: BLAST
        tunnel_connection_count: 1234
        cs_replications:
        - server_name: cs1.example.com
          status: OK
        - server_name: cs1.example.com
          status: OK
        certificate:
          valid: true
          valid_to: 1561939200000
          valid_from: 1561939200000
        default_certificate: false
        services:
        - service_name: BLAST_SECURE_GATEWAY
          status: UP
        - service_name: BLAST_SECURE_GATEWAY
          status: UP
        connection_count: 1234
        last_updated_timestamp: 1582029025748
        name: cs1.example.com
        details:
          build: 12345678.0.1
          version: 7.9.0
        id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
        session_threshold: 2000
        status: OK
      properties:
        certificate:
          $ref: '#/components/schemas/CertificateMonitorInfo'
        connection_count:
          description: Number of connections to this Connection Server.
          example: 1234
          format: int32
          type: integer
        cs_replications:
          description: Connection Server replication status with respect to the Peer
            Connection Servers in the same cluster.
          items:
            $ref: '#/components/schemas/ConnectionServerMonitorCSReplication'
          type: array
        default_certificate:
          description: Indicates whether server has the default certificate.
          example: false
          type: boolean
        details:
          $ref: '#/components/schemas/ConnectionServerMonitorDetails'
        id:
          description: Unique ID of the Connection Server.
          example: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          type: string
        last_updated_timestamp:
          description: The timestamp in milliseconds when the last update was obtained.
            Measured as epoch time.
          example: 1582029025748
          format: int64
          type: integer
        name:
          description: Connection Server host name or IP address.
          example: cs1.example.com
          type: string
        services:
          description: Connection Server related Windows services information.
          items:
            $ref: '#/components/schemas/ConnectionServerMonitorServiceStatus'
          type: array
        session_protocol_data:
          description: PCoIP, RDP or BLAST protocol sessions details when clients
            connect directly to the connection server.
          items:
            $ref: '#/components/schemas/ConnectionServerSessionProtocolData'
          type: array
        session_threshold:
          description: The maximum number of connections allowed for the connection
            server through the Horizon client. If all of the secure gateways (HTTP(S)/PCOIP/BLAST)
            are enabled, this field denotes the maximum number of connections allowed
            for the connection server.If none of the secure gateways(HTTP(S)/PCOIP/BLAST)
            are enabled, sessionThreshold value will not be set.
          example: 2000
          format: int32
          type: integer
        status:
          description: |-
            Status of the Connection Server.
            * OK: The Connection Server is working properly.
            * ERROR: Error occurred when connecting to Connection Server.
            * NOT_RESPONDING: The Connection Server is not responding.
            * UNKNOWN: Status of Connection Server is unknown.
          enum:
          - OK
          - ERROR
          - NOT_RESPONDING
          - UNKNOWN
          example: OK
          type: string
        tunnel_connection_count:
          description: Number of connections tunneled through this Connection Server.
          example: 1234
          format: int32
          type: integer
      required:
      - certificate
      - details
      - id
      - name
      - status
      title: ConnectionServerMonitorInfoV2
      type: object
    ConnectionServerMonitorServiceStatus:
      description: Status of Connection Server related Windows service.
      example:
        service_name: BLAST_SECURE_GATEWAY
        status: UP
      properties:
        service_name:
          description: |-
            Service name of the Connection Server.
            * PCOIP_SECURE_GATEWAY: PCoIP Secure Gateway service.
            * BLAST_SECURE_GATEWAY: BLAST Secure Gateway service.
            * SECURITY_GATEWAY_COMPONENT: Security Gateway Component service.
          enum:
          - PCOIP_SECURE_GATEWAY
          - BLAST_SECURE_GATEWAY
          - SECURITY_GATEWAY_COMPONENT
          example: BLAST_SECURE_GATEWAY
          type: string
        status:
          description: |-
            Status of the service.
            * UP: The Windows service is UP and running.
            * DOWN: The Windows service is not UP.
            * UNKNOWN: The Windows service state is Unknown.
          enum:
          - UP
          - DOWN
          - UNKNOWN
          example: UP
          type: string
      required:
      - service_name
      - status
      title: ConnectionServerMonitorServiceStatus
      type: object
    ConnectionServerSessionProtocolData:
      description: Details of connected session count for each session protocol.
      example:
        session_count: 341
        session_protocol: BLAST
      properties:
        session_count:
          description: Number of active sessions launched using the protocol.
          example: 341
          format: int32
          type: integer
        session_protocol:
          description: |-
            Protocol used in launching the session.
            * PCOIP: Display protocol is PCoIP.
            * RDP: Display protocol is RDP.
            * BLAST: Display protocol is BLAST.
            * CONSOLE: Display protocol is console.
            * UNKNOWN: Display protocol is unknown.
          enum:
          - PCOIP
          - RDP
          - BLAST
          - CONSOLE
          - UNKNOWN
          example: BLAST
          type: string
      required:
      - session_count
      - session_protocol
      title: ConnectionServerSessionProtocolData
      type: object
    CustomizationSpecInfo:
      description: Information related to customization specification created in vCenter.
      example:
        incompatible_reasons:
        - DHCP_NOT_CONFIGURED
        - DHCP_NOT_CONFIGURED
        name: windows specification
        description: windows customization specification
        id: a219420d-4799-4517-8f78-39c74c7c4efc
        guest_os: Windows
      properties:
        description:
          description: Customization specification description.
          example: windows customization specification
          type: string
        guest_os:
          description: |-
            Guest Operating system.
            * UNKNOWN: Unknown
            * WINDOWS: Windows
            * LINUX: Linux
          enum:
          - UNKNOWN
          - WINDOWS
          - LINUX
          example: Windows
          type: string
        id:
          description: Unique ID representing the customization specification.
          example: a219420d-4799-4517-8f78-39c74c7c4efc
          type: string
        incompatible_reasons:
          description: Reasons that may preclude this customization specification
            from being used in desktop pool creation.
          items:
            enum:
            - DHCP_NOT_CONFIGURED
            - UNSUPPORTED_OS
            type: string
          type: array
        name:
          description: Name of the customization specification.
          example: windows specification
          type: string
      title: CustomizationSpecInfo
      type: object
    DatacenterInfo:
      description: Information related to datacenter.
      example:
        path: /datacenter
        name: datacenter
        id: datacenter-1
      properties:
        id:
          description: Unique ID representing a datacenter.
          example: datacenter-1
          type: string
        name:
          description: Name of the datacenter.
          example: datacenter
          type: string
        path:
          description: Datacenter path.
          example: /datacenter
          type: string
      required:
      - id
      - name
      - path
      title: DatacenterInfo
      type: object
    DatastoreInfo:
      description: Information related to datastore.
      example:
        capacity_mb: 946176
        host_or_cluster_id: domain-c85
        vcenter_id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
        incompatible_reasons:
        - INACCESSIBLE_TO_SOME_HOSTS
        - INACCESSIBLE_TO_SOME_HOSTS
        local_datastore: true
        vmfs_major_version: "5"
        file_system_type: VMFS
        number_of_vms: 15
        path: /Datacenter/host/Cluster/Datastore1
        free_space_mb: 88239
        disk_type: NON_SSD
        name: Datastore1
        id: datastore-29
        datacenter_id: datacenter-1
      properties:
        capacity_mb:
          description: Maximum capacity of this datastore, in MB.
          example: 946176
          format: int64
          type: integer
        datacenter_id:
          description: Datacenter id for this datastore.
          example: datacenter-1
          type: string
        disk_type:
          description: |-
            Disk type of the datastore.
            * SSD: Solid State Drive disk type.
            * NON_SSD: NON-Solid State Drive disk type.
            * UNKNOWN: Unknown disk type.
            * NON_VMFS: NON-VMFS disk type.
          enum:
          - SSD
          - NON_SSD
          - UNKNOWN
          - NON_VMFS
          example: NON_SSD
          type: string
        file_system_type:
          description: |-
            File system type of the datastore.
            * VMFS: Virtual Machine File System.
            * NFS: Network File System.
            * VSAN: vSAN File System.
            * VVOL: Virtual Volumes.
          enum:
          - VMFS
          - NFS
          - VSAN
          - VVOL
          example: VMFS
          type: string
        free_space_mb:
          description: Available capacity of this datastore, in MB.
          example: 88239
          format: int64
          type: integer
        host_or_cluster_id:
          description: Host or Cluster id for this datastore.
          example: domain-c85
          type: string
        id:
          description: Unique ID representing the datastore.
          example: datastore-29
          type: string
        incompatible_reasons:
          description: Reasons that may preclude this Datastore from being used in
            desktop pool/farm.
          items:
            enum:
            - INACCESSIBLE_TO_SOME_HOSTS
            - VMFS5_AND_MORE_THAN_32_HOSTS
            - NOT_VMFS5_AND_MORE_THAN_8_HOSTS
            - ESX51_AND_MORE_THAN_32_HOSTS
            - NOT_ESX51_AND_MORE_THAN_8_HOSTS
            - INCOMPATIBLE_NATIVE_SNAPSHOTS
            type: string
          type: array
        local_datastore:
          description: Indicates if this datastore is local to a single host.
          example: true
          type: boolean
        name:
          description: Datastore name.
          example: Datastore1
          type: string
        number_of_vms:
          description: Indicates the number of virtual machines the datastore has
            for desktop pool/farm when applicable
          example: 15
          format: int32
          type: integer
        path:
          description: Datastore path.
          example: /Datacenter/host/Cluster/Datastore1
          type: string
        vcenter_id:
          description: Virtual Center id for this datastore.
          example: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          type: string
        vmfs_major_version:
          description: The VMFS major version number.
          example: "5"
          type: string
      title: DatastoreInfo
      type: object
    DatastorePathInfo:
      description: Information related to datastore paths.
      example:
        path: '[datastore1] ISO images'
        id: a219420d-4799-4517-8f78-39c74c7c4efc
      properties:
        id:
          description: Unique ID representing the datastore path.
          example: a219420d-4799-4517-8f78-39c74c7c4efc
          type: string
        path:
          description: Datastore path.
          example: '[datastore1] ISO images'
          type: string
      title: DatastorePathInfo
      type: object
    DesktopPoolCloneprepCustomizationSettings:
      description: Settings for ClonePrep customization. This setting is only applicable
        to instant clone desktop pools.
      example:
        post_synchronization_script_name: cloneprep_postsync_script
        post_synchronization_script_parameters: p1 p2 p3
        power_off_script_name: cloneprep_poweroff_script
        priming_computer_account: a219420d-4799-4517-8f78-39c74c7c4efc
        power_off_script_parameters: p1 p2 p3
      properties:
        post_synchronization_script_name:
          description: Post synchronization script. ClonePrep can run a customization
            script on instant-clone machines after they are created or recovered or
            a new image is pushed. Provide the path to the script on the parent virtual
            machine.
          example: cloneprep_postsync_script
          type: string
        post_synchronization_script_parameters:
          description: Post synchronization script parameters.
          example: p1 p2 p3
          type: string
        power_off_script_name:
          description: Power off script. ClonePrep can run a customization script
            on instant-clone machines before they are powered off. Provide the path
            to the script on the parent virtual machine.
          example: cloneprep_poweroff_script
          type: string
        power_off_script_parameters:
          description: Power off script parameters.
          example: p1 p2 p3
          type: string
        priming_computer_account:
          description: Instant Clone publishing needs an additional computer account
            in the same AD domain as the clones. This field accepts the pre-created
            computer accounts.
          example: a219420d-4799-4517-8f78-39c74c7c4efc
          type: string
      title: DesktopPoolCloneprepCustomizationSettings
      type: object
    DesktopPoolCustomizationSettings:
      description: Customization settings.
      example:
        cloneprep_customization_settings:
          post_synchronization_script_name: cloneprep_postsync_script
          post_synchronization_script_parameters: p1 p2 p3
          power_off_script_name: cloneprep_poweroff_script
          priming_computer_account: a219420d-4799-4517-8f78-39c74c7c4efc
          power_off_script_parameters: p1 p2 p3
        do_not_power_on_vms_after_creation: false
        ad_container_rdn: CN=Computers
        quickprep_customization_settings:
          post_synchronization_script_parameters: p1 p2 p3
          post_synchronization_script_path: quickprep_postsync_script
          power_off_script_path: quickprep_poweroff_script
          power_off_script_parameters: p1 p2 p3
        view_composer_domain_account_id: 0ebb464a-8780-4860-924f-8b2d1d1b33ef
        instant_clone_domain_account_id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
        customization_type: CLONE_PREP
        reuse_pre_existing_accounts: false
        sysprep_customization_spec_id: a219420d-4799-4517-8f78-39c74c7c4efc
      properties:
        ad_container_rdn:
          description: 'Applicable To: Linked/instant clone automated desktop pools.<br>View
            Composer and Instant Clone Engine Active Directory container for QuickPrep
            and ClonePrep.'
          example: CN=Computers
          type: string
        cloneprep_customization_settings:
          $ref: '#/components/schemas/DesktopPoolCloneprepCustomizationSettings'
        customization_type:
          description: |-
            Type of customization to use.
            * NONE: Applicable To: Full clone automated desktop pools.<br>No customization.
            * QUICK_PREP: Applicable To: Linked clone automated desktop pools.<br>QuickPrep is a VMware system tool executed by View Composer during a linked-clone machine deployment. QuickPrep personalizes each machine created from the Master image.
            * SYS_PREP: Applicable To: All automated desktop pools.<br>Microsoft Sysprep is a tool to deploy the configured operating system installation from a base image. The machine can then be customized based on an answer script. Sysprep can modify a larger number of configurable parameters than QuickPrep.
            * CLONE_PREP: Applicable To: Instant clone automated desktop pools.<br>ClonePrep is a VMware system tool executed by Instant Clone Engine during a instant clone machine deployment. ClonePrep personalizes each machine created from the Master image.
          enum:
          - NONE
          - QUICK_PREP
          - SYS_PREP
          - CLONE_PREP
          example: CLONE_PREP
          type: string
        do_not_power_on_vms_after_creation:
          description: Whether to power on VMs after creation. This is the settings
            when customization will be done manually.
          example: false
          type: boolean
        instant_clone_domain_account_id:
          description: 'Applicable To: Instant clone automated desktop pools.<br>Instant
            clone domain account. This is the administrator which will add the machines
            to its domain upon creation.'
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
          type: string
        quickprep_customization_settings:
          $ref: '#/components/schemas/DesktopPoolQuickprepCustomizationSettings'
        reuse_pre_existing_accounts:
          description: 'Applicable To: Manual and automated desktop pools.<br>Whether
            to allow the use of existing AD computer accounts when the VM names of
            newly created clones match the existing computer account names. This is
            applicable only for automated desktop pools.'
          example: false
          type: boolean
        sysprep_customization_spec_id:
          description: Customization specification to use when Sysprep customization
            is requested.
          example: a219420d-4799-4517-8f78-39c74c7c4efc
          type: string
        view_composer_domain_account_id:
          description: 'Applicable To: Linked clone automated desktop pools.<br>View
            Composer domain account. This is the administrator which will add the
            machines to its domain upon creation. This must be set for linked-clone
            automated desktop pools.'
          example: 0ebb464a-8780-4860-924f-8b2d1d1b33ef
          type: string
      title: DesktopPoolCustomizationSettings
      type: object
    DesktopPoolDatastoreSettings:
      description: Settings for a Virtual Center datastore.
      example:
        storage_overcommit: CONSERVATIVE
        datastore_id: datastore-1
        sdrs_cluster: false
      properties:
        datastore_id:
          description: Id of the datastore.
          example: datastore-1
          type: string
        sdrs_cluster:
          description: Whether datastore represents a Storage DRS cluster.
          example: false
          type: boolean
        storage_overcommit:
          description: |-
            Storage overcommit determines how Horizon places new machines on the selected datastores. With an aggressive overcommit level, Horizon reserves less space for sparse disk growth, but fits more machines on the datastore.
            * NONE: No overcommit.
            * CONSERVATIVE: Conservative.
            * MODERATE: Moderate.
            * AGGRESSIVE: Aggressive.
            * UNBOUNDED: Unbounded.
          enum:
          - NONE
          - CONSERVATIVE
          - MODERATE
          - AGGRESSIVE
          - UNBOUNDED
          example: CONSERVATIVE
          type: string
      title: DesktopPoolDatastoreSettings
      type: object
    DesktopPoolDisplayProtocolSettings:
      description: Settings for the networking protocol to display the remote machine.
      example:
        display_protocols:
        - PCOIP
        - BLAST
        - RDP
        max_number_of_monitors: 2
        renderer3d: "true"
        session_collaboration_enabled: false
        html_access_enabled: true
        max_resolution_of_any_one_monitor: WUXGA
        default_display_protocol: PCOIP
        vgpu_grid_profile: instant-profile
        vram_size_mb: 64
        allow_users_to_choose_protocol: true
        grid_vgpus_enabled: false
      properties:
        allow_users_to_choose_protocol:
          description: Indicates whether the users can choose the protocol. Default
            value is true.
          example: true
          type: boolean
        default_display_protocol:
          description: |-
            The default display protocol for the desktop pool. For a managed desktop pool, this will default to PCOIP.For an unmanaged desktop pool, this will default to RDP.
            * RDP: Microsoft Remote Desktop Protocol.
            * PCOIP: PCoIP protocol.
            * BLAST: BLAST protocol.
          enum:
          - RDP
          - PCOIP
          - BLAST
          example: PCOIP
          type: string
        display_protocols:
          description: List of supported display protocols for this desktop pool.Default
            value is [PCOIP, RDP, BLAST].
          example:
          - PCOIP
          - BLAST
          - RDP
          items:
            enum:
            - RDP
            - PCOIP
            - BLAST
            type: string
          type: array
        grid_vgpus_enabled:
          description: When 3D rendering is managed by the vSphere Client, this enables
            support for NVIDIA GRID vGPUs.This will be false if 3D rendering is not
            managed by the vSphere Client. If this is true,the host or cluster associated
            with the desktop pool must support NVIDIA GRID and vGPU types required
            by the desktop pool's VirtualMachines,VmTemplate, or BaseImageSnapshot.
            If this is false, the desktop pool's VirtualMachines, VmTemplate, orBaseImageSnapshot
            must not support NVIDIA GRID vGPUs. Since suspending VMs with passthroughdevices
            such as vGPUs is not possible, power_policy cannot be set to SUSPEND if
            this is enabled.Default value is false.
          example: false
          type: boolean
        html_access_enabled:
          description: This property is no longer in use for Horizon Components. It
            is always set to true. HTML Access, enabled by VMware Blast technology,
            allows users to connect to machines from Web browsers. Horizon Client
            software does not have to be installed on the client devices. To enable
            HTML Access, you must install the HTML Machine Access feature pack. Also,
            Blast must be configured as a supported protocol in displayProtocols.
          example: true
          type: boolean
        max_number_of_monitors:
          description: When 3D is disabled, the 'Max number of monitors' and 'Max
            resolution of any one monitor' settings determine the amount ofvRAM assigned
            to machines in this desktop. The greater these values are, the more memory
            will be consumeon the associated ESX hosts. Existing virtual machines
            must be powered off and subsequently powered onfor the change to take
            effect. A restart will not cause the changes to take effect. If 3D is
            enabled and managedby View, the maximum number of monitors must be 1 or
            2. For Instant Clones, this value is inherited from snapshot of Master
            VM.
          example: 2
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: int32
          maximum: 4
          minimum: 1
          type: integer
        max_resolution_of_any_one_monitor:
          description: |-
            If 3D rendering is enabled and managed by View, this must be set to the default value. When 3D rendering is disabled,the 'Max number of monitors' and 'Max resolution of any one monitor' settings determine the amount of vRAM assignedto machines in this desktop. The greater these values are, the more memory will be consumed on the associated ESX hosts.This setting is only relevant on managed machines. Existing virtual machines must be powered off and subsequently poweredon for the change to take effect. A restart will not cause the changes to take effect. For Instant Clones,this value is inherited from snapshot of Master VM. This property has a default value of WUXGA.
            * WSXGA_PLUS: 1680x1050 resolution.
            * WUXGA: 1920x1200 resolution.
            * WQXGA: 2560x1600 resolution.
            * UHD: 3840x2160 resolution.
          enum:
          - WSXGA_PLUS
          - WUXGA
          - WQXGA
          - UHD
          example: WUXGA
          type: string
        renderer3d:
          description: |-
            3D rendering is supported on Windows 7 or later guests running on VMs with virtual hardware version8 or later. The default protocol must be PCoIP and users must not be allowed to choose their ownprotocol to enable 3D rendering. For instant clone source desktop 3D rendering always mapped to MANAGE_BY_VSPHERE_CLIENT.Default value is DISABLED.
            * MANAGE_BY_VSPHERE_CLIENT: 3D rendering managed by vSphere Client.
            * AUTOMATIC: 3D rendering is automatic.
            * SOFTWARE: 3D rendering is software dependent. The software renderer is supported (at minimum) on virtual hardware version 8 in a vSphere 5.0 environment.
            * HARDWARE: 3D rendering is hardware dependent. The hardware-based renderer is supported (at minimum) on virtual hardware version 9 in a vSphere 5.1 environment.
            * DISABLED: 3D rendering is disabled.
          enum:
          - MANAGE_BY_VSPHERE_CLIENT
          - AUTOMATIC
          - SOFTWARE
          - HARDWARE
          - DISABLED
          example: "true"
          type: string
        session_collaboration_enabled:
          description: Enable session collaboration feature. Session collaborationallows
            a user to share their remote session with other users.BLAST must be configured
            as a supported protocol in supported_display_protocols.Default value is
            false.
          example: false
          type: boolean
        vgpu_grid_profile:
          description: NVIDIA GRID vGPUs might have multiple profiles and any one
            of the available profiles can beapplied to newly created instant clone
            desktop. The profile specified in this field will beused in the newly
            created instant clone desktop. Will be set if enable_grid_vgpus set to
            true.
          example: instant-profile
          type: string
        vram_size_mb:
          description: vRAM size for View managed 3D rendering. More VRAM can improve
            3D performance.Size is in MB. On ESXi 5.0 hosts, the renderer allows a
            maximum VRAM size of 128MB. On ESXi 5.1and later hosts, the maximum VRAM
            size is 512MB. For Instant Clones, this value is inherited from snapshot
            of Master VM.This property is applicable when 3D renderer is not disabled.
            This has a default value of 96.
          example: 64
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: int32
          maximum: 512
          minimum: 64
          type: integer
      required:
      - allow_users_to_choose_protocol
      - default_display_protocol
      - display_protocols
      - html_access_enabled
      - renderer3d
      - session_collaboration_enabled
      - vram_size_mb
      title: DesktopPoolDisplayProtocolSettings
      type: object
    DesktopPoolInfo:
      description: Information related to Desktop Pool.
      example:
        settings:
          shortcut_locations: Desktop
          allow_mutilple_sessions_per_user: false
          display_protocol_settings:
            display_protocols:
            - PCOIP
            - BLAST
            - RDP
            max_number_of_monitors: 2
            renderer3d: "true"
            session_collaboration_enabled: false
            html_access_enabled: true
            max_resolution_of_any_one_monitor: WUXGA
            default_display_protocol: PCOIP
            vgpu_grid_profile: instant-profile
            vram_size_mb: 64
            allow_users_to_choose_protocol: true
            grid_vgpus_enabled: false
          category_folder_name: dir1
          cs_restriction_tags: CS1_TAG1
          cloud_assigned: false
          session_type: DESKTOP
          delete_in_progress: false
          session_settings:
            disconnected_session_timeout_minutes: 5
            logoff_after_timeout: false
            power_policy: ALWAYS_POWERED_ON
            delete_or_refresh_machine_after_logoff: NEVER
            allow_users_to_reset_machines: false
            disconnected_session_timeout_policy: NEVER
            empty_session_timeout_minutes: 5
            empty_session_timeout_policy: AFTER
            refresh_os_disk_after_logoff: NEVER
            refresh_period_days_for_replica_os_disk: 1
            allow_multiple_sessions_per_user: false
            refresh_threshold_percentage_for_replica_os_disk: 6
          cloud_managed: false
          enable_client_restrictions: false
        name: sales-pool1
        description: Desktop pool description
        id: 0103796c-102b-4ed3-953f-3dfe3d23e0fe
        source: INSTANT_CLONE
        display_name: pool
        type: AUTOMATED
        enabled: true
      properties:
        description:
          description: Description of the Desktop Pool. The maximum length is 1024
            characters.
          example: Desktop pool description
          type: string
        display_name:
          description: Display name of the Desktop Pool. The maximum length is 256
            characters.
          example: pool
          type: string
        enabled:
          description: Indicates whether the Desktop Pool is enabled for brokering.
          example: true
          type: boolean
        id:
          description: Unique ID representing Desktop Pool.
          example: 0103796c-102b-4ed3-953f-3dfe3d23e0fe
          type: string
        name:
          description: Name of the Desktop Pool. The maximum length is 64 characters.
          example: sales-pool1
          type: string
        settings:
          $ref: '#/components/schemas/DesktopPoolSettings'
        source:
          description: |-
            Source of the Machines in this Desktop Pool.
            * INSTANT_CLONE: The Desktop Pool uses instant clone technology for provisioning the machines.Applicable for AUTOMATED type desktop pools.
            * LINKED_CLONE: The Desktop Pool uses linked clone technology for provisioning the machines.Applicable for AUTOMATED type desktop pools.
            * VIRTUAL_CENTER: The Desktop Pool uses Virtual Center as source for provisioning the machines.Applicable for AUTOMATED and MANUAL type desktop pools.
            * RDS: The Desktop Pool is backed by Farm. The Farm used in this Desktop Pool can be of any Source.
            * UNMANAGED: The Desktop Pool holds the non-vCenter source machines that includes physical computers,blade PCs and non-vCenter servers. Applicable for MANUAL type desktop pools.
          enum:
          - INSTANT_CLONE
          - LINKED_CLONE
          - VIRTUAL_CENTER
          - RDS
          - UNMANAGED
          example: INSTANT_CLONE
          type: string
        type:
          description: |-
            Type of the Desktop Pool.
            * AUTOMATED: Automated Desktop Pool.
            * MANUAL: Manual Desktop Pool.
            * RDS: RDS Desktop Pool.
          enum:
          - AUTOMATED
          - MANUAL
          - RDS
          example: AUTOMATED
          type: string
      required:
      - enabled
      - id
      - name
      - settings
      - source
      - type
      title: DesktopPoolInfo
      type: object
    DesktopPoolInfoV2:
      description: Information related to Desktop Pool.
      example:
        specific_naming_settings:
          num_unassigned_machines_kept_powered_on: 1
          num_machines: 10
          start_machines_in_maintenance_mode: false
        user_assignment: DEDICATED
        shortcut_locations: Desktop
        vcenter_id: f148f3e8-db0e-4abb-9c33-7e5205ccd360
        transparent_page_sharing_scope: VM
        description: Desktop pool description
        pattern_naming_settings:
          number_of_spare_machines: 10
          provisioning_time: ON_DEMAND
          min_number_of_machines: 10
          naming_pattern: vm-{n}-sales
          max_number_of_machines: 100
        source: INSTANT_CLONE
        storage_settings:
          persistent_disk_drive_letter: D
          use_vsan: false
          datastores:
          - storage_overcommit: CONSERVATIVE
            datastore_id: datastore-1
            sdrs_cluster: false
          - storage_overcommit: CONSERVATIVE
            datastore_id: datastore-1
            sdrs_cluster: false
          reclamation_threshold_mb: 1024
          use_separate_datastores_replica_and_os_disks: false
          non_persistent_redirect_disposable_files: true
          persistent_disk_size_mb: 2048
          redirect_windows_profile: false
          replica_disk_datastore_id: datastore-1
          reclaim_vm_disk_space: false
          persistent_disk_datastores:
          - storage_overcommit: CONSERVATIVE
            datastore_id: datastore-1
            sdrs_cluster: false
          - storage_overcommit: CONSERVATIVE
            datastore_id: datastore-1
            sdrs_cluster: false
          use_separate_datastores_persistent_and_os_disks: false
          non_persistent_disk_size_mb: 4096
          use_native_snapshots: false
          non_persistent_disk_drive_letter: Auto
        type: AUTOMATED
        view_storage_accelerator_settings:
          regenerate_view_storage_accelerator_days: 7
          use_view_storage_accelerator: false
          view_storage_accelerator_disk_types: OS_DISKS
          blackout_times:
          - start_time: 10:00
            end_time: 22:00
            days:
            - MONDAY
            - MONDAY
          - start_time: 10:00
            end_time: 22:00
            days:
            - MONDAY
            - MONDAY
        enabled: true
        allow_rds_pool_multi_session_per_user: false
        image_source: VIRTUAL_CENTER
        nics:
        - network_interface_card_name: Network adapter 1
          network_label_assignment_specs:
          - max_label: 1
            max_label_type: LIMITED
            enabled: true
            network_label_name: vm-network
          - max_label: 1
            max_label_type: LIMITED
            enabled: true
            network_label_name: vm-network
          network_interface_card_id: c9896e51-48a2-4d82-ae9e-a0246981b473
        - network_interface_card_name: Network adapter 1
          network_label_assignment_specs:
          - max_label: 1
            max_label_type: LIMITED
            enabled: true
            network_label_name: vm-network
          - max_label: 1
            max_label_type: LIMITED
            enabled: true
            network_label_name: vm-network
          network_interface_card_id: c9896e51-48a2-4d82-ae9e-a0246981b473
        id: 0103796c-102b-4ed3-953f-3dfe3d23e0fe
        session_type: DESKTOP
        enable_client_restrictions: false
        access_group_id: 6fd4638a-381f-4518-aed6-042aa3d9f14c
        automatic_user_assignment: false
        display_protocol_settings:
          display_protocols:
          - PCOIP
          - BLAST
          - RDP
          max_number_of_monitors: 2
          renderer3d: "true"
          session_collaboration_enabled: false
          html_access_enabled: true
          max_resolution_of_any_one_monitor: WUXGA
          default_display_protocol: PCOIP
          vgpu_grid_profile: instant-profile
          vram_size_mb: 64
          allow_users_to_choose_protocol: true
          grid_vgpus_enabled: false
        provisioning_status_data:
          instant_clone_operation: NONE
          instant_clone_pending_im_tag_id: e9896e51-48a2-4d82-ae9e-a0246981b484
          instant_clone_push_image_settings:
            start_time: 1587081283000
            add_virtual_tpm: false
            logoff_policy: c9896e51-48a2-4d82-ae9e-a0246981b473
            stop_on_first_error: true
          last_provisioning_error_time: 1587081283000
          instant_clone_pending_im_stream_id: c9896e51-48a2-4d82-ae9e-a0246981b473
          instant_clone_pending_image_progress: 10
          instant_clone_pending_image_snapshot_id: snapshot-1
          instant_clone_pending_image_error: Could not authenticate with domain administrator
            credentials
          last_provisioning_error: 'Initial publish failed: Could not authenticate
            with domain administrator credentials'
          instant_clone_current_image_state: c9896e51-48a2-4d82-ae9e-a0246981b473
          instant_clone_pending_image_parent_vm_id: vm-1
          instant_clone_pending_image_state: FAILED
        allow_multiple_user_assignments: true
        customization_settings:
          cloneprep_customization_settings:
            post_synchronization_script_name: cloneprep_postsync_script
            post_synchronization_script_parameters: p1 p2 p3
            power_off_script_name: cloneprep_poweroff_script
            priming_computer_account: a219420d-4799-4517-8f78-39c74c7c4efc
            power_off_script_parameters: p1 p2 p3
          do_not_power_on_vms_after_creation: false
          ad_container_rdn: CN=Computers
          quickprep_customization_settings:
            post_synchronization_script_parameters: p1 p2 p3
            post_synchronization_script_path: quickprep_postsync_script
            power_off_script_path: quickprep_poweroff_script
            power_off_script_parameters: p1 p2 p3
          view_composer_domain_account_id: 0ebb464a-8780-4860-924f-8b2d1d1b33ef
          instant_clone_domain_account_id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
          customization_type: CLONE_PREP
          reuse_pre_existing_accounts: false
          sysprep_customization_spec_id: a219420d-4799-4517-8f78-39c74c7c4efc
        display_name: pool
        enable_provisioning: true
        provisioning_settings:
          vm_folder_id: group-v1
          im_tag_id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
          host_or_cluster_id: domain-s425
          im_stream_id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
          vm_template_id: vm-1
          add_virtual_tpm: false
          base_snapshot_id: snapshot-1
          resource_pool_id: resgroup-1
          parent_vm_id: vm-2
          datacenter_id: datacenter-1
          min_ready_vms_on_vcomposer_maintenance: 10
        category_folder_name: dir1
        stop_provisioning_on_error: true
        cs_restriction_tags: CS1_TAG1
        name: sales-pool1
        cloud_assigned: false
        delete_in_progress: false
        session_settings:
          disconnected_session_timeout_minutes: 5
          power_policy: ALWAYS_POWERED_ON
          delete_or_refresh_machine_after_logoff: NEVER
          disconnected_session_timeout_policy: NEVER
          refresh_os_disk_after_logoff: NEVER
          logoff_after_timeout: false
          pre_launch_session_timeout_minutes: 10
          allow_users_to_reset_machines: false
          empty_session_timeout_minutes: 5
          empty_session_timeout_policy: AFTER
          refresh_period_days_for_replica_os_disk: 1
          pre_launch_session_timeout_policy: AFTER
          allow_multiple_sessions_per_user: false
          refresh_threshold_percentage_for_replica_os_disk: 6
        cloud_managed: false
        display_assigned_machine_name: false
        farm_id: 855ea6c5-720a-41e1-96f4-958c90e6e424
      properties:
        access_group_id:
          description: Access groups can organize the entities (like application pools,
            desktop pools) in the organization. They can also be used for delegated
            administration.
          example: 6fd4638a-381f-4518-aed6-042aa3d9f14c
          type: string
        allow_multiple_user_assignments:
          description: 'Applicable To: Dedicated manual and automated desktop pools
            (except linked clone pools) with manual user assignment.<br>Whether assignment
            of multiple users to a single machine is allowed. '
          example: true
          type: boolean
        allow_rds_pool_multi_session_per_user:
          description: 'Applicable To: RDS desktop pools.<br>Whether multiple sessions
            are allowed per user for this pool.For other desktop pools, allow_multiple_sessions_per_user
            in sessionSettings will be applicable.'
          example: false
          type: boolean
        automatic_user_assignment:
          description: 'Applicable To: Dedicated manual and automated desktop pools.<br>Automatic
            assignment of a user the first time they access the machine.'
          example: false
          type: boolean
        category_folder_name:
          description: Name of the category folder in the user's OS containing a shortcut
            to the desktop pool.Will be unset if the desktop does not belong to a
            category.This property defines valid folder names with a max length of
            64 characters and up to 4 subdirectory levels.The subdirectories can be
            specified using a backslash, e.g. (dir1\dir2\dir3\dir4). Folder names
            can't start orend with a backslash nor can there be 2 or more backslashes
            together. Combinations such as(\dir1, dir1\dir2\, dir1\\dir2, dir1\\\dir2)
            are invalid. The windows reserved keywords(CON, PRN, NUL, AUX, COM1 -
            COM9, LPT1 - LPT9 etc.) are not allowed in subdirectory names.
          example: dir1
          type: string
        cloud_assigned:
          description: Indicates whether this desktop is assigned to a workspace in
            Horizon Cloud Services.
          example: false
          type: boolean
        cloud_managed:
          description: Indicates whether this desktop is managed by Horizon Cloud
            Services.This can be false only when cloud_assigned is false.
          example: false
          type: boolean
        cs_restriction_tags:
          description: List of tags for which the access to the desktop pool is restricted
            to.No list indicates that desktop pool can be accessed from any connection
            server.
          example: CS1_TAG1
          items:
            type: string
          type: array
        customization_settings:
          $ref: '#/components/schemas/DesktopPoolCustomizationSettings'
        delete_in_progress:
          description: Indicates whether the desktop pool is in the process of being
            deleted.Default value is false.
          example: false
          type: boolean
        description:
          description: Description of the Desktop Pool. The maximum length is 1024
            characters.
          example: Desktop pool description
          type: string
        display_assigned_machine_name:
          description: 'Applicable To: Dedicated manual and automated desktop pools.<br>Indicates
            whether users should see the hostname of the machine assigned to them
            instead of displayName when they connect using View Client. If no machine
            is assigned to the user then "displayName (No machine assigned)" will
            be displayed in the client.'
          example: false
          type: boolean
        display_name:
          description: Display name of the Desktop Pool. The maximum length is 256
            characters.
          example: pool
          type: string
        display_protocol_settings:
          $ref: '#/components/schemas/DesktopPoolDisplayProtocolSettings'
        enable_client_restrictions:
          description: Client restrictions to be applied to the desktop pool.
          example: false
          type: boolean
        enable_provisioning:
          description: 'Applicable To: Automated desktop pools.<br>Whether provisioning
            is enabled.'
          example: true
          type: boolean
        enabled:
          description: Indicates whether the Desktop Pool is enabled for brokering.
          example: true
          type: boolean
        farm_id:
          description: 'Applicable To: RDS desktop pools.<br>Farm needed to create
            RDS desktop pool.'
          example: 855ea6c5-720a-41e1-96f4-958c90e6e424
          type: string
        id:
          description: Unique ID representing Desktop Pool.
          example: 0103796c-102b-4ed3-953f-3dfe3d23e0fe
          type: string
        image_source:
          description: |-
            Applicable To: Automated desktop pools.<br>Source of image used in the desktop pool.
            * VIRTUAL_CENTER: Image was created in virtual center.
            * IMAGE_CATALOG: Image was created in image catalog.
          enum:
          - VIRTUAL_CENTER
          - IMAGE_CATALOG
          example: VIRTUAL_CENTER
          type: string
        name:
          description: Name of the Desktop Pool. The maximum length is 64 characters.
          example: sales-pool1
          type: string
        nics:
          description: 'Applicable To: Automated desktop pools.<br>Network interface
            card settings for machines provisioned for this desktop. A NIC may appear
            at most once in these settings and must be present on this desktop pool''s
            parent''s snapshot or template. Not all NICs need be configured. Any that
            are not will use default settings.'
          items:
            $ref: '#/components/schemas/DesktopPoolNetworkInterfaceCardSettings'
          type: array
        pattern_naming_settings:
          $ref: '#/components/schemas/DesktopPoolVirtualMachinePatternNamingSettings'
        provisioning_settings:
          $ref: '#/components/schemas/DesktopPoolProvisioningSettings'
        provisioning_status_data:
          $ref: '#/components/schemas/DesktopPoolProvisioningStatusData'
        session_settings:
          $ref: '#/components/schemas/DesktopPoolSessionSettingsV2'
        session_type:
          description: |-
            Supported session types for this desktop pool. If application sessions are selected to besupported then this desktop pool can be used for application pool creation. This will beuseful when the machines in the pool support application remoting. Default value of DESKTOP.
            * DESKTOP: Only desktop sessions are supported.
            * APPLICATION: Only application sessions are supported.
            * DESKTOP_AND_APPLICATION: Both desktop and application sessions are supported.
          enum:
          - DESKTOP
          - APPLICATION
          - DESKTOP_AND_APPLICATION
          example: DESKTOP
          type: string
        shortcut_locations:
          description: Locations of the category folder in the user's OS containing
            a shortcut to the desktop pool.The value will be present if categoryFolderName
            is set.
          example: Desktop
          items:
            type: string
          type: array
        source:
          description: |-
            Source of the Machines in this Desktop Pool.
            * INSTANT_CLONE: The Desktop Pool uses instant clone technology for provisioning the machines.Applicable for AUTOMATED type desktop pools.
            * LINKED_CLONE: The Desktop Pool uses linked clone technology for provisioning the machines.Applicable for AUTOMATED type desktop pools.
            * VIRTUAL_CENTER: The Desktop Pool uses Virtual Center as source for provisioning the machines.Applicable for AUTOMATED and MANUAL type desktop pools.
            * RDS: The Desktop Pool is backed by Farm. The Farm used in this Desktop Pool can be of any Source.
            * UNMANAGED: The Desktop Pool holds the non-vCenter source machines that includes physical computers,blade PCs and non-vCenter servers. Applicable for MANUAL type desktop pools.
          enum:
          - INSTANT_CLONE
          - LINKED_CLONE
          - VIRTUAL_CENTER
          - RDS
          - UNMANAGED
          example: INSTANT_CLONE
          type: string
        specific_naming_settings:
          $ref: '#/components/schemas/DesktopPoolVirtualMachineSpecifiedNamingSettings'
        stop_provisioning_on_error:
          description: 'Applicable To: Automated desktop pools.<br>Whether provisioning
            on all machines stops on error.'
          example: true
          type: boolean
        storage_settings:
          $ref: '#/components/schemas/DesktopPoolStorageSettings'
        transparent_page_sharing_scope:
          description: |-
            Applicable To: Manual and automated desktop pools.<br>The transparent page sharing scope.
            * VM: Inter-VM page sharing is not permitted.
            * DESKTOP_POOL: Inter-VM page sharing among VMs belonging to the same Desktop pool is permitted.
            * POD: Inter-VM page sharing among VMs belonging to the same Pod is permitted.
            * GLOBAL: Inter-VM page sharing among all VMs on the same host is permitted.
          enum:
          - VM
          - DESKTOP_POOL
          - POD
          - GLOBAL
          example: VM
          type: string
        type:
          description: |-
            Type of the desktop pool.
            * AUTOMATED: Automated Desktop Pool.
            * MANUAL: Manual Desktop Pool.
            * RDS: RDS Desktop Pool.
          enum:
          - AUTOMATED
          - MANUAL
          - RDS
          example: AUTOMATED
          type: string
        user_assignment:
          description: |-
            Applicable To: Manual and automated desktop pools.<br>User assignment scheme.
            * DEDICATED: With dedicated assignment, a user returns to the same machine at each session.
            * FLOATING: With floating assignment, a user may return to one of the available machines for the next session.
          enum:
          - DEDICATED
          - FLOATING
          example: DEDICATED
          type: string
        vcenter_id:
          description: 'Applicable To: Manual and automated desktop pools.<br>Virtual
            Center that manages the machines of the desktop pool.'
          example: f148f3e8-db0e-4abb-9c33-7e5205ccd360
          type: string
        view_storage_accelerator_settings:
          $ref: '#/components/schemas/DesktopPoolViewStorageAcceleratorSettings'
      title: DesktopPoolInfoV2
      type: object
    DesktopPoolInstantClonePushImageSettings:
      description: Settings for the push image operation.
      example:
        start_time: 1587081283000
        add_virtual_tpm: false
        logoff_policy: c9896e51-48a2-4d82-ae9e-a0246981b473
        stop_on_first_error: true
      properties:
        add_virtual_tpm:
          description: Whether to add Virtual TPM device.
          example: false
          type: boolean
        logoff_policy:
          description: |-
            Determines when to perform the operation on machines which have an active session.
            * FORCE_LOGOFF: Users will be forced to log off when the system is ready to operate on their virtual machines. Before being forcibly logged off, users may have a grace period in which to save their work (Global Settings).
            * WAIT_FOR_LOGOFF: Wait for connected users to disconnect before the task starts. The operation starts immediately on machines without active sessions.
          enum:
          - FORCE_LOGOFF
          - WAIT_FOR_LOGOFF
          example: c9896e51-48a2-4d82-ae9e-a0246981b473
          type: string
        start_time:
          description: When to start the operation. If unset or the time is in the
            past, the operation will begin immediately. Measured as epoch time.
          example: 1587081283000
          format: int64
          type: integer
        stop_on_first_error:
          description: Indicates that the operation should stop on first error.
          example: true
          type: boolean
      title: DesktopPoolInstantClonePushImageSettings
      type: object
    DesktopPoolNetworkInterfaceCardSettings:
      description: Network interface card settings for machines provisioned for this
        desktop pool.
      example:
        network_interface_card_name: Network adapter 1
        network_label_assignment_specs:
        - max_label: 1
          max_label_type: LIMITED
          enabled: true
          network_label_name: vm-network
        - max_label: 1
          max_label_type: LIMITED
          enabled: true
          network_label_name: vm-network
        network_interface_card_id: c9896e51-48a2-4d82-ae9e-a0246981b473
      properties:
        network_interface_card_id:
          description: The network interface card id for these settings.
          example: c9896e51-48a2-4d82-ae9e-a0246981b473
          type: string
        network_interface_card_name:
          description: The network interface card name.
          example: Network adapter 1
          type: string
        network_label_assignment_specs:
          description: Automatic network label assignment feature settings for this
            NIC. By default, newly provisioned machines of an automated desktop pool
            retain their parent image's network labels on each of their network interface
            cards. In certain circumstances, notably dealing with VLAN subset sizing
            and DHCP IP address availability, it may be desirable for the desktop
            pool to instead use different network labels for these newly provisioned
            machines. This feature allows an administrator to provide a per NIC list
            of network labels and their maximum availability to be automatically distributed
            to newly provisioned machines. <br> If this is unset, the feature is disabled.<br>
            Starting at the alphabetically first network label specification in the
            list that has not yet been assigned its maximum count for this NIC on
            this desktop pool, the desktop pool will have its next provisioned machine's
            NIC assigned that label. If all network labels in this list have reached
            their maximum count, this desktop pool will have further provisioned machines
            assigned the last label in the list over capacity, and an error will be
            logged. Not all labels need be configured. <br>
          items:
            $ref: '#/components/schemas/NetworkLabelAssignmentSettings'
          type: array
      title: DesktopPoolNetworkInterfaceCardSettings
      type: object
    DesktopPoolProvisioningSettings:
      description: Virtual Center provisioning settings for the automated desktop
        pool.
      example:
        vm_folder_id: group-v1
        im_tag_id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
        host_or_cluster_id: domain-s425
        im_stream_id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
        vm_template_id: vm-1
        add_virtual_tpm: false
        base_snapshot_id: snapshot-1
        resource_pool_id: resgroup-1
        parent_vm_id: vm-2
        datacenter_id: datacenter-1
        min_ready_vms_on_vcomposer_maintenance: 10
      properties:
        add_virtual_tpm:
          description: Whether to add Virtual TPM device.
          example: false
          type: boolean
        base_snapshot_id:
          description: 'Applicable To: Linked/instant clone automated desktop pools.<br>Base
            image snapshot for linked clone desktop pool and current image snapshot
            for instant clone desktop pool.'
          example: snapshot-1
          type: string
        datacenter_id:
          description: Datacenter within which the desktop pool is configured.
          example: datacenter-1
          type: string
        host_or_cluster_id:
          description: Host or cluster where the machines are deployed in.
          example: domain-s425
          type: string
        im_stream_id:
          description: 'Applicable To: Full/instant clone automated desktop pools.<br>Image
            management stream used in desktop pool when Image Management feature is
            enabled.'
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
          type: string
        im_tag_id:
          description: 'Applicable To: Full/instant clone automated desktop pools.<br>Image
            management tag associated with the selected image management stream which
            is used in desktop pool when Image Management feature is enabled.'
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
          type: string
        min_ready_vms_on_vcomposer_maintenance:
          description: 'Applicable To: Linked clone automated desktop pools.<br>Minimum
            number of ready (provisioned) machines during View Composer maintenance
            operations.'
          example: 10
          format: int32
          type: integer
        parent_vm_id:
          description: 'Applicable To: Linked/instant clone automated desktop pools.<br>Base
            image VM for linked clone desktop pool and current image for instant clone
            desktop pool.'
          example: vm-2
          type: string
        resource_pool_id:
          description: Resource pool to deploy the machines.
          example: resgroup-1
          type: string
        vm_folder_id:
          description: VM folder where the machines are deployed to.
          example: group-v1
          type: string
        vm_template_id:
          description: 'Applicable To: Full clone automated desktop pools.<br>Template
            from which full clone machines are deployed.'
          example: vm-1
          type: string
      title: DesktopPoolProvisioningSettings
      type: object
    DesktopPoolProvisioningStatusData:
      description: Provisioning status data about this automated desktop pool.
      example:
        instant_clone_operation: NONE
        instant_clone_pending_im_tag_id: e9896e51-48a2-4d82-ae9e-a0246981b484
        instant_clone_push_image_settings:
          start_time: 1587081283000
          add_virtual_tpm: false
          logoff_policy: c9896e51-48a2-4d82-ae9e-a0246981b473
          stop_on_first_error: true
        last_provisioning_error_time: 1587081283000
        instant_clone_pending_im_stream_id: c9896e51-48a2-4d82-ae9e-a0246981b473
        instant_clone_pending_image_progress: 10
        instant_clone_pending_image_snapshot_id: snapshot-1
        instant_clone_pending_image_error: Could not authenticate with domain administrator
          credentials
        last_provisioning_error: 'Initial publish failed: Could not authenticate with
          domain administrator credentials'
        instant_clone_current_image_state: c9896e51-48a2-4d82-ae9e-a0246981b473
        instant_clone_pending_image_parent_vm_id: vm-1
        instant_clone_pending_image_state: FAILED
      properties:
        instant_clone_current_image_state:
          description: |-
            Applicable To: instant clone automated desktop pools.<br>This represents the state of the current image of this instant clone desktop pool.
            * READY: This is the state of the current image after successful completion of pool creation operation. At this stage the current image is ready to be used to create the instant clones. Please note that this state is also reached from UNPUBLISHING state on successful completion of editing of cluster or editing of datastore(s) operations.
            * FAILED: This is the state of the current image if instant clone pool delete operation has failed or timed out.
            * PENDING_UNPUBLISH: This is the state of the current image before instant clone pool delete or cluster edit or datastore(s) edit operation(s) begins.
            * UNPUBLISHING: This is the transient state of the current image when instant clone pool delete or cluster edit or datastore(s) edit operation(s) is going on.
          enum:
          - READY
          - FAILED
          - PENDING_UNPUBLISH
          - UNPUBLISHING
          example: c9896e51-48a2-4d82-ae9e-a0246981b473
          type: string
        instant_clone_operation:
          description: |-
            Applicable To: instant clone automated desktop pools.<br>The operation that this instant clone desktop pool is undergoing.
            * NONE: There is no current operation on the desktop pool.
            * INITIAL_PUBLISH: The desktop pool has just been created and is undergoing initial publishing.
            * SCHEDULE_PUSH_IMAGE: The push operation is scheduled on the desktop pool.
            * CANCEL_SCHEDULED_PUSH_IMAGE: The scheduled push operation on the desktop pool is being cancelled.
            * INFRASTRUCTURE_CHANGE: A cluster or datastore change operation was requested for the desktop pool.
            * FINAL_UNPUBLISH: A desktop pool has been deleted and is undergoing final unpublishing.
          enum:
          - NONE
          - INITIAL_PUBLISH
          - SCHEDULE_PUSH_IMAGE
          - CANCEL_SCHEDULED_PUSH_IMAGE
          - INFRASTRUCTURE_CHANGE
          - FINAL_UNPUBLISH
          example: NONE
          type: string
        instant_clone_pending_im_stream_id:
          description: 'Applicable To: instant clone automated desktop pools.<br>Pending
            image management stream for instant clone desktop pools.'
          example: c9896e51-48a2-4d82-ae9e-a0246981b473
          type: string
        instant_clone_pending_im_tag_id:
          description: 'Applicable To: instant clone automated desktop pools.<br>Pending
            image management tag for instant clone desktop pools'
          example: e9896e51-48a2-4d82-ae9e-a0246981b484
          type: string
        instant_clone_pending_image_error:
          description: 'Applicable To: instant clone automated desktop pools.<br>This
            represents the error message if publishing of push image operation is
            failed.'
          example: Could not authenticate with domain administrator credentials
          type: string
        instant_clone_pending_image_parent_vm_id:
          description: 'Applicable To: instant clone automated desktop pools.<br>Pending
            base image VM for instant clone desktop pools. This is used to return
            the information about the parent VM of the pending Image.'
          example: vm-1
          type: string
        instant_clone_pending_image_progress:
          description: 'Applicable To: instant clone automated desktop pools.<br>This
            represents the pending image publish progress in percentage for an instant
            clone desktop pool.'
          example: 10
          format: int32
          type: integer
        instant_clone_pending_image_snapshot_id:
          description: 'Applicable To: instant clone automated desktop pools.<br>Pending
            base image snapshot for instant clone desktop pools. This is used to return
            the information about the snapshot of the pending image.'
          example: snapshot-1
          type: string
        instant_clone_pending_image_state:
          description: |-
            Applicable To: instant clone automated desktop pools.<br>This represents the state of the pending image of this instant clone desktop pool. This will be null when there is no pending image for the desktop pool.
            * PENDING_PUBLISH: This is the initial transient state of the pending image before instant clone pool creation operation has started.
            * PUBLISHING: This is the transient state of the pending image when creation of instant clone pool operation is going on.
            * UNPUBLISHING: This is the transient state of the pending image when instant clone pool delete or cluster edit or datastore(s) edit operation(s) is going on.
            * READY: This is the state of the pending image after successful publish of the pending image and before that image has been upgraded to the current image. This is normally seen after successful publish for a push image which has been scheduled to trigger at a later time.
            * FAILED: This is the state of the pending image if creation of instant clone pool operation has failed or timed out.
          enum:
          - PENDING_PUBLISH
          - PUBLISHING
          - UNPUBLISHING
          - READY
          - FAILED
          example: FAILED
          type: string
        instant_clone_push_image_settings:
          $ref: '#/components/schemas/DesktopPoolInstantClonePushImageSettings'
        last_provisioning_error:
          description: String message detailing the last provisioning error on this
            desktop pool while stop_provisioning_on_error is enabled. This will be
            cleared when enable_provisioning is updated to true.
          example: 'Initial publish failed: Could not authenticate with domain administrator
            credentials'
          type: string
        last_provisioning_error_time:
          description: Time the last provisioning error occurred on this desktop while
            stop_provisioning_on_error is enabled. This will be cleared when enable_provisioning
            is updated to true. Measured as epoch time.
          example: 1587081283000
          format: int64
          type: integer
      title: DesktopPoolProvisioningStatusData
      type: object
    DesktopPoolQuickprepCustomizationSettings:
      description: Settings for QuickPrep customization.
      example:
        post_synchronization_script_parameters: p1 p2 p3
        post_synchronization_script_path: quickprep_postsync_script
        power_off_script_path: quickprep_poweroff_script
        power_off_script_parameters: p1 p2 p3
      properties:
        post_synchronization_script_parameters:
          description: Post synchronization script parameters.
          example: p1 p2 p3
          type: string
        post_synchronization_script_path:
          description: Post synchronization script. QuickPrep can run a customization
            script on linked-clone machines after they are created, recomposed, and
            refreshed. Provide the path to the script on the parent virtual machine.
          example: quickprep_postsync_script
          type: string
        power_off_script_parameters:
          description: Power off script parameters.
          example: p1 p2 p3
          type: string
        power_off_script_path:
          description: Power off script. QuickPrep can run a customization script
            on linked-clone machines before they are powered off. Provide the path
            to the script on the parent virtual machine.
          example: quickprep_poweroff_script
          type: string
      title: DesktopPoolQuickprepCustomizationSettings
      type: object
    DesktopPoolSessionSettings:
      description: Machine settings applicable when a user logs off or when a desktop
        pool is no longer keeping a machine as a spare.
      example:
        disconnected_session_timeout_minutes: 5
        logoff_after_timeout: false
        power_policy: ALWAYS_POWERED_ON
        delete_or_refresh_machine_after_logoff: NEVER
        allow_users_to_reset_machines: false
        disconnected_session_timeout_policy: NEVER
        empty_session_timeout_minutes: 5
        empty_session_timeout_policy: AFTER
        refresh_os_disk_after_logoff: NEVER
        refresh_period_days_for_replica_os_disk: 1
        allow_multiple_sessions_per_user: false
        refresh_threshold_percentage_for_replica_os_disk: 6
      properties:
        allow_multiple_sessions_per_user:
          description: Indicates whether multiple sessions are allowed per user in
            case of Floating User Assignment. Default value is false.
          example: false
          type: boolean
        allow_users_to_reset_machines:
          description: Indicates whether the user can be allowed to reset or restart
            their machines. Default value is false.
          example: false
          type: boolean
        delete_or_refresh_machine_after_logoff:
          description: |-
            Whether machines are to be deleted or refreshed after logoff in case of Floating User Assignment.This is applicable for automated desktops with virtual machines names based onpattern naming. This is not applicable for desktops that are using specified naming since dynamic creation and deletion of VMs is not supported.For Instant clone desktops this setting can only be set to DELETE. Default value is NEVER.
            * NEVER: Never delete or refresh the machine in the desktop pool.
            * DELETE: Delete the machine after user logoff.
            * REFRESH: Refresh the machine after user logoff.
          enum:
          - NEVER
          - DELETE
          - REFRESH
          example: NEVER
          type: string
        disconnected_session_timeout_minutes:
          description: Disconnected sessions timeout (in minutes). Will be set when
            disconnected_session_timeout_policy is set to AFTER.
          example: 5
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: int32
          minimum: 1
          type: integer
        disconnected_session_timeout_policy:
          description: |-
            Log-off policy after disconnected session. Default value is NEVER.
            * IMMEDIATELY: Immmediately Logoff after user disconnect.
            * AFTER: Logoff after the specified number of minutes after user disconnect.
            * NEVER: Do not logoff after user disconnect.
          enum:
          - IMMEDIATELY
          - AFTER
          - NEVER
          example: NEVER
          type: string
        empty_session_timeout_minutes:
          description: Application empty session timeout (in minutes). An empty session
            (that has no remote-ablewindow) is disconnected after the timeout. Default
            value is 1.Will be set when the empty_session_timeout_policy set to AFTER.
          example: 5
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: int32
          minimum: 1
          type: integer
        empty_session_timeout_policy:
          description: |-
            Application empty session timeout policy. Default value is AFTER.
            * IMMEDIATE: Empty session will be disconnected immediately.
            * NEVER: Empty session will never disconnected.
            * AFTER: Empty session will be disconnected after specified number of minutes.
          enum:
          - IMMEDIATE
          - NEVER
          - AFTER
          example: AFTER
          type: string
        logoff_after_timeout:
          description: Indicates whether the empty application sessions are logged
            off (true) or disconnected (false) after timeout.Default value is false.
          example: false
          type: boolean
        power_policy:
          description: |-
            Power policy for the machines in the desktop pool after logoff. This setting is only relevant for managed machines.Default value is TAKE_NO_POWER_ACTION.For Instant clone desktops this setting can only be set to ALWAYS_POWERED_ON.
            * TAKE_NO_POWER_ACTION: No action will be taken when user logs off.
            * ALWAYS_POWERED_ON: Ensure machines in the Desktop pool are always powered on.The connection server will monitor and power on machines as necessary.
            * SUSPEND: Suspend when a user logs off or when desktop pool is no longer keeping a machine as a spare.This does not affect spare and newly provisioned machines.
            * POWER_OFF: Power off when a user logs off or when desktop pool is no longer keeping a machine as a spare.This does not affect spare and newly provisioned machines.
          enum:
          - TAKE_NO_POWER_ACTION
          - ALWAYS_POWERED_ON
          - SUSPEND
          - POWER_OFF
          example: ALWAYS_POWERED_ON
          type: string
        refresh_os_disk_after_logoff:
          description: |-
            Whether and when to refresh the OS disks for dedicated-assignment, linked-clone and instant-clone machines.Default value is NEVER.
            * NEVER: The OS disk is never refreshed.
            * ALWAYS: The OS disk is refreshed every time the user logs off.
            * EVERY: The OS disk is refreshed at regular intervals of a specified number of days. The number of days is counted from the last refresh, or from the initial provisioning if no refresh has occurred yet. For example, if the specified value is 3 days, and three days have passed since the last refresh, the machine is refreshed after the user logs off.
            * AT_SIZE: The OS disk is refreshed when its current size reaches a specified percentage of its maximum allowable size. The maximum size of a linked clone's OS disk is the size of the replica's OS disk. With this option, the size of the linked clone's OS disk in the datastore is compared to maximum allowable size. This disk-utilization percentage does not reflect disk usage that you might see inside the machine's guest operating system.
          enum:
          - NEVER
          - ALWAYS
          - EVERY
          - AT_SIZE
          example: NEVER
          type: string
        refresh_period_days_for_replica_os_disk:
          description: Regular interval at which to refresh the OS disk. Will be set
            when refresh_os_disk_after_logoff set to EVERY.
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: int32
          minimum: 1
          type: integer
        refresh_threshold_percentage_for_replica_os_disk:
          description: With the 'AT_SIZE' option for refreshOsDiskAfterLogoff, the
            size of the linked clone's OS diskin the datastore is compared to its
            maximum allowable size. This disk-utilization percentage does not reflect
            disk usage that you might see inside the machine's guest operating system.Will
            be set when refresh_os_disk_after_logoff set to AT_SIZE.
          format: int32
          type: integer
      required:
      - allow_multiple_sessions_per_user
      - allow_users_to_reset_machines
      - delete_or_refresh_machine_after_logoff
      - disconnected_session_timeout_policy
      - empty_session_timeout_policy
      - logoff_after_timeout
      - power_policy
      - refresh_os_disk_after_logoff
      - refresh_period_days_for_replica_os_disk
      - refresh_threshold_percentage_for_replica_os_disk
      title: DesktopPoolSessionSettings
      type: object
    DesktopPoolSessionSettingsV2:
      description: Machine settings applicable when a user logs off or when a desktop
        pool is no longer keeping a machine as a spare.
      example:
        disconnected_session_timeout_minutes: 5
        power_policy: ALWAYS_POWERED_ON
        delete_or_refresh_machine_after_logoff: NEVER
        disconnected_session_timeout_policy: NEVER
        refresh_os_disk_after_logoff: NEVER
        logoff_after_timeout: false
        pre_launch_session_timeout_minutes: 10
        allow_users_to_reset_machines: false
        empty_session_timeout_minutes: 5
        empty_session_timeout_policy: AFTER
        refresh_period_days_for_replica_os_disk: 1
        pre_launch_session_timeout_policy: AFTER
        allow_multiple_sessions_per_user: false
        refresh_threshold_percentage_for_replica_os_disk: 6
      properties:
        allow_multiple_sessions_per_user:
          description: Indicates whether multiple sessions are allowed per user in
            case of Floating User Assignment. Default value is false.
          example: false
          type: boolean
        allow_users_to_reset_machines:
          description: Indicates whether the user can be allowed to reset or restart
            their machines. Default value is false.
          example: false
          type: boolean
        delete_or_refresh_machine_after_logoff:
          description: |-
            Whether machines are to be deleted or refreshed after logoff in case of Floating User Assignment.This is applicable for automated desktops with virtual machines names based onpattern naming. This is not applicable for desktops that are using specified naming since dynamic creation and deletion of VMs is not supported.For Instant clone desktops this setting can only be set to DELETE. Default value is NEVER.
            * NEVER: Never delete or refresh the machine in the desktop pool.
            * DELETE: Delete the machine after user logoff.
            * REFRESH: Refresh the machine after user logoff.
          enum:
          - NEVER
          - DELETE
          - REFRESH
          example: NEVER
          type: string
        disconnected_session_timeout_minutes:
          description: Disconnected sessions timeout (in minutes). Will be set when
            disconnected_session_timeout_policy is set to AFTER.
          example: 5
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: int32
          minimum: 1
          type: integer
        disconnected_session_timeout_policy:
          description: |-
            Log-off policy after disconnected session. Default value is NEVER.
            * IMMEDIATELY: Immmediately Logoff after user disconnect.
            * AFTER: Logoff after the specified number of minutes after user disconnect.
            * NEVER: Do not logoff after user disconnect.
          enum:
          - IMMEDIATELY
          - AFTER
          - NEVER
          example: NEVER
          type: string
        empty_session_timeout_minutes:
          description: Application empty session timeout (in minutes). An empty session
            (that has no remote-ablewindow) is disconnected after the timeout. Default
            value is 1.Will be set when the empty_session_timeout_policy set to AFTER.
          example: 5
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: int32
          minimum: 1
          type: integer
        empty_session_timeout_policy:
          description: |-
            Application empty session timeout policy. Default value is AFTER.
            * IMMEDIATE: Empty session will be disconnected immediately.
            * NEVER: Empty session will never disconnected.
            * AFTER: Empty session will be disconnected after specified number of minutes.
          enum:
          - IMMEDIATE
          - NEVER
          - AFTER
          example: AFTER
          type: string
        logoff_after_timeout:
          description: Indicates whether the empty application sessions are logged
            off (true) or disconnected (false) after timeout.Default value is false.
          example: false
          type: boolean
        power_policy:
          description: |-
            Power policy for the machines in the desktop pool after logoff. This setting is only relevant for managed machines.Default value is TAKE_NO_POWER_ACTION.For Instant clone desktops this setting can only be set to ALWAYS_POWERED_ON.
            * TAKE_NO_POWER_ACTION: No action will be taken when user logs off.
            * ALWAYS_POWERED_ON: Ensure machines in the Desktop pool are always powered on.The connection server will monitor and power on machines as necessary.
            * SUSPEND: Suspend when a user logs off or when desktop pool is no longer keeping a machine as a spare.This does not affect spare and newly provisioned machines.
            * POWER_OFF: Power off when a user logs off or when desktop pool is no longer keeping a machine as a spare.This does not affect spare and newly provisioned machines.
          enum:
          - TAKE_NO_POWER_ACTION
          - ALWAYS_POWERED_ON
          - SUSPEND
          - POWER_OFF
          example: ALWAYS_POWERED_ON
          type: string
        pre_launch_session_timeout_minutes:
          description: Application pre-launch session timeout (in minutes). A pre-launch
            session is disconnected after the timeout. Default value is 10.Will be
            required when the pre-launch session timeout policy is set to AFTER.
          example: 10
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: int32
          minimum: 1E+1
          type: integer
        pre_launch_session_timeout_policy:
          description: |-
            Application pre-launch session timeout policy. Default value is AFTER.
            * NEVER: Pre-launched session is never disconnected.
            * AFTER: Pre-launched session is disconnected after specified number of minutes.
          enum:
          - NEVER
          - AFTER
          example: AFTER
          type: string
        refresh_os_disk_after_logoff:
          description: |-
            Whether and when to refresh the OS disks for dedicated-assignment, linked-clone and instant-clone machines.Default value is NEVER.
            * NEVER: The OS disk is never refreshed.
            * ALWAYS: The OS disk is refreshed every time the user logs off.
            * EVERY: The OS disk is refreshed at regular intervals of a specified number of days. The number of days is counted from the last refresh, or from the initial provisioning if no refresh has occurred yet. For example, if the specified value is 3 days, and three days have passed since the last refresh, the machine is refreshed after the user logs off.
            * AT_SIZE: The OS disk is refreshed when its current size reaches a specified percentage of its maximum allowable size. The maximum size of a linked clone's OS disk is the size of the replica's OS disk. With this option, the size of the linked clone's OS disk in the datastore is compared to maximum allowable size. This disk-utilization percentage does not reflect disk usage that you might see inside the machine's guest operating system.
          enum:
          - NEVER
          - ALWAYS
          - EVERY
          - AT_SIZE
          example: NEVER
          type: string
        refresh_period_days_for_replica_os_disk:
          description: Regular interval at which to refresh the OS disk. Will be set
            when refresh_os_disk_after_logoff set to EVERY.
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: int32
          minimum: 1
          type: integer
        refresh_threshold_percentage_for_replica_os_disk:
          description: With the 'AT_SIZE' option for refreshOsDiskAfterLogoff, the
            size of the linked clone's OS diskin the datastore is compared to its
            maximum allowable size. This disk-utilization percentage does not reflect
            disk usage that you might see inside the machine's guest operating system.Will
            be set when refresh_os_disk_after_logoff set to AT_SIZE.
          format: int32
          type: integer
      required:
      - allow_multiple_sessions_per_user
      - allow_users_to_reset_machines
      - delete_or_refresh_machine_after_logoff
      - disconnected_session_timeout_policy
      - empty_session_timeout_policy
      - logoff_after_timeout
      - power_policy
      - refresh_os_disk_after_logoff
      - refresh_period_days_for_replica_os_disk
      - refresh_threshold_percentage_for_replica_os_disk
      title: DesktopPoolSessionSettingsV2
      type: object
    DesktopPoolSettings:
      description: Information related to Desktop Pool Settings.
      example:
        shortcut_locations: Desktop
        allow_mutilple_sessions_per_user: false
        display_protocol_settings:
          display_protocols:
          - PCOIP
          - BLAST
          - RDP
          max_number_of_monitors: 2
          renderer3d: "true"
          session_collaboration_enabled: false
          html_access_enabled: true
          max_resolution_of_any_one_monitor: WUXGA
          default_display_protocol: PCOIP
          vgpu_grid_profile: instant-profile
          vram_size_mb: 64
          allow_users_to_choose_protocol: true
          grid_vgpus_enabled: false
        category_folder_name: dir1
        cs_restriction_tags: CS1_TAG1
        cloud_assigned: false
        session_type: DESKTOP
        delete_in_progress: false
        session_settings:
          disconnected_session_timeout_minutes: 5
          logoff_after_timeout: false
          power_policy: ALWAYS_POWERED_ON
          delete_or_refresh_machine_after_logoff: NEVER
          allow_users_to_reset_machines: false
          disconnected_session_timeout_policy: NEVER
          empty_session_timeout_minutes: 5
          empty_session_timeout_policy: AFTER
          refresh_os_disk_after_logoff: NEVER
          refresh_period_days_for_replica_os_disk: 1
          allow_multiple_sessions_per_user: false
          refresh_threshold_percentage_for_replica_os_disk: 6
        cloud_managed: false
        enable_client_restrictions: false
      properties:
        allow_mutilple_sessions_per_user:
          description: Whether multiple sessions are allowed per user for this pool.
            This is valid for RDS desktop pools.For other Desktops, allow_multiple_sessions_per_user
            in settings will be applicable.Default value is false.
          example: false
          type: boolean
        category_folder_name:
          description: Name of the category folder in the user's OS containing a shortcut
            to the desktop pool.Will be unset if the desktop does not belong to a
            category.This property defines valid folder names with a max length of
            64 characters and up to 4 subdirectory levels.The subdirectories can be
            specified using a backslash, e.g. (dir1\dir2\dir3\dir4). Folder names
            can't start orend with a backslash nor can there be 2 or more backslashes
            together. Combinations such as(\dir1, dir1\dir2\, dir1\\dir2, dir1\\\dir2)
            are invalid. The windows reserved keywords(CON, PRN, NUL, AUX, COM1 -
            COM9, LPT1 - LPT9 etc.) are not allowed in subdirectory names.
          example: dir1
          type: string
        cloud_assigned:
          description: Indicates whether this desktop is assigned to a workspace in
            Horizon Cloud Services. Default value is false.
          example: false
          type: boolean
        cloud_managed:
          description: Indicates whether this desktop is managed by Horizon Cloud
            Services.This can be false only when cloud_assigned is false. Default
            value is false.
          example: false
          type: boolean
        cs_restriction_tags:
          description: List of tags for which the access to the desktop pool is restricted
            to.No list indicates that desktop pool can be accessed from any connection
            server.
          example: CS1_TAG1
          items:
            type: string
          type: array
        delete_in_progress:
          description: Indicates whether the desktop pool is in the process of being
            deleted.Default value is false.
          example: false
          type: boolean
        display_protocol_settings:
          $ref: '#/components/schemas/DesktopPoolDisplayProtocolSettings'
        enable_client_restrictions:
          description: Client restrictions to be applied to the desktop pool.Currently
            it is valid for RDS desktop pools only. Default value is false.
          example: false
          type: boolean
        session_settings:
          $ref: '#/components/schemas/DesktopPoolSessionSettings'
        session_type:
          description: |-
            Supported session types for this desktop pool. If application sessions are selected to besupported then this desktop pool can be used for application pool creation. This will beuseful when the machines in the pool support application remoting. Default value of DESKTOP.
            * DESKTOP: Only desktop sessions are supported.
            * APPLICATION: Only application sessions are supported.
            * DESKTOP_AND_APPLICATION: Both desktop and application sessions are supported.
          enum:
          - DESKTOP
          - APPLICATION
          - DESKTOP_AND_APPLICATION
          example: DESKTOP
          type: string
        shortcut_locations:
          description: Locations of the category folder in the user's OS containing
            a shortcut to the desktop pool.The value will be present if categoryFolderName
            is set.
          example: Desktop
          items:
            type: string
          type: array
      required:
      - delete_in_progress
      title: DesktopPoolSettings
      type: object
    DesktopPoolStorageSettings:
      description: Virtual Center storage settings for the automated desktop pool.
      example:
        persistent_disk_drive_letter: D
        use_vsan: false
        datastores:
        - storage_overcommit: CONSERVATIVE
          datastore_id: datastore-1
          sdrs_cluster: false
        - storage_overcommit: CONSERVATIVE
          datastore_id: datastore-1
          sdrs_cluster: false
        reclamation_threshold_mb: 1024
        use_separate_datastores_replica_and_os_disks: false
        non_persistent_redirect_disposable_files: true
        persistent_disk_size_mb: 2048
        redirect_windows_profile: false
        replica_disk_datastore_id: datastore-1
        reclaim_vm_disk_space: false
        persistent_disk_datastores:
        - storage_overcommit: CONSERVATIVE
          datastore_id: datastore-1
          sdrs_cluster: false
        - storage_overcommit: CONSERVATIVE
          datastore_id: datastore-1
          sdrs_cluster: false
        use_separate_datastores_persistent_and_os_disks: false
        non_persistent_disk_size_mb: 4096
        use_native_snapshots: false
        non_persistent_disk_drive_letter: Auto
      properties:
        datastores:
          description: Datastores to store the machine (or the OS disk using other
            options for linked clone or instant clone machine storage)
          items:
            $ref: '#/components/schemas/DesktopPoolDatastoreSettings'
          type: array
        non_persistent_disk_drive_letter:
          description: Non persistent disk drive letter.
          example: Auto
          type: string
        non_persistent_disk_size_mb:
          description: Size of the non persistent disk in MB.
          example: 4096
          format: int32
          type: integer
        non_persistent_redirect_disposable_files:
          description: Redirect disposable files to a non-persistent disk that will
            be deleted automatically when a user's session ends.
          example: true
          type: boolean
        persistent_disk_datastores:
          description: Datastores to store persistent disks for linked clone machines.
          items:
            $ref: '#/components/schemas/DesktopPoolDatastoreSettings'
          type: array
        persistent_disk_drive_letter:
          description: Persistent disk drive letter.
          example: D
          type: string
        persistent_disk_size_mb:
          description: Size of the persistent disk in MB.
          example: 2048
          format: int32
          type: integer
        reclaim_vm_disk_space:
          description: With vSphere 5.x, virtual machines can be configured to use
            a space efficient disk format that supports reclamation of unused disk
            space (such as deleted files). This option reclaims unused disk space
            on each virtual machine. The operation is initiated when an estimate of
            used disk space exceeds the specified threshold.
          example: false
          type: boolean
        reclamation_threshold_mb:
          description: Initiate reclamation when unused space on virtual machine exceeds
            the threshold in MB.
          example: 1024
          format: int64
          type: integer
        redirect_windows_profile:
          description: Windows profiles will be redirected to persistent disks, which
            are not affected by View Composer operations such as refresh, recompose
            and rebalance.
          example: false
          type: boolean
        replica_disk_datastore_id:
          description: Datastore to store replica disks for linked clone and instant
            clone machines.
          example: datastore-1
          type: string
        use_native_snapshots:
          description: 'Applicable To: Linked/instant clone automated desktop pool.<br>Native
            NFS Snapshots (VAAI - vStorage API for Array Integration) is a hardware
            feature of certain storage arrays. It uses native snapshotting technology
            to provide linked clone functionality.'
          example: false
          type: boolean
        use_separate_datastores_persistent_and_os_disks:
          description: Whether to use separate datastores for persistent and OS disks.
          example: false
          type: boolean
        use_separate_datastores_replica_and_os_disks:
          description: Whether to use separate datastores for replica and OS disks.
          example: false
          type: boolean
        use_vsan:
          description: Whether to use vSphere vSAN.
          example: false
          type: boolean
      title: DesktopPoolStorageSettings
      type: object
    DesktopPoolViewStorageAcceleratorSettings:
      description: Settings related to the View Storage Accelerator feature.
      example:
        regenerate_view_storage_accelerator_days: 7
        use_view_storage_accelerator: false
        view_storage_accelerator_disk_types: OS_DISKS
        blackout_times:
        - start_time: 10:00
          end_time: 22:00
          days:
          - MONDAY
          - MONDAY
        - start_time: 10:00
          end_time: 22:00
          days:
          - MONDAY
          - MONDAY
      properties:
        blackout_times:
          description: A list of blackout times. Storage accelerator regeneration
            and machine disk space reclamation do not occur during blackout times.
            The same blackout policy applies to both operations. If unset, no blackout
            times are used.
          items:
            $ref: '#/components/schemas/ViewStorageAcceleratorBlackoutTimeSettings'
          type: array
        regenerate_view_storage_accelerator_days:
          description: How often to regenerate the View Storage Accelerator cache.
            Measured in Days.
          example: 7
          format: int32
          type: integer
        use_view_storage_accelerator:
          description: Whether to use View Storage Accelerator.
          example: false
          type: boolean
        view_storage_accelerator_disk_types:
          description: |-
            Disk types to enable for the View Storage Accelerator feature. This is only applicable to linked clone desktop pools.
            * OS_DISKS: OS disks.
            * OS_AND_PERSISTENT_DISKS: OS and persistent disks.
          enum:
          - OS_DISKS
          - OS_AND_PERSISTENT_DISKS
          example: OS_DISKS
          type: string
      title: DesktopPoolViewStorageAcceleratorSettings
      type: object
    DesktopPoolVirtualMachinePatternNamingSettings:
      description: Settings related to specification of VMs with a naming pattern.
      example:
        number_of_spare_machines: 10
        provisioning_time: ON_DEMAND
        min_number_of_machines: 10
        naming_pattern: vm-{n}-sales
        max_number_of_machines: 100
      properties:
        max_number_of_machines:
          description: Maximum number of machines in the desktop pool.
          example: 100
          format: int32
          type: integer
        min_number_of_machines:
          description: The minimum number of machines to have provisioned if on demand
            provisioning is selected.
          example: 10
          format: int32
          type: integer
        naming_pattern:
          description: Virtual machines will be named according to the specified naming
            pattern.
          example: vm-{n}-sales
          type: string
        number_of_spare_machines:
          description: Number of spare powered on machines.
          example: 10
          format: int32
          type: integer
        provisioning_time:
          description: |-
            Determines when the machines are provisioned.
            * ON_DEMAND: Provision machines on demand.
            * UP_FRONT: Provision all machines up-front.
          enum:
          - ON_DEMAND
          - UP_FRONT
          example: ON_DEMAND
          type: string
      title: DesktopPoolVirtualMachinePatternNamingSettings
      type: object
    DesktopPoolVirtualMachineSpecifiedNamingSettings:
      description: Settings related to specified naming of machines.
      example:
        num_unassigned_machines_kept_powered_on: 1
        num_machines: 10
        start_machines_in_maintenance_mode: false
      properties:
        num_machines:
          description: Number of machines in the pool.
          example: 10
          format: int32
          type: integer
        num_unassigned_machines_kept_powered_on:
          description: Number of unassigned machines kept powered on. This value must
            be less than or equal to the number of specified names.
          example: 1
          format: int32
          type: integer
        start_machines_in_maintenance_mode:
          description: Allows virtual machines to be customized manually before users
            can log in and access them. This mode must be exited manually.
          example: false
          type: boolean
      title: DesktopPoolVirtualMachineSpecifiedNamingSettings
      type: object
    EnrollmentServerDetails:
      example:
        id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed50
        dns_name: enrollment-server.example.com
        status: OK
      properties:
        dns_name:
          description: Enrollment server dns name.
          example: enrollment-server.example.com
          type: string
        id:
          description: Unique ID of the Enrollment Server.
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed50
          type: string
        status:
          description: |-
            Enrollment server status.
            * OK: The state of enrollment server is OK.
            * ERROR: The enrollment server has an error.
          enum:
          - OK
          - ERROR
          example: OK
          type: string
      required:
      - dns_name
      - id
      - status
      title: EnrollmentServerDetails
      type: object
    EntitlementInfo:
      description: 'Entitlement Information related to the resource.<br>List API returning
        this summary information can use search filter queryto filter on specific
        fields supported by filters.<br>Supported Filters : ''Equals''.<br>See the
        field description to know the filter types it supports.'
      example:
        ad_user_or_group_ids:
        - S-1-1-1-3965912346-1012345398-3123456564-123
        - S-1-2-3-3123456786-1012345398-3123456784-124
        id: 855ea6c5-720a-41e1-96f4-958c90e6e424
      properties:
        ad_user_or_group_ids:
          description: List of ad-user-or-group SIDs which are entitled to the given
            resource.
          example:
          - S-1-1-1-3965912346-1012345398-3123456564-123
          - S-1-2-3-3123456786-1012345398-3123456784-124
          items:
            type: string
          type: array
        id:
          description: 'Unique ID representing the resource.<br>Supported Filters
            : ''Equals''.'
          example: 855ea6c5-720a-41e1-96f4-958c90e6e424
          type: string
      title: EntitlementInfo
      type: object
    EntitlementResponseInfo:
      description: Entitlement response info object corrspsonding to the given ad-user-or-group
        SID for the entitlement operation.
      example:
        status_code: 200
        ad_user_or_group_id: S-1-5-21-2898529287-1016622242-505487308-500
        error_messages:
        - Entity does not exists.
        - Property is mandatory.
        timestamp: 1561939200000
      properties:
        ad_user_or_group_id:
          description: Unique SID representing the ad-user-or-group
          example: S-1-5-21-2898529287-1016622242-505487308-500
          type: string
        error_messages:
          description: Reasons for the failure of the operation.
          example:
          - Entity does not exists.
          - Property is mandatory.
          items:
            type: string
          type: array
        status_code:
          description: Response HTTP status code of the operation.
          example: 200
          format: int32
          type: integer
        timestamp:
          description: Timestamp in milliseconds when the operation failed. Measured
            as epoch time.
          example: 1561939200000
          format: int64
          type: integer
      title: EntitlementResponseInfo
      type: object
    EntitlementSpec:
      description: Specification for entitlement operations on a given resource id.
      example:
        ad_user_or_group_ids:
        - S-1-1-1-3965912346-1012345398-3123456564-123
        - S-1-2-3-3123456786-1012345398-3123456784-124
        id: 855ea6c5-720a-41e1-96f4-958c90e6e424
      properties:
        ad_user_or_group_ids:
          description: List of ad-user-or-group SIDs for the entitlement operations
            on the given resource.
          example:
          - S-1-1-1-3965912346-1012345398-3123456564-123
          - S-1-2-3-3123456786-1012345398-3123456784-124
          items:
            type: string
          type: array
        id:
          description: Unique ID representing the resource.
          example: 855ea6c5-720a-41e1-96f4-958c90e6e424
          type: string
      title: EntitlementSpec
      type: object
    EnvironmentInfo:
      description: Information related to Environment Settings.
      example:
        cluster_guid: d0325b13-2bf1-4fa4-b027-e780004f2d1e
        fips_mode_enabled: false
        ip_mode: IPv4
        cluster_name: master-cluster
        timezone_offset: 19800
        local_pod_name: master-pod
      properties:
        cluster_guid:
          description: The GUID of a group of Connection Servers sharing the same
            configuration.
          example: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          type: string
        cluster_name:
          description: The name of a group of Connection Servers sharing the same
            configuration.
          example: master-cluster
          type: string
        fips_mode_enabled:
          description: Indicates if FIPS mode is enabled.
          example: false
          type: boolean
        ip_mode:
          description: |-
            Indicates the IP mode of the environment.
            * IPv4: The ip mode is IPv4.
            * IPv6: The ip mode is IPv6.
          enum:
          - IPv4
          - IPv6
          example: IPv4
          type: string
        local_pod_name:
          description: The name of the current pod in the Multi-DataCenter Horizon
            Pod, the value will be null when PodFederation is not initialized.
          example: master-pod
          type: string
        timezone_offset:
          description: Represents the clusters time zone offset from UTC in seconds.
          example: 19800
          format: int32
          type: integer
      required:
      - cluster_guid
      - cluster_name
      - fips_mode_enabled
      - ip_mode
      - timezone_offset
      title: EnvironmentInfo
      type: object
    EventDatabaseMonitorDetails:
      example:
        server_name: event-db.example.com
        database_name: HorizonEventDB
        port: 1433
        prefix: view_
        user_name: sa
        type: SQL_SERVER
      properties:
        database_name:
          description: The name of the database.
          example: HorizonEventDB
          type: string
        port:
          description: The port of the database server.
          example: 1433
          format: int32
          type: integer
        prefix:
          description: The prefix for event tables in the database.
          example: view_
          type: string
        server_name:
          description: The name or ip address of the database server.
          example: event-db.example.com
          type: string
        type:
          description: |-
            The type of the database.
            * ORACLE: An Oracle database.
            * SQL_SERVER: A SQL server database.
          enum:
          - ORACLE
          - SQL_SERVER
          example: SQL_SERVER
          type: string
        user_name:
          description: The username used to connect to the database.
          example: sa
          type: string
      required:
      - database_name
      - port
      - prefix
      - server_name
      - type
      - user_name
      title: EventDatabaseMonitorDetails
      type: object
    EventDatabaseMonitorInfo:
      description: Event Database Monitor Information
      example:
        event_count: 10000
        details:
          server_name: event-db.example.com
          database_name: HorizonEventDB
          port: 1433
          prefix: view_
          user_name: sa
          type: SQL_SERVER
        status: CONNECTED
      properties:
        details:
          $ref: '#/components/schemas/EventDatabaseMonitorDetails'
        event_count:
          description: Number of events recorded in the database
          example: 10000
          format: int32
          type: integer
        status:
          description: |-
            State of the database.
            * CONNECTED: Connection Server is connected to the database.
            * CONNECTING: Connection Server is connecting to the database.
            * DISCONNECTED: Connection Server is disconnected from the database.
            * RECONNECTING: Connection Server is reconnecting to the database.
            * ERROR: Error in connecting to the database from Connection Server.
            * NOT_CONFIGURED: Database is not configured.
          enum:
          - CONNECTED
          - CONNECTING
          - DISCONNECTED
          - RECONNECTING
          - ERROR
          - NOT_CONFIGURED
          example: CONNECTED
          type: string
      title: EventDatabaseMonitorInfo
      type: object
    FarmDisplayProtocolSettings:
      description: Display protocol settings for the Farm.
      example:
        session_collaboration_enabled: false
        html_access_enabled: true
        allow_display_protocol_override: true
        default_display_protocol: PCOIP
        vgpu_grid_profile: instant-profile
        grid_vgpus_enabled: false
      properties:
        allow_display_protocol_override:
          description: Indicates whether the display protocol settings could be overridden.If
            set to false, then default_display_protocol is used.Default value is true.
          example: true
          type: boolean
        default_display_protocol:
          description: |-
            The default server display protocol. Default value is PCOIP.
            * RDP: Microsoft Remote Desktop Protocol.
            * PCOIP: PCoIP protocol.
            * BLAST: BLAST protocol.
          enum:
          - RDP
          - PCOIP
          - BLAST
          example: PCOIP
          type: string
        grid_vgpus_enabled:
          description: If this is true, the host or cluster associated with the farm
            must support NVIDIA GRID andvGPU types required by the RDSH desktop virtualMachines,
            VmTemplate, or BaseImageSnapshot.If this is false, RDSH instant clone
            farm must not support NVIDIA GRID vGPUs.Default value is false.
          example: false
          type: boolean
        html_access_enabled:
          description: This property is no longer in use for Horizon Components. It
            is always set to true. HTML Access, enabled by VMware Blast technology,
            allows users to connect to Horizon machines from Web browsers. Horizon
            Client software does not have to be installed on the client devices. To
            enable HTML Access, you must install the HTML Machine Access feature pack.
          example: true
          type: boolean
        session_collaboration_enabled:
          description: Enable session collaboration feature. Session collaborationallows
            a user to share their remote session with other users.BLAST must be configured
            as a supported protocol in supported_display_protocols.Default value is
            false.
          example: false
          type: boolean
        vgpu_grid_profile:
          description: NVIDIA GRID vGPUs might have multiple profiles and any one
            of the available profiles can beapplied to newly created instant clone
            RDSH server. The profile specified in this field will beused in the newly
            created instant clone RDSH server. Will be set if enable_grid_vgpus set
            to true.
          example: instant-profile
          type: string
      required:
      - allow_display_protocol_override
      - default_display_protocol
      - html_access_enabled
      - session_collaboration_enabled
      title: FarmDisplayProtocolSettings
      type: object
    FarmInfo:
      description: Information related to Farm.
      example:
        settings:
          server_error_threshold: 5
          delete_in_progess: false
          display_protocol_settings:
            session_collaboration_enabled: false
            html_access_enabled: true
            allow_display_protocol_override: true
            default_display_protocol: PCOIP
            vgpu_grid_profile: instant-profile
            grid_vgpus_enabled: false
          desktop_id: 0103796c-102b-4ed3-953f-3dfe3d23e0fe
          session_settings:
            disconnected_session_timeout_minutes: 5
            logoff_after_timeout: false
            pre_launch_session_timeout_minutes: 10
            disconnected_session_timeout_policy: NEVER
            empty_session_timeout_minutes: 5
            empty_session_timeout_policy: AFTER
            pre_launch_session_timeout_policy: AFTER
          load_balancer_settings:
            custom_script_in_use: false
            lb_metric_settings:
              disk_write_latency_threshold: 50
              disk_queue_length_threshold: 50
              cpu_threshold: 50
              include_session_count: true
              disk_read_latency_threshold: 50
              memory_threshold: 50
        name: ManualFarm1
        description: Farm description
        id: 855ea6c5-720a-41e1-96f4-958c90e6e424
        source: INSTANT_CLONE
        display_name: Farm-display-1
        type: AUTOMATED
        enabled: true
      properties:
        description:
          description: Farm description. The maximum length is 1024 characters.
          example: Farm description
          type: string
        display_name:
          description: Display name of the Farm. The maximum length is 256 characters.
          example: Farm-display-1
          type: string
        enabled:
          description: Indicates whether the Farm is enabled for brokering. Default
            value is true.
          example: true
          type: boolean
        id:
          description: Unique ID representing Farm.
          example: 855ea6c5-720a-41e1-96f4-958c90e6e424
          type: string
        name:
          description: Name of the Farm. The maximum length is 64 characters.
          example: ManualFarm1
          type: string
        settings:
          $ref: '#/components/schemas/FarmSettings'
        source:
          description: |-
            Type of the Farm.
            * INSTANT_CLONE: The Farm uses instant clone technology for provisioning the RDS Servers.Applicable for AUTOMATED type Farms only.
            * LINKED_CLONE: The Farm uses linked clone technology for provisioning the RDS Servers.Applicable for AUTOMATED type Farms only.
          enum:
          - INSTANT_CLONE
          - LINKED_CLONE
          example: INSTANT_CLONE
          type: string
        type:
          description: |-
            Type of the Farm.
            * AUTOMATED: Automated Farm.
            * MANUAL: Manual Farm.
          enum:
          - AUTOMATED
          - MANUAL
          example: AUTOMATED
          type: string
      required:
      - id
      - name
      - settings
      - type
      title: FarmInfo
      type: object
    FarmLoadBalancerSettings:
      description: Settings for load balancing the session requests across the RDS
        servers in the farm.
      example:
        custom_script_in_use: false
        lb_metric_settings:
          disk_write_latency_threshold: 50
          disk_queue_length_threshold: 50
          cpu_threshold: 50
          include_session_count: true
          disk_read_latency_threshold: 50
          memory_threshold: 50
      properties:
        custom_script_in_use:
          description: Indicates whether to use custom scripts for Load Balancing.Default
            is false.
          example: false
          type: boolean
        lb_metric_settings:
          $ref: '#/components/schemas/LoadBalancerMetricSettings'
      title: FarmLoadBalancerSettings
      type: object
    FarmMonitorDetails:
      description: Details of the Farm.
      example:
        source: LINKED_CLONE
        type: AUTOMATED
      properties:
        source:
          description: |-
            Source of farm machines.
            This property is required if type is set to "AUTOMATED".
            * LINKED_CLONE: Linked clone share the same base image and use less storage space than full RDS Servers.
            * INSTANT_CLONE: Instant clone engine uses vmfork technology to create the instant clones. These clones take much less time for provisioning.
          enum:
          - LINKED_CLONE
          - INSTANT_CLONE
          example: LINKED_CLONE
          type: string
        type:
          description: |-
            Farm type.
            * AUTOMATED: Automated Farm.
            * MANUAL: Manual farm.
          enum:
          - AUTOMATED
          - MANUAL
          example: AUTOMATED
          type: string
      required:
      - type
      title: FarmMonitorDetails
      type: object
    FarmMonitorInfo:
      description: Monitoring information related to Farm.
      example:
        application_count: 12
        rds_server_count: 123
        name: farm1
        details:
          source: LINKED_CLONE
          type: AUTOMATED
        id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed50
        status: OK
      properties:
        application_count:
          description: Number of Applications published from the farm.
          example: 12
          format: int32
          type: integer
        details:
          $ref: '#/components/schemas/FarmMonitorDetails'
        id:
          description: Unique ID of the Farm.
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed50
          type: string
        name:
          description: Farm name.
          example: farm1
          type: string
        rds_server_count:
          description: Number of RDS Servers in the farm.
          example: 123
          format: int32
          type: integer
        status:
          description: |-
            Status of Farm.
            * OK: Farm is enabled and no servers are in WARNING or ERROR state. One or more server(s) may be DISABLED (including the case where all of them are DISABLED).
            * WARNING: Farm is enabled. One or more of the following is true:
            1) One or more server(s) is either in WARNING or ERROR (not exceeding the predefined threshold) state.
            2) The RDS Servers in this Farm present a mix of both known and unknown load preferences.
            * ERROR: Farm is enabled. One or more server(s) (exceeding the predefined threshold) is in ERROR state, or, for Automated Farms, there could be a provisioning error.
            * DISABLED: Farm is disabled.
          enum:
          - OK
          - WARNING
          - ERROR
          - DISABLED
          example: OK
          type: string
      required:
      - details
      - id
      - name
      - status
      title: FarmMonitorInfo
      type: object
    FarmSessionSettings:
      description: Session related settings for the Farm.
      example:
        disconnected_session_timeout_minutes: 5
        logoff_after_timeout: false
        pre_launch_session_timeout_minutes: 10
        disconnected_session_timeout_policy: NEVER
        empty_session_timeout_minutes: 5
        empty_session_timeout_policy: AFTER
        pre_launch_session_timeout_policy: AFTER
      properties:
        disconnected_session_timeout_minutes:
          description: Disconnected sessions timeout (in minutes).Will be set when
            disconnected_session_timeout_policy is set to AFTER.
          example: 5
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: int32
          minimum: 1
          type: integer
        disconnected_session_timeout_policy:
          description: |-
            Log-off policy after disconnected session. Default value is NEVER.
            * IMMEDIATELY: Immmediately Logoff after user disconnect.
            * AFTER: Logoff after the specified number of minutes after user disconnect.
            * NEVER: Do not logoff after user disconnect.
          enum:
          - IMMEDIATELY
          - AFTER
          - NEVER
          example: NEVER
          type: string
        empty_session_timeout_minutes:
          description: Application empty session timeout in minutes. An empty session
            that has no remote-ablewindow is disconnected after the timeout. Default
            value is 1.Will be set when the empty_session_timeout_policy set to AFTER.
          example: 5
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: int32
          minimum: 1
          type: integer
        empty_session_timeout_policy:
          description: |-
            Application empty session timeout policy. Default value is AFTER.
            * IMMEDIATE: Empty session will be disconnected immediately.
            * NEVER: Empty session will never disconnected.
            * AFTER: Empty session will be disconnected after specified number of minutes.
          enum:
          - IMMEDIATE
          - NEVER
          - AFTER
          example: AFTER
          type: string
        logoff_after_timeout:
          description: After timeout, empty application sessions are logged off when
            set to true. Otherwise sessions are disconnected.Default value is false.
          example: false
          type: boolean
        pre_launch_session_timeout_minutes:
          description: Application pre-launch session timeout in minutes. A pre-launch
            session is disconnected after the timeout.Will be set only when pre_launch_timeout_policy
            is set to AFTER.
          example: 10
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: int32
          minimum: 1E+1
          type: integer
        pre_launch_session_timeout_policy:
          description: |-
            Pre-launch session timeout policy for the application sessions on this Farm.
            * AFTER: Pre-launched session is disconnected after specified number of minutes.
            * NEVER: Pre-launched session is never disconnected.
          enum:
          - AFTER
          - NEVER
          example: AFTER
          type: string
      required:
      - disconnected_session_timeout_policy
      - empty_session_timeout_policy
      - logoff_after_timeout
      title: FarmSessionSettings
      type: object
    FarmSettings:
      description: Settings related to the Farm.
      example:
        server_error_threshold: 5
        delete_in_progess: false
        display_protocol_settings:
          session_collaboration_enabled: false
          html_access_enabled: true
          allow_display_protocol_override: true
          default_display_protocol: PCOIP
          vgpu_grid_profile: instant-profile
          grid_vgpus_enabled: false
        desktop_id: 0103796c-102b-4ed3-953f-3dfe3d23e0fe
        session_settings:
          disconnected_session_timeout_minutes: 5
          logoff_after_timeout: false
          pre_launch_session_timeout_minutes: 10
          disconnected_session_timeout_policy: NEVER
          empty_session_timeout_minutes: 5
          empty_session_timeout_policy: AFTER
          pre_launch_session_timeout_policy: AFTER
        load_balancer_settings:
          custom_script_in_use: false
          lb_metric_settings:
            disk_write_latency_threshold: 50
            disk_queue_length_threshold: 50
            cpu_threshold: 50
            include_session_count: true
            disk_read_latency_threshold: 50
            memory_threshold: 50
      properties:
        delete_in_progess:
          description: Indicates whether the Farm is in the process of being deleted.
            Default value is false.
          example: false
          type: boolean
        desktop_id:
          description: Desktop pool Id representing the RDS Desktop pool to which
            this Farm belongs.
          example: 0103796c-102b-4ed3-953f-3dfe3d23e0fe
          type: string
        display_protocol_settings:
          $ref: '#/components/schemas/FarmDisplayProtocolSettings'
        load_balancer_settings:
          $ref: '#/components/schemas/FarmLoadBalancerSettings'
        server_error_threshold:
          description: The minimum number of machines that must be fully operational
            in order toavoid showing the farm in an error state. Default value is
            0.
          example: 5
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: int32
          minimum: 0
          type: integer
        session_settings:
          $ref: '#/components/schemas/FarmSessionSettings'
      required:
      - delete_in_progess
      title: FarmSettings
      type: object
    FeatureSettings:
      description: Information related to Feature Settings.
      example:
        enable_helpdesk: true
        enable_image_management: true
        cloud_managed: true
      properties:
        cloud_managed:
          description: Indicates whether this cluster/pod is managed by Horizon Cloud
            Services. This will be false only when there are no cloud managed machines.
          example: true
          type: boolean
        enable_helpdesk:
          description: Determines whether Helpdesk feature is enabled or not. By default
            Helpdesk is enabled.
          example: true
          type: boolean
        enable_image_management:
          description: Determines whether Image Management feature is enabled or not.
            By default Image Management is disabled.
          example: true
          type: boolean
      title: FeatureSettings
      type: object
    FeatureSettingsUpdateSpec:
      description: Information related to Feature Settings.
      example:
        cloud_managed: true
      properties:
        cloud_managed:
          description: Indicates whether this cluster/pod is managed by Horizon Cloud
            Services. This will be false only when there are no cloud managed machines.
          example: true
          type: boolean
      title: FeatureSettingsUpdateSpec
      type: object
    GatewayMonitorDetails:
      description: Details of the Gateway.
      example:
        internal: false
        address: uag1.example.com
        type: UAG
        version: 3.5.0
      properties:
        address:
          description: Gateway host name or IP address.
          example: uag1.example.com
          type: string
        internal:
          description: Indicates if the Gateway is internal.
          example: false
          type: boolean
        type:
          description: |-
            Type of the Gateway.
            * UAG: Unified Access Gateway type.
            * F5: F5 Gateway type.
            * UNKNOWN: Unknown type.
          enum:
          - UAG
          - F5
          - UNKNOWN
          example: UAG
          type: string
        version:
          description: Version of the Gateway.
          example: 3.5.0
          type: string
      required:
      - address
      - internal
      - type
      - version
      title: GatewayMonitorDetails
      type: object
    GatewayMonitorInfo:
      description: Monitoring information related to Gateways registered in the environment.
      example:
        pcoip_connection_count: 90
        blast_connection_count: 10
        name: uag1
        details:
          internal: false
          address: uag1.example.com
          type: UAG
          version: 3.5.0
        active_connection_count: 1234
        id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
        status: OK
      properties:
        active_connection_count:
          description: Number of active connections for the gateway. Includes PCoIP
            and BLAST connection counts.
          example: 1234
          format: int32
          type: integer
        blast_connection_count:
          description: Number of BLAST connections for the gateway.
          example: 10
          format: int32
          type: integer
        details:
          $ref: '#/components/schemas/GatewayMonitorDetails'
        id:
          description: Unique ID of the Gateway.
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
          type: string
        name:
          description: Gateway name.
          example: uag1
          type: string
        pcoip_connection_count:
          description: Number of PCoIP connections for the gateway.
          example: 90
          format: int32
          type: integer
        status:
          description: |-
            Status of the Gateway.
            * NOT_CONTACTED: There has been no contact from the gateway.
            * PROBLEM: The gateway has reported a problem.
            * STALE: Gateway is stale. Gateway will be marked as stale when Connection Server does not receive any request from the Gateway in last two successive intervals.
            * OK: The Gateway is working as expected.
          enum:
          - NOT_CONTACTED
          - PROBLEM
          - STALE
          - OK
          example: OK
          type: string
      required:
      - details
      - id
      - name
      - status
      title: GatewayMonitorInfo
      type: object
    GatewayMonitorInfoV2:
      description: Monitoring information related to Gateways registered in the environment.
      example:
        pcoip_connection_count: 90
        blast_connection_count: 10
        last_updated_timestamp: 1582029025748
        name: uag1
        details:
          internal: false
          address: uag1.example.com
          type: UAG
          version: 3.5.0
        active_connection_count: 1234
        id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
        status: OK
      properties:
        active_connection_count:
          description: Number of active connections for the gateway. Includes PCoIP
            and BLAST connection counts.
          example: 1234
          format: int32
          type: integer
        blast_connection_count:
          description: Number of BLAST connections for the gateway.
          example: 10
          format: int32
          type: integer
        details:
          $ref: '#/components/schemas/GatewayMonitorDetails'
        id:
          description: Unique ID of the Gateway.
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
          type: string
        last_updated_timestamp:
          description: The timestamp in milliseconds when the last update was obtained.
            Measured as epoch time.
          example: 1582029025748
          format: int64
          type: integer
        name:
          description: Gateway name.
          example: uag1
          type: string
        pcoip_connection_count:
          description: Number of PCoIP connections for the gateway.
          example: 90
          format: int32
          type: integer
        status:
          description: |-
            Status of the Gateway.
            * NOT_CONTACTED: There has been no contact from the gateway.
            * PROBLEM: The gateway has reported a problem.
            * STALE: Gateway is stale. Gateway will be marked as stale when Connection Server does not receive any request from the Gateway in last two successive intervals.
            * OK: The Gateway is working as expected.
          enum:
          - NOT_CONTACTED
          - PROBLEM
          - STALE
          - OK
          example: OK
          type: string
      required:
      - details
      - id
      - name
      - status
      title: GatewayMonitorInfoV2
      type: object
    GeneralSettings:
      description: Information related to General Settings.
      example:
        enable_sending_domain_list: false
        forced_logoff_message: The system will shut down shortly. Please save your
          work.
        restricted_client_data:
        - type: WINDOWS
          version: "7.5"
        - type: LINUX
          version: "6.5"
        enable_credential_cleanup_for_htmlaccess: false
        enable_automatic_status_updates: true
        block_restricted_clients: false
        application_sso_timeout_minutes: 30
        display_warning_before_forced_logoff: true
        client_max_session_timeout_policy: TIMEOUT_AFTER
        enable_multi_factor_re_authentication: false
        store_cal_on_connection_server: false
        store_cal_on_client: false
        hide_domain_list_in_client: true
        display_pre_login_message: false
        machine_sso_timeout_minutes: 300
        restricted_client_message: The system does not support this version of the
          Horizon client.
        pre_login_message: 'Disclaimer : This server is being monitored for suspicious
          activity.'
        hide_server_information_in_client: false
        enable_server_in_single_user_mode: true
        console_session_timeout_minutes: 30
        machine_sso_timeout_policy: DISABLED_AFTER
        client_session_timeout_minutes: 300
        client_max_session_timeout_minutes: 300
        forced_logoff_timeout_minutes: 3
        application_sso_timeout_policy: ENABLED
        client_idle_session_timeout_policy: NEVER
        client_idle_session_timeout_minutes: 300
      properties:
        application_sso_timeout_minutes:
          description: The time allowed to elapse after a user has authenticated before
            the application SSO credentials are locked unless the user's Horizon client
            supports idle sessions and the user remains active.
          example: 30
          format: int32
          type: integer
        application_sso_timeout_policy:
          description: |-
            Specifies the policy for the maximum time after which single sign on will be disabled for application sessions.
            * DISABLED_AFTER: Single sign on will be disabled after the specified number of minutes has elapsed since the user connected to Horizon Connection Server.
            * DISABLED: Single sign on is disabled.
            * ENABLED: Single sign on is enabled.
          enum:
          - DISABLED_AFTER
          - DISABLED
          - ENABLED
          example: ENABLED
          type: string
        block_restricted_clients:
          description: Indicates whether restricted Horizon clients should be blocked
            by the Connection Server.
          example: false
          type: boolean
        client_idle_session_timeout_minutes:
          description: Determines how long a user can be idle before the Connection
            Server takes measure to protect the session.
          example: 300
          format: int32
          type: integer
        client_idle_session_timeout_policy:
          description: |-
            Specifies the policy for the maximum time that a that a user can be idle before the Connection Server takes measure to protect the session.
            * TIMEOUT_AFTER: The timeout is set for a configurable time.
            * NEVER: The timeout has been disabled.
          enum:
          - TIMEOUT_AFTER
          - NEVER
          example: NEVER
          type: string
        client_max_session_timeout_minutes:
          description: Determines how long a user can keep a session open after logging
            in to the Connection Server. When a session times out, the session is
            terminated and the Horizon client is disconnected from the resource. This
            property has a default value of 600 and a minimum value of 5. This property
            is required if clientMaxSessionTimeoutPolicy is set to TIMEOUT_AFTER.
          example: 300
          format: int32
          type: integer
        client_max_session_timeout_policy:
          description: |-
            Client max session lifetime policy. This property has a default value of TIMEOUT_AFTER. A value of TIMEOUT_AFTER indicates that the Horizon client session times out after a configurable session length. A value of NEVER indicates that the Horizon client session will not time out and will only end due to inactivity.
            * TIMEOUT_AFTER: The timeout is set for a configurable time.
            * NEVER: The timeout has been disabled.
          enum:
          - TIMEOUT_AFTER
          - NEVER
          example: TIMEOUT_AFTER
          type: string
        client_session_timeout_minutes:
          description: Determines the maximum length of time that a session will be
            kept active if there is no traffic between the Horizon client and the
            Connection Server.
          example: 300
          format: int32
          type: integer
        console_session_timeout_minutes:
          description: Determines how long an idle admin console session continues
            before the session times out.
          example: 30
          format: int32
          type: integer
        display_pre_login_message:
          description: Indicates whether to show a disclaimer or other message when
            the Horizon Client user logs in. This change will take effect on next
            login for each user.
          example: false
          type: boolean
        display_warning_before_forced_logoff:
          description: Indicates whether to display a warning message when users are
            forced to log off because a scheduled or immediate update such as a machine-refresh
            operation is about to start.
          example: true
          type: boolean
        enable_automatic_status_updates:
          description: Enable updation of the global status of the application periodically.
            The Dashboard Information is also updated at regular intervals when Dashboard
            page is active.
          example: true
          type: boolean
        enable_credential_cleanup_for_htmlaccess:
          description: Indicates whether to clean up session credentials when one
            tab connecting to remote machine/application is closed.
          example: false
          type: boolean
        enable_multi_factor_re_authentication:
          description: Enables 2 factor re-authentication after idle session timeout.
          example: false
          type: boolean
        enable_sending_domain_list:
          description: Indicates whether the domain list will be sent to the Horizon
            client. Since domain list will be sent before user is authenticated with
            server, it could disclose domain information to external users.
          example: false
          type: boolean
        enable_server_in_single_user_mode:
          description: Permits RDSServer operating systems to be used for non-RDS
            Machines.
          example: true
          type: boolean
        forced_logoff_message:
          description: The warning to be displayed before logging off the user.
          example: The system will shut down shortly. Please save your work.
          type: string
        forced_logoff_timeout_minutes:
          description: The time to wait after the warning is displayed and before
            logging off the user.
          example: 3
          format: int32
          type: integer
        hide_domain_list_in_client:
          description: Whether to hide the list of domains in the Horizon client user
            interface. If value set to true, the user will need to provide a UPN (e.g.
            user@domain) or a logon name in the format domain\\user when logging in.
          example: true
          type: boolean
        hide_server_information_in_client:
          description: Indicates whether to hide the server URL in the Horizon client
            user interface.
          example: false
          type: boolean
        machine_sso_timeout_minutes:
          description: Single sign on will be disabled after the specified time has
            elapsed since the user connected to Connection Server.
          example: 300
          format: int32
          type: integer
        machine_sso_timeout_policy:
          description: |-
            Specifies the policy for the maximum time after which single sign on will be disabled after a user connects to the Connection Server.
            * DISABLED_AFTER: Single sign on will be disabled after the specified number of minutes has elapsed since the user connected to Horizon Connection Server.
            * DISABLED: Single sign on is disabled.
            * ENABLED: Single sign on is enabled.
          enum:
          - DISABLED_AFTER
          - DISABLED
          - ENABLED
          example: DISABLED_AFTER
          type: string
        pre_login_message:
          description: Displays a disclaimer or another message to Horizon Client
            users when they log in. No message will be displayed if this is not set.
          example: 'Disclaimer : This server is being monitored for suspicious activity.'
          type: string
        restricted_client_data:
          description: List of restricted Horizon Clients.
          example:
          - type: WINDOWS
            version: "7.5"
          - type: LINUX
            version: "6.5"
          items:
            $ref: '#/components/schemas/RestrictedClientData'
          type: array
        restricted_client_message:
          description: The message to be displayed to Horizon clients which are blocked
            by the Connection Server.
          example: The system does not support this version of the Horizon client.
          type: string
        store_cal_on_client:
          description: Determines whether or not to store the RDS Per Device Client
            Access License on Horizon client devices. This value can be true only
            if Store Client Access License on Connection Server is true.
          example: false
          type: boolean
        store_cal_on_connection_server:
          description: Determines whether or not to store the RDS Per Device Client
            Access License on Connection Server.
          example: false
          type: boolean
      required:
      - application_sso_timeout_policy
      - client_idle_session_timeout_policy
      - client_max_session_timeout_policy
      - client_session_timeout_minutes
      - machine_sso_timeout_policy
      - store_cal_on_client
      - store_cal_on_connection_server
      title: GeneralSettings
      type: object
    GeneralSettingsUpdateSpec:
      description: Information related to General Settings.
      example:
        enable_sending_domain_list: false
        forced_logoff_message: The system will shut down shortly. Please save your
          work.
        restricted_client_data:
        - type: WINDOWS
          version: "7.5"
        - type: LINUX
          version: "6.5"
        enable_credential_cleanup_for_htmlaccess: false
        enable_automatic_status_updates: true
        block_restricted_clients: false
        application_sso_timeout_minutes: 30
        display_warning_before_forced_logoff: true
        client_max_session_timeout_policy: TIMEOUT_AFTER
        enable_multi_factor_re_authentication: false
        store_cal_on_connection_server: false
        store_cal_on_client: false
        hide_domain_list_in_client: true
        display_pre_login_message: false
        machine_sso_timeout_minutes: 300
        restricted_client_message: The system does not support this version of the
          Horizon client.
        pre_login_message: 'Disclaimer : This server is being monitored for suspicious
          activity.'
        hide_server_information_in_client: false
        enable_server_in_single_user_mode: true
        console_session_timeout_minutes: 30
        machine_sso_timeout_policy: DISABLED_AFTER
        client_session_timeout_minutes: 300
        client_max_session_timeout_minutes: 300
        forced_logoff_timeout_minutes: 3
        application_sso_timeout_policy: ENABLED
        client_idle_session_timeout_policy: NEVER
        client_idle_session_timeout_minutes: 300
      properties:
        application_sso_timeout_minutes:
          description: The time allowed to elapse after a user has authenticated before
            the application SSO credentials are locked unless the user's Horizon client
            supports idle sessions and the user remains active.
          example: 30
          format: int32
          type: integer
        application_sso_timeout_policy:
          description: |-
            Specifies the policy for the maximum time after which single sign on will be disabled for application sessions.
            * DISABLED_AFTER: Single sign on will be disabled after the specified number of minutes has elapsed since the user connected to Horizon Connection Server.
            * DISABLED: Single sign on is disabled.
            * ENABLED: Single sign on is enabled.
          enum:
          - DISABLED_AFTER
          - DISABLED
          - ENABLED
          example: ENABLED
          type: string
        block_restricted_clients:
          description: Indicates whether restricted Horizon clients should be blocked
            by the Connection Server.
          example: false
          type: boolean
        client_idle_session_timeout_minutes:
          description: Determines how long a user can be idle before the broker takes
            measure to protect the session.
          example: 300
          format: int32
          type: integer
        client_idle_session_timeout_policy:
          description: |-
            Specifies the policy for the maximum time that a that a user can be idle before the Connection Server takes measure to protect the session.
            * TIMEOUT_AFTER: The timeout is set for a configurable time.
            * NEVER: The timeout has been disabled.
          enum:
          - TIMEOUT_AFTER
          - NEVER
          example: NEVER
          type: string
        client_max_session_timeout_minutes:
          description: Determines how long a user can keep a session open after logging
            in to the Connection Server. When a session times out, the session is
            terminated and the Horizon client is disconnected from the resource. This
            property has a default value of 600 and a minimum value of 5. This property
            is required if Client Max Session Timeout Policy is set to TIMEOUT_AFTER.
          example: 300
          format: int32
          type: integer
        client_max_session_timeout_policy:
          description: |-
            Client max session lifetime policy. This property has a default value of TIMEOUT_AFTER. A value of TIMEOUT_AFTER indicates that the Horizon client session times out after a configurable session length. A value of NEVER indicates that the Horizon client session will not time out and will only end due to inactivity.
            * TIMEOUT_AFTER: The timeout is set for a configurable time.
            * NEVER: The timeout has been disabled.
          enum:
          - TIMEOUT_AFTER
          - NEVER
          example: TIMEOUT_AFTER
          type: string
        client_session_timeout_minutes:
          description: Determines the maximum length of time that a session will be
            kept active if there is no traffic between the Horizon client and the
            Connection Server.
          example: 300
          format: int32
          type: integer
        console_session_timeout_minutes:
          description: Determines how long an idle admin console session continues
            before the session times out.
          example: 30
          format: int32
          type: integer
        display_pre_login_message:
          description: Indicates whether to show a disclaimer or other message when
            the Horizon Client user logs in. This change will take effect on next
            login for each user.
          example: false
          type: boolean
        display_warning_before_forced_logoff:
          description: Indicates whether to display a warning message when users are
            forced to log off because a scheduled or immediate update such as a machine-refresh
            operation is about to start.
          example: true
          type: boolean
        enable_automatic_status_updates:
          description: Enable updation of the global status of the application periodically.
            The Dashboard Information is also updated at regular intervals when Dashboard
            page is active.
          example: true
          type: boolean
        enable_credential_cleanup_for_htmlaccess:
          description: Indicates whether to clean up session credentials when one
            tab connecting to remote machine/application is closed.
          example: false
          type: boolean
        enable_multi_factor_re_authentication:
          description: Enables 2 factor re-authentication after idle session timeout.
          example: false
          type: boolean
        enable_sending_domain_list:
          description: Indicates whether the domain list will be sent to the Horizon
            client. Since domain list will be sent before user is authenticated with
            server, it could disclose domain information to external users.
          example: false
          type: boolean
        enable_server_in_single_user_mode:
          description: Permits RDSServer operating systems to be used for non-RDS
            Machines.
          example: true
          type: boolean
        forced_logoff_message:
          description: The warning to be displayed before logging off the user.
          example: The system will shut down shortly. Please save your work.
          type: string
        forced_logoff_timeout_minutes:
          description: The time to wait after the warning is displayed and before
            logging off the user.
          example: 3
          format: int32
          type: integer
        hide_domain_list_in_client:
          description: Whether to hide the list of domains in the Horizon client user
            interface. If value set to true, the user will need to provide a UPN (e.g.
            user@domain) or a logon name in the format domain\\user when logging in.
          example: true
          type: boolean
        hide_server_information_in_client:
          description: Indicates whether to hide the server URL in the Horizon client
            user interface.
          example: false
          type: boolean
        machine_sso_timeout_minutes:
          description: Single sign on will be disabled after the specified time has
            elapsed since the user connected to Connection Server.
          example: 300
          format: int32
          type: integer
        machine_sso_timeout_policy:
          description: |-
            Specifies the policy for the maximum time after which single sign on will be disabled after a user connects to the Connection Server.
            * DISABLED_AFTER: Single sign on will be disabled after the specified number of minutes has elapsed since the user connected to Horizon Connection Server.
            * DISABLED: Single sign on is disabled.
            * ENABLED: Single sign on is enabled.
          enum:
          - DISABLED_AFTER
          - DISABLED
          - ENABLED
          example: DISABLED_AFTER
          type: string
        pre_login_message:
          description: Displays a disclaimer or another message to Horizon Client
            users when they log in. No message will be displayed if this is not set.
          example: 'Disclaimer : This server is being monitored for suspicious activity.'
          type: string
        restricted_client_data:
          description: List of restricted Horizon Clients.
          example:
          - type: WINDOWS
            version: "7.5"
          - type: LINUX
            version: "6.5"
          items:
            $ref: '#/components/schemas/RestrictedClientData'
          type: array
        restricted_client_message:
          description: The message to be displayed to Horizon clients which are blocked
            by the Connection Server.
          example: The system does not support this version of the Horizon client.
          type: string
        store_cal_on_client:
          description: Determines whether or not to store the RDS Per Device Client
            Access License on Horizon client devices. This value can be true only
            if Store Client Access License on Connection Server is true.
          example: false
          type: boolean
        store_cal_on_connection_server:
          description: Determines whether or not to store the RDS Per Device Client
            Access License on Broker.
          example: false
          type: boolean
      required:
      - application_sso_timeout_policy
      - client_idle_session_timeout_policy
      - client_max_session_timeout_policy
      - client_session_timeout_minutes
      - machine_sso_timeout_policy
      - store_cal_on_client
      - store_cal_on_connection_server
      title: GeneralSettingsUpdateSpec
      type: object
    HostOrClusterContainer:
      description: Details of the host or cluster container node.
      example:
        path: /Datacenter/host/ServicesFolder
        children:
        - null
        - null
        name: ServicesFolder
        type: FOLDER
      properties:
        children:
          description: Contents of the container. These may be hosts or clusters or
            further nested containers.
          items:
            $ref: '#/components/schemas/HostOrClusterInfo'
          type: array
        name:
          description: Host or cluster container node display name.
          example: ServicesFolder
          type: string
        path:
          description: Host or cluster container node path.
          example: /Datacenter/host/ServicesFolder
          type: string
        type:
          description: |-
            Type of container.
            * FOLDER: A folder container.
            * OTHER: Other container type.
          enum:
          - FOLDER
          - OTHER
          example: FOLDER
          type: string
      required:
      - name
      - path
      - type
      title: HostOrClusterContainer
      type: object
    HostOrClusterDetails:
      description: Details of the host or cluster.
      example:
        cluster: true
        path: /Datacenter/host/ServicesFolder/Cluster
        vcenter_id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
        incompatible_reasons:
        - UNSUPPORTED_ESX_VERSION
        - UNSUPPORTED_ESX_VERSION
        vgpu_types:
        - vgpu_types
        - vgpu_types
        name: Cluster
        datacenter_id: datacenter-1
      properties:
        cluster:
          description: Whether or not this is a cluster or a host.
          example: true
          type: boolean
        datacenter_id:
          description: Datacenter id for this host or cluster.
          example: datacenter-1
          type: string
        incompatible_reasons:
          description: Reasons that may preclude this Host Or Cluster from being used
            in desktop pool creation.
          items:
            enum:
            - UNSUPPORTED_ESX_VERSION
            - ALL_HOSTS_DISCONNECTED
            - NO_HOSTS_IN_CLUSTER
            - INCOMPATIBLE_VSAN
            - INCOMPATIBLE_STORAGE_ACCELERATOR
            - INCOMPATIBLE_NATIVE_SNAPSHOTS
            - INCOMPATIBLE_INSTANT_CLONE_DESKTOP_POOLS
            - INCOMPATIBLE_STANDALONE_HOST_FOR_INSTANT_CLONE
            - INCOMPATIBLE_VGPU_TYPE
            type: string
          type: array
        name:
          description: Host or cluster display name.
          example: Cluster
          type: string
        path:
          description: Host or cluster path.
          example: /Datacenter/host/ServicesFolder/Cluster
          type: string
        vcenter_id:
          description: Virtual Center id for this host or cluster.
          example: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          type: string
        vgpu_types:
          description: Types of NVIDIA GRID vGPUs supported by this host or at least
            one host on this cluster. If unset, this host or cluster does not support
            NVIDIA GRID vGPUs and cannot be used for desktop creation with NVIDIA
            GRID vGPU support enabled.
          items:
            type: string
          type: array
      required:
      - cluster
      - datacenter_id
      - incompatible_reasons
      - name
      - path
      - vcenter_id
      title: HostOrClusterDetails
      type: object
    HostOrClusterInfo:
      description: Information related to host or cluster.
      example:
        container:
          path: /Datacenter/host/ServicesFolder
          children:
          - null
          - null
          name: ServicesFolder
          type: FOLDER
        details:
          cluster: true
          path: /Datacenter/host/ServicesFolder/Cluster
          vcenter_id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          incompatible_reasons:
          - UNSUPPORTED_ESX_VERSION
          - UNSUPPORTED_ESX_VERSION
          vgpu_types:
          - vgpu_types
          - vgpu_types
          name: Cluster
          datacenter_id: datacenter-1
        id: domain-s425
      properties:
        container:
          $ref: '#/components/schemas/HostOrClusterContainer'
        details:
          $ref: '#/components/schemas/HostOrClusterDetails'
        id:
          description: Unique ID representing a host or cluster.
          example: domain-s425
          type: string
      required:
      - id
      title: HostOrClusterInfo
      type: object
    HostOverrideData:
      description: Details of the Hypervisor hosts involved in Content Based Read
        Caching (CBRC)
      example:
        path: /path/host
        cache_size_mb: 2048
      properties:
        cache_size_mb:
          description: Size of the cache in megabytes. This property has a minimum
            value of 100. This property has a maximum value of 2048.
          example: 2048
          format: int32
          type: integer
        path:
          description: The path of the host that supports View Storage Accelerator.
          example: /path/host
          type: string
      title: HostOverrideData
      type: object
    ImageManagementAssetCreateSpec:
      description: Information related to image management asset.
      example:
        im_stream_id: abc16e8f-9ba0-4789-a5dd-6880f32c52df
        base_vm_id: vm-2
        vm_template_id: vm-1
        additional_details:
          key: additional_details
        vcenter_id: f148f3e8-db0e-4abb-9c33-7e5205ccd360
        base_snapshot_id: snapshot-1
        im_version_id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
        clone_type: INSTANT_CLONE
        image_type: RDSH_APPS
        status: AVAILABLE
      properties:
        additional_details:
          additionalProperties:
            type: string
          description: Additional details about image management asset.
          type: object
        base_snapshot_id:
          description: Virtual machine snapshot. Must be set if vm_template_id is
            unset.
          example: snapshot-1
          type: string
        base_vm_id:
          description: Virtual machine ID. Must be set if vm_template_id is unset.
          example: vm-2
          type: string
        clone_type:
          description: |-
            Image management asset clone type.
            * FULL_CLONE: Image management asset to be used in full clone automated desktop pool.
            * INSTANT_CLONE: Image management asset to be used in instant clone desktop pool/farm.
          enum:
          - FULL_CLONE
          - INSTANT_CLONE
          example: INSTANT_CLONE
          type: string
        im_stream_id:
          description: Image management stream to which this asset belongs to.
          example: abc16e8f-9ba0-4789-a5dd-6880f32c52df
          type: string
        im_version_id:
          description: Image management version to which this asset belongs to.
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
          type: string
        image_type:
          description: |-
            Image management asset image type.
            * RDSH_APPS: Image management asset to be used for farm creation which is be used in application.
            * RDSH_DESKTOP: Image management asset is for farm creation to be created.
            * VDI_DESKTOP: Image management asset is available for desktops/farms to be created.
          enum:
          - RDSH_APPS
          - RDSH_DESKTOP
          - VDI_DESKTOP
          example: RDSH_APPS
          type: string
        status:
          description: |-
            Image management asset status.
            * AVAILABLE: Image management asset is available for desktop pools/farms to be created.
            * DEPLOYING_VM: Image management asset is deploying VM on the virtual center.
            * DEPLOYMENT_DONE: Image management asset VM deployed on the virtual center.
            * DELETED: Image management asset has been deleted.
            * DISABLED: Image management asset has been disabled and no further pool/farm operation can be done using the same.
            * FAILED: Image management asset creation has failed.
            * REPLICATING: Copying the specialized images across all virtual centers.
            * RETRY_PENDING: When image management asset creation has failed, retry action is pending for asset to be created.
            * SPECIALIZING_VM: Image management asset is being published and specialized internally like installing agents etc.
          enum:
          - AVAILABLE
          - DEPLOYING_VM
          - DEPLOYMENT_DONE
          - DELETED
          - DISABLED
          - FAILED
          - REPLICATING
          - RETRY_PENDING
          - SPECIALIZING_VM
          example: AVAILABLE
          type: string
        vcenter_id:
          description: Virtual Center where this asset is created.
          example: f148f3e8-db0e-4abb-9c33-7e5205ccd360
          type: string
        vm_template_id:
          description: Virtual machine template ID.
          example: vm-1
          type: string
      required:
      - clone_type
      - im_stream_id
      - im_version_id
      - image_type
      - status
      - vcenter_id
      title: ImageManagementAssetCreateSpec
      type: object
    ImageManagementAssetInfo:
      description: Information related to image management asset.
      example:
        im_stream_id: abc16e8f-9ba0-4789-a5dd-6880f32c52df
        base_vm_id: vm-2
        vm_template_id: vm-1
        additional_details:
          key: additional_details
        vcenter_id: f148f3e8-db0e-4abb-9c33-7e5205ccd360
        base_snapshot_id: snapshot-1
        im_version_id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
        id: c9896e51-48a2-4d82-ae9e-a0246981b47d
        clone_type: INSTANT_CLONE
        datacenter_id: datacenter-1
        image_type: RDSH_APPs
        status: AVAILABLE
      properties:
        additional_details:
          additionalProperties:
            type: string
          description: Additional details about image management asset.
          type: object
        base_snapshot_id:
          description: Virtual machine snapshot. Must be set if vm_template_id is
            unset.
          example: snapshot-1
          type: string
        base_vm_id:
          description: Virtual machine ID. Must be set if vm_template_id is unset.
          example: vm-2
          type: string
        clone_type:
          description: |-
            Image management asset clone type.
            * FULL_CLONE: Image management asset to be used in full clone automated desktop pool.
            * INSTANT_CLONE: Image management asset to be used in instant clone desktop pool/farm.
          enum:
          - FULL_CLONE
          - INSTANT_CLONE
          example: INSTANT_CLONE
          type: string
        datacenter_id:
          description: Datacenter where this asset is created.
          example: datacenter-1
          type: string
        id:
          description: Unique ID representing image management asset.
          example: c9896e51-48a2-4d82-ae9e-a0246981b47d
          type: string
        im_stream_id:
          description: Image management stream to which this asset belongs to.
          example: abc16e8f-9ba0-4789-a5dd-6880f32c52df
          type: string
        im_version_id:
          description: Image management version to which this asset belongs to.
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
          type: string
        image_type:
          description: |-
            Image management asset image type.
            * RDSH_APPS: Image management asset to be used for farm creation which is be used in application.
            * RDSH_DESKTOP: Image management asset is for farm creation to be created.
            * VDI_DESKTOP: Image management asset is available for desktops/farms to be created.
          enum:
          - RDSH_APPS
          - RDSH_DESKTOP
          - VDI_DESKTOP
          example: RDSH_APPs
          type: string
        status:
          description: |-
            Image management asset status.
            * AVAILABLE: Image management asset is available for desktop pools/farms to be created.
            * DEPLOYING_VM: Image management asset is deploying VM on the virtual center.
            * DEPLOYMENT_DONE: Image management asset VM deployed on the virtual center.
            * DELETED: Image management asset has been deleted.
            * DISABLED: Image management asset has been disabled and no further pool/farm operation can be done using the same.
            * FAILED: Image management asset creation has failed.
            * REPLICATING: Copying the specialized images across all virtual centers.
            * RETRY_PENDING: When image management asset creation has failed, retry action is pending for asset to be created.
            * SPECIALIZING_VM: Image management asset is being published and specialized internally like installing agents etc.
          enum:
          - AVAILABLE
          - DEPLOYING_VM
          - DEPLOYMENT_DONE
          - DELETED
          - DISABLED
          - FAILED
          - REPLICATING
          - RETRY_PENDING
          - SPECIALIZING_VM
          example: AVAILABLE
          type: string
        vcenter_id:
          description: Virtual Center where this asset is created.
          example: f148f3e8-db0e-4abb-9c33-7e5205ccd360
          type: string
        vm_template_id:
          description: Virtual machine template ID.
          example: vm-1
          type: string
      required:
      - base_snapshot_id
      - base_vm_id
      - clone_type
      - datacenter_id
      - id
      - im_stream_id
      - im_version_id
      - image_type
      - status
      - vcenter_id
      - vm_template_id
      title: ImageManagementAssetInfo
      type: object
    ImageManagementAssetUpdateSpec:
      description: Information related to image management asset.
      example:
        additional_details:
          key: additional_details
        clone_type: INSTANT_CLONE
        image_type: RDSH_APPS
        status: AVAILABLE
      properties:
        additional_details:
          additionalProperties:
            type: string
          description: Additional details about image management asset.
          type: object
        clone_type:
          description: |-
            Image management asset clone type.
            * FULL_CLONE: Image management asset to be used in full clone automated desktop pool.
            * INSTANT_CLONE: Image management asset to be used in instant clone desktop pool/farm.
          enum:
          - FULL_CLONE
          - INSTANT_CLONE
          example: INSTANT_CLONE
          type: string
        image_type:
          description: |-
            Image management asset image type.
            * RDSH_APPS: Image management asset to be used for farm creation which is be used in application.
            * RDSH_DESKTOP: Image management asset is for farm creation to be created.
            * VDI_DESKTOP: Image management asset is available for desktops/farms to be created.
          enum:
          - RDSH_APPS
          - RDSH_DESKTOP
          - VDI_DESKTOP
          example: RDSH_APPS
          type: string
        status:
          description: |-
            Image management asset status.
            * AVAILABLE: Image management asset is available for desktop pools/farms to be created.
            * DEPLOYING_VM: Image management asset is deploying VM on the virtual center.
            * DEPLOYMENT_DONE: Image management asset VM deployed on the virtual center.
            * DELETED: Image management asset has been deleted.
            * DISABLED: Image management asset has been disabled and no further pool/farm operation can be done using the same.
            * FAILED: Image management asset creation has failed.
            * REPLICATING: Copying the specialized images across all virtual centers.
            * RETRY_PENDING: When image management asset creation has failed, retry action is pending for asset to be created.
            * SPECIALIZING_VM: Image management asset is being published and specialized internally like installing agents etc.
          enum:
          - AVAILABLE
          - DEPLOYING_VM
          - DEPLOYMENT_DONE
          - DELETED
          - DISABLED
          - FAILED
          - REPLICATING
          - RETRY_PENDING
          - SPECIALIZING_VM
          example: AVAILABLE
          type: string
      required:
      - clone_type
      - image_type
      - status
      title: ImageManagementAssetUpdateSpec
      type: object
    ImageManagementStreamCreateSpec:
      description: Information related to image management stream.
      example:
        additional_details:
          key: additional_details
        name: Win10
        description: Windows 10 Stream
        operating_system: WINDOWS_10
        publisher: VMware
        source: MARKET_PLACE
        status: AVAILABLE
      properties:
        additional_details:
          additionalProperties:
            type: string
          description: Additional details about image management stream.
          type: object
        description:
          description: Image management stream description.
          example: Windows 10 Stream
          type: string
        name:
          description: Image management stream name.
          example: Win10
          type: string
        operating_system:
          description: |-
            Operating system.
            * UNKNOWN: Unknown
            * WINDOWS_XP: Windows XP
            * WINDOWS_VISTA: Windows Vista
            * WINDOWS_7: Windows 7
            * WINDOWS_8: Windows 8
            * WINDOWS_10: Windows 10
            * WINDOWS_SERVER_2003: Windows Server 2003
            * WINDOWS_SERVER_2008: Windows Server 2008
            * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2
            * WINDOWS_SERVER_2012: Windows Server 2012
            * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2
            * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above
            * LINUX_OTHER: Linux (other)
            * LINUX_SERVER_OTHER: Linux server (other)
            * LINUX_UBUNTU: Linux (Ubuntu)
            * LINUX_RHEL: Linux (Red Hat Enterprise)
            * LINUX_SUSE: Linux (Suse)
            * LINUX_CENTOS: Linux (CentOS)
          enum:
          - UNKNOWN
          - WINDOWS_XP
          - WINDOWS_VISTA
          - WINDOWS_7
          - WINDOWS_8
          - WINDOWS_10
          - WINDOWS_SERVER_2003
          - WINDOWS_SERVER_2008
          - WINDOWS_SERVER_2008_R2
          - WINDOWS_SERVER_2012
          - WINDOWS_SERVER_2012_R2
          - WINDOWS_SERVER_2016_OR_ABOVE
          - LINUX_OTHER
          - LINUX_SERVER_OTHER
          - LINUX_UBUNTU
          - LINUX_RHEL
          - LINUX_SUSE
          - LINUX_CENTOS
          example: WINDOWS_10
          type: string
        publisher:
          description: Image management stream publisher
          example: VMware
          type: string
        source:
          description: |-
            Image management stream source.
            * MARKET_PLACE: Image management stream is from market place.
            * UPLOADED: Image management stream is uploaded.
            * COPIED_FROM_STREAM: Image management stream is copied from another stream.
            * COPIED_FROM_VERSION: Image management stream is copied from a version.
          enum:
          - MARKET_PLACE
          - UPLOADED
          - COPIED_FROM_STREAM
          - COPIED_FROM_VERSION
          example: MARKET_PLACE
          type: string
        status:
          description: |-
            Image management stream status.
            * AVAILABLE: Image management stream is available for desktop pools/farms to be created.
            * DELETED: Image management stream is deleted.
            * DISABLED: Image management stream is disabled and no further desktop pools/farms can be created using the same.
            * FAILED: Image management stream creation has failed.
            * IN_PROGRESS: Image management stream creation is in progress.
            * PARTIALLY_AVAILABLE: Image management version for this stream could not be created in one or more environments.
            * PENDING: Image management stream is in pending state.
          enum:
          - AVAILABLE
          - DELETED
          - DISABLED
          - FAILED
          - IN_PROGRESS
          - PARTIALLY_AVAILABLE
          - PENDING
          example: AVAILABLE
          type: string
      required:
      - name
      - operating_system
      - source
      - status
      title: ImageManagementStreamCreateSpec
      type: object
    ImageManagementStreamInfo:
      description: Information related to image management stream.
      example:
        usable: true
        additional_details: true
        name: Win10
        description: Windows 10 Stream
        operating_system: WINDOWS_10
        publisher: VMware
        id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
        source: MARKET_PLACE
        status: AVAILABLE
      properties:
        additional_details:
          additionalProperties:
            type: string
          description: Additional details about image management stream.
          example: true
          type: object
        description:
          description: Image management stream description.
          example: Windows 10 Stream
          type: string
        id:
          description: Unique ID representing image management stream.
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
          type: string
        name:
          description: Image management stream name.
          example: Win10
          type: string
        operating_system:
          description: |-
            Operating system.
            * UNKNOWN: Unknown
            * WINDOWS_XP: Windows XP
            * WINDOWS_VISTA: Windows Vista
            * WINDOWS_7: Windows 7
            * WINDOWS_8: Windows 8
            * WINDOWS_10: Windows 10
            * WINDOWS_SERVER_2003: Windows Server 2003
            * WINDOWS_SERVER_2008: Windows Server 2008
            * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2
            * WINDOWS_SERVER_2012: Windows Server 2012
            * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2
            * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above
            * LINUX_OTHER: Linux (other)
            * LINUX_SERVER_OTHER: Linux server (other)
            * LINUX_UBUNTU: Linux (Ubuntu)
            * LINUX_RHEL: Linux (Red Hat Enterprise)
            * LINUX_SUSE: Linux (Suse)
            * LINUX_CENTOS: Linux (CentOS)
          enum:
          - UNKNOWN
          - WINDOWS_XP
          - WINDOWS_VISTA
          - WINDOWS_7
          - WINDOWS_8
          - WINDOWS_10
          - WINDOWS_SERVER_2003
          - WINDOWS_SERVER_2008
          - WINDOWS_SERVER_2008_R2
          - WINDOWS_SERVER_2012
          - WINDOWS_SERVER_2012_R2
          - WINDOWS_SERVER_2016_OR_ABOVE
          - LINUX_OTHER
          - LINUX_SERVER_OTHER
          - LINUX_UBUNTU
          - LINUX_RHEL
          - LINUX_SUSE
          - LINUX_CENTOS
          example: WINDOWS_10
          type: string
        publisher:
          description: Image management stream publisher
          example: VMware
          type: string
        source:
          description: |-
            Image management stream source.
            * MARKET_PLACE: Image management stream is from market place.
            * UPLOADED: Image management stream is uploaded.
            * COPIED_FROM_STREAM: Image management stream is copied from another stream.
            * COPIED_FROM_VERSION: Image management stream is copied from a version.
          enum:
          - MARKET_PLACE
          - UPLOADED
          - COPIED_FROM_STREAM
          - COPIED_FROM_VERSION
          example: MARKET_PLACE
          type: string
        status:
          description: |-
            Image management stream status.
            * AVAILABLE: Image management stream is available for desktop pools/farms to be created.
            * DELETED: Image management stream is deleted.
            * DISABLED: Image management stream is disabled and no further desktop pools/farms can be created using the same.
            * FAILED: Image management stream creation has failed.
            * IN_PROGRESS: Image management stream creation is in progress.
            * PARTIALLY_AVAILABLE: Image management version for this stream could not be created in one or more environments.
            * PENDING: Image management stream is in pending state.
          enum:
          - AVAILABLE
          - DELETED
          - DISABLED
          - FAILED
          - IN_PROGRESS
          - PARTIALLY_AVAILABLE
          - PENDING
          example: AVAILABLE
          type: string
        usable:
          description: 'Specifies whether the image management stream can be used
            in desktop pool or farm. This will be set to true when: <ul><li>Image
            management stream is in AVAILABLE or PARTIALLY_AVAILABLE state. </li><li>There
            is at least one image management version in AVAILABLE or PARTIALLY_AVAILABLE
            state for this stream. </li><li>There is at least one image management
            tag associated with the image management version.</li> </ul>For a specific
            virtual center, image management tag information will be retrieved.'
          example: true
          type: boolean
      required:
      - id
      - name
      - operating_system
      - source
      - status
      title: ImageManagementStreamInfo
      type: object
    ImageManagementStreamUpdateSpec:
      description: Information related to image management stream.
      example:
        additional_details:
          key: additional_details
        name: Win10
        description: Windows 10 Stream
        operating_system: WINDOWS_10
        publisher: VMware
        source: MARKET_PLACE
        status: AVAILABLE
      properties:
        additional_details:
          additionalProperties:
            type: string
          description: Additional details about image management stream.
          type: object
        description:
          description: Image management stream description.
          example: Windows 10 Stream
          type: string
        name:
          description: Image management stream name.
          example: Win10
          type: string
        operating_system:
          description: |-
            Operating system.
            * UNKNOWN: Unknown
            * WINDOWS_XP: Windows XP
            * WINDOWS_VISTA: Windows Vista
            * WINDOWS_7: Windows 7
            * WINDOWS_8: Windows 8
            * WINDOWS_10: Windows 10
            * WINDOWS_SERVER_2003: Windows Server 2003
            * WINDOWS_SERVER_2008: Windows Server 2008
            * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2
            * WINDOWS_SERVER_2012: Windows Server 2012
            * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2
            * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above
            * LINUX_OTHER: Linux (other)
            * LINUX_SERVER_OTHER: Linux server (other)
            * LINUX_UBUNTU: Linux (Ubuntu)
            * LINUX_RHEL: Linux (Red Hat Enterprise)
            * LINUX_SUSE: Linux (Suse)
            * LINUX_CENTOS: Linux (CentOS)
          enum:
          - UNKNOWN
          - WINDOWS_XP
          - WINDOWS_VISTA
          - WINDOWS_7
          - WINDOWS_8
          - WINDOWS_10
          - WINDOWS_SERVER_2003
          - WINDOWS_SERVER_2008
          - WINDOWS_SERVER_2008_R2
          - WINDOWS_SERVER_2012
          - WINDOWS_SERVER_2012_R2
          - WINDOWS_SERVER_2016_OR_ABOVE
          - LINUX_OTHER
          - LINUX_SERVER_OTHER
          - LINUX_UBUNTU
          - LINUX_RHEL
          - LINUX_SUSE
          - LINUX_CENTOS
          example: WINDOWS_10
          type: string
        publisher:
          description: Image management stream publisher
          example: VMware
          type: string
        source:
          description: |-
            Image management stream source.
            * MARKET_PLACE: Image management stream is from market place.
            * UPLOADED: Image management stream is uploaded.
            * COPIED_FROM_STREAM: Image management stream is copied from another stream.
            * COPIED_FROM_VERSION: Image management stream is copied from a version.
          enum:
          - MARKET_PLACE
          - UPLOADED
          - COPIED_FROM_STREAM
          - COPIED_FROM_VERSION
          example: MARKET_PLACE
          type: string
        status:
          description: |-
            Image management stream status.
            * AVAILABLE: Image management stream is available for desktop pools/farms to be created.
            * DELETED: Image management stream is deleted.
            * DISABLED: Image management stream is disabled and no further desktop pools/farms can be created using the same.
            * FAILED: Image management stream creation has failed.
            * IN_PROGRESS: Image management stream creation is in progress.
            * PARTIALLY_AVAILABLE: Image management version for this stream could not be created in one or more environments.
            * PENDING: Image management stream is in pending state.
          enum:
          - AVAILABLE
          - DELETED
          - DISABLED
          - FAILED
          - IN_PROGRESS
          - PARTIALLY_AVAILABLE
          - PENDING
          example: AVAILABLE
          type: string
      required:
      - name
      - operating_system
      - source
      - status
      title: ImageManagementStreamUpdateSpec
      type: object
    ImageManagementTagCreateSpec:
      description: Information related to image management tag.
      example:
        im_stream_id: abc16e8f-9ba0-4789-a5dd-6880f32c52df
        additional_details:
          key: additional_details
        im_version_id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
        name: PROD
      properties:
        additional_details:
          additionalProperties:
            type: string
          description: Additional details about image management tag.
          type: object
        im_stream_id:
          description: Image management stream ID to which this tag belongs.
          example: abc16e8f-9ba0-4789-a5dd-6880f32c52df
          type: string
        im_version_id:
          description: Image management version ID to which this tag belongs.
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
          type: string
        name:
          description: Image management tag name. It is unique among all the tags
            of a stream.
          example: PROD
          type: string
      required:
      - im_stream_id
      - im_version_id
      - name
      title: ImageManagementTagCreateSpec
      type: object
    ImageManagementTagInfo:
      description: Information related to image management tag.
      example:
        im_stream_id: abc16e8f-9ba0-4789-a5dd-6880f32c52df
        additional_details:
          key: additional_details
        im_version_id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
        name: STAGE
        description: description
        id: c9896e51-48a2-4d82-ae9e-a0246981b47d
      properties:
        additional_details:
          additionalProperties:
            type: string
          description: Additional details about image management tag.
          type: object
        description:
          description: Image management tag description.
          type: string
        id:
          description: Unique ID representing image management tag.
          example: c9896e51-48a2-4d82-ae9e-a0246981b47d
          type: string
        im_stream_id:
          description: Image management stream ID to which this tag belongs.
          example: abc16e8f-9ba0-4789-a5dd-6880f32c52df
          type: string
        im_version_id:
          description: Image management version ID to which this tag belongs.
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
          type: string
        name:
          description: Image management tag name.
          example: STAGE
          type: string
      required:
      - id
      - im_stream_id
      - im_version_id
      - name
      title: ImageManagementTagInfo
      type: object
    ImageManagementTagUpdateSpec:
      description: Information related to image management tag.
      example:
        additional_details:
          key: additional_details
        im_version_id: 7e85b3a5-e7d0-4ad6-a1e3-37168dd1ed62
        name: PROD
      properties:
        additional_details:
          additionalProperties:
            type: string
          description: Additional details about image management tag.
          type: object
        im_version_id:
          description: Image management version ID to which this tag belongs.
          example: 7e85b3a5-e7d0-4ad6-a1e3-37168dd1ed62
          type: string
        name:
          description: Image management tag name.
          example: PROD
          type: string
      required:
      - im_version_id
      - name
      title: ImageManagementTagUpdateSpec
      type: object
    ImageManagementVersionCreateSpec:
      description: Information related to image management version.
      example:
        im_stream_id: abc16e8f-9ba0-4789-a5dd-6880f32c52df
        additional_details:
          key: additional_details
        name: v1
        description: description
        status: AVAILABLE
      properties:
        additional_details:
          additionalProperties:
            type: string
          description: Additional details about image management version.
          type: object
        description:
          description: Image management version description.
          type: string
        im_stream_id:
          description: Image management stream ID
          example: abc16e8f-9ba0-4789-a5dd-6880f32c52df
          type: string
        name:
          description: Image management version name.
          example: v1
          type: string
        status:
          description: |-
            Image management version status.
            * AVAILABLE: Image management version is available for desktop pools/farms to be created.
            * DEPLOYING_VM: Image management version is deploying VM on the selected pod.
            * DEPLOYMENT_DONE: Image management version status when VM deployment is done for the selected pod.
            * DELETED: Image management version has been deleted.
            * DISABLED: Image management version has been disabled and no further pool operation can be done using the same.
            * FAILED: Image management version creation has failed.
            * PARTIALLY_AVAILABLE: Some of the image management asset creation in some of the virtual centers have failed.
            * PUBLISHING: Image management version is being published and specialized internally like installing agents etc.
            * REPLICATING: Copying the specialized images across all virtual centers.
          enum:
          - AVAILABLE
          - DEPLOYING_VM
          - DEPLOYMENT_DONE
          - DELETED
          - DISABLED
          - FAILED
          - PARTIALLY_AVAILABLE
          - PUBLISHING
          - REPLICATING
          example: AVAILABLE
          type: string
      required:
      - im_stream_id
      - name
      - status
      title: ImageManagementVersionCreateSpec
      type: object
    ImageManagementVersionInfo:
      description: Information related to image management version.
      example:
        im_stream_id: abc16e8f-9ba0-4789-a5dd-6880f32c52df
        additional_details:
          key: additional_details
        name: v1
        description: description
        id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
        status: AVAILABLE
      properties:
        additional_details:
          additionalProperties:
            type: string
          description: Additional details about image management version.
          type: object
        description:
          description: Image management version description.
          type: string
        id:
          description: Unique ID representing image management version.
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
          type: string
        im_stream_id:
          description: Image management stream ID
          example: abc16e8f-9ba0-4789-a5dd-6880f32c52df
          type: string
        name:
          description: Image management version name.
          example: v1
          type: string
        status:
          description: |-
            Image management version status.
            * AVAILABLE: Image management version is available for desktop pools/farms to be created.
            * DEPLOYING_VM: Image management version is deploying VM on the selected pod.
            * DEPLOYMENT_DONE: Image management version status when VM deployment is done for the selected pod.
            * DELETED: Image management version has been deleted.
            * DISABLED: Image management version has been disabled and no further pool operation can be done using the same.
            * FAILED: Image management version creation has failed.
            * PARTIALLY_AVAILABLE: Some of the image management asset creation in some of the virtual centers have failed.
            * PUBLISHING: Image management version is being published and specialized internally like installing agents etc.
            * REPLICATING: Copying the specialized images across all virtual centers.
          enum:
          - AVAILABLE
          - DEPLOYING_VM
          - DEPLOYMENT_DONE
          - DELETED
          - DISABLED
          - FAILED
          - PARTIALLY_AVAILABLE
          - PUBLISHING
          - REPLICATING
          example: AVAILABLE
          type: string
      required:
      - id
      - name
      - status
      title: ImageManagementVersionInfo
      type: object
    ImageManagementVersionUpdateSpec:
      description: Information related to image management version.
      example:
        additional_details:
          key: additional_details
        name: v1
        description: description
        status: AVAILABLE
      properties:
        additional_details:
          additionalProperties:
            type: string
          description: Additional details about image management version.
          type: object
        description:
          description: Image management version description.
          type: string
        name:
          description: Image management version name.
          example: v1
          type: string
        status:
          description: |-
            Image management version status.
            * AVAILABLE: Image management version is available for desktop pools/farms to be created.
            * DEPLOYING_VM: Image management version is deploying VM on the selected pod.
            * DEPLOYMENT_DONE: Image management version status when VM deployment is done for the selected pod.
            * DELETED: Image management version has been deleted.
            * DISABLED: Image management version has been disabled and no further pool operation can be done using the same.
            * FAILED: Image management version creation has failed.
            * PARTIALLY_AVAILABLE: Some of the image management asset creation in some of the virtual centers have failed.
            * PUBLISHING: Image management version is being published and specialized internally like installing agents etc.
            * REPLICATING: Copying the specialized images across all virtual centers.
          enum:
          - AVAILABLE
          - DEPLOYING_VM
          - DEPLOYMENT_DONE
          - DELETED
          - DISABLED
          - FAILED
          - PARTIALLY_AVAILABLE
          - PUBLISHING
          - REPLICATING
          example: AVAILABLE
          type: string
      required:
      - name
      - status
      title: ImageManagementVersionUpdateSpec
      type: object
    InstalledApplicationInfo:
      description: Information about the application installed on RDS server/machine
        of a farm/desktop pool.
      example:
        other_file_types:
        - name: https
          description: Firefox URL
          type: URL
        - name: https
          description: Firefox URL
          type: URL
        file_types:
        - description: Firefox Document
          type: .html
        - description: Firefox Document
          type: .html
        name: Firefox
        executable_path: C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Firefox.lnk
        publisher: Mozilla Corporation
        version: 72.0.2
      properties:
        executable_path:
          description: Path to application executable.
          example: C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Firefox.lnk
          type: string
        file_types:
          description: Set of file types reported by the application as supported.
            If unset, this application does not present any file type support.
          items:
            $ref: '#/components/schemas/ApplicationFileTypeData'
          type: array
        name:
          description: Application name information, as sent by RDSServer/machine
            during application discovery.
          example: Firefox
          type: string
        other_file_types:
          description: This represents the different file types reported by Application
            that can be passed from horizon agent to horizon client via connection
            server. If unset, this application does not present any other file type
            support.
          items:
            $ref: '#/components/schemas/ApplicationOtherFileTypeData'
          type: array
        publisher:
          description: Application publisher
          example: Mozilla Corporation
          type: string
        version:
          description: Application version.
          example: 72.0.2
          type: string
      title: InstalledApplicationInfo
      type: object
    InstantCloneDomainAccountCreateSpec:
      description: Specification of the instant clone domain account.
      example:
        password: <password>
        ad_domain_id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
        username: testuser
      properties:
        ad_domain_id:
          description: ID of the AD Domain that this account user belongs to.
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
          type: string
        password:
          description: Password of the account.
          example: <password>
          items:
            type: string
          type: array
        username:
          description: User name of the account.
          example: testuser
          type: string
      required:
      - ad_domain_id
      - password
      - username
      title: InstantCloneDomainAccountCreateSpec
      type: object
    InstantCloneDomainAccountInfo:
      description: Information related to instant clone domain accounts of the environment.
      example:
        ad_domain_id: 6f8543a5-a7a0-4ab8-b3e3-37164dd1ed53
        id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
        username: testuser
      properties:
        ad_domain_id:
          description: ID of the AD Domain that this account user belongs to.
          example: 6f8543a5-a7a0-4ab8-b3e3-37164dd1ed53
          type: string
        id:
          description: Unique ID representing instant clone domain account.
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
          type: string
        username:
          description: User name of the account.
          example: testuser
          type: string
      required:
      - ad_domain_id
      - id
      - username
      title: InstantCloneDomainAccountInfo
      type: object
    InstantCloneDomainAccountUpdateSpec:
      description: Update specification for the instant clone domain account.
      example:
        password: <password>
      properties:
        password:
          description: Password of the account.
          example: <password>
          items:
            type: string
          type: array
      required:
      - password
      title: InstantCloneDomainAccountUpdateSpec
      type: object
    LoadBalancerMetricSettings:
      description: Load Balancer Metric settings for Farm.
      example:
        disk_write_latency_threshold: 50
        disk_queue_length_threshold: 50
        cpu_threshold: 50
        include_session_count: true
        disk_read_latency_threshold: 50
        memory_threshold: 50
      properties:
        cpu_threshold:
          description: Represents threshold of CPU usage, in percentage. If the value
            is 0,then this metric will not be considered for load balancing. Default
            value is 0.
          example: 50
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: int32
          maximum: 1E+2
          minimum: 0
          type: integer
        disk_queue_length_threshold:
          description: Represents the threshold of average number of both read and
            write requests that werequeued for the selected disk during the sample
            interval. If the value is 0,then this metric will not be considered for
            load balancing. Default value is 0.
          example: 50
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: int32
          minimum: 0
          type: integer
        disk_read_latency_threshold:
          description: Represents the threshold of average time, in milliseconds,
            of a read of data from the disk. If the value is 0,then this metric will
            not be considered for load balancing. Default value is 0.
          example: 50
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: int32
          minimum: 0
          type: integer
        disk_write_latency_threshold:
          description: Represents the threshold of average time, in milliseconds,
            of a write of data to the disk.If the value is 0, then this metric will
            not be considered for load balancing. Default value is 0.
          example: 50
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: int32
          minimum: 0
          type: integer
        include_session_count:
          description: Whether to include session count for load balancing. Default
            value is true.
          example: true
          type: boolean
        memory_threshold:
          description: Represents threshold of memory usage, in percentage.If the
            value is 0, then this metric will not be considered for load balancing.
          example: 50
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: int32
          maximum: 1E+2
          minimum: 0
          type: integer
      title: LoadBalancerMetricSettings
      type: object
    MachineDeleteData:
      description: Specification applicable when deleting machines.
      example:
        archive_datastore_id: 855ea6c5-720a-41e1-96f4-958c90e6e424
        force_logoff_session: true
        archive_datastore_path_id: a219420d-4799-4517-8f78-39c74c7c4efc
        allow_delete_from_multi_desktop_pools: true
        delete_from_disk: true
        archive_persistent_disk: true
      properties:
        allow_delete_from_multi_desktop_pools:
          description: Determines whether the machines from different desktop pools
            can be deleted. This defaults to false in which case only machines belonging
            to single desktop pool can be deleted. If true, machines from different
            desktop pools can be deleted.
          example: true
          type: boolean
        archive_datastore_id:
          description: Determines the datastore where the persistent user disk will
            be saved for future use. Both this as well as the archiveDatastorePathId
            need to be set. If this is unset and archivePersistentDisk is specified,
            the persistent disk is archived in place.
          example: 855ea6c5-720a-41e1-96f4-958c90e6e424
          type: string
        archive_datastore_path_id:
          description: Determines the location in the datastore where the persistent
            user disk will be saved for future use. If this is set, then archiveDatastoreId
            also needs to be specified.If this is unset and archivePersistentDisk
            is specified, the persistent disk is archived in place.
          example: a219420d-4799-4517-8f78-39c74c7c4efc
          type: string
        archive_persistent_disk:
          description: 'Determines whether to detach the persistent user disk and
            save it for future use. This can only be specified for linked-clone desktops
            with redirectWindowsProfile enabled, in which case it defaults to true. '
          example: true
          type: boolean
        delete_from_disk:
          description: Determines whether the Machine VM should be deleted from vCenter
            Server. This is only applicable for managed machines. This must always
            be true for machines in linked and instant clone desktops. This defaults
            to true for linked and instant clone machines and false for all other
            types. If this is true, then machine being deleted must not have any active
            user session, otherwise delete operation would fail.
          example: true
          type: boolean
        force_logoff_session:
          description: 'Determines whether active session on the machine to be logged
            off before deletion. This is only applicable for managed machines. If
            true, active session on the machine will be logged off before Machine
            delete. Otherwise,it will result in an exception. '
          example: true
          type: boolean
      title: MachineDeleteData
      type: object
    MachineDeleteSpec:
      description: Information required to delete machines.
      example:
        machine_ids:
        - 0103796c-102b-4ed3-953f-3dfe3d23e0fe
        - 7cdd624f-37d1-46c1-ab96-695a5d13956f
        machine_delete_data:
          archive_datastore_id: 855ea6c5-720a-41e1-96f4-958c90e6e424
          force_logoff_session: true
          archive_datastore_path_id: a219420d-4799-4517-8f78-39c74c7c4efc
          allow_delete_from_multi_desktop_pools: true
          delete_from_disk: true
          archive_persistent_disk: true
      properties:
        machine_delete_data:
          $ref: '#/components/schemas/MachineDeleteData'
        machine_ids:
          description: Machine Ids representing the machines to be deleted.
          example:
          - 0103796c-102b-4ed3-953f-3dfe3d23e0fe
          - 7cdd624f-37d1-46c1-ab96-695a5d13956f
          items:
            type: string
          type: array
      required:
      - machine_ids
      title: MachineDeleteSpec
      type: object
    MachineInfo:
      description: 'Information related to a Machine.<br>List API returning this summary
        information can use search filter query to filter on specific fields supported
        by filters.<br> Supported Filters : ''And'', ''Or'', ''Equals'', ''StartsWith'',
        ''Contains'' and ''EndsWith''.<br>See the field description to know the filter
        types it supports.'
      example:
        remote_experience_agent_version: "7.12"
        agent_build_number: "22673015"
        attempted_theft_by_connection_server: connection-server2.example.com
        desktop_pool_id: 855ea6c5-720a-41e1-96f4-958c90e6e424
        user_ids:
        - S-1-1-1-3965912346-1012345398-3123456564-123
        - S-1-2-3-3123456786-1012345398-3123456784-124
        remote_experience_agent_build_number: "32573985"
        type: MANAGED_MACHINE
        dns_name: machine1.example.com
        agent_version: "7.12"
        configured_by_connection_server: connection-server1.example.com
        managed_machine_data:
          in_hold_customization: false
          create_time: 1575285661395
          virtual_center_id: 0103796c-102b-4ed3-953f-3dfe3d23e0fe
          virtual_machine_power_state: POWERED_ON
          storage_accelerator_state: CURRENT
          network_labels:
          - network_label_name: example-network
            nic_name: network1
          - network_label_name: example-network
            nic_name: network1
          virtual_disks:
          - path: /path/host
            capacity_mb: 102400
            datastore_path: datastore1
          - path: /path/host
            capacity_mb: 102400
            datastore_path: datastore1
          in_maintenance_mode: false
          clone_error_time: 1575285661395
          missing_in_vcenter: false
          path: /path/host
          memory_mb: 1024
          clone_error_message: Timeout expired trying to clone a virtual machine.
          host_name: WD332H5
        message_security_enhanced_mode_supported: true
        message_security_mode: MIXED
        operating_system_architecture: BIT_64
        name: machine1
        operating_system: WINDOWS_SERVER_2016
        pairing_state: IN_PAIRING
        id: 0103796c-102b-4ed3-953f-3dfe3d23e0fe
        state: PROVISIONING
      properties:
        agent_build_number:
          description: 'The Horizon Agent build number.<br>Supported Filters : ''Equals''.'
          example: "22673015"
          type: string
        agent_version:
          description: 'The Horizon Agent version.<br>Supported Filters : ''Equals''.'
          example: "7.12"
          type: string
        attempted_theft_by_connection_server:
          description: Names of the Horizon Connection Servers that attempted theft
            of pairing for this Agent.
          example: connection-server2.example.com
          items:
            type: string
          type: array
        configured_by_connection_server:
          description: Names of the Horizon Connection Servers the Horizon Agent is
            paired with.
          example: connection-server1.example.com
          items:
            type: string
          type: array
        desktop_pool_id:
          description: 'The id of the Desktop Pool that the machine belongs to.<br>Supported
            Filters : ''Equals''.'
          example: 855ea6c5-720a-41e1-96f4-958c90e6e424
          type: string
        dns_name:
          description: 'DNS name of the machine.<br>Supported Filters : ''Equals'',
            ''StartsWith'', ''EndsWith'' and ''Contains''.'
          example: machine1.example.com
          type: string
        id:
          description: Unique ID representing machine.
          example: 0103796c-102b-4ed3-953f-3dfe3d23e0fe
          type: string
        managed_machine_data:
          $ref: '#/components/schemas/ManagedMachineData'
        message_security_enhanced_mode_supported:
          description: Indicates whether ENHANCED message security mode is currently
            supported by this machine.
          example: true
          type: boolean
        message_security_mode:
          description: |-
            The current JMS message security mode used by this machine.<br>Supported Filters : 'Equals'.
            * DISABLED: Message security mode is disabled.
            * MIXED: Message security mode is enabled but not enforced.
            * ENABLED: Message security mode is enabled. Unsigned messages are rejected by Horizon components.
            * ENHANCED: Message Security mode is Enhanced. Message signing and validation is performed based on the current Security Level and desktop Message Security mode.
          enum:
          - DISABLED
          - MIXED
          - ENABLED
          - ENHANCED
          example: MIXED
          type: string
        name:
          description: 'Name of the machine.<br>Supported Filters : ''Equals'', ''StartsWith''
            and ''Contains''.'
          example: machine1
          type: string
        operating_system:
          description: |-
            The guest operating system.
            * UNKNOWN: Unknown
            * WINDOWS_XP: Windows XP
            * WINDOWS_VISTA: Windows Vista
            * WINDOWS_7: Windows 7
            * WINDOWS_8: Windows 8
            * WINDOWS_10: Windows 10
            * WINDOWS_SERVER_2003: Windows Server 2003
            * WINDOWS_SERVER_2008: Windows Server 2008
            * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2
            * WINDOWS_SERVER_2012: Windows Server 2012
            * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2
            * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above
            * LINUX_OTHER: Linux (other)
            * LINUX_SERVER_OTHER: Linux server (other)
            * LINUX_UBUNTU: Linux (Ubuntu)
            * LINUX_RHEL: Linux (Red Hat Enterprise)
            * LINUX_SUSE: Linux (Suse)
            * LINUX_CENTOS: Linux (CentOS)
          enum:
          - UNKNOWN
          - WINDOWS_XP
          - WINDOWS_VISTA
          - WINDOWS_7
          - WINDOWS_8
          - WINDOWS_10
          - WINDOWS_SERVER_2003
          - WINDOWS_SERVER_2008
          - WINDOWS_SERVER_2008_R2
          - WINDOWS_SERVER_2012
          - WINDOWS_SERVER_2012_R2
          - WINDOWS_SERVER_2016_OR_ABOVE
          - LINUX_OTHER
          - LINUX_SERVER_OTHER
          - LINUX_UBUNTU
          - LINUX_RHEL
          - LINUX_SUSE
          - LINUX_CENTOS
          example: WINDOWS_SERVER_2016
          type: string
        operating_system_architecture:
          description: |-
            The guest operating system architecture.
            * UNKNOWN: Operating System cannot be determined.
            * BIT_32: 32 bit Operating System Architecture.
            * BIT_64: 64 bit Operating System Architecture.
          enum:
          - UNKNOWN
          - BIT_32
          - BIT_64
          example: BIT_64
          type: string
        pairing_state:
          description: |-
            Horizon Agent pairing state.
            * NOT_AVAILABLE: Agent pairing state is not available.
            * IN_PAIRING: Agent pairing with Horizon Connection Server is in progress.
            * PAIRED_AND_SECURED: Agent is paired and secured with a Horizon Connection Server.
          enum:
          - NOT_AVAILABLE
          - IN_PAIRING
          - PAIRED_AND_SECURED
          example: IN_PAIRING
          type: string
        remote_experience_agent_build_number:
          description: 'The remote experience Horizon Agent build number.<br>Supported
            Filters : ''Equals''.'
          example: "32573985"
          type: string
        remote_experience_agent_version:
          description: 'The remote experience Horizon Agent version.<br>Supported
            Filters : ''Equals''.'
          example: "7.12"
          type: string
        state:
          description: |-
            The state of the machine.<br>Supported Filters : 'Equals'.
            * PROVISIONING: The machine is being provisioned.
            * PROVISIONING_ERROR: An error occurred during provisioning.
            * WAITING_FOR_AGENT: Horizon Connection Server is waiting to establish communication with Horizon Agent for one of these cases - a virtual machine in a manual desktop pool, unmanaged machine or RDS server.
            * CUSTOMIZING: The machine which is from an automated desktop pool is being customized after provisioning.
            * DELETING: The machine is marked for deletion.
            * MAINTENANCE: The machine is in maintenance mode. Users cannot log in or use the machine.
            * ERROR: An unknown error occurred in the machine.
            * PROVISIONED: The machine is powered off or suspended.
            * AGENT_UNREACHABLE: Horizon Connection Server cannot establish communication with Horizon Agent on the machine.
            * UNASSIGNED_USER_CONNECTED: A user other than the assigned user is logged in to the machine in a dedicated desktop pool.
            * CONNECTED: The machine is in an active session and has an active connection to a Horizon client.
            * UNASSIGNED_USER_DISCONNECTED: A user other than the assigned user is logged in and disconnected from the machine in a dedicated desktop pool.
            * DISCONNECTED: The machine is in an active session, but it is disconnected from the Horizon client.
            * AGENT_ERROR_STARTUP_IN_PROGRESS: Horizon Agent has started on the machine, but other required services such as the display protocol are still starting.
            * AGENT_ERROR_DISABLED: Horizon Agent is disabled.
            * AGENT_ERROR_INVALID_IP: Horizon Agent has an invalid IP address.
            * AGENT_ERROR_NEEDS_REBOOT: Horizon Agent needs reboot.
            * AGENT_ERROR_PROTOCOL_FAILURE: Protocol such as BLAST, RDP or PCoIP is not enabled.
            * AGENT_CONFIG_ERROR: The Remote Desktop Services role is not enabled on the windows server.
            * AGENT_DRAIN_MODE: RDS host is configured for drain mode. New connections are currently disabled.
            * AGENT_DRAIN_UNTIL_RESTART: RDS host is configured for drain-until-restart mode.
            * ALREADY_USED: The machine is configured to have only one session which is currently in progress and cannot accept new sessions.
            * AVAILABLE: The machine is powered on and ready for active connections.
            * IN_PROGRESS: There is a machine operation in progress.
            * DISABLED: The machine is disabled.
            * DISABLE_IN_PROGRESS: Disabled Horizon Connection Server still has some Horizon brokered sessions. It can still accept re-connections.
            * VALIDATING: The Horizon Connection Server is synchronizing state information with the agent.
            * UNKNOWN: Could not determine the state of the machine.
          enum:
          - PROVISIONING
          - PROVISIONING_ERROR
          - WAITING_FOR_AGENT
          - CUSTOMIZING
          - DELETING
          - MAINTENANCE
          - ERROR
          - PROVISIONED
          - AGENT_UNREACHABLE
          - UNASSIGNED_USER_CONNECTED
          - CONNECTED
          - UNASSIGNED_USER_DISCONNECTED
          - DISCONNECTED
          - AGENT_ERROR_STARTUP_IN_PROGRESS
          - AGENT_ERROR_DISABLED
          - AGENT_ERROR_INVALID_IP
          - AGENT_ERROR_NEEDS_REBOOT
          - AGENT_ERROR_PROTOCOL_FAILURE
          - AGENT_CONFIG_ERROR
          - AGENT_DRAIN_MODE
          - AGENT_DRAIN_UNTIL_RESTART
          - ALREADY_USED
          - AVAILABLE
          - IN_PROGRESS
          - DISABLED
          - DISABLE_IN_PROGRESS
          - VALIDATING
          - UNKNOWN
          example: PROVISIONING
          type: string
        type:
          description: |-
            The type of machine.<br>Supported Filters : 'Equals'.
            * MANAGED_MACHINE: The machine is a managed virtual machine.
            * UNMANAGED_MACHINE: The machine is an unmanaged physical or virtual machine.
          enum:
          - MANAGED_MACHINE
          - UNMANAGED_MACHINE
          example: MANAGED_MACHINE
          type: string
        user_ids:
          description: 'The unique SIDs of the users assigned to the machine.<br>Supported
            Filters : ''Contains''.'
          example:
          - S-1-1-1-3965912346-1012345398-3123456564-123
          - S-1-2-3-3123456786-1012345398-3123456784-124
          items:
            type: string
          type: array
      required:
      - desktop_pool_id
      - id
      - message_security_enhanced_mode_supported
      - message_security_mode
      - name
      - operating_system
      - operating_system_architecture
      - state
      - type
      title: MachineInfo
      type: object
    MachineSpecifiedName:
      description: Information required to add a machine to a desktop pool.
      example:
        user_id: S-1-1-1-3965912346-1012345398-3123456564-123
        name: machine1
      properties:
        name:
          description: Name of the machine.
          example: machine1
          type: string
        user_id:
          description: The unique SID of the user assigned to the machine.
          example: S-1-1-1-3965912346-1012345398-3123456564-123
          type: string
      required:
      - name
      title: MachineSpecifiedName
      type: object
    ManagedMachineData:
      description: Information related to Managed machines.
      example:
        in_hold_customization: false
        create_time: 1575285661395
        virtual_center_id: 0103796c-102b-4ed3-953f-3dfe3d23e0fe
        virtual_machine_power_state: POWERED_ON
        storage_accelerator_state: CURRENT
        network_labels:
        - network_label_name: example-network
          nic_name: network1
        - network_label_name: example-network
          nic_name: network1
        virtual_disks:
        - path: /path/host
          capacity_mb: 102400
          datastore_path: datastore1
        - path: /path/host
          capacity_mb: 102400
          datastore_path: datastore1
        in_maintenance_mode: false
        clone_error_time: 1575285661395
        missing_in_vcenter: false
        path: /path/host
        memory_mb: 1024
        clone_error_message: Timeout expired trying to clone a virtual machine.
        host_name: WD332H5
      properties:
        clone_error_message:
          description: Cloning error message for this machine. This will be set for
            machine belonging to automated desktop pools when the machine's state
            is in PROVISIONING_ERROR or ERROR state.
          example: Timeout expired trying to clone a virtual machine.
          type: string
        clone_error_time:
          description: Cloning error time for this machine in milliseconds. Measured
            as epoch time. This will be set for machine belonging to automated desktop
            pools when the machine's state is in PROVISIONING_ERROR or ERROR state.
          example: 1575285661395
          format: int64
          type: integer
        create_time:
          description: Time at which the machine was created in milliseconds. Measured
            as epoch time.
          example: 1575285661395
          format: int64
          type: integer
        host_name:
          description: The name of the host on which this virtual machine is registered.
          example: WD332H5
          type: string
        in_hold_customization:
          description: 'This condition determines if this virtual machine should be
            on hold before customization is started.<br>Supported Filters : ''Equals''.'
          example: false
          type: boolean
        in_maintenance_mode:
          description: Indicates whether the Machine is in maintenance mode.
          example: false
          type: boolean
        memory_mb:
          description: The virtual machine physical memory in MB.
          example: 1024
          format: int32
          type: integer
        missing_in_vcenter:
          description: 'This condition determines if the virtual machine is missing
            in vCenter Server.<br>Supported Filters : ''Equals''.'
          example: false
          type: boolean
        network_labels:
          description: The network label(s) associated with this Machine. The network
            label(s) automatically assigned by Horizon to this Machine. These may
            differ from the actual labels if manually changed after automatic assignment
            or if there was an error in assignment. Labels are only assigned if the
            feature is enabled on this Machine's Desktop Pool.
          items:
            $ref: '#/components/schemas/NetworkLabelData'
          type: array
        path:
          description: 'The virtual machine path.<br>Supported Filters : ''Equals'',
            ''StartsWith'', ''EndsWith'' and ''Contains''.Field name to be used in
            filter : managedMachineData.path.'
          example: /path/host
          type: string
        storage_accelerator_state:
          description: |-
            The Horizon Storage Accelerator state. Storage acceleration will be available for managed machines if configured.<br>Supported Filters : 'Equals'.
            * OFF: The Storage Accelerator is off.
            * CURRENT: The machine cached data is updated.
            * OUT_OF_DATE: The machine cached data is not updated and requires regeneration.
            * ERROR: The Storage Accelerator has encountered an error.
          enum:
          - "OFF"
          - CURRENT
          - OUT_OF_DATE
          - ERROR
          example: CURRENT
          type: string
        virtual_center_id:
          description: 'The ID of the Virtual Center managing this machine.<br>Supported
            Filters : ''Equals''.'
          example: 0103796c-102b-4ed3-953f-3dfe3d23e0fe
          type: string
        virtual_disks:
          description: The virtual disks comprising the virtual machine.
          items:
            $ref: '#/components/schemas/VirtualDiskData'
          type: array
        virtual_machine_power_state:
          description: |-
            The virtual machine power state.<br>Supported Filters : 'Equals'.
            * POWERED_OFF: The machine is powered off.
            * POWERED_ON: The machine is powered on.
            * SUSPENDED: The machine is suspended.
          enum:
          - POWERED_OFF
          - POWERED_ON
          - SUSPENDED
          example: POWERED_ON
          type: string
      required:
      - path
      - virtual_center_id
      - virtual_machine_power_state
      title: ManagedMachineData
      type: object
    NetworkInterfaceCardInfo:
      description: Information related to network interface card.
      example:
        mac_address: 00:50:56:a6:62:ac
        name: Network adapter 1
        id: 74390016-2dea-4b8c-8181-385783effaeb
      properties:
        id:
          description: Unique ID representing the network interface card.
          example: 74390016-2dea-4b8c-8181-385783effaeb
          type: string
        mac_address:
          description: Network interface card MAC address.
          example: 00:50:56:a6:62:ac
          type: string
        name:
          description: Network interface card name.
          example: Network adapter 1
          type: string
      title: NetworkInterfaceCardInfo
      type: object
    NetworkLabelAssignmentSettings:
      description: Specification for an individual network label assignment, stipulating
        the label and how many times it may be assigned to machines with this spec.
      example:
        max_label: 1
        max_label_type: LIMITED
        enabled: true
        network_label_name: vm-network
      properties:
        enabled:
          description: Whether or not this specification is enabled. While this specification
            is disabled, automatic network label assigment for this desktop pool will
            skip over the network label in this spec.
          example: true
          type: boolean
        max_label:
          description: The maximum number of times this label can be assigned to a
            machine. Note this count only encompasses this spec. That is, this label
            may be used for other NICs and in other Desktop pools, but those assignments
            will not be counted towards this total. This count also does not include
            assignments of this label to machines not under the control of View.
          example: 1
          format: int32
          type: integer
        max_label_type:
          description: |-
            This type specifies whether or not there is a maximum limit to the number of times this label may be assigned to machines within this spec. While this specification is enabled and unlimited, specs after this one in the NIC's network label specification list will never be used.
            * UNLIMITED: The network label assignment specification has no limit on the number of labels to assign.
            * LIMITED: The network label assignment specification has a limited number of labels to assign.
          enum:
          - UNLIMITED
          - LIMITED
          example: LIMITED
          type: string
        network_label_name:
          description: The network label id for this spec. This network label must
            not have any incompatibility reasons that would preclude it from automatic
            machine assignment.
          example: vm-network
          type: string
      title: NetworkLabelAssignmentSettings
      type: object
    NetworkLabelData:
      description: Information related to a network label.
      example:
        network_label_name: example-network
        nic_name: network1
      properties:
        network_label_name:
          description: The network label name.
          example: example-network
          type: string
        nic_name:
          description: The network interface name
          example: network1
          type: string
      required:
      - network_label_name
      - nic_name
      title: NetworkLabelData
      type: object
    NetworkLabelInfo:
      description: Information related to network label.
      example:
        incompatible_reasons:
        - NOT_CONFIGURED_ON_ALL_HOSTS
        - NOT_CONFIGURED_ON_ALL_HOSTS
        name: VM Network
        label_type: EARLY_BINDING
        id: network-1
        max_ports: 0
        available_ports: 0
        switch_type: STANDARD_SWITCH
      properties:
        available_ports:
          description: Available ports in network label.
          example: 0
          format: int32
          type: integer
        id:
          description: Unique ID representing the network label.
          example: network-1
          type: string
        incompatible_reasons:
          description: Reasons that may preclude this Network Label from being used
            in desktoppool/farm configuration.
          items:
            enum:
            - NOT_CONFIGURED_ON_ALL_HOSTS
            - DVS_UPLINK_PORT
            - VMC_NETWORKS
            type: string
          type: array
        label_type:
          description: |-
            Network label type.
            * EARLY_BINDING: A free Distributed Virtual Port will be selected and assigned to a Virtual Machine when the Virtual Machine is reconfigured to connect to the portgroup. Instant clones desktop pools/farms only support port group type of early binding.
            * EPHEMERAL: A Distributed Virtual Port will be created and assigned to a Virtual Machine when the Virtual Machine is powered on, and will be deleted when the Virtual Machine is powered off. An ephemeral portgroup has no limit on the number of ports that can be a part of this portgroup. In cases where the vCenter Server is unavailable the host can create conflict ports in this portgroup to be used by a Virtual Machine at power on.
            * LATE_BINDING: Deprecated as of vSphere API 5.0 A free DistributedVirtualPort will be selected and assigned to a Virtual Machine when the Virtual Machine is powered on.
          enum:
          - EARLY_BINDING
          - EPHEMERAL
          - LATE_BINDING
          example: EARLY_BINDING
          type: string
        max_ports:
          description: The total number of ports present.
          example: 0
          format: int32
          type: integer
        name:
          description: Network label name.
          example: VM Network
          type: string
        switch_type:
          description: |-
            Network label switch type.
            * STANDARD_SWITCH: Standard Switch.
            * DISTRIBUTED_VIRTUAL_SWITCH: Distributed Virtual Switch.
            * NSX_NETWORK_SWITCH: NSX network Switch.
          enum:
          - STANDARD_SWITCH
          - DISTRIBUTED_VIRTUAL_SWITCH
          - NSX_NETWORK_SWITCH
          example: STANDARD_SWITCH
          type: string
      title: NetworkLabelInfo
      type: object
    PodEndPointData:
      example:
        roundtrip_time: 1234
        name: connection-server1.example.com
        id: c5337d77-2bf1-4fa4-b027-c301114f2d1e
        enabled: true
        url: https://connection-server1.example.com:8742
        status: ONLINE
      properties:
        enabled:
          description: Indicates whether an endpoint is enabled. A disabled endpoint
            will be excluded from participating inter-pod communication.
          example: true
          type: boolean
        id:
          description: Unique ID for a pod endpoint.
          example: c5337d77-2bf1-4fa4-b027-c301114f2d1e
          type: string
        name:
          description: Name for the pod endpoint.
          example: connection-server1.example.com
          type: string
        roundtrip_time:
          description: Round trip time (in milliseconds) for ping request between
            the local pod endpoint and the remote pod.
          example: 1234
          format: int64
          type: integer
        status:
          description: |-
            Status of the pod endpoint.
            * ONLINE: Pod endpoint is online and functional.
            * UNCHECKED: Pod endpoint was offline and it just came back online but the system has not verified that it is functional.
            * OFFLINE: Pod endpoint is offline or unreachable.
          enum:
          - ONLINE
          - UNCHECKED
          - OFFLINE
          example: ONLINE
          type: string
        url:
          description: The URL for the pod endpoint. This address and special port
            will be used for inter-pod communication.
          example: https://connection-server1.example.com:8742
          type: string
      required:
      - enabled
      - id
      - name
      - status
      - url
      title: PodEndPointData
      type: object
    PodEndPointDataV2:
      example:
        roundtrip_time: 1234
        last_updated_timestamp: 1582029025748
        name: connection-server1.example.com
        id: c5337d77-2bf1-4fa4-b027-c301114f2d1e
        enabled: true
        url: https://connection-server1.example.com:8742
        status: ONLINE
      properties:
        enabled:
          description: Indicates whether an endpoint is enabled. A disabled endpoint
            will be excluded from participating inter-pod communication.
          example: true
          type: boolean
        id:
          description: Unique ID for a pod endpoint.
          example: c5337d77-2bf1-4fa4-b027-c301114f2d1e
          type: string
        last_updated_timestamp:
          description: The timestamp in milliseconds when the last update was obtained.
            Measured as epoch time.
          example: 1582029025748
          format: int64
          type: integer
        name:
          description: Name for the pod endpoint.
          example: connection-server1.example.com
          type: string
        roundtrip_time:
          description: Round trip time (in milliseconds) for ping request between
            the local pod endpoint and the remote pod.
          example: 1234
          format: int64
          type: integer
        status:
          description: |-
            Status of the pod endpoint.
            * ONLINE: Pod endpoint is online and functional.
            * UNCHECKED: Pod endpoint was offline and it just came back online but the system has not verified that it is functional.
            * OFFLINE: Pod endpoint is offline or unreachable.
          enum:
          - ONLINE
          - UNCHECKED
          - OFFLINE
          example: ONLINE
          type: string
        url:
          description: The URL for the pod endpoint. This address and special port
            will be used for inter-pod communication.
          example: https://connection-server1.example.com:8742
          type: string
      required:
      - enabled
      - id
      - name
      - status
      - url
      title: PodEndPointDataV2
      type: object
    PodMonitorInfo:
      description: Monitoring information related to a pod.
      example:
        endpoints:
        - roundtrip_time: 1234
          name: connection-server1.example.com
          id: c5337d77-2bf1-4fa4-b027-c301114f2d1e
          enabled: true
          url: https://connection-server1.example.com:8742
          status: ONLINE
        - roundtrip_time: 1234
          name: connection-server1.example.com
          id: c5337d77-2bf1-4fa4-b027-c301114f2d1e
          enabled: true
          url: https://connection-server1.example.com:8742
          status: ONLINE
        name: Cluster-SITE1-POD1
        site_id: a5882e23-3bf4-1ba6-c128-e780004f2d1e
        id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed50
      properties:
        endpoints:
          description: The list of pod endpoints within this pod. An endpoint is basically
            a connection server in that pod.
          items:
            $ref: '#/components/schemas/PodEndPointData'
          type: array
        id:
          description: Unique ID of the pod.
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed50
          type: string
        name:
          description: Display name for the pod.
          example: Cluster-SITE1-POD1
          type: string
        site_id:
          description: The Id of the site this pod belongs to.
          example: a5882e23-3bf4-1ba6-c128-e780004f2d1e
          type: string
      required:
      - id
      - name
      - site_id
      title: PodMonitorInfo
      type: object
    PodMonitorInfoV2:
      description: Monitoring information related to a pod.
      example:
        endpoints:
        - roundtrip_time: 1234
          last_updated_timestamp: 1582029025748
          name: connection-server1.example.com
          id: c5337d77-2bf1-4fa4-b027-c301114f2d1e
          enabled: true
          url: https://connection-server1.example.com:8742
          status: ONLINE
        - roundtrip_time: 1234
          last_updated_timestamp: 1582029025748
          name: connection-server1.example.com
          id: c5337d77-2bf1-4fa4-b027-c301114f2d1e
          enabled: true
          url: https://connection-server1.example.com:8742
          status: ONLINE
        name: Cluster-SITE1-POD1
        site_id: a5882e23-3bf4-1ba6-c128-e780004f2d1e
        id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed50
      properties:
        endpoints:
          description: The list of pod endpoints within this pod. An endpoint is basically
            a connection server in that pod.
          items:
            $ref: '#/components/schemas/PodEndPointDataV2'
          type: array
        id:
          description: Unique ID of the pod.
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed50
          type: string
        name:
          description: Display name for the pod.
          example: Cluster-SITE1-POD1
          type: string
        site_id:
          description: The Id of the site this pod belongs to.
          example: a5882e23-3bf4-1ba6-c128-e780004f2d1e
          type: string
      required:
      - id
      - name
      - site_id
      title: PodMonitorInfoV2
      type: object
    RCXClientRegisterSpec:
      description: Specification of the RCX client.
      properties:
        ip_address:
          description: IP address of the RCX client.
          example: 127.0.0.1
          type: string
        name:
          description: The RCX client certificate name.
          example: example.com
          type: string
        thumbprints:
          description: Thumbprints of the RCX client certificate.
          items:
            $ref: '#/components/schemas/CertificateThumbprint'
          type: array
      required:
      - name
      - thumbprints
      title: RCXClientRegisterSpec
      type: object
    RCXClientUpdateSpec:
      description: Update specification for the RCX client.
      properties:
        ip_address:
          description: IP address of the RCX client.
          example: 127.0.0.1
          type: string
        thumbprints:
          description: Thumbprints of the RCX client certificate.
          items:
            $ref: '#/components/schemas/CertificateThumbprint'
          type: array
      required:
      - thumbprints
      title: RCXClientUpdateSpec
      type: object
    RCXServerInfo:
      description: Information related to RCX servers of the cluster.
      example:
        port: 81
        name: rcxserver.example.com
        id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
        thumbprints:
        - ssl_cert_thumbprint: 8f:92:9d:3b:a7:85:55:88:60:cd:e1:c8:1e:70:9a:8b:37:6d:a6:e6
          ssl_cert_thumbprint_algorithm: SHA_1
        - ssl_cert_thumbprint: 8f:92:9d:3b:a7:85:55:88:60:cd:e1:c8:1e:70:9a:8b:37:6d:a6:e6
          ssl_cert_thumbprint_algorithm: SHA_1
        version: "7.12"
        status: UP
      properties:
        id:
          description: Unique ID representing RCX server.
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed51
          type: string
        name:
          description: FQDN/IP address of the RCX server.
          example: rcxserver.example.com
          type: string
        port:
          description: RCX server's port.
          example: 81
          format: int32
          type: integer
        status:
          description: |-
            This indicates the current status of RCX server.
            * UP: RCX server is running.
            * DOWN: RCX server is down.
            * UNKNOWN: RCX server status is unknown.
          enum:
          - UP
          - DOWN
          - UNKNOWN
          example: UP
          type: string
        thumbprints:
          description: Thumbprints of the RCX server certificates.
          items:
            $ref: '#/components/schemas/CertificateThumbprint'
          type: array
        version:
          description: Version information of RCX server.
          example: "7.12"
          type: string
      required:
      - id
      - name
      - port
      - status
      - version
      title: RCXServerInfo
      type: object
    RDSServerMonitorDetails:
      description: Details of RDS Server.
      example:
        agent_version: 7.9.0
        agent_build: "4445678"
        operating_system: WINDOWS_SERVER_2016
        state: AVAILABLE
        max_sessions_count_configured: 123
      properties:
        agent_build:
          description: Agent build number.
          example: "4445678"
          type: string
        agent_version:
          description: Agent version.
          example: 7.9.0
          type: string
        max_sessions_count_configured:
          description: Maximum number of sessions for RDS server as configured by
            administrator. Will be unset if the value is not configured.
          example: 123
          format: int32
          type: integer
        operating_system:
          description: |-
            Operating System version.
            * UNKNOWN: Unknown
            * WINDOWS_SERVER_2003: Windows Server 2003
            * WINDOWS_SERVER_2008: Windows Server 2008
            * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2
            * WINDOWS_SERVER_2012: Windows Server 2012
            * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2
            * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above
            * LINUX_SERVER_OTHER: Linux Server (other)
          enum:
          - UNKNOWN
          - WINDOWS_SERVER_2003
          - WINDOWS_SERVER_2008
          - WINDOWS_SERVER_2008_R2
          - WINDOWS_SERVER_2012
          - WINDOWS_SERVER_2012_R2
          - WINDOWS_SERVER_2016_OR_ABOVE
          - LINUX_SERVER_OTHER
          example: WINDOWS_SERVER_2016
          type: string
        state:
          description: |-
            State of RDS Server.
            * WAIT_FOR_AGENT: Connection Server is waiting to establish communication with View Agent on a RDS Server.
            * AGENT_UNREACHABLE: Connection Server cannot establish communication with View Agent on a RDS Server.
            * AGENT_CONFIG_ERROR: The RDS Server has configuration error. Ex: Remote Desktop Service role is not enabled.
            * AVAILABLE: The RDS Server is powered on and ready for an active connection.
            * DISABLED: The RDS Server is disabled.
            * DISABLE_IN_PROGRESS: Disabled RDS server still has some brokered sessions. It can still accept re-connections.
            * PROVISIONING: The RDS Server is being provisioned.
            * PROVISIONING_ERROR: An error occurred during provisioning.
            * CUSTOMIZING: The RDS Server is being customized.
            * DELETING: The RDS Server is marked for deletion. It will be deleted soon.
            * MAINTENANCE: The RDS Server is in maintenance mode.
            * ERROR: An unknown error occurred in the RDS Server.
            * PROVISIONED: The RDS Server has been provisioned.
            * CONNECTED: The RDS Server is in an active session.
            * DISCONNECTED: The RDS Server is in an active session but is disconnected.
            * AGENT_ERR_STARTUP_IN_PROGRESS: The Horizon Agent has started on the virtual machine, but other required services such as the display protocol are still starting.
            * AGENT_ERR_DISABLED: The Horizon Agent is disabled.
            * AGENT_ERR_INVALID_IP: The Horizon Agent has an invalid IP.
            * AGENT_ERR_NEED_REBOOT: The Horizon Agent needs reboot.
            * AGENT_ERR_PROTOCOL_FAILURE: Protocol such as RDP or PCoIP is not enabled.
            * AGENT_ERR_DOMAIN_FAILURE: The RDS Server has an invalid domain.
            * AGENT_DRAIN_MODE: The RDS Server is configured for drain mode.
            * AGENT_DRAIN_UNTIL_RESTART: The RDS Server is configured a mode to drain until restart.
            * ALREADY_USED: The RDS Server cannot accept new sessions.
            * IN_PROGRESS: There is a RDS Server operation in progress.
            * VALIDATING: The connection server is synchronizing state information with the agent.
            * UNKNOWN: Could not determine the state of the RDS Server.
          enum:
          - WAIT_FOR_AGENT
          - AGENT_UNREACHABLE
          - AGENT_CONFIG_ERROR
          - AVAILABLE
          - DISABLED
          - DISABLE_IN_PROGRESS
          - PROVISIONING
          - PROVISIONING_ERROR
          - CUSTOMIZING
          - DELETING
          - MAINTENANCE
          - ERROR
          - PROVISIONED
          - CONNECTED
          - DISCONNECTED
          - AGENT_ERR_STARTUP_IN_PROGRESS
          - AGENT_ERR_DISABLED
          - AGENT_ERR_INVALID_IP
          - AGENT_ERR_NEED_REBOOT
          - AGENT_ERR_PROTOCOL_FAILURE
          - AGENT_ERR_DOMAIN_FAILURE
          - AGENT_DRAIN_MODE
          - AGENT_DRAIN_UNTIL_RESTART
          - ALREADY_USED
          - IN_PROGRESS
          - VALIDATING
          - UNKNOWN
          example: AVAILABLE
          type: string
      required:
      - agent_build
      - agent_version
      - operating_system
      - state
      title: RDSServerMonitorDetails
      type: object
    RDSServerMonitorInfo:
      description: RDS Server Monitor Information.
      example:
        load_preference: NORMAL
        session_count: 35
        name: rds-server.example.com
        load_index: 60
        details:
          agent_version: 7.9.0
          agent_build: "4445678"
          operating_system: WINDOWS_SERVER_2016
          state: AVAILABLE
          max_sessions_count_configured: 123
        id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed50
        enabled: true
        farm_id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed50
        status: OK
      properties:
        details:
          $ref: '#/components/schemas/RDSServerMonitorDetails'
        enabled:
          description: Indicates if RDS server is enabled.
          example: true
          type: boolean
        farm_id:
          description: Indicates the Farm ID to which the RDS Server belongs to.
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed50
          type: string
        id:
          description: Unique ID of the RDS server.
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed50
          type: string
        load_index:
          description: This value is similar to load_preference and represents the
            load on RDS Server in the range of 0 to 100.
          example: 60
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: int32
          maximum: 1E+2
          minimum: 0
          type: integer
        load_preference:
          description: |-
            Based on the current load of this RDS Server, gives a measure of how preferential this server is to be chosen for new application sessions.
            * BLOCK: RDS Server is blocked and new sessions will not be accepted.
            * HEAVY: RDS Server is experiencing heavy load and should likely not be chosen for new sessions.
            * NORMAL: RDS Server is experiencing normal load and is okay to be chosen for new sessions.
            * LIGHT: RDS Server is experiencing light load and is okay to be chosen for new sessions.
            * UNKNOWN: RDS Server did not report a load preference. This is potentially a configuration issue if other RDS Servers in the same Farm do report load preferences.
          enum:
          - BLOCK
          - HEAVY
          - NORMAL
          - LIGHT
          - UNKNOWN
          example: NORMAL
          type: string
        name:
          description: RDS Server name.
          example: rds-server.example.com
          type: string
        session_count:
          description: RDS server session count.
          example: 35
          format: int32
          type: integer
        status:
          description: |-
            RDS server status.
            * OK: RDS Server is reachable. All applications (defined on its farm) are verified installed on the RDS Server.
            * WARNING: RDS Server is reachable. Some applications are detected as not installed on the RDS Server.
            * ERROR: RDS Server is unreachable, or, none of the applications are installed.
            * DISABLED: RDS Server is disabled.
          enum:
          - OK
          - WARNING
          - ERROR
          - DISABLED
          example: OK
          type: string
      required:
      - details
      - enabled
      - farm_id
      - id
      - name
      - status
      title: RDSServerMonitorInfo
      type: object
    RefreshToken:
      description: Refresh Token
      example:
        refresh_token: <jwt.refresh.token>
      properties:
        refresh_token:
          description: Refresh Token to be used to get a new Access token.
          example: <jwt.refresh.token>
          type: string
      required:
      - refresh_token
      title: RefreshToken
      type: object
    ResourcePoolInfo:
      description: Information related to resource pool.
      example:
        path: /Datacenter/host/Cluster/Resources/RP1
        children:
        - null
        - null
        name: RP1
        id: resgroup-1
        type: RESOURCE_POOL
      properties:
        children:
          description: Child nodes of the resource pool.
          items:
            $ref: '#/components/schemas/ResourcePoolInfo'
          type: array
        id:
          description: Unique ID representing the resource pool.
          example: resgroup-1
          type: string
        name:
          description: Resource pool name.
          example: RP1
          type: string
        path:
          description: Resource pool path.
          example: /Datacenter/host/Cluster/Resources/RP1
          type: string
        type:
          description: |-
            Resource pool type.
            * HOST: Host used as a resource pool suitable for use in desktop pool/farm.
            * CLUSTER: Cluster used as a resource pool suitable for use in desktop pool/farm.
            * RESOURCE_POOL: Regular resource pool suitable for use in desktop pool/farm.
            * OTHER: Other resource type which cannot be used in desktop pool/farm.
          enum:
          - HOST
          - CLUSTER
          - RESOURCE_POOL
          - OTHER
          example: RESOURCE_POOL
          type: string
      title: ResourcePoolInfo
      type: object
    RestrictedClientData:
      description: Information related to Restricted Horizon Clients.
      properties:
        type:
          description: |-
            The type of Horizon Client.
            * WINDOWS: The client is the Horizon Client for Windows.
            * MAC: The client is the Horizon Client for MacOS.
            * HTMLACCESS: The client is a Web client.
            * LINUX: The client is the Horizon Client for Linux.
            * IOS: The client is the Horizon Client for IOS devices.
            * ANDROID: The client is the Horizon Client for Android.
            * WINSTORE: The client is the Horizon Client for Windows 10 UWP.
            * CHROME: The client is the Horizon Client for Chrome Native OS.
          enum:
          - WINDOWS
          - MAC
          - HTMLACCESS
          - LINUX
          - IOS
          - ANDROID
          - WINSTORE
          - CHROME
          example: WINDOWS
          type: string
        version:
          description: The version of Horizon Client.
          example: "7.5"
          type: string
      title: RestrictedClientData
      type: object
    SAMLAuthMonitorDetails:
      description: Details of the SAML authenticator.
      example:
        metadata_url: https://vidm.example.com/saas/api/1.0/GET/metadata/idp.xml
        administrator_url: https://vidm.example.com/saas/api/1.0/GET/admindata
        label: vidm.example.com
      properties:
        administrator_url:
          description: The administrator URL for the SAML authenticator.
          example: https://vidm.example.com/saas/api/1.0/GET/admindata
          type: string
        label:
          description: The label of the SAML Authenticator.
          example: vidm.example.com
          type: string
        metadata_url:
          description: The metadata URL of the SAML Authenticator.
          example: https://vidm.example.com/saas/api/1.0/GET/metadata/idp.xml
          type: string
      required:
      - label
      - metadata_url
      title: SAMLAuthMonitorDetails
      type: object
    SAMLAuthenticatorMonitorConnectionServer:
      description: Information about the SAML authenticator connection from a connection
        server.
      example:
        name: cs1.example.com
        id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
        thumbprint_accepted: false
        status: OK
      properties:
        id:
          description: Unique ID of the Connection Server.
          example: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          type: string
        name:
          description: Connection server host name or IP address.
          example: cs1.example.com
          type: string
        status:
          description: |-
            Status of the SAML authenticator with respect to this Connection Server.
            * OK: The connection to SAML authenticator is working properly.
            * ERROR: Error occurred when connecting to SAML authenticator.
            * WARN: The connection to SAML authenticator has minor issues.
            * UNKNOWN: State of SAML authenticator is unknown.
          enum:
          - OK
          - ERROR
          - WARN
          - UNKNOWN
          example: OK
          type: string
        thumbprint_accepted:
          description: Indicates if the thumbprint of the SAML authenticator was accepted.
          example: false
          type: boolean
      required:
      - id
      - name
      - status
      - thumbprint_accepted
      title: SAMLAuthenticatorMonitorConnectionServer
      type: object
    SAMLAuthenticatorMonitorConnectionServerV2:
      description: Information about the SAML authenticator connection from a connection
        server.
      example:
        last_updated_timestamp: 1582029025748
        name: cs1.example.com
        id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
        thumbprint_accepted: false
        status: OK
      properties:
        id:
          description: Unique ID of the Connection Server.
          example: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          type: string
        last_updated_timestamp:
          description: The timestamp in milliseconds when the last update was obtained.
            Measured as epoch time.
          example: 1582029025748
          format: int64
          type: integer
        name:
          description: Connection server host name or IP address.
          example: cs1.example.com
          type: string
        status:
          description: |-
            Status of the SAML authenticator with respect to this Connection Server.
            * OK: The connection to SAML authenticator is working properly.
            * ERROR: Error occurred when connecting to SAML authenticator.
            * WARN: The connection to SAML authenticator has minor issues.
            * UNKNOWN: State of SAML authenticator is unknown.
          enum:
          - OK
          - ERROR
          - WARN
          - UNKNOWN
          example: OK
          type: string
        thumbprint_accepted:
          description: Indicates if the thumbprint of the SAML authenticator was accepted.
          example: false
          type: boolean
      required:
      - id
      - name
      - status
      - thumbprint_accepted
      title: SAMLAuthenticatorMonitorConnectionServerV2
      type: object
    SAMLAuthenticatorMonitorInfo:
      description: Monitoring information related to SAML Authenticator.
      example:
        details:
          metadata_url: https://vidm.example.com/saas/api/1.0/GET/metadata/idp.xml
          administrator_url: https://vidm.example.com/saas/api/1.0/GET/admindata
          label: vidm.example.com
        id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
        connection_servers:
        - name: cs1.example.com
          id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          thumbprint_accepted: false
          status: OK
        - name: cs1.example.com
          id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          thumbprint_accepted: false
          status: OK
      properties:
        connection_servers:
          description: Information about the SAML authenticator connections from each
            of the connection servers.
          items:
            $ref: '#/components/schemas/SAMLAuthenticatorMonitorConnectionServer'
          type: array
        details:
          $ref: '#/components/schemas/SAMLAuthMonitorDetails'
        id:
          description: Unique ID of the SAML Authenticator.
          example: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          type: string
      required:
      - connection_servers
      - details
      - id
      title: SAMLAuthenticatorMonitorInfo
      type: object
    SAMLAuthenticatorMonitorInfoV2:
      description: Monitoring information related to SAML Authenticator.
      example:
        details:
          metadata_url: https://vidm.example.com/saas/api/1.0/GET/metadata/idp.xml
          administrator_url: https://vidm.example.com/saas/api/1.0/GET/admindata
          label: vidm.example.com
        id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
        connection_servers:
        - last_updated_timestamp: 1582029025748
          name: cs1.example.com
          id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          thumbprint_accepted: false
          status: OK
        - last_updated_timestamp: 1582029025748
          name: cs1.example.com
          id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          thumbprint_accepted: false
          status: OK
      properties:
        connection_servers:
          description: Information about the SAML authenticator connections from each
            of the connection servers.
          items:
            $ref: '#/components/schemas/SAMLAuthenticatorMonitorConnectionServerV2'
          type: array
        details:
          $ref: '#/components/schemas/SAMLAuthMonitorDetails'
        id:
          description: Unique ID of the SAML Authenticator.
          example: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          type: string
      required:
      - connection_servers
      - details
      - id
      title: SAMLAuthenticatorMonitorInfoV2
      type: object
    SecurityGatewayData:
      description: Security gateway data associated with the session.
      example:
        domain_name: SECURE-GW.example.com
        address: 127.0.0.1
        location: EXTERNAL
      properties:
        address:
          description: "IP address of the security gateway. \nThis property need not\
            \ be set."
          example: 127.0.0.1
          type: string
        domain_name:
          description: "Computer machine name or DNS name of the security gateway.\
            \ \nThis property need not be set."
          example: SECURE-GW.example.com
          type: string
        location:
          description: "Location of the security gateway. \nThis property need not\
            \ be set.\n* EXTERNAL: Gateway location is external.\n* INTERNAL: Gateway\
            \ location is internal.\n* UNKNOWN: Gateway location is unknown."
          enum:
          - EXTERNAL
          - INTERNAL
          - UNKNOWN
          example: EXTERNAL
          type: string
      title: SecurityGatewayData
      type: object
    SecuritySettings:
      description: Information related to Security Settings.
      example:
        cluster_public_key_id: cluster key
        re_auth_secure_tunnel_after_interruption: true
        message_security_mode: ENABLED
        data_recovery_password_configured: true
        cluster_public_key: 3d43f005bfd5ade4c6853bd337f4d205e189c28793063087d1c0aeb58931e02c
        message_security_status: READY
      properties:
        cluster_public_key:
          description: The Base 64 encoded public key of the cluster in PEM format.
          example: 3d43f005bfd5ade4c6853bd337f4d205e189c28793063087d1c0aeb58931e02c
          type: string
        cluster_public_key_id:
          description: Key Id to identify the cluster's active key pair.
          example: cluster key
          type: string
        data_recovery_password_configured:
          description: Indicates whether the backup recovery password has been configured.
          example: true
          type: boolean
        message_security_mode:
          description: |-
            Determines if signing and verification of the JMS messages passed between Horizon components takes place.
            * DISABLED: Message security mode is disabled.
            * MIXED: Message security mode is enabled but not enforced.
            * ENABLED: Message security mode is enabled. Unsigned messages are rejected by Horizon components.
            * ENHANCED: Message Security mode is Enhanced. Message signing and validation is performed based on the current Security Level and desktop Message Security mode.
          enum:
          - DISABLED
          - MIXED
          - ENABLED
          - ENHANCED
          example: ENABLED
          type: string
        message_security_status:
          description: |-
            The status of the JMS message security. This tracks the application of changes to messageSecurityMode.
            * READY: The cluster is performing at the specified message security mode.
            * INITIALIZING_ENHANCED: The cluster is initializing a transition to the ENHANCED message security mode.
            * PENDING_ENHANCED: The cluster is propagating the change to ENHANCED message security mode to all nodes.
            * LEAVING_ENHANCED: The cluster is leaving the ENHANCED message security mode.
          enum:
          - READY
          - INITIALIZING_ENHANCED
          - PENDING_ENHANCED
          - LEAVING_ENHANCED
          example: READY
          type: string
        re_auth_secure_tunnel_after_interruption:
          description: Determines if user credentials must be re-authenticated after
            a network interruption when Horizon clients use secure tunnel connections
            to Horizon resources. When you select this setting, if a secure tunnel
            connection ends during a session, Horizon Client requires the user to
            re-authenticate before reconnecting.
          example: true
          type: boolean
      required:
      - cluster_public_key
      - data_recovery_password_configured
      - message_security_mode
      - message_security_status
      - re_auth_secure_tunnel_after_interruption
      title: SecuritySettings
      type: object
    SecuritySettingsUpdateSpec:
      description: Information related to Security Settings.
      example:
        re_auth_secure_tunnel_after_interruption: true
        message_security_mode: ENABLED
        data_recovery_password_hint: password hint
        data_recovery_password_hash: 5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8
      properties:
        data_recovery_password_hash:
          description: The SHA-256 hash of the (UTF-8) data recovery password.
          example: 5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8
          items:
            type: string
          type: array
        data_recovery_password_hint:
          description: The data recovery password hint. This property has a maximum
            length of 128 characters.
          example: password hint
          type: string
        message_security_mode:
          description: |-
            Determines if signing and verification of the JMS messages passed between Horizon components takes place.
            * DISABLED: Message security mode is disabled.
            * MIXED: Message security mode is enabled but not enforced.
            * ENABLED: Message security mode is enabled. Unsigned messages are rejected by Horizon components.
            * ENHANCED: Message Security mode is Enhanced. Message signing and validation is performed based on the current Security Level and desktop Message Security mode.
          enum:
          - DISABLED
          - MIXED
          - ENABLED
          - ENHANCED
          example: ENABLED
          type: string
        re_auth_secure_tunnel_after_interruption:
          description: Determines if user credentials must be re-authenticated after
            a network interruption when Horizon clients use secure tunnel connections
            to Horizon resources. When you select this setting, if a secure tunnel
            connection ends during a session, Horizon Client requires the user to
            re-authenticate before reconnecting.
          example: true
          type: boolean
      required:
      - message_security_mode
      title: SecuritySettingsUpdateSpec
      type: object
    SessionInfo:
      description: Information related to Session.
      example:
        client_data:
          address: 127.0.0.1
          name: EXAMPLE-CLIENT1
          type: WINDOWS
          version: 5.4.0
          location_id: 6bda20e66cda315084edc8b5c67f9cf1e3b0f4559ba990b1004a
        access_group_id: 6fd4638a-381f-4518-aed6-042aa3d9f14c
        disconnected_time: 1582181947320
        desktop_pool_id: 0103796c-102b-4ed3-953f-3dfe3d23e0fe
        brokered_remotely: false
        security_gateway_data:
          domain_name: SECURE-GW.example.com
          address: 127.0.0.1
          location: EXTERNAL
        machine_id: a00eda55-708a-4f7d-8cbc-1d1b3a2b5f73
        last_session_duration_ms: 116320
        application_names:
        - Calculator
        rds_server_id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed50
        agent_version: 7.12.0
        start_time: 1582181831000
        broker_user_id: S-1-5-21-1111111111-2222222222-3333333333-500
        unauthenticated: false
        user_id: S-1-5-21-1111111111-2222222222-3333333333-500
        resourced_remotely: false
        session_protocol: PCOIP
        id: 7cdd624f-37d1-46c1-ab96-695a5d13956f
        session_type: APPLICATION
        session_state: CONNECTED
        farm_id: 0dbd14ba-5795-4141-9cec-128ff6d494b0
        idle_duration: 60
      properties:
        access_group_id:
          description: "Access group id associated with the session. \nFor a non-RDS\
            \ desktop session, this is the desktop pool's access group id. \nFor an\
            \ RDS desktop session, this is the RDS desktop pool's farm's access group\
            \ id. \nFor an application session, this is the application's farm's access\
            \ group id."
          example: 6fd4638a-381f-4518-aed6-042aa3d9f14c
          type: string
        agent_version:
          description: |-
            Version of agent
            This property need not be set.
          example: 7.12.0
          type: string
        application_names:
          description: "Names of the applications launched in the session. \nIt will\
            \ be only set when session_type is APPLICATION."
          example:
          - Calculator
          items:
            type: string
          type: array
        broker_user_id:
          description: "User SID for the broker user associated with the session.\
            \ \nIt will be unset for non-broker sessions."
          example: S-1-5-21-1111111111-2222222222-3333333333-500
          type: string
        brokered_remotely:
          description: "Indicates whether the session is brokered from a remote pod.\
            \ \nIt is set only if the Horizon View agent where the session resides\
            \ is version 6.0 or later."
          example: false
          type: boolean
        client_data:
          $ref: '#/components/schemas/ClientData'
        desktop_pool_id:
          description: "Unique desktop pool id for the session. \nThis is unset if\
            \ the session is not brokered through a desktop, such as for direct console\
            \ access."
          example: 0103796c-102b-4ed3-953f-3dfe3d23e0fe
          type: string
        disconnected_time:
          description: "Epoch time in milli seconds, when the session was last disconnected.\
            \ \nThis will be unset if the session's machine has an error state, or\
            \ if the session has never been disconnected."
          example: 1582181947320
          format: int64
          type: integer
        farm_id:
          description: |-
            Unique farm id for this RDS desktop or application session.
            This is unset if the session is not brokered through a farm, such as for application sessions or direct console access.
          example: 0dbd14ba-5795-4141-9cec-128ff6d494b0
          type: string
        id:
          description: Unique id representing a session.
          example: 7cdd624f-37d1-46c1-ab96-695a5d13956f
          type: string
        idle_duration:
          description: |-
            Idle time duration in minutes, indicating how long the end user of the session has been idle for.
            This property need not be set.
          example: 60
          format: int64
          type: integer
        last_session_duration_ms:
          description: Duration of the last connection period of the session in milli
            seconds. If the session is currently connected, this is the duration that
            the session has been in connected state. If the session is currently disconnected,
            this is the duration of its previous connection period. This will be unset
            on error.
          example: 116320
          format: int64
          type: integer
        machine_id:
          description: "Unique machine id for the session. \nThis is unset for RDS\
            \ Desktop or application sessions. If desktop pool id is unset, it is\
            \ the id of registered un-managed physical machine."
          example: a00eda55-708a-4f7d-8cbc-1d1b3a2b5f73
          type: string
        rds_server_id:
          description: |-
            Unique RDS server id for the RDS desktop or application session.
            This property need not be set.
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed50
          type: string
        resourced_remotely:
          description: Indicates whether the session is running on remote pod resource.
          example: false
          type: boolean
        security_gateway_data:
          $ref: '#/components/schemas/SecurityGatewayData'
        session_protocol:
          description: "Protocol for the session. \nIt will be unset for disconnected\
            \ sessions.\n* PCOIP: Display protocol is PCoIP.\n* RDP: Display protocol\
            \ is RDP.\n* BLAST: Display protocol is BLAST.\n* CONSOLE: Display protocol\
            \ is console.\n* UNKNOWN: Display protocol is unknown."
          enum:
          - PCOIP
          - RDP
          - BLAST
          - CONSOLE
          - UNKNOWN
          example: PCOIP
          type: string
        session_state:
          description: |-
            State of session.
            * CONNECTED: Session is connected
            * DISCONNECTED: Session is disconnected
            * PENDING: Session is pending
          enum:
          - CONNECTED
          - DISCONNECTED
          - PENDING
          example: CONNECTED
          type: string
        session_type:
          description: |-
            Type of session.
            * DESKTOP: Desktop or RDS desktop session.
            * APPLICATION: Application session.
          enum:
          - DESKTOP
          - APPLICATION
          example: APPLICATION
          type: string
        start_time:
          description: "Epoch time in milli seconds, when the session was originally\
            \ logged in. \nThe lifecycle of a session begins at login and ends at\
            \ logout, with any number of connect and disconnect occurrences in between.\
            \ The first connection time will be shortly after this time. \nThis property\
            \ need not be set."
          example: 1582181831000
          format: int64
          type: integer
        unauthenticated:
          description: "Indicates whether the session is of unauthenticated access\
            \ user. \nThis property need not be set."
          example: false
          type: boolean
        user_id:
          description: "Unique SID of the user logged into the session. \nIt may not\
            \ match the broker user id for non-SSO scenarios."
          example: S-1-5-21-1111111111-2222222222-3333333333-500
          type: string
      title: SessionInfo
      type: object
    SessionSendMessageSpec:
      description: Information required to send message to sessions.
      example:
        session_ids:
        - 7cdd624f-37d1-46c1-ab96-695a5d13956f
        message_type: INFO
        message: Sample Info Message
      properties:
        message:
          description: Message to be sent to session(s).
          example: Sample Info Message
          type: string
        message_type:
          description: |-
            Type of message to be sent to session(s).
            * ERROR: Message is of error type.
            * WARNING: Message is of warning type.
            * INFO: Message is of information type.
          enum:
          - ERROR
          - WARNING
          - INFO
          example: INFO
          type: string
        session_ids:
          description: List of session ids to which message is to be sent
          example:
          - 7cdd624f-37d1-46c1-ab96-695a5d13956f
          items:
            type: string
          type: array
      required:
      - message
      - message_type
      - session_ids
      title: SessionSendMessageSpec
      type: object
    SettingsInfo:
      description: Information related to Settings.
      example:
        security_settings:
          cluster_public_key_id: cluster key
          re_auth_secure_tunnel_after_interruption: true
          message_security_mode: ENABLED
          data_recovery_password_configured: true
          cluster_public_key: 3d43f005bfd5ade4c6853bd337f4d205e189c28793063087d1c0aeb58931e02c
          message_security_status: READY
        general_settings:
          enable_sending_domain_list: false
          forced_logoff_message: The system will shut down shortly. Please save your
            work.
          restricted_client_data:
          - type: WINDOWS
            version: "7.5"
          - type: LINUX
            version: "6.5"
          enable_credential_cleanup_for_htmlaccess: false
          enable_automatic_status_updates: true
          block_restricted_clients: false
          application_sso_timeout_minutes: 30
          display_warning_before_forced_logoff: true
          client_max_session_timeout_policy: TIMEOUT_AFTER
          enable_multi_factor_re_authentication: false
          store_cal_on_connection_server: false
          store_cal_on_client: false
          hide_domain_list_in_client: true
          display_pre_login_message: false
          machine_sso_timeout_minutes: 300
          restricted_client_message: The system does not support this version of the
            Horizon client.
          pre_login_message: 'Disclaimer : This server is being monitored for suspicious
            activity.'
          hide_server_information_in_client: false
          enable_server_in_single_user_mode: true
          console_session_timeout_minutes: 30
          machine_sso_timeout_policy: DISABLED_AFTER
          client_session_timeout_minutes: 300
          client_max_session_timeout_minutes: 300
          forced_logoff_timeout_minutes: 3
          application_sso_timeout_policy: ENABLED
          client_idle_session_timeout_policy: NEVER
          client_idle_session_timeout_minutes: 300
        feature_settings:
          enable_helpdesk: true
          enable_image_management: true
          cloud_managed: true
      properties:
        feature_settings:
          $ref: '#/components/schemas/FeatureSettings'
        general_settings:
          $ref: '#/components/schemas/GeneralSettings'
        security_settings:
          $ref: '#/components/schemas/SecuritySettings'
      required:
      - feature_settings
      - general_settings
      - security_settings
      title: SettingsInfo
      type: object
    SettingsUpdateSpec:
      description: Update specification for the configuration settings.
      example:
        security_settings:
          re_auth_secure_tunnel_after_interruption: true
          message_security_mode: ENABLED
          data_recovery_password_hint: password hint
          data_recovery_password_hash: 5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8
        general_settings:
          enable_sending_domain_list: false
          forced_logoff_message: The system will shut down shortly. Please save your
            work.
          restricted_client_data:
          - type: WINDOWS
            version: "7.5"
          - type: LINUX
            version: "6.5"
          enable_credential_cleanup_for_htmlaccess: false
          enable_automatic_status_updates: true
          block_restricted_clients: false
          application_sso_timeout_minutes: 30
          display_warning_before_forced_logoff: true
          client_max_session_timeout_policy: TIMEOUT_AFTER
          enable_multi_factor_re_authentication: false
          store_cal_on_connection_server: false
          store_cal_on_client: false
          hide_domain_list_in_client: true
          display_pre_login_message: false
          machine_sso_timeout_minutes: 300
          restricted_client_message: The system does not support this version of the
            Horizon client.
          pre_login_message: 'Disclaimer : This server is being monitored for suspicious
            activity.'
          hide_server_information_in_client: false
          enable_server_in_single_user_mode: true
          console_session_timeout_minutes: 30
          machine_sso_timeout_policy: DISABLED_AFTER
          client_session_timeout_minutes: 300
          client_max_session_timeout_minutes: 300
          forced_logoff_timeout_minutes: 3
          application_sso_timeout_policy: ENABLED
          client_idle_session_timeout_policy: NEVER
          client_idle_session_timeout_minutes: 300
        feature_settings:
          cloud_managed: true
      properties:
        feature_settings:
          $ref: '#/components/schemas/FeatureSettingsUpdateSpec'
        general_settings:
          $ref: '#/components/schemas/GeneralSettingsUpdateSpec'
        security_settings:
          $ref: '#/components/schemas/SecuritySettingsUpdateSpec'
      title: SettingsUpdateSpec
      type: object
    StorageAcceleratorData:
      description: Information about the Storage Accelerator Data
      example:
        default_cache_size_mb: 1024
        host_overrides:
        - path: /path/host
          cache_size_mb: 2048
        - path: /path/host
          cache_size_mb: 2048
        enabled: false
      properties:
        default_cache_size_mb:
          description: 'Default size of the cache in megabytes. This property has
            a default value of 1024. This property has a minimum value of 100. This
            property has a maximum value of 2048. '
          example: 1024
          format: int32
          type: integer
        enabled:
          description: Is View Storage Accelerator enabled? This property has a default
            value of false.
          example: false
          type: boolean
        host_overrides:
          description: Cache size overrides for hosts which support View Storage Accelerator.
          items:
            $ref: '#/components/schemas/HostOverrideData'
          type: array
      required:
      - enabled
      title: StorageAcceleratorData
      type: object
    TrueSSOMonitorInfo:
      description: Monitoring information related to the True SSO Connector.
      example:
        primary_enrollment_server:
          id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed50
          dns_name: enrollment-server.example.com
          status: OK
        template_name: TrueSSO Template
        ad_domain_status: OK
        template_status: OK
        secondary_enrollment_server:
          id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed50
          dns_name: enrollment-server.example.com
          status: OK
        ad_domain_id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed50
        name: true-sso.example.com
        ad_domain_dns_name: ad-domain.example.com
        id: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed50
        enabled: true
        certificate_server_details:
        - name: SSOConnector
          status: OK
        - name: SSOConnector
          status: OK
        status: OK
      properties:
        ad_domain_dns_name:
          description: The DNS name of the domain.
          example: ad-domain.example.com
          type: string
        ad_domain_id:
          description: Unique ID of the AD Domain.
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed50
          type: string
        ad_domain_status:
          description: |-
            The state of the domain health, taken as the most severe reported by one of the enrollment servers.
            * OK: The state of the domain is OK as reported by the enrollment servers.
            * WARN: At least one of the enrollment servers has a warning.
            * ERROR: At least one of the enrollment servers is in an error state.
          enum:
          - OK
          - WARN
          - ERROR
          example: OK
          type: string
        certificate_server_details:
          description: Details of each certificate server.
          items:
            $ref: '#/components/schemas/CertificateServerDetails'
          type: array
        enabled:
          description: Indicates if the True SSO connector is enabled.
          example: true
          type: boolean
        id:
          description: Unique ID of the True SSO Connector.
          example: 6f85b3a5-e7d0-4ad6-a1e3-37168dd1ed50
          type: string
        name:
          description: True SSO connector name.
          example: true-sso.example.com
          type: string
        primary_enrollment_server:
          $ref: '#/components/schemas/EnrollmentServerDetails'
        secondary_enrollment_server:
          $ref: '#/components/schemas/EnrollmentServerDetails'
        status:
          description: |-
            Overall status of the True SSO connector.
            * OK: All the components of the True SSO connector are fine.
            * WARN: At least one component of the True SSO connector has a warning.
            * ERROR: At least one component of the True SSO connector has an error.
          enum:
          - OK
          - WARN
          - ERROR
          example: OK
          type: string
        template_name:
          description: Unique name for the True SSO template.
          example: TrueSSO Template
          type: string
        template_status:
          description: |-
            The state of the template health, taken as the most severe reported by one of the enrollment servers.
            * OK: The state of the template is OK as reported by the enrollment servers.
            * WARN: At least one enrollment server reports a warning on this template.
            * ERROR: At least one enrollment server reports an error on this template.
          enum:
          - OK
          - WARN
          - ERROR
          example: OK
          type: string
      required:
      - ad_domain_dns_name
      - ad_domain_id
      - ad_domain_status
      - certificate_server_details
      - enabled
      - id
      - name
      - primary_enrollment_server
      - status
      - template_name
      - template_status
      title: TrueSSOMonitorInfo
      type: object
    VCLimits:
      description: Information about the limits configured for Virtual Center
      example:
        instant_clone_engine_provisioning_limit: 20
        power_operations_limit: 50
        provisioning_limit: 20
      properties:
        instant_clone_engine_provisioning_limit:
          description: Maximum concurrent instant clone engine provisioning operations.
            This property has a default value of 20. This property has a minimum value
            of 1.
          example: 20
          format: int32
          type: integer
        power_operations_limit:
          description: Maximum concurrent virtual center power operations. This property
            has a default value of 50. This property has a minimum value of 1.
          example: 50
          format: int32
          type: integer
        provisioning_limit:
          description: Maximum concurrent virtual center provisioning operations.
            This property has a default value of 20. This property has a minimum value
            of 1.
          example: 20
          format: int32
          type: integer
      required:
      - instant_clone_engine_provisioning_limit
      - power_operations_limit
      - provisioning_limit
      title: VCLimits
      type: object
    VCMonitorConnectionServer:
      description: Information about connection to Virtual Center from Connection
        Server.
      example:
        certificate:
          valid: true
          valid_to: 1561939200000
          valid_from: 1561939200000
        name: cs1.example.com
        id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
        thumbprint_accepted: true
        status: OK
      properties:
        certificate:
          $ref: '#/components/schemas/CertificateMonitorInfo'
        id:
          description: Unique ID of the Connection Server.
          example: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          type: string
        name:
          description: Connection server host name or IP address.
          example: cs1.example.com
          type: string
        status:
          description: |-
            Status of the Virtual Center Connection with respect to this Connection Server.
            * OK: The connection to Virtual Center server is working properly.
            * DOWN: The connection to Virtual Center server is down.
            * RECONNECTING: The connection to Virtual Center server was lost and is being reconnected to.
            * UNKNOWN: Connection state to Virtual Center server is unknown.
            * INVALID_CREDENTIALS: The supplied credentials cannot be used to authenticate to the Virtual Center server.
            * CANNOT_LOGIN: The connection server cannot login to the Virtual Center server.
            * NOT_YET_CONNECTED: Connection server has not yet connected to Virtual Center server.
          enum:
          - OK
          - DOWN
          - RECONNECTING
          - UNKNOWN
          - INVALID_CREDENTIALS
          - CANNOT_LOGIN
          - NOT_YET_CONNECTED
          example: OK
          type: string
        thumbprint_accepted:
          description: Indicates if the thumbprints of the Virtual Center was accepted.
          example: true
          type: boolean
      required:
      - id
      - name
      - status
      - thumbprint_accepted
      title: VCMonitorConnectionServer
      type: object
    VCMonitorConnectionServerV2:
      description: Information about connection to Virtual Center from Connection
        Server.
      example:
        certificate:
          valid: true
          valid_to: 1561939200000
          valid_from: 1561939200000
        last_updated_timestamp: 1582029025748
        name: cs1.example.com
        id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
        thumbprint_accepted: true
        status: OK
      properties:
        certificate:
          $ref: '#/components/schemas/CertificateMonitorInfo'
        id:
          description: Unique ID of the Connection Server.
          example: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          type: string
        last_updated_timestamp:
          description: The timestamp in milliseconds when the last update was obtained.
            Measured as epoch time.
          example: 1582029025748
          format: int64
          type: integer
        name:
          description: Connection server host name or IP address.
          example: cs1.example.com
          type: string
        status:
          description: |-
            Status of the Virtual Center Connection with respect to this Connection Server.
            * OK: The connection to Virtual Center server is working properly.
            * DOWN: The connection to Virtual Center server is down.
            * RECONNECTING: The connection to Virtual Center server was lost and is being reconnected to.
            * UNKNOWN: Connection state to Virtual Center server is unknown.
            * INVALID_CREDENTIALS: The supplied credentials cannot be used to authenticate to the Virtual Center server.
            * CANNOT_LOGIN: The connection server cannot login to the Virtual Center server.
            * NOT_YET_CONNECTED: Connection server has not yet connected to Virtual Center server.
          enum:
          - OK
          - DOWN
          - RECONNECTING
          - UNKNOWN
          - INVALID_CREDENTIALS
          - CANNOT_LOGIN
          - NOT_YET_CONNECTED
          example: OK
          type: string
        thumbprint_accepted:
          description: Indicates if the thumbprints of the Virtual Center was accepted.
          example: true
          type: boolean
      required:
      - id
      - name
      - status
      - thumbprint_accepted
      title: VCMonitorConnectionServerV2
      type: object
    VCMonitorDatastore:
      description: Information about the datastore of the host(s) connected to the
        given Virtual Center.
      example:
        capacity_mb: 12345
        free_space_mb: 12345
        details:
          path: /datacenter1/vsandatastore
          name: vsandatastore
          url: ds:///vmfs/volumes/vsan:52654c2aa8e79416-8ea7a3309e82c7b7/
        type: VSAN
        status: ACCESSIBLE
      properties:
        capacity_mb:
          description: The capacity of the datastore in megabytes.
          example: 12345
          format: int32
          type: integer
        details:
          $ref: '#/components/schemas/VCMonitorDatastoreDetails'
        free_space_mb:
          description: The free space on the datastore in megabytes.
          example: 12345
          format: int32
          type: integer
        status:
          description: |-
            Status of the datastore.
            * ACCESSIBLE: The datastore is accessible.
            * NOT_ACCESSIBLE: The datastore is not accessible.
          enum:
          - ACCESSIBLE
          - NOT_ACCESSIBLE
          example: ACCESSIBLE
          type: string
        type:
          description: |-
            Type of the datastore.
            * VMFS: VMFS datastore.
            * VSAN: VSAN datastore.
          enum:
          - VMFS
          - VSAN
          example: VSAN
          type: string
      required:
      - capacity_mb
      - details
      - free_space_mb
      - status
      - type
      title: VCMonitorDatastore
      type: object
    VCMonitorDatastoreDetails:
      description: Details about the datastore.
      example:
        path: /datacenter1/vsandatastore
        name: vsandatastore
        url: ds:///vmfs/volumes/vsan:52654c2aa8e79416-8ea7a3309e82c7b7/
      properties:
        name:
          description: Datastore name.
          example: vsandatastore
          type: string
        path:
          description: Path to the datastore.
          example: /datacenter1/vsandatastore
          type: string
        url:
          description: Unique locator for datastore.
          example: ds:///vmfs/volumes/vsan:52654c2aa8e79416-8ea7a3309e82c7b7/
          type: string
      required:
      - name
      - path
      - url
      title: VCMonitorDatastoreDetails
      type: object
    VCMonitorDetails:
      description: Details about the Virtual Center.
      example:
        build: 12345678.0.1
        api_version: "6.5"
        version: 6.5.0
      properties:
        api_version:
          description: API Version of the Virtual Center.
          example: "6.5"
          type: string
        build:
          description: Build number of the Virtual Center.
          example: 12345678.0.1
          type: string
        version:
          description: Version of the Virtual Center.
          example: 6.5.0
          type: string
      required:
      - api_version
      - build
      - version
      title: VCMonitorDetails
      type: object
    VCMonitorHost:
      description: Information about the host connected to a Virtual Center.
      example:
        details:
          cluster_name: cluster-1
          vgpu_types:
          - vgpu_types
          - vgpu_types
          name: host1.example.com
          api_version: "6.5"
          version: 6.5.0
        memory_size_mb: 12345
        cpu_mhz: 2194
        cpu_core_count: 16
        status: CONNECTED
      properties:
        cpu_core_count:
          description: Number of physical CPU cores on the host.
          example: 16
          format: int32
          type: integer
        cpu_mhz:
          description: CPU speed per core in Mhz. This might be an averaged value
            if the speed is not uniform across all cores.
          example: 2194
          format: int32
          type: integer
        details:
          $ref: '#/components/schemas/VCMonitorHostDetails'
        memory_size_mb:
          description: The physical memory size in mega bytes.
          example: 12345
          format: int32
          type: integer
        status:
          description: |-
            Status of the host connection.
            * CONNECTED: The host is successfully connected to Virtual Center server.
            * DISCONNECTED: The host is disconnected from Virtual Center server.
            * NOT_RESPONDING: The host is not responding.
          enum:
          - CONNECTED
          - DISCONNECTED
          - NOT_RESPONDING
          example: CONNECTED
          type: string
      required:
      - details
      - status
      title: VCMonitorHost
      type: object
    VCMonitorHostDetails:
      description: Details of the ESX host of the Virtual Center.
      example:
        cluster_name: cluster-1
        vgpu_types:
        - vgpu_types
        - vgpu_types
        name: host1.example.com
        api_version: "6.5"
        version: 6.5.0
      properties:
        api_version:
          description: API Version of the ESX Host.
          example: "6.5"
          type: string
        cluster_name:
          description: Name of the cluster of the ESX Host in the Virtual Center.
          example: cluster-1
          type: string
        name:
          description: ESX Host name or IP address.
          example: host1.example.com
          type: string
        version:
          description: ESX Host version.
          example: 6.5.0
          type: string
        vgpu_types:
          description: Types of vGPUs supported by this host.
          items:
            type: string
          type: array
      required:
      - api_version
      - cluster_name
      - name
      - version
      title: VCMonitorHostDetails
      type: object
    VMFolderInfo:
      description: Information related to VM folder.
      example:
        path: /Datacenter/vm/Discovered virtual machine
        vcenter_id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
        children: []
        incompatible_reasons:
        - IN_USE
        - IN_USE
        name: Discovered virtual machine
        id: group-v1
        type: FOLDER
        datacenter_id: datacenter-1
      properties:
        children:
          description: Child nodes of the VM folder.
          example: []
          items:
            $ref: '#/components/schemas/VMFolderInfo'
          type: array
        datacenter_id:
          description: Datacenter id for this VM folder.
          example: datacenter-1
          type: string
        id:
          description: Unique ID representing the VM folder.
          example: group-v1
          type: string
        incompatible_reasons:
          description: Reasons that may preclude this VM folder from being used in
            desktop pool or farm.
          items:
            enum:
            - IN_USE
            - REPLICA_FOLDER
            type: string
          type: array
        name:
          description: VM folder name.
          example: Discovered virtual machine
          type: string
        path:
          description: VM folder path.
          example: /Datacenter/vm/Discovered virtual machine
          type: string
        type:
          description: |-
            VM folder type.
            * DATACENTER: A datacenter that serves as a folder suitable for use in desktop pool/farm.
            * FOLDER: A regular folder suitable for use in desktop pool/farm.
            * OTHER: Other folder type that cannot be used in desktop pool/farm.
          enum:
          - DATACENTER
          - FOLDER
          - OTHER
          example: FOLDER
          type: string
        vcenter_id:
          description: Virtual Center id for this VM folder.
          example: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          type: string
      title: VMFolderInfo
      type: object
    VMTemplateInfo:
      description: Information related to VM template.
      example:
        operating_system_display_name: Microsoft Windows 10 (64-bit)
        path: /Datacenter/vm/Templates/Win10Template
        vcenter_id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
        incompatible_reasons:
        - UNSUPPORTED_OS
        - UNSUPPORTED_OS
        vgpu_type: vgpu_type
        disk_size_in_bytes: 42949672960
        name: Win10Template
        memory_mb: 4096
        operating_system: WINDOWS_10
        id: vm-1
        datacenter_id: datacenter-1
      properties:
        datacenter_id:
          description: Datacenter id for this VM template.
          example: datacenter-1
          type: string
        disk_size_in_bytes:
          description: Sum of capacities of all the virtual disks in the template,
            in bytes.
          example: 42949672960
          format: int64
          type: integer
        id:
          description: Unique ID representing a VM template.
          example: vm-1
          type: string
        incompatible_reasons:
          description: Reasons that may preclude this VM template from being used
            in full clone desktop pool creation.
          items:
            enum:
            - UNSUPPORTED_OS
            type: string
          type: array
        memory_mb:
          description: Memory size of the VM template, in MB
          example: 4096
          format: int32
          type: integer
        name:
          description: VM template name.
          example: Win10Template
          type: string
        operating_system:
          description: |-
            Operating system.
            * UNKNOWN: Unknown
            * WINDOWS_XP: Windows XP
            * WINDOWS_VISTA: Windows Vista
            * WINDOWS_7: Windows 7
            * WINDOWS_8: Windows 8
            * WINDOWS_10: Windows 10
            * WINDOWS_SERVER_2003: Windows Server 2003
            * WINDOWS_SERVER_2008: Windows Server 2008
            * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2
            * WINDOWS_SERVER_2012: Windows Server 2012
            * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2
            * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above
            * LINUX_OTHER: Linux (other)
            * LINUX_SERVER_OTHER: Linux server (other)
            * LINUX_UBUNTU: Linux (Ubuntu)
            * LINUX_RHEL: Linux (Red Hat Enterprise)
            * LINUX_SUSE: Linux (Suse)
            * LINUX_CENTOS: Linux (CentOS)
          enum:
          - UNKNOWN
          - WINDOWS_XP
          - WINDOWS_VISTA
          - WINDOWS_7
          - WINDOWS_8
          - WINDOWS_10
          - WINDOWS_SERVER_2003
          - WINDOWS_SERVER_2008
          - WINDOWS_SERVER_2008_R2
          - WINDOWS_SERVER_2012
          - WINDOWS_SERVER_2012_R2
          - WINDOWS_SERVER_2016_OR_ABOVE
          - LINUX_OTHER
          - LINUX_SERVER_OTHER
          - LINUX_UBUNTU
          - LINUX_RHEL
          - LINUX_SUSE
          - LINUX_CENTOS
          example: WINDOWS_10
          type: string
        operating_system_display_name:
          description: Operating system display name from Virtual Center.
          example: Microsoft Windows 10 (64-bit)
          type: string
        path:
          description: VM template path.
          example: /Datacenter/vm/Templates/Win10Template
          type: string
        vcenter_id:
          description: ID of the vCenter to which this VM template belongs to.
          example: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          type: string
        vgpu_type:
          description: NVIDIA GRID vGPU type configured on this VM template.
          type: string
      required:
      - datacenter_id
      - disk_size_in_bytes
      - id
      - incompatible_reasons
      - memory_mb
      - name
      - operating_system
      - operating_system_display_name
      - path
      - vcenter_id
      title: VMTemplateInfo
      type: object
    ViewComposerMonitorConnectionServer:
      description: Information about the View Composer connection from connection
        server.
      example:
        certificate:
          valid: true
          valid_to: 1561939200000
          valid_from: 1561939200000
        name: cs1.example.com
        id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
        thumbprint_accepted: false
        status: OK
      properties:
        certificate:
          $ref: '#/components/schemas/CertificateMonitorInfo'
        id:
          description: Unique ID of the Connection Server.
          example: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          type: string
        name:
          description: Connection server host name or IP address.
          example: cs1.example.com
          type: string
        status:
          description: |-
            Status of the View Composer with respect to this Connection Server.
            * OK: The connection to View Composer server is working properly.
            * MALFORMED_URL: The connection to View Composer server was not possible due to a malformed URL.
            * ERROR: Error occurred when connecting to View Composer server.
            * CERT_ERROR: Certificate validation error when connecting to the View Composer server.
          enum:
          - OK
          - MALFORMED_URL
          - ERROR
          - CERT_ERROR
          example: OK
          type: string
        thumbprint_accepted:
          description: Indicates if the thumbprint of the View Composer was accepted.
          example: false
          type: boolean
      required:
      - id
      - name
      - status
      - thumbprint_accepted
      title: ViewComposerMonitorConnectionServer
      type: object
    ViewComposerMonitorConnectionServerV2:
      description: Information about the View Composer connection from connection
        server.
      example:
        certificate:
          valid: true
          valid_to: 1561939200000
          valid_from: 1561939200000
        last_updated_timestamp: 1582029025748
        name: cs1.example.com
        id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
        thumbprint_accepted: false
        status: OK
      properties:
        certificate:
          $ref: '#/components/schemas/CertificateMonitorInfo'
        id:
          description: Unique ID of the Connection Server.
          example: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          type: string
        last_updated_timestamp:
          description: The timestamp in milliseconds when the last update was obtained.
            Measured as epoch time.
          example: 1582029025748
          format: int64
          type: integer
        name:
          description: Connection server host name or IP address.
          example: cs1.example.com
          type: string
        status:
          description: |-
            Status of the View Composer with respect to this Connection Server.
            * OK: The connection to View Composer server is working properly.
            * MALFORMED_URL: The connection to View Composer server was not possible due to a malformed URL.
            * ERROR: Error occurred when connecting to View Composer server.
            * CERT_ERROR: Certificate validation error when connecting to the View Composer server.
          enum:
          - OK
          - MALFORMED_URL
          - ERROR
          - CERT_ERROR
          example: OK
          type: string
        thumbprint_accepted:
          description: Indicates if the thumbprint of the View Composer was accepted.
          example: false
          type: boolean
      required:
      - id
      - name
      - status
      - thumbprint_accepted
      title: ViewComposerMonitorConnectionServerV2
      type: object
    ViewComposerMonitorDetails:
      description: Details of the View Composer.
      example:
        build: "1234567"
        min_vc_version: "5.5"
        min_esx_version: "5.5"
        api_verion: "3.5"
        referenced_vcs:
        - referenced_vcs
        - referenced_vcs
        version: 7.9.0.12345
      properties:
        api_verion:
          description: The version of the View Composer API used to communicate with
            the View Composer server.
          example: "3.5"
          type: string
        build:
          description: The build of the View Composer server.
          example: "1234567"
          type: string
        min_esx_version:
          description: The minimum ESX version required for compatibility with this
            View Composer server.
          example: "5.5"
          type: string
        min_vc_version:
          description: The minimum Virtual Center version required for compatibility
            with this View Composer server.
          example: "5.5"
          type: string
        referenced_vcs:
          description: The Virtual Center servers referencing to this View Composer.
          items:
            type: string
          type: array
        version:
          description: The version of the View Composer server.
          example: 7.9.0.12345
          type: string
      required:
      - api_verion
      - build
      - min_esx_version
      - min_vc_version
      - referenced_vcs
      - version
      title: ViewComposerMonitorDetails
      type: object
    ViewComposerMonitorInfo:
      description: Monitoring information related to View Composer.
      example:
        port: 18443
        name: composer1.example.com
        details:
          build: "1234567"
          min_vc_version: "5.5"
          min_esx_version: "5.5"
          api_verion: "3.5"
          referenced_vcs:
          - referenced_vcs
          - referenced_vcs
          version: 7.9.0.12345
        connection_servers:
        - certificate:
            valid: true
            valid_to: 1561939200000
            valid_from: 1561939200000
          name: cs1.example.com
          id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          thumbprint_accepted: false
          status: OK
        - certificate:
            valid: true
            valid_to: 1561939200000
            valid_from: 1561939200000
          name: cs1.example.com
          id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          thumbprint_accepted: false
          status: OK
      properties:
        connection_servers:
          description: Information about the View Composer connections from each of
            the connection servers.
          items:
            $ref: '#/components/schemas/ViewComposerMonitorConnectionServer'
          type: array
        details:
          $ref: '#/components/schemas/ViewComposerMonitorDetails'
        name:
          description: View Composer server host name or IP address.
          example: composer1.example.com
          type: string
        port:
          description: View Composer server port number.
          example: 18443
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: int32
          maximum: 65535
          minimum: 0
          type: integer
      required:
      - connection_servers
      - details
      - name
      - port
      title: ViewComposerMonitorInfo
      type: object
    ViewComposerMonitorInfoV2:
      description: Monitoring information related to View Composer.
      example:
        port: 18443
        name: composer1.example.com
        details:
          build: "1234567"
          min_vc_version: "5.5"
          min_esx_version: "5.5"
          api_verion: "3.5"
          referenced_vcs:
          - referenced_vcs
          - referenced_vcs
          version: 7.9.0.12345
        connection_servers:
        - certificate:
            valid: true
            valid_to: 1561939200000
            valid_from: 1561939200000
          last_updated_timestamp: 1582029025748
          name: cs1.example.com
          id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          thumbprint_accepted: false
          status: OK
        - certificate:
            valid: true
            valid_to: 1561939200000
            valid_from: 1561939200000
          last_updated_timestamp: 1582029025748
          name: cs1.example.com
          id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          thumbprint_accepted: false
          status: OK
      properties:
        connection_servers:
          description: Information about the View Composer connections from each of
            the connection servers.
          items:
            $ref: '#/components/schemas/ViewComposerMonitorConnectionServerV2'
          type: array
        details:
          $ref: '#/components/schemas/ViewComposerMonitorDetails'
        name:
          description: View Composer server host name or IP address.
          example: composer1.example.com
          type: string
        port:
          description: View Composer server port number.
          example: 18443
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: int32
          maximum: 65535
          minimum: 0
          type: integer
      required:
      - connection_servers
      - details
      - name
      - port
      title: ViewComposerMonitorInfoV2
      type: object
    ViewStorageAcceleratorBlackoutTimeSettings:
      description: Fields for specifying blackout time for View Storage Accelerator.
        Storage accelerator regeneration and VM disk space reclamation do not occur
        during blackout times. The same blackout policy applies to both operations.
      example:
        start_time: 10:00
        end_time: 22:00
        days:
        - MONDAY
        - MONDAY
      properties:
        days:
          description: List of days for a given range of time.
          items:
            enum:
            - MONDAY
            - TUESDAY
            - WEDNESDAY
            - THURSDAY
            - FRIDAY
            - SATURDAY
            - SUNDAY
            - ALL
            type: string
          type: array
        end_time:
          description: Ending time for the blackout in 24-hour format.
          example: 22:00
          type: string
        start_time:
          description: Starting time for the blackout in 24-hour format.
          example: 10:00
          type: string
      title: ViewStorageAcceleratorBlackoutTimeSettings
      type: object
    VirtualCenterInfo:
      description: Information related to Virtual Center.
      example:
        server_name: vc1.example.com
        use_ssl: true
        user_name: administrator@vsphere.local
        vmc_deployment: false
        description: Virtual Center Server
        display_name: vc1.example.com
        storage_accelerator_data:
          default_cache_size_mb: 1024
          host_overrides:
          - path: /path/host
            cache_size_mb: 2048
          - path: /path/host
            cache_size_mb: 2048
          enabled: false
        version: 6.5.0
        enabled: true
        certificate_override:
          certificate: certificate
          type: PEM
        port: 443
        se_sparse_reclamation_enabled: true
        id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
        instance_uuid: 6605d116-d1b5-4810-8e3a-b710b30993da
        limits:
          instant_clone_engine_provisioning_limit: 20
          power_operations_limit: 50
          provisioning_limit: 20
      properties:
        certificate_override:
          $ref: '#/components/schemas/CertificateOverrideData'
        description:
          description: Human readable description of the Virtual Center instance.
          example: Virtual Center Server
          type: string
        display_name:
          description: Human readable name of the Virtual Center instance.
          example: vc1.example.com
          type: string
        enabled:
          description: Indicates if the virtual center is enabled.
          example: true
          type: boolean
        id:
          description: Unique ID of the Virtual Center.
          example: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          type: string
        instance_uuid:
          description: Virtual center's instanceUuid.
          example: 6605d116-d1b5-4810-8e3a-b710b30993da
          type: string
        limits:
          $ref: '#/components/schemas/VCLimits'
        port:
          description: Port of the virtual center to connect to.
          example: 443
          format: int32
          type: integer
        se_sparse_reclamation_enabled:
          description: Indicates if Storage Efficiency Sparse (seSparse) reclamation
            is enabled.
          example: true
          type: boolean
        server_name:
          description: Virtual Center's server name or IP address.
          example: vc1.example.com
          type: string
        storage_accelerator_data:
          $ref: '#/components/schemas/StorageAcceleratorData'
        use_ssl:
          description: Indicates if SSL should be used when connecting to the server.
          example: true
          type: boolean
        user_name:
          description: User name to use for the connection.
          example: administrator@vsphere.local
          type: string
        version:
          description: Version of the Virtual Center.
          example: 6.5.0
          type: string
        vmc_deployment:
          description: Indicates if virtual center is deployed in VMC.
          example: false
          type: boolean
      required:
      - enabled
      - id
      - limits
      - port
      - se_sparse_reclamation_enabled
      - server_name
      - storage_accelerator_data
      - use_ssl
      - user_name
      - version
      title: VirtualCenterInfo
      type: object
    VirtualCenterMonitorInfo:
      description: Monitoring information related to a Virtual Center
      example:
        hosts:
        - details:
            cluster_name: cluster-1
            vgpu_types:
            - vgpu_types
            - vgpu_types
            name: host1.example.com
            api_version: "6.5"
            version: 6.5.0
          memory_size_mb: 12345
          cpu_mhz: 2194
          cpu_core_count: 16
          status: CONNECTED
        - details:
            cluster_name: cluster-1
            vgpu_types:
            - vgpu_types
            - vgpu_types
            name: host1.example.com
            api_version: "6.5"
            version: 6.5.0
          memory_size_mb: 12345
          cpu_mhz: 2194
          cpu_core_count: 16
          status: CONNECTED
        desktops_count: 0
        name: vc1.example.com
        details:
          build: 12345678.0.1
          api_version: "6.5"
          version: 6.5.0
        datastores:
        - capacity_mb: 12345
          free_space_mb: 12345
          details:
            path: /datacenter1/vsandatastore
            name: vsandatastore
            url: ds:///vmfs/volumes/vsan:52654c2aa8e79416-8ea7a3309e82c7b7/
          type: VSAN
          status: ACCESSIBLE
        - capacity_mb: 12345
          free_space_mb: 12345
          details:
            path: /datacenter1/vsandatastore
            name: vsandatastore
            url: ds:///vmfs/volumes/vsan:52654c2aa8e79416-8ea7a3309e82c7b7/
          type: VSAN
          status: ACCESSIBLE
        id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
        connection_servers:
        - certificate:
            valid: true
            valid_to: 1561939200000
            valid_from: 1561939200000
          name: cs1.example.com
          id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          thumbprint_accepted: true
          status: OK
        - certificate:
            valid: true
            valid_to: 1561939200000
            valid_from: 1561939200000
          name: cs1.example.com
          id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          thumbprint_accepted: true
          status: OK
      properties:
        connection_servers:
          description: Information about the Virtual Center connections from each
            of the connection servers.
          items:
            $ref: '#/components/schemas/VCMonitorConnectionServer'
          type: array
        datastores:
          description: Information about the datastores of the Virtual Center.
          items:
            $ref: '#/components/schemas/VCMonitorDatastore'
          type: array
        desktops_count:
          description: Number of Desktop Pools And Farms managed by the virtual center.
          format: int32
          type: integer
        details:
          $ref: '#/components/schemas/VCMonitorDetails'
        hosts:
          description: Information about the ESX hosts added in the Virtual Center.
          items:
            $ref: '#/components/schemas/VCMonitorHost'
          type: array
        id:
          description: Unique ID of the Virtual Center.
          example: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          type: string
        name:
          description: Virtual Center server name or IP address.
          example: vc1.example.com
          type: string
      required:
      - connection_servers
      - datastores
      - desktops_count
      - details
      - hosts
      - id
      - name
      title: VirtualCenterMonitorInfo
      type: object
    VirtualCenterMonitorInfoV2:
      description: Monitoring information related to a Virtual Center
      example:
        desktop_pools_and_farms_count: 0
        hosts:
        - details:
            cluster_name: cluster-1
            vgpu_types:
            - vgpu_types
            - vgpu_types
            name: host1.example.com
            api_version: "6.5"
            version: 6.5.0
          memory_size_mb: 12345
          cpu_mhz: 2194
          cpu_core_count: 16
          status: CONNECTED
        - details:
            cluster_name: cluster-1
            vgpu_types:
            - vgpu_types
            - vgpu_types
            name: host1.example.com
            api_version: "6.5"
            version: 6.5.0
          memory_size_mb: 12345
          cpu_mhz: 2194
          cpu_core_count: 16
          status: CONNECTED
        name: vc1.example.com
        details:
          build: 12345678.0.1
          api_version: "6.5"
          version: 6.5.0
        datastores:
        - capacity_mb: 12345
          free_space_mb: 12345
          details:
            path: /datacenter1/vsandatastore
            name: vsandatastore
            url: ds:///vmfs/volumes/vsan:52654c2aa8e79416-8ea7a3309e82c7b7/
          type: VSAN
          status: ACCESSIBLE
        - capacity_mb: 12345
          free_space_mb: 12345
          details:
            path: /datacenter1/vsandatastore
            name: vsandatastore
            url: ds:///vmfs/volumes/vsan:52654c2aa8e79416-8ea7a3309e82c7b7/
          type: VSAN
          status: ACCESSIBLE
        id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
        connection_servers:
        - certificate:
            valid: true
            valid_to: 1561939200000
            valid_from: 1561939200000
          last_updated_timestamp: 1582029025748
          name: cs1.example.com
          id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          thumbprint_accepted: true
          status: OK
        - certificate:
            valid: true
            valid_to: 1561939200000
            valid_from: 1561939200000
          last_updated_timestamp: 1582029025748
          name: cs1.example.com
          id: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          thumbprint_accepted: true
          status: OK
      properties:
        connection_servers:
          description: Information about the Virtual Center connections from each
            of the connection servers.
          items:
            $ref: '#/components/schemas/VCMonitorConnectionServerV2'
          type: array
        datastores:
          description: Information about the datastores of the Virtual Center.
          items:
            $ref: '#/components/schemas/VCMonitorDatastore'
          type: array
        desktop_pools_and_farms_count:
          description: Number of Desktop Pools And Farms managed by the virtual center
          format: int32
          type: integer
        details:
          $ref: '#/components/schemas/VCMonitorDetails'
        hosts:
          description: Information about the ESX hosts added in the Virtual Center.
          items:
            $ref: '#/components/schemas/VCMonitorHost'
          type: array
        id:
          description: Unique ID of the Virtual Center.
          example: d0325b13-2bf1-4fa4-b027-e780004f2d1e
          type: string
        name:
          description: Virtual Center server name or IP address.
          example: vc1.example.com
          type: string
      required:
      - connection_servers
      - datastores
      - desktop_pools_and_farms_count
      - details
      - hosts
      - id
      - name
      title: VirtualCenterMonitorInfoV2
      type: object
    VirtualDiskData:
      description: Information related to a virtual disk.
      example:
        path: /path/host
        capacity_mb: 102400
        datastore_path: datastore1
      properties:
        capacity_mb:
          description: The disk capacity in MB.
          example: 102400
          format: int64
          type: integer
        datastore_path:
          description: The virtual disk's datastore.
          example: datastore1
          type: string
        path:
          description: The virtual disk path.
          example: /path/host
          type: string
      required:
      - capacity_mb
      - datastore_path
      - path
      title: VirtualDiskData
      type: object
    VirtualMachineInfo:
      description: Information related to a Virtual Machine.
      properties:
        hardware_version:
          description: Hardware version for this VM.
          format: int32
          type: integer
        id:
          description: Unique ID representing a VM.
          example: vm-416
          type: string
        incompatible_reasons:
          description: Reasons that may preclude this Virtual Machine from having
            its snapshots used in linked or instant clone desktop or farm.
          items:
            enum:
            - IN_USE_BY_LOCAL_DESKTOP_POOL
            - IN_USE_BY_NON_LOCAL_DESKTOP_POOL
            - VIEW_COMPOSER_REPLICA
            - VIEW_COMPOSER_BASE_IMAGE
            - UNSUPPORTED_OS
            - INCOMPATIBLE_GRID_VGPUS
            - INSTANT_INTERNAL
            - INSTANT_CLONE_BASE_IMAGE
            type: string
          type: array
        name:
          description: VM name.
          example: Win10
          type: string
        operating_system:
          description: |-
            Operating system.
            * UNKNOWN: Unknown
            * WINDOWS_XP: Windows XP
            * WINDOWS_VISTA: Windows Vista
            * WINDOWS_7: Windows 7
            * WINDOWS_8: Windows 8
            * WINDOWS_10: Windows 10
            * WINDOWS_SERVER_2003: Windows Server 2003
            * WINDOWS_SERVER_2008: Windows Server 2008
            * WINDOWS_SERVER_2008_R2: Windows Server 2008 R2
            * WINDOWS_SERVER_2012: Windows Server 2012
            * WINDOWS_SERVER_2012_R2: Windows Server 2012 R2
            * WINDOWS_SERVER_2016_OR_ABOVE: Windows Server 2016 or above
            * LINUX_OTHER: Linux (other)
            * LINUX_SERVER_OTHER: Linux server (other)
            * LINUX_UBUNTU: Linux (Ubuntu)
            * LINUX_RHEL: Linux (Red Hat Enterprise)
            * LINUX_SUSE: Linux (Suse)
            * LINUX_CENTOS: Linux (CentOS)
          enum:
          - UNKNOWN
          - WINDOWS_XP
          - WINDOWS_VISTA
          - WINDOWS_7
          - WINDOWS_8
          - WINDOWS_10
          - WINDOWS_SERVER_2003
          - WINDOWS_SERVER_2008
          - WINDOWS_SERVER_2008_R2
          - WINDOWS_SERVER_2012
          - WINDOWS_SERVER_2012_R2
          - WINDOWS_SERVER_2016_OR_ABOVE
          - LINUX_OTHER
          - LINUX_SERVER_OTHER
          - LINUX_UBUNTU
          - LINUX_RHEL
          - LINUX_SUSE
          - LINUX_CENTOS
          example: WINDOWS_10
          type: string
        operating_system_display_name:
          description: Operating system display name from Virtual Center.
          example: Microsoft Windows 10 (64-bit)
          type: string
        path:
          description: VM path.
          example: /Datacenter/vm/VMs/Win10
          type: string
        v_gputype:
          description: Virtual GPU type.
          example: datacenter-1
          type: string
      required:
      - hardware_version
      - id
      - name
      - operating_system
      - operating_system_display_name
      - path
      - v_gputype
      title: VirtualMachineInfo
      type: object
  securitySchemes:
    Bearer:
      in: header
      name: Authorization
      type: apiKey
