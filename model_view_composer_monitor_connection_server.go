/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the ViewComposerMonitorConnectionServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewComposerMonitorConnectionServer{}

// ViewComposerMonitorConnectionServer Information about the View Composer connection from connection server.
type ViewComposerMonitorConnectionServer struct {
	Certificate *CertificateMonitorInfo `json:"certificate,omitempty"`
	// Unique ID of the Connection Server.
	Id *string `json:"id,omitempty"`
	// Connection server host name or IP address.
	Name *string `json:"name,omitempty"`
	// Status of the View Composer with respect to this Connection Server. * OK: The connection to View Composer server is working properly. * MALFORMED_URL: The connection to View Composer server was not possible due to a malformed URL. * ERROR: Error occurred when connecting to View Composer server. * CERT_ERROR: Certificate validation error when connecting to the View Composer server.
	Status *string `json:"status,omitempty"`
	// Indicates if the thumbprint of the View Composer was accepted.
	ThumbprintAccepted *bool `json:"thumbprint_accepted,omitempty"`
}

// NewViewComposerMonitorConnectionServer instantiates a new ViewComposerMonitorConnectionServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewComposerMonitorConnectionServer() *ViewComposerMonitorConnectionServer {
	this := ViewComposerMonitorConnectionServer{}
	return &this
}

// NewViewComposerMonitorConnectionServerWithDefaults instantiates a new ViewComposerMonitorConnectionServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewComposerMonitorConnectionServerWithDefaults() *ViewComposerMonitorConnectionServer {
	this := ViewComposerMonitorConnectionServer{}
	return &this
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *ViewComposerMonitorConnectionServer) GetCertificate() CertificateMonitorInfo {
	if o == nil || IsNil(o.Certificate) {
		var ret CertificateMonitorInfo
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewComposerMonitorConnectionServer) GetCertificateOk() (*CertificateMonitorInfo, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *ViewComposerMonitorConnectionServer) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given CertificateMonitorInfo and assigns it to the Certificate field.
func (o *ViewComposerMonitorConnectionServer) SetCertificate(v CertificateMonitorInfo) {
	o.Certificate = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ViewComposerMonitorConnectionServer) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewComposerMonitorConnectionServer) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ViewComposerMonitorConnectionServer) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ViewComposerMonitorConnectionServer) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ViewComposerMonitorConnectionServer) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewComposerMonitorConnectionServer) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ViewComposerMonitorConnectionServer) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ViewComposerMonitorConnectionServer) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ViewComposerMonitorConnectionServer) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewComposerMonitorConnectionServer) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ViewComposerMonitorConnectionServer) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ViewComposerMonitorConnectionServer) SetStatus(v string) {
	o.Status = &v
}

// GetThumbprintAccepted returns the ThumbprintAccepted field value if set, zero value otherwise.
func (o *ViewComposerMonitorConnectionServer) GetThumbprintAccepted() bool {
	if o == nil || IsNil(o.ThumbprintAccepted) {
		var ret bool
		return ret
	}
	return *o.ThumbprintAccepted
}

// GetThumbprintAcceptedOk returns a tuple with the ThumbprintAccepted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewComposerMonitorConnectionServer) GetThumbprintAcceptedOk() (*bool, bool) {
	if o == nil || IsNil(o.ThumbprintAccepted) {
		return nil, false
	}
	return o.ThumbprintAccepted, true
}

// HasThumbprintAccepted returns a boolean if a field has been set.
func (o *ViewComposerMonitorConnectionServer) HasThumbprintAccepted() bool {
	if o != nil && !IsNil(o.ThumbprintAccepted) {
		return true
	}

	return false
}

// SetThumbprintAccepted gets a reference to the given bool and assigns it to the ThumbprintAccepted field.
func (o *ViewComposerMonitorConnectionServer) SetThumbprintAccepted(v bool) {
	o.ThumbprintAccepted = &v
}

func (o ViewComposerMonitorConnectionServer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewComposerMonitorConnectionServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.ThumbprintAccepted) {
		toSerialize["thumbprint_accepted"] = o.ThumbprintAccepted
	}
	return toSerialize, nil
}

type NullableViewComposerMonitorConnectionServer struct {
	value *ViewComposerMonitorConnectionServer
	isSet bool
}

func (v NullableViewComposerMonitorConnectionServer) Get() *ViewComposerMonitorConnectionServer {
	return v.value
}

func (v *NullableViewComposerMonitorConnectionServer) Set(val *ViewComposerMonitorConnectionServer) {
	v.value = val
	v.isSet = true
}

func (v NullableViewComposerMonitorConnectionServer) IsSet() bool {
	return v.isSet
}

func (v *NullableViewComposerMonitorConnectionServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewComposerMonitorConnectionServer(val *ViewComposerMonitorConnectionServer) *NullableViewComposerMonitorConnectionServer {
	return &NullableViewComposerMonitorConnectionServer{value: val, isSet: true}
}

func (v NullableViewComposerMonitorConnectionServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewComposerMonitorConnectionServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


