/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2106
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// SettingsInfo Information related to Settings.
type SettingsInfo struct {
	FeatureSettings  FeatureSettings  `json:"feature_settings"`
	GeneralSettings  GeneralSettings  `json:"general_settings"`
	SecuritySettings SecuritySettings `json:"security_settings"`
}

// NewSettingsInfo instantiates a new SettingsInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingsInfo(featureSettings FeatureSettings, generalSettings GeneralSettings, securitySettings SecuritySettings) *SettingsInfo {
	this := SettingsInfo{}
	this.FeatureSettings = featureSettings
	this.GeneralSettings = generalSettings
	this.SecuritySettings = securitySettings
	return &this
}

// NewSettingsInfoWithDefaults instantiates a new SettingsInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsInfoWithDefaults() *SettingsInfo {
	this := SettingsInfo{}
	return &this
}

// GetFeatureSettings returns the FeatureSettings field value
func (o *SettingsInfo) GetFeatureSettings() FeatureSettings {
	if o == nil {
		var ret FeatureSettings
		return ret
	}

	return o.FeatureSettings
}

// GetFeatureSettingsOk returns a tuple with the FeatureSettings field value
// and a boolean to check if the value has been set.
func (o *SettingsInfo) GetFeatureSettingsOk() (*FeatureSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeatureSettings, true
}

// SetFeatureSettings sets field value
func (o *SettingsInfo) SetFeatureSettings(v FeatureSettings) {
	o.FeatureSettings = v
}

// GetGeneralSettings returns the GeneralSettings field value
func (o *SettingsInfo) GetGeneralSettings() GeneralSettings {
	if o == nil {
		var ret GeneralSettings
		return ret
	}

	return o.GeneralSettings
}

// GetGeneralSettingsOk returns a tuple with the GeneralSettings field value
// and a boolean to check if the value has been set.
func (o *SettingsInfo) GetGeneralSettingsOk() (*GeneralSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GeneralSettings, true
}

// SetGeneralSettings sets field value
func (o *SettingsInfo) SetGeneralSettings(v GeneralSettings) {
	o.GeneralSettings = v
}

// GetSecuritySettings returns the SecuritySettings field value
func (o *SettingsInfo) GetSecuritySettings() SecuritySettings {
	if o == nil {
		var ret SecuritySettings
		return ret
	}

	return o.SecuritySettings
}

// GetSecuritySettingsOk returns a tuple with the SecuritySettings field value
// and a boolean to check if the value has been set.
func (o *SettingsInfo) GetSecuritySettingsOk() (*SecuritySettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecuritySettings, true
}

// SetSecuritySettings sets field value
func (o *SettingsInfo) SetSecuritySettings(v SecuritySettings) {
	o.SecuritySettings = v
}

func (o SettingsInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["feature_settings"] = o.FeatureSettings
	}
	if true {
		toSerialize["general_settings"] = o.GeneralSettings
	}
	if true {
		toSerialize["security_settings"] = o.SecuritySettings
	}
	return json.Marshal(toSerialize)
}

type NullableSettingsInfo struct {
	value *SettingsInfo
	isSet bool
}

func (v NullableSettingsInfo) Get() *SettingsInfo {
	return v.value
}

func (v *NullableSettingsInfo) Set(val *SettingsInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingsInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingsInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingsInfo(val *SettingsInfo) *NullableSettingsInfo {
	return &NullableSettingsInfo{value: val, isSet: true}
}

func (v NullableSettingsInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingsInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
