/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PermissionCreateSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissionCreateSpec{}

// PermissionCreateSpec Information about permission.
type PermissionCreateSpec struct {
	// The AD User or Group SID for this permission.
	AdUserOrGroupId string `json:"ad_user_or_group_id"`
	// The federation access group ID for this permission.
	FederationAccessGroupId *string `json:"federation_access_group_id,omitempty"`
	// The local access group ID for this permission.
	LocalAccessGroupId *string `json:"local_access_group_id,omitempty"`
	// Role ID for this permission.
	RoleId string `json:"role_id"`
}

type _PermissionCreateSpec PermissionCreateSpec

// NewPermissionCreateSpec instantiates a new PermissionCreateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionCreateSpec(adUserOrGroupId string, roleId string) *PermissionCreateSpec {
	this := PermissionCreateSpec{}
	this.AdUserOrGroupId = adUserOrGroupId
	this.RoleId = roleId
	return &this
}

// NewPermissionCreateSpecWithDefaults instantiates a new PermissionCreateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionCreateSpecWithDefaults() *PermissionCreateSpec {
	this := PermissionCreateSpec{}
	return &this
}

// GetAdUserOrGroupId returns the AdUserOrGroupId field value
func (o *PermissionCreateSpec) GetAdUserOrGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AdUserOrGroupId
}

// GetAdUserOrGroupIdOk returns a tuple with the AdUserOrGroupId field value
// and a boolean to check if the value has been set.
func (o *PermissionCreateSpec) GetAdUserOrGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdUserOrGroupId, true
}

// SetAdUserOrGroupId sets field value
func (o *PermissionCreateSpec) SetAdUserOrGroupId(v string) {
	o.AdUserOrGroupId = v
}

// GetFederationAccessGroupId returns the FederationAccessGroupId field value if set, zero value otherwise.
func (o *PermissionCreateSpec) GetFederationAccessGroupId() string {
	if o == nil || IsNil(o.FederationAccessGroupId) {
		var ret string
		return ret
	}
	return *o.FederationAccessGroupId
}

// GetFederationAccessGroupIdOk returns a tuple with the FederationAccessGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionCreateSpec) GetFederationAccessGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.FederationAccessGroupId) {
		return nil, false
	}
	return o.FederationAccessGroupId, true
}

// HasFederationAccessGroupId returns a boolean if a field has been set.
func (o *PermissionCreateSpec) HasFederationAccessGroupId() bool {
	if o != nil && !IsNil(o.FederationAccessGroupId) {
		return true
	}

	return false
}

// SetFederationAccessGroupId gets a reference to the given string and assigns it to the FederationAccessGroupId field.
func (o *PermissionCreateSpec) SetFederationAccessGroupId(v string) {
	o.FederationAccessGroupId = &v
}

// GetLocalAccessGroupId returns the LocalAccessGroupId field value if set, zero value otherwise.
func (o *PermissionCreateSpec) GetLocalAccessGroupId() string {
	if o == nil || IsNil(o.LocalAccessGroupId) {
		var ret string
		return ret
	}
	return *o.LocalAccessGroupId
}

// GetLocalAccessGroupIdOk returns a tuple with the LocalAccessGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionCreateSpec) GetLocalAccessGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.LocalAccessGroupId) {
		return nil, false
	}
	return o.LocalAccessGroupId, true
}

// HasLocalAccessGroupId returns a boolean if a field has been set.
func (o *PermissionCreateSpec) HasLocalAccessGroupId() bool {
	if o != nil && !IsNil(o.LocalAccessGroupId) {
		return true
	}

	return false
}

// SetLocalAccessGroupId gets a reference to the given string and assigns it to the LocalAccessGroupId field.
func (o *PermissionCreateSpec) SetLocalAccessGroupId(v string) {
	o.LocalAccessGroupId = &v
}

// GetRoleId returns the RoleId field value
func (o *PermissionCreateSpec) GetRoleId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value
// and a boolean to check if the value has been set.
func (o *PermissionCreateSpec) GetRoleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoleId, true
}

// SetRoleId sets field value
func (o *PermissionCreateSpec) SetRoleId(v string) {
	o.RoleId = v
}

func (o PermissionCreateSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissionCreateSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ad_user_or_group_id"] = o.AdUserOrGroupId
	if !IsNil(o.FederationAccessGroupId) {
		toSerialize["federation_access_group_id"] = o.FederationAccessGroupId
	}
	if !IsNil(o.LocalAccessGroupId) {
		toSerialize["local_access_group_id"] = o.LocalAccessGroupId
	}
	toSerialize["role_id"] = o.RoleId
	return toSerialize, nil
}

func (o *PermissionCreateSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ad_user_or_group_id",
		"role_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPermissionCreateSpec := _PermissionCreateSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPermissionCreateSpec)

	if err != nil {
		return err
	}

	*o = PermissionCreateSpec(varPermissionCreateSpec)

	return err
}

type NullablePermissionCreateSpec struct {
	value *PermissionCreateSpec
	isSet bool
}

func (v NullablePermissionCreateSpec) Get() *PermissionCreateSpec {
	return v.value
}

func (v *NullablePermissionCreateSpec) Set(val *PermissionCreateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionCreateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionCreateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionCreateSpec(val *PermissionCreateSpec) *NullablePermissionCreateSpec {
	return &NullablePermissionCreateSpec{value: val, isSet: true}
}

func (v NullablePermissionCreateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionCreateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


