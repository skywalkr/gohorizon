/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the ADDomainMonitorInfoV3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ADDomainMonitorInfoV3{}

// ADDomainMonitorInfoV3 Monitoring information related to AD Domain.
type ADDomainMonitorInfoV3 struct {
	// Information about the AD Domain connections from each of the connection servers.
	ConnectionServers []ADDomainMonitorConnectionServerV2 `json:"connection_servers,omitempty"`
	// The DNS name for the domain.
	DnsName *string `json:"dns_name,omitempty"`
	// AD Domain Type. * CONNECTION_SERVER_DOMAIN: The domain having trust with connection server domain. * NO_TRUST_DOMAIN: The domain not having any trust with connection server domain.
	DomainType *string `json:"domain_type,omitempty"`
	// The NetBIOS name for the domain.
	NetbiosName *string `json:"netbios_name,omitempty"`
	// If this is an NT4 domain or not.
	Nt4Domain *bool `json:"nt4_domain,omitempty"`
	// Service accounts for the domain.
	ServiceAccounts []ServiceAccount `json:"service_accounts,omitempty"`
}

// NewADDomainMonitorInfoV3 instantiates a new ADDomainMonitorInfoV3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewADDomainMonitorInfoV3() *ADDomainMonitorInfoV3 {
	this := ADDomainMonitorInfoV3{}
	return &this
}

// NewADDomainMonitorInfoV3WithDefaults instantiates a new ADDomainMonitorInfoV3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewADDomainMonitorInfoV3WithDefaults() *ADDomainMonitorInfoV3 {
	this := ADDomainMonitorInfoV3{}
	return &this
}

// GetConnectionServers returns the ConnectionServers field value if set, zero value otherwise.
func (o *ADDomainMonitorInfoV3) GetConnectionServers() []ADDomainMonitorConnectionServerV2 {
	if o == nil || IsNil(o.ConnectionServers) {
		var ret []ADDomainMonitorConnectionServerV2
		return ret
	}
	return o.ConnectionServers
}

// GetConnectionServersOk returns a tuple with the ConnectionServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADDomainMonitorInfoV3) GetConnectionServersOk() ([]ADDomainMonitorConnectionServerV2, bool) {
	if o == nil || IsNil(o.ConnectionServers) {
		return nil, false
	}
	return o.ConnectionServers, true
}

// HasConnectionServers returns a boolean if a field has been set.
func (o *ADDomainMonitorInfoV3) HasConnectionServers() bool {
	if o != nil && !IsNil(o.ConnectionServers) {
		return true
	}

	return false
}

// SetConnectionServers gets a reference to the given []ADDomainMonitorConnectionServerV2 and assigns it to the ConnectionServers field.
func (o *ADDomainMonitorInfoV3) SetConnectionServers(v []ADDomainMonitorConnectionServerV2) {
	o.ConnectionServers = v
}

// GetDnsName returns the DnsName field value if set, zero value otherwise.
func (o *ADDomainMonitorInfoV3) GetDnsName() string {
	if o == nil || IsNil(o.DnsName) {
		var ret string
		return ret
	}
	return *o.DnsName
}

// GetDnsNameOk returns a tuple with the DnsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADDomainMonitorInfoV3) GetDnsNameOk() (*string, bool) {
	if o == nil || IsNil(o.DnsName) {
		return nil, false
	}
	return o.DnsName, true
}

// HasDnsName returns a boolean if a field has been set.
func (o *ADDomainMonitorInfoV3) HasDnsName() bool {
	if o != nil && !IsNil(o.DnsName) {
		return true
	}

	return false
}

// SetDnsName gets a reference to the given string and assigns it to the DnsName field.
func (o *ADDomainMonitorInfoV3) SetDnsName(v string) {
	o.DnsName = &v
}

// GetDomainType returns the DomainType field value if set, zero value otherwise.
func (o *ADDomainMonitorInfoV3) GetDomainType() string {
	if o == nil || IsNil(o.DomainType) {
		var ret string
		return ret
	}
	return *o.DomainType
}

// GetDomainTypeOk returns a tuple with the DomainType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADDomainMonitorInfoV3) GetDomainTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DomainType) {
		return nil, false
	}
	return o.DomainType, true
}

// HasDomainType returns a boolean if a field has been set.
func (o *ADDomainMonitorInfoV3) HasDomainType() bool {
	if o != nil && !IsNil(o.DomainType) {
		return true
	}

	return false
}

// SetDomainType gets a reference to the given string and assigns it to the DomainType field.
func (o *ADDomainMonitorInfoV3) SetDomainType(v string) {
	o.DomainType = &v
}

// GetNetbiosName returns the NetbiosName field value if set, zero value otherwise.
func (o *ADDomainMonitorInfoV3) GetNetbiosName() string {
	if o == nil || IsNil(o.NetbiosName) {
		var ret string
		return ret
	}
	return *o.NetbiosName
}

// GetNetbiosNameOk returns a tuple with the NetbiosName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADDomainMonitorInfoV3) GetNetbiosNameOk() (*string, bool) {
	if o == nil || IsNil(o.NetbiosName) {
		return nil, false
	}
	return o.NetbiosName, true
}

// HasNetbiosName returns a boolean if a field has been set.
func (o *ADDomainMonitorInfoV3) HasNetbiosName() bool {
	if o != nil && !IsNil(o.NetbiosName) {
		return true
	}

	return false
}

// SetNetbiosName gets a reference to the given string and assigns it to the NetbiosName field.
func (o *ADDomainMonitorInfoV3) SetNetbiosName(v string) {
	o.NetbiosName = &v
}

// GetNt4Domain returns the Nt4Domain field value if set, zero value otherwise.
func (o *ADDomainMonitorInfoV3) GetNt4Domain() bool {
	if o == nil || IsNil(o.Nt4Domain) {
		var ret bool
		return ret
	}
	return *o.Nt4Domain
}

// GetNt4DomainOk returns a tuple with the Nt4Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADDomainMonitorInfoV3) GetNt4DomainOk() (*bool, bool) {
	if o == nil || IsNil(o.Nt4Domain) {
		return nil, false
	}
	return o.Nt4Domain, true
}

// HasNt4Domain returns a boolean if a field has been set.
func (o *ADDomainMonitorInfoV3) HasNt4Domain() bool {
	if o != nil && !IsNil(o.Nt4Domain) {
		return true
	}

	return false
}

// SetNt4Domain gets a reference to the given bool and assigns it to the Nt4Domain field.
func (o *ADDomainMonitorInfoV3) SetNt4Domain(v bool) {
	o.Nt4Domain = &v
}

// GetServiceAccounts returns the ServiceAccounts field value if set, zero value otherwise.
func (o *ADDomainMonitorInfoV3) GetServiceAccounts() []ServiceAccount {
	if o == nil || IsNil(o.ServiceAccounts) {
		var ret []ServiceAccount
		return ret
	}
	return o.ServiceAccounts
}

// GetServiceAccountsOk returns a tuple with the ServiceAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADDomainMonitorInfoV3) GetServiceAccountsOk() ([]ServiceAccount, bool) {
	if o == nil || IsNil(o.ServiceAccounts) {
		return nil, false
	}
	return o.ServiceAccounts, true
}

// HasServiceAccounts returns a boolean if a field has been set.
func (o *ADDomainMonitorInfoV3) HasServiceAccounts() bool {
	if o != nil && !IsNil(o.ServiceAccounts) {
		return true
	}

	return false
}

// SetServiceAccounts gets a reference to the given []ServiceAccount and assigns it to the ServiceAccounts field.
func (o *ADDomainMonitorInfoV3) SetServiceAccounts(v []ServiceAccount) {
	o.ServiceAccounts = v
}

func (o ADDomainMonitorInfoV3) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ADDomainMonitorInfoV3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConnectionServers) {
		toSerialize["connection_servers"] = o.ConnectionServers
	}
	if !IsNil(o.DnsName) {
		toSerialize["dns_name"] = o.DnsName
	}
	if !IsNil(o.DomainType) {
		toSerialize["domain_type"] = o.DomainType
	}
	if !IsNil(o.NetbiosName) {
		toSerialize["netbios_name"] = o.NetbiosName
	}
	if !IsNil(o.Nt4Domain) {
		toSerialize["nt4_domain"] = o.Nt4Domain
	}
	if !IsNil(o.ServiceAccounts) {
		toSerialize["service_accounts"] = o.ServiceAccounts
	}
	return toSerialize, nil
}

type NullableADDomainMonitorInfoV3 struct {
	value *ADDomainMonitorInfoV3
	isSet bool
}

func (v NullableADDomainMonitorInfoV3) Get() *ADDomainMonitorInfoV3 {
	return v.value
}

func (v *NullableADDomainMonitorInfoV3) Set(val *ADDomainMonitorInfoV3) {
	v.value = val
	v.isSet = true
}

func (v NullableADDomainMonitorInfoV3) IsSet() bool {
	return v.isSet
}

func (v *NullableADDomainMonitorInfoV3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableADDomainMonitorInfoV3(val *ADDomainMonitorInfoV3) *NullableADDomainMonitorInfoV3 {
	return &NullableADDomainMonitorInfoV3{value: val, isSet: true}
}

func (v NullableADDomainMonitorInfoV3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableADDomainMonitorInfoV3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


