/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the SAMLAuthenticatorInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SAMLAuthenticatorInfo{}

// SAMLAuthenticatorInfo Information about SAML Authenticator.
type SAMLAuthenticatorInfo struct {
	// The administrator URL for the SAML authenticator.
	AdministratorUrl *string `json:"administrator_url,omitempty"`
	// The type of SAML authenticator. * STATIC: Static SAML Authenticator, which contains SAML metadata. * DYNAMIC: Dynamic SAML Authenticator fetches metadata dynamically using a provided URL.
	AuthenticatorType *string `json:"authenticator_type,omitempty"`
	// SAML Authenticator certificate.
	Certificate *string `json:"certificate,omitempty"`
	// Type of Certificate. * PEM: PEM encoded certificate type * UNKNOWN: Unknown certificate type
	CertificateType *string `json:"certificate_type,omitempty"`
	// The description of this SAML authenticator.
	Description *string `json:"description,omitempty"`
	// Unique ID representing this SAML Authenticator.
	Id *string `json:"id,omitempty"`
	// The label for this SAML authenticator.
	Label *string `json:"label,omitempty"`
	// The metadata URL of the SAML Authenticator.
	MetadataUrl *string `json:"metadata_url,omitempty"`
	// Indicates how password present in SAML assertion is handled if True SSO is triggered. * REMOVE: Remove any passwords. * PASSTHRU: Pass through any passwords. * ERROR: Error if there is a password.
	PasswordMode *string `json:"password_mode,omitempty"`
	// The static metadata of a SAML authenticator which contains an entity id, signing keys, and encryption keys for processing SAML authentication.
	StaticMetadata *string `json:"static_metadata,omitempty"`
	// Indicates how True SSO is triggered on sessions using this authenticator. * DISABLED: Do not use True SSO. * ENABLE_IF_NO_PASSWORD: If no password is supplied, use a valid (domain matching) connector if it exists. * REQUIRE_IF_NO_PASSWORD: If no password is supplied, use and require a valid (domain matching) connector. * ENABLE_ALWAYS: Regardless of a password, use a valid (domain matching) connector if it exists. * REQUIRE_ALWAYS: Regardless of a password, use and require a valid (domain matching) connector.
	TriggerMode *string `json:"trigger_mode,omitempty"`
}

// NewSAMLAuthenticatorInfo instantiates a new SAMLAuthenticatorInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSAMLAuthenticatorInfo() *SAMLAuthenticatorInfo {
	this := SAMLAuthenticatorInfo{}
	return &this
}

// NewSAMLAuthenticatorInfoWithDefaults instantiates a new SAMLAuthenticatorInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSAMLAuthenticatorInfoWithDefaults() *SAMLAuthenticatorInfo {
	this := SAMLAuthenticatorInfo{}
	return &this
}

// GetAdministratorUrl returns the AdministratorUrl field value if set, zero value otherwise.
func (o *SAMLAuthenticatorInfo) GetAdministratorUrl() string {
	if o == nil || IsNil(o.AdministratorUrl) {
		var ret string
		return ret
	}
	return *o.AdministratorUrl
}

// GetAdministratorUrlOk returns a tuple with the AdministratorUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAMLAuthenticatorInfo) GetAdministratorUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AdministratorUrl) {
		return nil, false
	}
	return o.AdministratorUrl, true
}

// HasAdministratorUrl returns a boolean if a field has been set.
func (o *SAMLAuthenticatorInfo) HasAdministratorUrl() bool {
	if o != nil && !IsNil(o.AdministratorUrl) {
		return true
	}

	return false
}

// SetAdministratorUrl gets a reference to the given string and assigns it to the AdministratorUrl field.
func (o *SAMLAuthenticatorInfo) SetAdministratorUrl(v string) {
	o.AdministratorUrl = &v
}

// GetAuthenticatorType returns the AuthenticatorType field value if set, zero value otherwise.
func (o *SAMLAuthenticatorInfo) GetAuthenticatorType() string {
	if o == nil || IsNil(o.AuthenticatorType) {
		var ret string
		return ret
	}
	return *o.AuthenticatorType
}

// GetAuthenticatorTypeOk returns a tuple with the AuthenticatorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAMLAuthenticatorInfo) GetAuthenticatorTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthenticatorType) {
		return nil, false
	}
	return o.AuthenticatorType, true
}

// HasAuthenticatorType returns a boolean if a field has been set.
func (o *SAMLAuthenticatorInfo) HasAuthenticatorType() bool {
	if o != nil && !IsNil(o.AuthenticatorType) {
		return true
	}

	return false
}

// SetAuthenticatorType gets a reference to the given string and assigns it to the AuthenticatorType field.
func (o *SAMLAuthenticatorInfo) SetAuthenticatorType(v string) {
	o.AuthenticatorType = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *SAMLAuthenticatorInfo) GetCertificate() string {
	if o == nil || IsNil(o.Certificate) {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAMLAuthenticatorInfo) GetCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *SAMLAuthenticatorInfo) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *SAMLAuthenticatorInfo) SetCertificate(v string) {
	o.Certificate = &v
}

// GetCertificateType returns the CertificateType field value if set, zero value otherwise.
func (o *SAMLAuthenticatorInfo) GetCertificateType() string {
	if o == nil || IsNil(o.CertificateType) {
		var ret string
		return ret
	}
	return *o.CertificateType
}

// GetCertificateTypeOk returns a tuple with the CertificateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAMLAuthenticatorInfo) GetCertificateTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateType) {
		return nil, false
	}
	return o.CertificateType, true
}

// HasCertificateType returns a boolean if a field has been set.
func (o *SAMLAuthenticatorInfo) HasCertificateType() bool {
	if o != nil && !IsNil(o.CertificateType) {
		return true
	}

	return false
}

// SetCertificateType gets a reference to the given string and assigns it to the CertificateType field.
func (o *SAMLAuthenticatorInfo) SetCertificateType(v string) {
	o.CertificateType = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SAMLAuthenticatorInfo) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAMLAuthenticatorInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SAMLAuthenticatorInfo) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SAMLAuthenticatorInfo) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SAMLAuthenticatorInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAMLAuthenticatorInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SAMLAuthenticatorInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SAMLAuthenticatorInfo) SetId(v string) {
	o.Id = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *SAMLAuthenticatorInfo) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAMLAuthenticatorInfo) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *SAMLAuthenticatorInfo) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *SAMLAuthenticatorInfo) SetLabel(v string) {
	o.Label = &v
}

// GetMetadataUrl returns the MetadataUrl field value if set, zero value otherwise.
func (o *SAMLAuthenticatorInfo) GetMetadataUrl() string {
	if o == nil || IsNil(o.MetadataUrl) {
		var ret string
		return ret
	}
	return *o.MetadataUrl
}

// GetMetadataUrlOk returns a tuple with the MetadataUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAMLAuthenticatorInfo) GetMetadataUrlOk() (*string, bool) {
	if o == nil || IsNil(o.MetadataUrl) {
		return nil, false
	}
	return o.MetadataUrl, true
}

// HasMetadataUrl returns a boolean if a field has been set.
func (o *SAMLAuthenticatorInfo) HasMetadataUrl() bool {
	if o != nil && !IsNil(o.MetadataUrl) {
		return true
	}

	return false
}

// SetMetadataUrl gets a reference to the given string and assigns it to the MetadataUrl field.
func (o *SAMLAuthenticatorInfo) SetMetadataUrl(v string) {
	o.MetadataUrl = &v
}

// GetPasswordMode returns the PasswordMode field value if set, zero value otherwise.
func (o *SAMLAuthenticatorInfo) GetPasswordMode() string {
	if o == nil || IsNil(o.PasswordMode) {
		var ret string
		return ret
	}
	return *o.PasswordMode
}

// GetPasswordModeOk returns a tuple with the PasswordMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAMLAuthenticatorInfo) GetPasswordModeOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordMode) {
		return nil, false
	}
	return o.PasswordMode, true
}

// HasPasswordMode returns a boolean if a field has been set.
func (o *SAMLAuthenticatorInfo) HasPasswordMode() bool {
	if o != nil && !IsNil(o.PasswordMode) {
		return true
	}

	return false
}

// SetPasswordMode gets a reference to the given string and assigns it to the PasswordMode field.
func (o *SAMLAuthenticatorInfo) SetPasswordMode(v string) {
	o.PasswordMode = &v
}

// GetStaticMetadata returns the StaticMetadata field value if set, zero value otherwise.
func (o *SAMLAuthenticatorInfo) GetStaticMetadata() string {
	if o == nil || IsNil(o.StaticMetadata) {
		var ret string
		return ret
	}
	return *o.StaticMetadata
}

// GetStaticMetadataOk returns a tuple with the StaticMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAMLAuthenticatorInfo) GetStaticMetadataOk() (*string, bool) {
	if o == nil || IsNil(o.StaticMetadata) {
		return nil, false
	}
	return o.StaticMetadata, true
}

// HasStaticMetadata returns a boolean if a field has been set.
func (o *SAMLAuthenticatorInfo) HasStaticMetadata() bool {
	if o != nil && !IsNil(o.StaticMetadata) {
		return true
	}

	return false
}

// SetStaticMetadata gets a reference to the given string and assigns it to the StaticMetadata field.
func (o *SAMLAuthenticatorInfo) SetStaticMetadata(v string) {
	o.StaticMetadata = &v
}

// GetTriggerMode returns the TriggerMode field value if set, zero value otherwise.
func (o *SAMLAuthenticatorInfo) GetTriggerMode() string {
	if o == nil || IsNil(o.TriggerMode) {
		var ret string
		return ret
	}
	return *o.TriggerMode
}

// GetTriggerModeOk returns a tuple with the TriggerMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SAMLAuthenticatorInfo) GetTriggerModeOk() (*string, bool) {
	if o == nil || IsNil(o.TriggerMode) {
		return nil, false
	}
	return o.TriggerMode, true
}

// HasTriggerMode returns a boolean if a field has been set.
func (o *SAMLAuthenticatorInfo) HasTriggerMode() bool {
	if o != nil && !IsNil(o.TriggerMode) {
		return true
	}

	return false
}

// SetTriggerMode gets a reference to the given string and assigns it to the TriggerMode field.
func (o *SAMLAuthenticatorInfo) SetTriggerMode(v string) {
	o.TriggerMode = &v
}

func (o SAMLAuthenticatorInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SAMLAuthenticatorInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdministratorUrl) {
		toSerialize["administrator_url"] = o.AdministratorUrl
	}
	if !IsNil(o.AuthenticatorType) {
		toSerialize["authenticator_type"] = o.AuthenticatorType
	}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.CertificateType) {
		toSerialize["certificate_type"] = o.CertificateType
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.MetadataUrl) {
		toSerialize["metadata_url"] = o.MetadataUrl
	}
	if !IsNil(o.PasswordMode) {
		toSerialize["password_mode"] = o.PasswordMode
	}
	if !IsNil(o.StaticMetadata) {
		toSerialize["static_metadata"] = o.StaticMetadata
	}
	if !IsNil(o.TriggerMode) {
		toSerialize["trigger_mode"] = o.TriggerMode
	}
	return toSerialize, nil
}

type NullableSAMLAuthenticatorInfo struct {
	value *SAMLAuthenticatorInfo
	isSet bool
}

func (v NullableSAMLAuthenticatorInfo) Get() *SAMLAuthenticatorInfo {
	return v.value
}

func (v *NullableSAMLAuthenticatorInfo) Set(val *SAMLAuthenticatorInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSAMLAuthenticatorInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSAMLAuthenticatorInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSAMLAuthenticatorInfo(val *SAMLAuthenticatorInfo) *NullableSAMLAuthenticatorInfo {
	return &NullableSAMLAuthenticatorInfo{value: val, isSet: true}
}

func (v NullableSAMLAuthenticatorInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSAMLAuthenticatorInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


