/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the JWTAuthenticatorInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JWTAuthenticatorInfo{}

// JWTAuthenticatorInfo Information about JWT authenticator.
type JWTAuthenticatorInfo struct {
	// The description of this JWT authenticator.
	Description *string `json:"description,omitempty"`
	// Unique ID of this JWT authenticator.
	Id *string `json:"id,omitempty"`
	// The issuer of this JWT authenticator. The configured value is matched against the \"iss\" claim of the JWT.
	Issuer *string `json:"issuer,omitempty"`
	// The name of this JWT authenticator.
	Name *string `json:"name,omitempty"`
	// The stored public keys for this JWT authenticator.
	PublicKeys []string `json:"public_keys,omitempty"`
	// The URL to fetch the public keys for this authenticator.
	Url *string `json:"url,omitempty"`
}

// NewJWTAuthenticatorInfo instantiates a new JWTAuthenticatorInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJWTAuthenticatorInfo() *JWTAuthenticatorInfo {
	this := JWTAuthenticatorInfo{}
	return &this
}

// NewJWTAuthenticatorInfoWithDefaults instantiates a new JWTAuthenticatorInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJWTAuthenticatorInfoWithDefaults() *JWTAuthenticatorInfo {
	this := JWTAuthenticatorInfo{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *JWTAuthenticatorInfo) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JWTAuthenticatorInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *JWTAuthenticatorInfo) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *JWTAuthenticatorInfo) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *JWTAuthenticatorInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JWTAuthenticatorInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *JWTAuthenticatorInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *JWTAuthenticatorInfo) SetId(v string) {
	o.Id = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *JWTAuthenticatorInfo) GetIssuer() string {
	if o == nil || IsNil(o.Issuer) {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JWTAuthenticatorInfo) GetIssuerOk() (*string, bool) {
	if o == nil || IsNil(o.Issuer) {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *JWTAuthenticatorInfo) HasIssuer() bool {
	if o != nil && !IsNil(o.Issuer) {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *JWTAuthenticatorInfo) SetIssuer(v string) {
	o.Issuer = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *JWTAuthenticatorInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JWTAuthenticatorInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *JWTAuthenticatorInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *JWTAuthenticatorInfo) SetName(v string) {
	o.Name = &v
}

// GetPublicKeys returns the PublicKeys field value if set, zero value otherwise.
func (o *JWTAuthenticatorInfo) GetPublicKeys() []string {
	if o == nil || IsNil(o.PublicKeys) {
		var ret []string
		return ret
	}
	return o.PublicKeys
}

// GetPublicKeysOk returns a tuple with the PublicKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JWTAuthenticatorInfo) GetPublicKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.PublicKeys) {
		return nil, false
	}
	return o.PublicKeys, true
}

// HasPublicKeys returns a boolean if a field has been set.
func (o *JWTAuthenticatorInfo) HasPublicKeys() bool {
	if o != nil && !IsNil(o.PublicKeys) {
		return true
	}

	return false
}

// SetPublicKeys gets a reference to the given []string and assigns it to the PublicKeys field.
func (o *JWTAuthenticatorInfo) SetPublicKeys(v []string) {
	o.PublicKeys = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *JWTAuthenticatorInfo) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JWTAuthenticatorInfo) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *JWTAuthenticatorInfo) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *JWTAuthenticatorInfo) SetUrl(v string) {
	o.Url = &v
}

func (o JWTAuthenticatorInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JWTAuthenticatorInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Issuer) {
		toSerialize["issuer"] = o.Issuer
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PublicKeys) {
		toSerialize["public_keys"] = o.PublicKeys
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableJWTAuthenticatorInfo struct {
	value *JWTAuthenticatorInfo
	isSet bool
}

func (v NullableJWTAuthenticatorInfo) Get() *JWTAuthenticatorInfo {
	return v.value
}

func (v *NullableJWTAuthenticatorInfo) Set(val *JWTAuthenticatorInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableJWTAuthenticatorInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableJWTAuthenticatorInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJWTAuthenticatorInfo(val *JWTAuthenticatorInfo) *NullableJWTAuthenticatorInfo {
	return &NullableJWTAuthenticatorInfo{value: val, isSet: true}
}

func (v NullableJWTAuthenticatorInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJWTAuthenticatorInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


