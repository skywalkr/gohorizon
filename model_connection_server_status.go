/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2111
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// ConnectionServerStatus CPA status for a connection server.
type ConnectionServerStatus struct {
	// Unique ID of the connection server to which this status pertains.
	Id *string `json:"id,omitempty"`
	// The CPA error message for the connection server if any, is populated, or a success message.
	Message *string `json:"message,omitempty"`
	// Message code of the message. * LMV_OP_OK: Pod Federation operation is successful. * LMV_OP_ERROR: Pod Federation operation failed. * LMV_OP_ERROR_UNKNOWN: Pod Federation operation failed with unknown error. * LMV_OP_CANNOT_APPLY_DATA: Pod Federation operation could not apply data. * LMV_OP_CANNOT_APPLY_SCHEMA: Pod Federation operation could not apply schema. * LMV_OP_FILESYSTEM_ERROR: Pod Federation operation encountered file system error. * LMV_OP_NO_TIME_SYNC: Pod Federation operation encountered time synchronization error. * LMV_OP_NO_PERMISSION: No permission to perform Pod Federation operation. * LMV_OP_REPLICATION_ERROR: Pod Federation operation encountered replication error. * LMV_OP_UNREACHABLE_SERVER: The server is unreachable to perform Pod Federation operation.
	MessageCode *string `json:"message_code,omitempty"`
	// Name of the connection server.
	Name *string `json:"name,omitempty"`
	//  Value between 0 and 100 representing CPA operation completion percentage when connection server status is pending.
	PendingPercentage *int32 `json:"pending_percentage,omitempty"`
	// CPA status of the connection server. * ENABLED: CPA is enabled. * DISABLED: CPA is disabled. * PENDING: CPA is undergoing an operation related to initialization, uninitialization, joining, or unjoining. * ENABLE_ERROR: The connection server has failed to reach the ENABLED status in a timely manner. This may also indicate the current connection server was recently installed. * DISABLE_ERROR: The connection server has failed to reach the DISABLED status in a timely manner.
	Status *string `json:"status,omitempty"`
}

// NewConnectionServerStatus instantiates a new ConnectionServerStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionServerStatus() *ConnectionServerStatus {
	this := ConnectionServerStatus{}
	return &this
}

// NewConnectionServerStatusWithDefaults instantiates a new ConnectionServerStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionServerStatusWithDefaults() *ConnectionServerStatus {
	this := ConnectionServerStatus{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConnectionServerStatus) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerStatus) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConnectionServerStatus) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ConnectionServerStatus) SetId(v string) {
	o.Id = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ConnectionServerStatus) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerStatus) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ConnectionServerStatus) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ConnectionServerStatus) SetMessage(v string) {
	o.Message = &v
}

// GetMessageCode returns the MessageCode field value if set, zero value otherwise.
func (o *ConnectionServerStatus) GetMessageCode() string {
	if o == nil || o.MessageCode == nil {
		var ret string
		return ret
	}
	return *o.MessageCode
}

// GetMessageCodeOk returns a tuple with the MessageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerStatus) GetMessageCodeOk() (*string, bool) {
	if o == nil || o.MessageCode == nil {
		return nil, false
	}
	return o.MessageCode, true
}

// HasMessageCode returns a boolean if a field has been set.
func (o *ConnectionServerStatus) HasMessageCode() bool {
	if o != nil && o.MessageCode != nil {
		return true
	}

	return false
}

// SetMessageCode gets a reference to the given string and assigns it to the MessageCode field.
func (o *ConnectionServerStatus) SetMessageCode(v string) {
	o.MessageCode = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConnectionServerStatus) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerStatus) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConnectionServerStatus) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConnectionServerStatus) SetName(v string) {
	o.Name = &v
}

// GetPendingPercentage returns the PendingPercentage field value if set, zero value otherwise.
func (o *ConnectionServerStatus) GetPendingPercentage() int32 {
	if o == nil || o.PendingPercentage == nil {
		var ret int32
		return ret
	}
	return *o.PendingPercentage
}

// GetPendingPercentageOk returns a tuple with the PendingPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerStatus) GetPendingPercentageOk() (*int32, bool) {
	if o == nil || o.PendingPercentage == nil {
		return nil, false
	}
	return o.PendingPercentage, true
}

// HasPendingPercentage returns a boolean if a field has been set.
func (o *ConnectionServerStatus) HasPendingPercentage() bool {
	if o != nil && o.PendingPercentage != nil {
		return true
	}

	return false
}

// SetPendingPercentage gets a reference to the given int32 and assigns it to the PendingPercentage field.
func (o *ConnectionServerStatus) SetPendingPercentage(v int32) {
	o.PendingPercentage = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ConnectionServerStatus) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerStatus) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ConnectionServerStatus) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ConnectionServerStatus) SetStatus(v string) {
	o.Status = &v
}

func (o ConnectionServerStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.MessageCode != nil {
		toSerialize["message_code"] = o.MessageCode
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.PendingPercentage != nil {
		toSerialize["pending_percentage"] = o.PendingPercentage
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableConnectionServerStatus struct {
	value *ConnectionServerStatus
	isSet bool
}

func (v NullableConnectionServerStatus) Get() *ConnectionServerStatus {
	return v.value
}

func (v *NullableConnectionServerStatus) Set(val *ConnectionServerStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionServerStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionServerStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionServerStatus(val *ConnectionServerStatus) *NullableConnectionServerStatus {
	return &NullableConnectionServerStatus{value: val, isSet: true}
}

func (v NullableConnectionServerStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionServerStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
