/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the TaskInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskInfo{}

// TaskInfo Information related to CPA tasks.
type TaskInfo struct {
	// The category of the task. * POD_FEDERATION_CATEGORY: Category for PodFederation related tasks.
	Category *string `json:"category,omitempty"`
	// Unique ID representing the task.
	Id *string `json:"id,omitempty"`
	// The amount of task completed, in percentage.
	PercentageComplete *int32 `json:"percentage_complete,omitempty"`
	Result *TaskResult `json:"result,omitempty"`
	// The state of the task. * RUNNING: The task is currently running. * WAITING: The task is currently waiting to execute. * COMPLETED: The task execution has completed. * FAILED: The task execution has failed. * PAUSED: The task execution has been paused. * CANCELLED: The task execution has been cancelled.
	Status *string `json:"status,omitempty"`
	// The type of the task. * POD_FEDERATION_INITIALIZING: Task performing PodFederation initialize operation. * POD_FEDERATION_UNINITIALIZING: Task performing PodFederation uninitialize operation. * POD_FEDERATION_JOINING: Task performing PodFederation join operation. * POD_FEDERATION_UNJOINING: Task performing PodFederation unjoin operation.
	Type *string `json:"type,omitempty"`
}

// NewTaskInfo instantiates a new TaskInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskInfo() *TaskInfo {
	this := TaskInfo{}
	return &this
}

// NewTaskInfoWithDefaults instantiates a new TaskInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskInfoWithDefaults() *TaskInfo {
	this := TaskInfo{}
	return &this
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *TaskInfo) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *TaskInfo) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *TaskInfo) SetCategory(v string) {
	o.Category = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TaskInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TaskInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TaskInfo) SetId(v string) {
	o.Id = &v
}

// GetPercentageComplete returns the PercentageComplete field value if set, zero value otherwise.
func (o *TaskInfo) GetPercentageComplete() int32 {
	if o == nil || IsNil(o.PercentageComplete) {
		var ret int32
		return ret
	}
	return *o.PercentageComplete
}

// GetPercentageCompleteOk returns a tuple with the PercentageComplete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetPercentageCompleteOk() (*int32, bool) {
	if o == nil || IsNil(o.PercentageComplete) {
		return nil, false
	}
	return o.PercentageComplete, true
}

// HasPercentageComplete returns a boolean if a field has been set.
func (o *TaskInfo) HasPercentageComplete() bool {
	if o != nil && !IsNil(o.PercentageComplete) {
		return true
	}

	return false
}

// SetPercentageComplete gets a reference to the given int32 and assigns it to the PercentageComplete field.
func (o *TaskInfo) SetPercentageComplete(v int32) {
	o.PercentageComplete = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *TaskInfo) GetResult() TaskResult {
	if o == nil || IsNil(o.Result) {
		var ret TaskResult
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetResultOk() (*TaskResult, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *TaskInfo) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given TaskResult and assigns it to the Result field.
func (o *TaskInfo) SetResult(v TaskResult) {
	o.Result = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TaskInfo) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TaskInfo) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *TaskInfo) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TaskInfo) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskInfo) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TaskInfo) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TaskInfo) SetType(v string) {
	o.Type = &v
}

func (o TaskInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.PercentageComplete) {
		toSerialize["percentage_complete"] = o.PercentageComplete
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableTaskInfo struct {
	value *TaskInfo
	isSet bool
}

func (v NullableTaskInfo) Get() *TaskInfo {
	return v.value
}

func (v *NullableTaskInfo) Set(val *TaskInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskInfo(val *TaskInfo) *NullableTaskInfo {
	return &NullableTaskInfo{value: val, isSet: true}
}

func (v NullableTaskInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


