/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the ConnectionServerInfoV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionServerInfoV2{}

// ConnectionServerInfoV2 Information related to Connection server.
type ConnectionServerInfoV2 struct {
	// This is set only if external_pcoip_url is set and contains a host part that represents an IPv6 address or DNS name.  As legacy clients may not support IPv6 or DNS names for external PCoIP URLs, this IPv4 address, if set, will be presented to them as an alternative. The same port will be used and should not be specified.  If bypass_pcoip_gateway is set to true, this property will not be set.
	AuxillaryExternalPcoipIpv4Address *string `json:"auxillary_external_pcoip_ipv4_address,omitempty"`
	// Indicates whether a bypassing blast secure gateway is enabled for this connection server instance.  If this is set to true, web browsers make direct connections to Horizon machines bypassing connection server.
	BypassAppBlastGateway *bool `json:"bypass_app_blast_gateway,omitempty"`
	// Indicates whether the PCoIP traffic bypasses the secure gateway.
	BypassPcoipGateway *bool `json:"bypass_pcoip_gateway,omitempty"`
	// Indicates whether a secure tunnel on this connection server instance is enabled.  If this is set to false, a secure tunnel on this Connection Server instance is enabled and horizon clents can connect to desktop pools through the secure tunnel,  which carries RDP and other data over HTTPS. PCoIP and HTML Access connections use separate secure gateways.
	BypassTunnel *bool `json:"bypass_tunnel,omitempty"`
	// Cluster name.
	ClusterName *string `json:"cluster_name,omitempty"`
	// Indicates whether only HTML clients use blast secure gateway for this connection server instance.  This property will not be set if bypass_appblast_gateway is set to false.
	DirectHtmlabsg *bool `json:"direct_htmlabsg,omitempty"`
	// Indicates whether the connection server's service principal name will be sent to the client prior to the user authentication.When set to true Connection Server discloses its service principal name to the client.
	DiscloseServicePrincipalName *bool `json:"disclose_service_principal_name,omitempty"`
	// Indicates whether username hints for smart card is enabled.
	EnableSmartCardUserNameHint *bool `json:"enable_smart_card_user_name_hint,omitempty"`
	// Indicate whether the connection server is enabled. A disabled connection server will not accept connection requests from Horizon Clients.
	Enabled *bool `json:"enabled,omitempty"`
	// The Blast External URL enables browser access to Horizon machines through this connection server instance.  To enable Blast, you must install HTML Access.  The Blast External URL must not be load balanced.  If bypass_appblast_gateway is set to true, this property will not be set.
	ExternalAppblastUrl *string `json:"external_appblast_url,omitempty"`
	// Horizon Clients use the PCoIP External URL to establish a PCoIP connection through this Connection Server instance.  The PCoIP External URL must not be load balanced.  If bypass_pcoip_gateway is set to true, this property will not be set.
	ExternalPcoipUrl *string `json:"external_pcoip_url,omitempty"`
	// Horizon Clients use the External URL to establish a secure tunnel to this Connection Server instance.  If a server name is specified, it must be resolvable by each Horizon Client.  The External URL must not be load balanced.  If bypass_tunnel is set to true, this property will not be set.
	ExternalUrl *string `json:"external_url,omitempty"`
	// Indicates whether this server has FIPS mode enabled.
	FipsModeEnabled *bool `json:"fips_mode_enabled,omitempty"`
	// Fully qualified host name.
	Fqhn *string `json:"fqhn,omitempty"`
	GssApiinfo *ConnectionServerGSSAPIInfo `json:"gss_apiinfo,omitempty"`
	// Indicates whether Blast gateway is supported or not.
	HasBlastGatewaySupport *bool `json:"has_blast_gateway_support,omitempty"`
	// Indicates whether PCoIP gateway is supported or not.
	HasPcoipGatewaySupport *bool `json:"has_pcoip_gateway_support,omitempty"`
	// Indicates whether connection server supports HTTP host redirection.
	HostRedirection *bool `json:"host_redirection,omitempty"`
	// Unique Id of the Connection Server.
	Id *string `json:"id,omitempty"`
	// Indicates the Connection Server IP environment. * IPv4: The ip mode is IPv4. * IPv6: The ip mode is IPv6.
	IpMode *string `json:"ip_mode,omitempty"`
	JwtInfo *ConnectionServerJWTInfo `json:"jwt_info,omitempty"`
	LdapBackupInfo *ConnectionServerLdapBackupInfo `json:"ldap_backup_info,omitempty"`
	// List of load balancer host names or IP address.
	LoadBalancerHosts []string `json:"load_balancer_hosts,omitempty"`
	// Indicates whether this is the local connection server that handled the connection server service request.
	LocalConnectionServer *bool `json:"local_connection_server,omitempty"`
	// Indicates whether user is logged off on removal of Smart Card.
	LogoffWhenRemoveSmartCard *bool `json:"logoff_when_remove_smart_card,omitempty"`
	// Indicates whether ENHANCED message security mode is currently supported by this Connection Server.
	MessageSecurityEnhancedModeSupported *bool `json:"message_security_enhanced_mode_supported,omitempty"`
	// The JMS message security public key.
	MsgSecurityPublicKey *string `json:"msg_security_public_key,omitempty"`
	// Name of the Connection Server.
	Name *string `json:"name,omitempty"`
	RadiusInfo *ConnectionServerRADIUSInfo `json:"radius_info,omitempty"`
	// The JMS router SSL thumbprints
	RouterSslThumbprints []string `json:"router_ssl_thumbprints,omitempty"`
	RsaSecureIdInfo *ConnectionServerRSASecureIdInfo `json:"rsa_secure_id_info,omitempty"`
	SamlInfo *ConnectionServerSAMLInfo `json:"saml_info,omitempty"`
	// General URL for the connection server.
	ServerUrl *string `json:"server_url,omitempty"`
	// Smart Card support option. * OPTIONAL: Indicates that the SmartCard usage is optional. * REQUIRED: Indicates that the SmartCard usage is necessary. * OFF: Indicates that the SmartCard usage is not allowed.
	SmartCardSupport *string `json:"smart_card_support,omitempty"`
	// Indicates Smart card authentication configuration for administrators to login. * OPTIONAL: Indicates that the SmartCard usage is optional. * REQUIRED: Indicates that the SmartCard usage is necessary. * OFF: Indicates that the SmartCard usage is not allowed.
	SmartCardSupportForAdmin *string `json:"smart_card_support_for_admin,omitempty"`
	// Tags to restrict accessibility to desktop pools through this server.
	Tags []string `json:"tags,omitempty"`
	UnauthenticatedAccessInfo *ConnectionServerUnauthenticatedAccessInfo `json:"unauthenticated_access_info,omitempty"`
	// Version attribute to indicate functionalities supported by current connection server.
	Version *string `json:"version,omitempty"`
}

// NewConnectionServerInfoV2 instantiates a new ConnectionServerInfoV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionServerInfoV2() *ConnectionServerInfoV2 {
	this := ConnectionServerInfoV2{}
	return &this
}

// NewConnectionServerInfoV2WithDefaults instantiates a new ConnectionServerInfoV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionServerInfoV2WithDefaults() *ConnectionServerInfoV2 {
	this := ConnectionServerInfoV2{}
	return &this
}

// GetAuxillaryExternalPcoipIpv4Address returns the AuxillaryExternalPcoipIpv4Address field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetAuxillaryExternalPcoipIpv4Address() string {
	if o == nil || IsNil(o.AuxillaryExternalPcoipIpv4Address) {
		var ret string
		return ret
	}
	return *o.AuxillaryExternalPcoipIpv4Address
}

// GetAuxillaryExternalPcoipIpv4AddressOk returns a tuple with the AuxillaryExternalPcoipIpv4Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetAuxillaryExternalPcoipIpv4AddressOk() (*string, bool) {
	if o == nil || IsNil(o.AuxillaryExternalPcoipIpv4Address) {
		return nil, false
	}
	return o.AuxillaryExternalPcoipIpv4Address, true
}

// HasAuxillaryExternalPcoipIpv4Address returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasAuxillaryExternalPcoipIpv4Address() bool {
	if o != nil && !IsNil(o.AuxillaryExternalPcoipIpv4Address) {
		return true
	}

	return false
}

// SetAuxillaryExternalPcoipIpv4Address gets a reference to the given string and assigns it to the AuxillaryExternalPcoipIpv4Address field.
func (o *ConnectionServerInfoV2) SetAuxillaryExternalPcoipIpv4Address(v string) {
	o.AuxillaryExternalPcoipIpv4Address = &v
}

// GetBypassAppBlastGateway returns the BypassAppBlastGateway field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetBypassAppBlastGateway() bool {
	if o == nil || IsNil(o.BypassAppBlastGateway) {
		var ret bool
		return ret
	}
	return *o.BypassAppBlastGateway
}

// GetBypassAppBlastGatewayOk returns a tuple with the BypassAppBlastGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetBypassAppBlastGatewayOk() (*bool, bool) {
	if o == nil || IsNil(o.BypassAppBlastGateway) {
		return nil, false
	}
	return o.BypassAppBlastGateway, true
}

// HasBypassAppBlastGateway returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasBypassAppBlastGateway() bool {
	if o != nil && !IsNil(o.BypassAppBlastGateway) {
		return true
	}

	return false
}

// SetBypassAppBlastGateway gets a reference to the given bool and assigns it to the BypassAppBlastGateway field.
func (o *ConnectionServerInfoV2) SetBypassAppBlastGateway(v bool) {
	o.BypassAppBlastGateway = &v
}

// GetBypassPcoipGateway returns the BypassPcoipGateway field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetBypassPcoipGateway() bool {
	if o == nil || IsNil(o.BypassPcoipGateway) {
		var ret bool
		return ret
	}
	return *o.BypassPcoipGateway
}

// GetBypassPcoipGatewayOk returns a tuple with the BypassPcoipGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetBypassPcoipGatewayOk() (*bool, bool) {
	if o == nil || IsNil(o.BypassPcoipGateway) {
		return nil, false
	}
	return o.BypassPcoipGateway, true
}

// HasBypassPcoipGateway returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasBypassPcoipGateway() bool {
	if o != nil && !IsNil(o.BypassPcoipGateway) {
		return true
	}

	return false
}

// SetBypassPcoipGateway gets a reference to the given bool and assigns it to the BypassPcoipGateway field.
func (o *ConnectionServerInfoV2) SetBypassPcoipGateway(v bool) {
	o.BypassPcoipGateway = &v
}

// GetBypassTunnel returns the BypassTunnel field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetBypassTunnel() bool {
	if o == nil || IsNil(o.BypassTunnel) {
		var ret bool
		return ret
	}
	return *o.BypassTunnel
}

// GetBypassTunnelOk returns a tuple with the BypassTunnel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetBypassTunnelOk() (*bool, bool) {
	if o == nil || IsNil(o.BypassTunnel) {
		return nil, false
	}
	return o.BypassTunnel, true
}

// HasBypassTunnel returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasBypassTunnel() bool {
	if o != nil && !IsNil(o.BypassTunnel) {
		return true
	}

	return false
}

// SetBypassTunnel gets a reference to the given bool and assigns it to the BypassTunnel field.
func (o *ConnectionServerInfoV2) SetBypassTunnel(v bool) {
	o.BypassTunnel = &v
}

// GetClusterName returns the ClusterName field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetClusterName() string {
	if o == nil || IsNil(o.ClusterName) {
		var ret string
		return ret
	}
	return *o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetClusterNameOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterName) {
		return nil, false
	}
	return o.ClusterName, true
}

// HasClusterName returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasClusterName() bool {
	if o != nil && !IsNil(o.ClusterName) {
		return true
	}

	return false
}

// SetClusterName gets a reference to the given string and assigns it to the ClusterName field.
func (o *ConnectionServerInfoV2) SetClusterName(v string) {
	o.ClusterName = &v
}

// GetDirectHtmlabsg returns the DirectHtmlabsg field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetDirectHtmlabsg() bool {
	if o == nil || IsNil(o.DirectHtmlabsg) {
		var ret bool
		return ret
	}
	return *o.DirectHtmlabsg
}

// GetDirectHtmlabsgOk returns a tuple with the DirectHtmlabsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetDirectHtmlabsgOk() (*bool, bool) {
	if o == nil || IsNil(o.DirectHtmlabsg) {
		return nil, false
	}
	return o.DirectHtmlabsg, true
}

// HasDirectHtmlabsg returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasDirectHtmlabsg() bool {
	if o != nil && !IsNil(o.DirectHtmlabsg) {
		return true
	}

	return false
}

// SetDirectHtmlabsg gets a reference to the given bool and assigns it to the DirectHtmlabsg field.
func (o *ConnectionServerInfoV2) SetDirectHtmlabsg(v bool) {
	o.DirectHtmlabsg = &v
}

// GetDiscloseServicePrincipalName returns the DiscloseServicePrincipalName field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetDiscloseServicePrincipalName() bool {
	if o == nil || IsNil(o.DiscloseServicePrincipalName) {
		var ret bool
		return ret
	}
	return *o.DiscloseServicePrincipalName
}

// GetDiscloseServicePrincipalNameOk returns a tuple with the DiscloseServicePrincipalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetDiscloseServicePrincipalNameOk() (*bool, bool) {
	if o == nil || IsNil(o.DiscloseServicePrincipalName) {
		return nil, false
	}
	return o.DiscloseServicePrincipalName, true
}

// HasDiscloseServicePrincipalName returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasDiscloseServicePrincipalName() bool {
	if o != nil && !IsNil(o.DiscloseServicePrincipalName) {
		return true
	}

	return false
}

// SetDiscloseServicePrincipalName gets a reference to the given bool and assigns it to the DiscloseServicePrincipalName field.
func (o *ConnectionServerInfoV2) SetDiscloseServicePrincipalName(v bool) {
	o.DiscloseServicePrincipalName = &v
}

// GetEnableSmartCardUserNameHint returns the EnableSmartCardUserNameHint field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetEnableSmartCardUserNameHint() bool {
	if o == nil || IsNil(o.EnableSmartCardUserNameHint) {
		var ret bool
		return ret
	}
	return *o.EnableSmartCardUserNameHint
}

// GetEnableSmartCardUserNameHintOk returns a tuple with the EnableSmartCardUserNameHint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetEnableSmartCardUserNameHintOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSmartCardUserNameHint) {
		return nil, false
	}
	return o.EnableSmartCardUserNameHint, true
}

// HasEnableSmartCardUserNameHint returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasEnableSmartCardUserNameHint() bool {
	if o != nil && !IsNil(o.EnableSmartCardUserNameHint) {
		return true
	}

	return false
}

// SetEnableSmartCardUserNameHint gets a reference to the given bool and assigns it to the EnableSmartCardUserNameHint field.
func (o *ConnectionServerInfoV2) SetEnableSmartCardUserNameHint(v bool) {
	o.EnableSmartCardUserNameHint = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ConnectionServerInfoV2) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetExternalAppblastUrl returns the ExternalAppblastUrl field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetExternalAppblastUrl() string {
	if o == nil || IsNil(o.ExternalAppblastUrl) {
		var ret string
		return ret
	}
	return *o.ExternalAppblastUrl
}

// GetExternalAppblastUrlOk returns a tuple with the ExternalAppblastUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetExternalAppblastUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalAppblastUrl) {
		return nil, false
	}
	return o.ExternalAppblastUrl, true
}

// HasExternalAppblastUrl returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasExternalAppblastUrl() bool {
	if o != nil && !IsNil(o.ExternalAppblastUrl) {
		return true
	}

	return false
}

// SetExternalAppblastUrl gets a reference to the given string and assigns it to the ExternalAppblastUrl field.
func (o *ConnectionServerInfoV2) SetExternalAppblastUrl(v string) {
	o.ExternalAppblastUrl = &v
}

// GetExternalPcoipUrl returns the ExternalPcoipUrl field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetExternalPcoipUrl() string {
	if o == nil || IsNil(o.ExternalPcoipUrl) {
		var ret string
		return ret
	}
	return *o.ExternalPcoipUrl
}

// GetExternalPcoipUrlOk returns a tuple with the ExternalPcoipUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetExternalPcoipUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalPcoipUrl) {
		return nil, false
	}
	return o.ExternalPcoipUrl, true
}

// HasExternalPcoipUrl returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasExternalPcoipUrl() bool {
	if o != nil && !IsNil(o.ExternalPcoipUrl) {
		return true
	}

	return false
}

// SetExternalPcoipUrl gets a reference to the given string and assigns it to the ExternalPcoipUrl field.
func (o *ConnectionServerInfoV2) SetExternalPcoipUrl(v string) {
	o.ExternalPcoipUrl = &v
}

// GetExternalUrl returns the ExternalUrl field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetExternalUrl() string {
	if o == nil || IsNil(o.ExternalUrl) {
		var ret string
		return ret
	}
	return *o.ExternalUrl
}

// GetExternalUrlOk returns a tuple with the ExternalUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetExternalUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalUrl) {
		return nil, false
	}
	return o.ExternalUrl, true
}

// HasExternalUrl returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasExternalUrl() bool {
	if o != nil && !IsNil(o.ExternalUrl) {
		return true
	}

	return false
}

// SetExternalUrl gets a reference to the given string and assigns it to the ExternalUrl field.
func (o *ConnectionServerInfoV2) SetExternalUrl(v string) {
	o.ExternalUrl = &v
}

// GetFipsModeEnabled returns the FipsModeEnabled field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetFipsModeEnabled() bool {
	if o == nil || IsNil(o.FipsModeEnabled) {
		var ret bool
		return ret
	}
	return *o.FipsModeEnabled
}

// GetFipsModeEnabledOk returns a tuple with the FipsModeEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetFipsModeEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.FipsModeEnabled) {
		return nil, false
	}
	return o.FipsModeEnabled, true
}

// HasFipsModeEnabled returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasFipsModeEnabled() bool {
	if o != nil && !IsNil(o.FipsModeEnabled) {
		return true
	}

	return false
}

// SetFipsModeEnabled gets a reference to the given bool and assigns it to the FipsModeEnabled field.
func (o *ConnectionServerInfoV2) SetFipsModeEnabled(v bool) {
	o.FipsModeEnabled = &v
}

// GetFqhn returns the Fqhn field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetFqhn() string {
	if o == nil || IsNil(o.Fqhn) {
		var ret string
		return ret
	}
	return *o.Fqhn
}

// GetFqhnOk returns a tuple with the Fqhn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetFqhnOk() (*string, bool) {
	if o == nil || IsNil(o.Fqhn) {
		return nil, false
	}
	return o.Fqhn, true
}

// HasFqhn returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasFqhn() bool {
	if o != nil && !IsNil(o.Fqhn) {
		return true
	}

	return false
}

// SetFqhn gets a reference to the given string and assigns it to the Fqhn field.
func (o *ConnectionServerInfoV2) SetFqhn(v string) {
	o.Fqhn = &v
}

// GetGssApiinfo returns the GssApiinfo field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetGssApiinfo() ConnectionServerGSSAPIInfo {
	if o == nil || IsNil(o.GssApiinfo) {
		var ret ConnectionServerGSSAPIInfo
		return ret
	}
	return *o.GssApiinfo
}

// GetGssApiinfoOk returns a tuple with the GssApiinfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetGssApiinfoOk() (*ConnectionServerGSSAPIInfo, bool) {
	if o == nil || IsNil(o.GssApiinfo) {
		return nil, false
	}
	return o.GssApiinfo, true
}

// HasGssApiinfo returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasGssApiinfo() bool {
	if o != nil && !IsNil(o.GssApiinfo) {
		return true
	}

	return false
}

// SetGssApiinfo gets a reference to the given ConnectionServerGSSAPIInfo and assigns it to the GssApiinfo field.
func (o *ConnectionServerInfoV2) SetGssApiinfo(v ConnectionServerGSSAPIInfo) {
	o.GssApiinfo = &v
}

// GetHasBlastGatewaySupport returns the HasBlastGatewaySupport field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetHasBlastGatewaySupport() bool {
	if o == nil || IsNil(o.HasBlastGatewaySupport) {
		var ret bool
		return ret
	}
	return *o.HasBlastGatewaySupport
}

// GetHasBlastGatewaySupportOk returns a tuple with the HasBlastGatewaySupport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetHasBlastGatewaySupportOk() (*bool, bool) {
	if o == nil || IsNil(o.HasBlastGatewaySupport) {
		return nil, false
	}
	return o.HasBlastGatewaySupport, true
}

// HasHasBlastGatewaySupport returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasHasBlastGatewaySupport() bool {
	if o != nil && !IsNil(o.HasBlastGatewaySupport) {
		return true
	}

	return false
}

// SetHasBlastGatewaySupport gets a reference to the given bool and assigns it to the HasBlastGatewaySupport field.
func (o *ConnectionServerInfoV2) SetHasBlastGatewaySupport(v bool) {
	o.HasBlastGatewaySupport = &v
}

// GetHasPcoipGatewaySupport returns the HasPcoipGatewaySupport field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetHasPcoipGatewaySupport() bool {
	if o == nil || IsNil(o.HasPcoipGatewaySupport) {
		var ret bool
		return ret
	}
	return *o.HasPcoipGatewaySupport
}

// GetHasPcoipGatewaySupportOk returns a tuple with the HasPcoipGatewaySupport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetHasPcoipGatewaySupportOk() (*bool, bool) {
	if o == nil || IsNil(o.HasPcoipGatewaySupport) {
		return nil, false
	}
	return o.HasPcoipGatewaySupport, true
}

// HasHasPcoipGatewaySupport returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasHasPcoipGatewaySupport() bool {
	if o != nil && !IsNil(o.HasPcoipGatewaySupport) {
		return true
	}

	return false
}

// SetHasPcoipGatewaySupport gets a reference to the given bool and assigns it to the HasPcoipGatewaySupport field.
func (o *ConnectionServerInfoV2) SetHasPcoipGatewaySupport(v bool) {
	o.HasPcoipGatewaySupport = &v
}

// GetHostRedirection returns the HostRedirection field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetHostRedirection() bool {
	if o == nil || IsNil(o.HostRedirection) {
		var ret bool
		return ret
	}
	return *o.HostRedirection
}

// GetHostRedirectionOk returns a tuple with the HostRedirection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetHostRedirectionOk() (*bool, bool) {
	if o == nil || IsNil(o.HostRedirection) {
		return nil, false
	}
	return o.HostRedirection, true
}

// HasHostRedirection returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasHostRedirection() bool {
	if o != nil && !IsNil(o.HostRedirection) {
		return true
	}

	return false
}

// SetHostRedirection gets a reference to the given bool and assigns it to the HostRedirection field.
func (o *ConnectionServerInfoV2) SetHostRedirection(v bool) {
	o.HostRedirection = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ConnectionServerInfoV2) SetId(v string) {
	o.Id = &v
}

// GetIpMode returns the IpMode field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetIpMode() string {
	if o == nil || IsNil(o.IpMode) {
		var ret string
		return ret
	}
	return *o.IpMode
}

// GetIpModeOk returns a tuple with the IpMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetIpModeOk() (*string, bool) {
	if o == nil || IsNil(o.IpMode) {
		return nil, false
	}
	return o.IpMode, true
}

// HasIpMode returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasIpMode() bool {
	if o != nil && !IsNil(o.IpMode) {
		return true
	}

	return false
}

// SetIpMode gets a reference to the given string and assigns it to the IpMode field.
func (o *ConnectionServerInfoV2) SetIpMode(v string) {
	o.IpMode = &v
}

// GetJwtInfo returns the JwtInfo field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetJwtInfo() ConnectionServerJWTInfo {
	if o == nil || IsNil(o.JwtInfo) {
		var ret ConnectionServerJWTInfo
		return ret
	}
	return *o.JwtInfo
}

// GetJwtInfoOk returns a tuple with the JwtInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetJwtInfoOk() (*ConnectionServerJWTInfo, bool) {
	if o == nil || IsNil(o.JwtInfo) {
		return nil, false
	}
	return o.JwtInfo, true
}

// HasJwtInfo returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasJwtInfo() bool {
	if o != nil && !IsNil(o.JwtInfo) {
		return true
	}

	return false
}

// SetJwtInfo gets a reference to the given ConnectionServerJWTInfo and assigns it to the JwtInfo field.
func (o *ConnectionServerInfoV2) SetJwtInfo(v ConnectionServerJWTInfo) {
	o.JwtInfo = &v
}

// GetLdapBackupInfo returns the LdapBackupInfo field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetLdapBackupInfo() ConnectionServerLdapBackupInfo {
	if o == nil || IsNil(o.LdapBackupInfo) {
		var ret ConnectionServerLdapBackupInfo
		return ret
	}
	return *o.LdapBackupInfo
}

// GetLdapBackupInfoOk returns a tuple with the LdapBackupInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetLdapBackupInfoOk() (*ConnectionServerLdapBackupInfo, bool) {
	if o == nil || IsNil(o.LdapBackupInfo) {
		return nil, false
	}
	return o.LdapBackupInfo, true
}

// HasLdapBackupInfo returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasLdapBackupInfo() bool {
	if o != nil && !IsNil(o.LdapBackupInfo) {
		return true
	}

	return false
}

// SetLdapBackupInfo gets a reference to the given ConnectionServerLdapBackupInfo and assigns it to the LdapBackupInfo field.
func (o *ConnectionServerInfoV2) SetLdapBackupInfo(v ConnectionServerLdapBackupInfo) {
	o.LdapBackupInfo = &v
}

// GetLoadBalancerHosts returns the LoadBalancerHosts field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetLoadBalancerHosts() []string {
	if o == nil || IsNil(o.LoadBalancerHosts) {
		var ret []string
		return ret
	}
	return o.LoadBalancerHosts
}

// GetLoadBalancerHostsOk returns a tuple with the LoadBalancerHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetLoadBalancerHostsOk() ([]string, bool) {
	if o == nil || IsNil(o.LoadBalancerHosts) {
		return nil, false
	}
	return o.LoadBalancerHosts, true
}

// HasLoadBalancerHosts returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasLoadBalancerHosts() bool {
	if o != nil && !IsNil(o.LoadBalancerHosts) {
		return true
	}

	return false
}

// SetLoadBalancerHosts gets a reference to the given []string and assigns it to the LoadBalancerHosts field.
func (o *ConnectionServerInfoV2) SetLoadBalancerHosts(v []string) {
	o.LoadBalancerHosts = v
}

// GetLocalConnectionServer returns the LocalConnectionServer field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetLocalConnectionServer() bool {
	if o == nil || IsNil(o.LocalConnectionServer) {
		var ret bool
		return ret
	}
	return *o.LocalConnectionServer
}

// GetLocalConnectionServerOk returns a tuple with the LocalConnectionServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetLocalConnectionServerOk() (*bool, bool) {
	if o == nil || IsNil(o.LocalConnectionServer) {
		return nil, false
	}
	return o.LocalConnectionServer, true
}

// HasLocalConnectionServer returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasLocalConnectionServer() bool {
	if o != nil && !IsNil(o.LocalConnectionServer) {
		return true
	}

	return false
}

// SetLocalConnectionServer gets a reference to the given bool and assigns it to the LocalConnectionServer field.
func (o *ConnectionServerInfoV2) SetLocalConnectionServer(v bool) {
	o.LocalConnectionServer = &v
}

// GetLogoffWhenRemoveSmartCard returns the LogoffWhenRemoveSmartCard field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetLogoffWhenRemoveSmartCard() bool {
	if o == nil || IsNil(o.LogoffWhenRemoveSmartCard) {
		var ret bool
		return ret
	}
	return *o.LogoffWhenRemoveSmartCard
}

// GetLogoffWhenRemoveSmartCardOk returns a tuple with the LogoffWhenRemoveSmartCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetLogoffWhenRemoveSmartCardOk() (*bool, bool) {
	if o == nil || IsNil(o.LogoffWhenRemoveSmartCard) {
		return nil, false
	}
	return o.LogoffWhenRemoveSmartCard, true
}

// HasLogoffWhenRemoveSmartCard returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasLogoffWhenRemoveSmartCard() bool {
	if o != nil && !IsNil(o.LogoffWhenRemoveSmartCard) {
		return true
	}

	return false
}

// SetLogoffWhenRemoveSmartCard gets a reference to the given bool and assigns it to the LogoffWhenRemoveSmartCard field.
func (o *ConnectionServerInfoV2) SetLogoffWhenRemoveSmartCard(v bool) {
	o.LogoffWhenRemoveSmartCard = &v
}

// GetMessageSecurityEnhancedModeSupported returns the MessageSecurityEnhancedModeSupported field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetMessageSecurityEnhancedModeSupported() bool {
	if o == nil || IsNil(o.MessageSecurityEnhancedModeSupported) {
		var ret bool
		return ret
	}
	return *o.MessageSecurityEnhancedModeSupported
}

// GetMessageSecurityEnhancedModeSupportedOk returns a tuple with the MessageSecurityEnhancedModeSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetMessageSecurityEnhancedModeSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.MessageSecurityEnhancedModeSupported) {
		return nil, false
	}
	return o.MessageSecurityEnhancedModeSupported, true
}

// HasMessageSecurityEnhancedModeSupported returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasMessageSecurityEnhancedModeSupported() bool {
	if o != nil && !IsNil(o.MessageSecurityEnhancedModeSupported) {
		return true
	}

	return false
}

// SetMessageSecurityEnhancedModeSupported gets a reference to the given bool and assigns it to the MessageSecurityEnhancedModeSupported field.
func (o *ConnectionServerInfoV2) SetMessageSecurityEnhancedModeSupported(v bool) {
	o.MessageSecurityEnhancedModeSupported = &v
}

// GetMsgSecurityPublicKey returns the MsgSecurityPublicKey field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetMsgSecurityPublicKey() string {
	if o == nil || IsNil(o.MsgSecurityPublicKey) {
		var ret string
		return ret
	}
	return *o.MsgSecurityPublicKey
}

// GetMsgSecurityPublicKeyOk returns a tuple with the MsgSecurityPublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetMsgSecurityPublicKeyOk() (*string, bool) {
	if o == nil || IsNil(o.MsgSecurityPublicKey) {
		return nil, false
	}
	return o.MsgSecurityPublicKey, true
}

// HasMsgSecurityPublicKey returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasMsgSecurityPublicKey() bool {
	if o != nil && !IsNil(o.MsgSecurityPublicKey) {
		return true
	}

	return false
}

// SetMsgSecurityPublicKey gets a reference to the given string and assigns it to the MsgSecurityPublicKey field.
func (o *ConnectionServerInfoV2) SetMsgSecurityPublicKey(v string) {
	o.MsgSecurityPublicKey = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConnectionServerInfoV2) SetName(v string) {
	o.Name = &v
}

// GetRadiusInfo returns the RadiusInfo field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetRadiusInfo() ConnectionServerRADIUSInfo {
	if o == nil || IsNil(o.RadiusInfo) {
		var ret ConnectionServerRADIUSInfo
		return ret
	}
	return *o.RadiusInfo
}

// GetRadiusInfoOk returns a tuple with the RadiusInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetRadiusInfoOk() (*ConnectionServerRADIUSInfo, bool) {
	if o == nil || IsNil(o.RadiusInfo) {
		return nil, false
	}
	return o.RadiusInfo, true
}

// HasRadiusInfo returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasRadiusInfo() bool {
	if o != nil && !IsNil(o.RadiusInfo) {
		return true
	}

	return false
}

// SetRadiusInfo gets a reference to the given ConnectionServerRADIUSInfo and assigns it to the RadiusInfo field.
func (o *ConnectionServerInfoV2) SetRadiusInfo(v ConnectionServerRADIUSInfo) {
	o.RadiusInfo = &v
}

// GetRouterSslThumbprints returns the RouterSslThumbprints field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetRouterSslThumbprints() []string {
	if o == nil || IsNil(o.RouterSslThumbprints) {
		var ret []string
		return ret
	}
	return o.RouterSslThumbprints
}

// GetRouterSslThumbprintsOk returns a tuple with the RouterSslThumbprints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetRouterSslThumbprintsOk() ([]string, bool) {
	if o == nil || IsNil(o.RouterSslThumbprints) {
		return nil, false
	}
	return o.RouterSslThumbprints, true
}

// HasRouterSslThumbprints returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasRouterSslThumbprints() bool {
	if o != nil && !IsNil(o.RouterSslThumbprints) {
		return true
	}

	return false
}

// SetRouterSslThumbprints gets a reference to the given []string and assigns it to the RouterSslThumbprints field.
func (o *ConnectionServerInfoV2) SetRouterSslThumbprints(v []string) {
	o.RouterSslThumbprints = v
}

// GetRsaSecureIdInfo returns the RsaSecureIdInfo field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetRsaSecureIdInfo() ConnectionServerRSASecureIdInfo {
	if o == nil || IsNil(o.RsaSecureIdInfo) {
		var ret ConnectionServerRSASecureIdInfo
		return ret
	}
	return *o.RsaSecureIdInfo
}

// GetRsaSecureIdInfoOk returns a tuple with the RsaSecureIdInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetRsaSecureIdInfoOk() (*ConnectionServerRSASecureIdInfo, bool) {
	if o == nil || IsNil(o.RsaSecureIdInfo) {
		return nil, false
	}
	return o.RsaSecureIdInfo, true
}

// HasRsaSecureIdInfo returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasRsaSecureIdInfo() bool {
	if o != nil && !IsNil(o.RsaSecureIdInfo) {
		return true
	}

	return false
}

// SetRsaSecureIdInfo gets a reference to the given ConnectionServerRSASecureIdInfo and assigns it to the RsaSecureIdInfo field.
func (o *ConnectionServerInfoV2) SetRsaSecureIdInfo(v ConnectionServerRSASecureIdInfo) {
	o.RsaSecureIdInfo = &v
}

// GetSamlInfo returns the SamlInfo field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetSamlInfo() ConnectionServerSAMLInfo {
	if o == nil || IsNil(o.SamlInfo) {
		var ret ConnectionServerSAMLInfo
		return ret
	}
	return *o.SamlInfo
}

// GetSamlInfoOk returns a tuple with the SamlInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetSamlInfoOk() (*ConnectionServerSAMLInfo, bool) {
	if o == nil || IsNil(o.SamlInfo) {
		return nil, false
	}
	return o.SamlInfo, true
}

// HasSamlInfo returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasSamlInfo() bool {
	if o != nil && !IsNil(o.SamlInfo) {
		return true
	}

	return false
}

// SetSamlInfo gets a reference to the given ConnectionServerSAMLInfo and assigns it to the SamlInfo field.
func (o *ConnectionServerInfoV2) SetSamlInfo(v ConnectionServerSAMLInfo) {
	o.SamlInfo = &v
}

// GetServerUrl returns the ServerUrl field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetServerUrl() string {
	if o == nil || IsNil(o.ServerUrl) {
		var ret string
		return ret
	}
	return *o.ServerUrl
}

// GetServerUrlOk returns a tuple with the ServerUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetServerUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ServerUrl) {
		return nil, false
	}
	return o.ServerUrl, true
}

// HasServerUrl returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasServerUrl() bool {
	if o != nil && !IsNil(o.ServerUrl) {
		return true
	}

	return false
}

// SetServerUrl gets a reference to the given string and assigns it to the ServerUrl field.
func (o *ConnectionServerInfoV2) SetServerUrl(v string) {
	o.ServerUrl = &v
}

// GetSmartCardSupport returns the SmartCardSupport field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetSmartCardSupport() string {
	if o == nil || IsNil(o.SmartCardSupport) {
		var ret string
		return ret
	}
	return *o.SmartCardSupport
}

// GetSmartCardSupportOk returns a tuple with the SmartCardSupport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetSmartCardSupportOk() (*string, bool) {
	if o == nil || IsNil(o.SmartCardSupport) {
		return nil, false
	}
	return o.SmartCardSupport, true
}

// HasSmartCardSupport returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasSmartCardSupport() bool {
	if o != nil && !IsNil(o.SmartCardSupport) {
		return true
	}

	return false
}

// SetSmartCardSupport gets a reference to the given string and assigns it to the SmartCardSupport field.
func (o *ConnectionServerInfoV2) SetSmartCardSupport(v string) {
	o.SmartCardSupport = &v
}

// GetSmartCardSupportForAdmin returns the SmartCardSupportForAdmin field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetSmartCardSupportForAdmin() string {
	if o == nil || IsNil(o.SmartCardSupportForAdmin) {
		var ret string
		return ret
	}
	return *o.SmartCardSupportForAdmin
}

// GetSmartCardSupportForAdminOk returns a tuple with the SmartCardSupportForAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetSmartCardSupportForAdminOk() (*string, bool) {
	if o == nil || IsNil(o.SmartCardSupportForAdmin) {
		return nil, false
	}
	return o.SmartCardSupportForAdmin, true
}

// HasSmartCardSupportForAdmin returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasSmartCardSupportForAdmin() bool {
	if o != nil && !IsNil(o.SmartCardSupportForAdmin) {
		return true
	}

	return false
}

// SetSmartCardSupportForAdmin gets a reference to the given string and assigns it to the SmartCardSupportForAdmin field.
func (o *ConnectionServerInfoV2) SetSmartCardSupportForAdmin(v string) {
	o.SmartCardSupportForAdmin = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ConnectionServerInfoV2) SetTags(v []string) {
	o.Tags = v
}

// GetUnauthenticatedAccessInfo returns the UnauthenticatedAccessInfo field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetUnauthenticatedAccessInfo() ConnectionServerUnauthenticatedAccessInfo {
	if o == nil || IsNil(o.UnauthenticatedAccessInfo) {
		var ret ConnectionServerUnauthenticatedAccessInfo
		return ret
	}
	return *o.UnauthenticatedAccessInfo
}

// GetUnauthenticatedAccessInfoOk returns a tuple with the UnauthenticatedAccessInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetUnauthenticatedAccessInfoOk() (*ConnectionServerUnauthenticatedAccessInfo, bool) {
	if o == nil || IsNil(o.UnauthenticatedAccessInfo) {
		return nil, false
	}
	return o.UnauthenticatedAccessInfo, true
}

// HasUnauthenticatedAccessInfo returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasUnauthenticatedAccessInfo() bool {
	if o != nil && !IsNil(o.UnauthenticatedAccessInfo) {
		return true
	}

	return false
}

// SetUnauthenticatedAccessInfo gets a reference to the given ConnectionServerUnauthenticatedAccessInfo and assigns it to the UnauthenticatedAccessInfo field.
func (o *ConnectionServerInfoV2) SetUnauthenticatedAccessInfo(v ConnectionServerUnauthenticatedAccessInfo) {
	o.UnauthenticatedAccessInfo = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ConnectionServerInfoV2) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerInfoV2) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ConnectionServerInfoV2) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ConnectionServerInfoV2) SetVersion(v string) {
	o.Version = &v
}

func (o ConnectionServerInfoV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionServerInfoV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuxillaryExternalPcoipIpv4Address) {
		toSerialize["auxillary_external_pcoip_ipv4_address"] = o.AuxillaryExternalPcoipIpv4Address
	}
	if !IsNil(o.BypassAppBlastGateway) {
		toSerialize["bypass_app_blast_gateway"] = o.BypassAppBlastGateway
	}
	if !IsNil(o.BypassPcoipGateway) {
		toSerialize["bypass_pcoip_gateway"] = o.BypassPcoipGateway
	}
	if !IsNil(o.BypassTunnel) {
		toSerialize["bypass_tunnel"] = o.BypassTunnel
	}
	if !IsNil(o.ClusterName) {
		toSerialize["cluster_name"] = o.ClusterName
	}
	if !IsNil(o.DirectHtmlabsg) {
		toSerialize["direct_htmlabsg"] = o.DirectHtmlabsg
	}
	if !IsNil(o.DiscloseServicePrincipalName) {
		toSerialize["disclose_service_principal_name"] = o.DiscloseServicePrincipalName
	}
	if !IsNil(o.EnableSmartCardUserNameHint) {
		toSerialize["enable_smart_card_user_name_hint"] = o.EnableSmartCardUserNameHint
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.ExternalAppblastUrl) {
		toSerialize["external_appblast_url"] = o.ExternalAppblastUrl
	}
	if !IsNil(o.ExternalPcoipUrl) {
		toSerialize["external_pcoip_url"] = o.ExternalPcoipUrl
	}
	if !IsNil(o.ExternalUrl) {
		toSerialize["external_url"] = o.ExternalUrl
	}
	if !IsNil(o.FipsModeEnabled) {
		toSerialize["fips_mode_enabled"] = o.FipsModeEnabled
	}
	if !IsNil(o.Fqhn) {
		toSerialize["fqhn"] = o.Fqhn
	}
	if !IsNil(o.GssApiinfo) {
		toSerialize["gss_apiinfo"] = o.GssApiinfo
	}
	if !IsNil(o.HasBlastGatewaySupport) {
		toSerialize["has_blast_gateway_support"] = o.HasBlastGatewaySupport
	}
	if !IsNil(o.HasPcoipGatewaySupport) {
		toSerialize["has_pcoip_gateway_support"] = o.HasPcoipGatewaySupport
	}
	if !IsNil(o.HostRedirection) {
		toSerialize["host_redirection"] = o.HostRedirection
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IpMode) {
		toSerialize["ip_mode"] = o.IpMode
	}
	if !IsNil(o.JwtInfo) {
		toSerialize["jwt_info"] = o.JwtInfo
	}
	if !IsNil(o.LdapBackupInfo) {
		toSerialize["ldap_backup_info"] = o.LdapBackupInfo
	}
	if !IsNil(o.LoadBalancerHosts) {
		toSerialize["load_balancer_hosts"] = o.LoadBalancerHosts
	}
	if !IsNil(o.LocalConnectionServer) {
		toSerialize["local_connection_server"] = o.LocalConnectionServer
	}
	if !IsNil(o.LogoffWhenRemoveSmartCard) {
		toSerialize["logoff_when_remove_smart_card"] = o.LogoffWhenRemoveSmartCard
	}
	if !IsNil(o.MessageSecurityEnhancedModeSupported) {
		toSerialize["message_security_enhanced_mode_supported"] = o.MessageSecurityEnhancedModeSupported
	}
	if !IsNil(o.MsgSecurityPublicKey) {
		toSerialize["msg_security_public_key"] = o.MsgSecurityPublicKey
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RadiusInfo) {
		toSerialize["radius_info"] = o.RadiusInfo
	}
	if !IsNil(o.RouterSslThumbprints) {
		toSerialize["router_ssl_thumbprints"] = o.RouterSslThumbprints
	}
	if !IsNil(o.RsaSecureIdInfo) {
		toSerialize["rsa_secure_id_info"] = o.RsaSecureIdInfo
	}
	if !IsNil(o.SamlInfo) {
		toSerialize["saml_info"] = o.SamlInfo
	}
	if !IsNil(o.ServerUrl) {
		toSerialize["server_url"] = o.ServerUrl
	}
	if !IsNil(o.SmartCardSupport) {
		toSerialize["smart_card_support"] = o.SmartCardSupport
	}
	if !IsNil(o.SmartCardSupportForAdmin) {
		toSerialize["smart_card_support_for_admin"] = o.SmartCardSupportForAdmin
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.UnauthenticatedAccessInfo) {
		toSerialize["unauthenticated_access_info"] = o.UnauthenticatedAccessInfo
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableConnectionServerInfoV2 struct {
	value *ConnectionServerInfoV2
	isSet bool
}

func (v NullableConnectionServerInfoV2) Get() *ConnectionServerInfoV2 {
	return v.value
}

func (v *NullableConnectionServerInfoV2) Set(val *ConnectionServerInfoV2) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionServerInfoV2) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionServerInfoV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionServerInfoV2(val *ConnectionServerInfoV2) *NullableConnectionServerInfoV2 {
	return &NullableConnectionServerInfoV2{value: val, isSet: true}
}

func (v NullableConnectionServerInfoV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionServerInfoV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


