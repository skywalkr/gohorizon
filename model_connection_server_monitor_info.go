/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the ConnectionServerMonitorInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionServerMonitorInfo{}

// ConnectionServerMonitorInfo Monitoring information related to Connection Server.
type ConnectionServerMonitorInfo struct {
	Certificate *CertificateMonitorInfo `json:"certificate,omitempty"`
	// Number of connections to this Connection Server.
	ConnectionCount *int32 `json:"connection_count,omitempty"`
	// Connection Server replication status with respect to the Peer Connection Servers in the same cluster.
	CsReplications []ConnectionServerMonitorCSReplication `json:"cs_replications,omitempty"`
	// Indicates whether server has the default certificate.
	DefaultCertificate *bool `json:"default_certificate,omitempty"`
	Details *ConnectionServerMonitorDetails `json:"details,omitempty"`
	// Unique ID of the Connection Server.
	Id *string `json:"id,omitempty"`
	// Connection Server host name or IP address.
	Name *string `json:"name,omitempty"`
	// Connection Server related Windows services information.
	Services []ConnectionServerMonitorServiceStatus `json:"services,omitempty"`
	// PCoIP, RDP or BLAST protocol sessions details when clients connect directly to the connection server.
	SessionProtocolData []ConnectionServerSessionProtocolData `json:"session_protocol_data,omitempty"`
	// The maximum number of connections allowed for the connection server through the Horizon client. If all of the secure gateways (HTTP(S)/PCOIP/BLAST) are enabled, this field denotes the maximum number of connections allowed for the connection server.If none of the secure gateways(HTTP(S)/PCOIP/BLAST) are enabled, sessionThreshold value will not be set.
	SessionThreshold *int32 `json:"session_threshold,omitempty"`
	// Status of the Connection Server. * OK: The Connection Server is working properly. * ERROR: Error occurred when connecting to Connection Server. * NOT_RESPONDING: The Connection Server is not responding. * UNKNOWN: Status of Connection Server is unknown. * RESTART_REQUIRED: Connection Server needs a Restart.
	Status *string `json:"status,omitempty"`
	// Number of connections tunneled through this Connection Server.
	TunnelConnectionCount *int32 `json:"tunnel_connection_count,omitempty"`
}

// NewConnectionServerMonitorInfo instantiates a new ConnectionServerMonitorInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionServerMonitorInfo() *ConnectionServerMonitorInfo {
	this := ConnectionServerMonitorInfo{}
	return &this
}

// NewConnectionServerMonitorInfoWithDefaults instantiates a new ConnectionServerMonitorInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionServerMonitorInfoWithDefaults() *ConnectionServerMonitorInfo {
	this := ConnectionServerMonitorInfo{}
	return &this
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *ConnectionServerMonitorInfo) GetCertificate() CertificateMonitorInfo {
	if o == nil || IsNil(o.Certificate) {
		var ret CertificateMonitorInfo
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerMonitorInfo) GetCertificateOk() (*CertificateMonitorInfo, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *ConnectionServerMonitorInfo) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given CertificateMonitorInfo and assigns it to the Certificate field.
func (o *ConnectionServerMonitorInfo) SetCertificate(v CertificateMonitorInfo) {
	o.Certificate = &v
}

// GetConnectionCount returns the ConnectionCount field value if set, zero value otherwise.
func (o *ConnectionServerMonitorInfo) GetConnectionCount() int32 {
	if o == nil || IsNil(o.ConnectionCount) {
		var ret int32
		return ret
	}
	return *o.ConnectionCount
}

// GetConnectionCountOk returns a tuple with the ConnectionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerMonitorInfo) GetConnectionCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ConnectionCount) {
		return nil, false
	}
	return o.ConnectionCount, true
}

// HasConnectionCount returns a boolean if a field has been set.
func (o *ConnectionServerMonitorInfo) HasConnectionCount() bool {
	if o != nil && !IsNil(o.ConnectionCount) {
		return true
	}

	return false
}

// SetConnectionCount gets a reference to the given int32 and assigns it to the ConnectionCount field.
func (o *ConnectionServerMonitorInfo) SetConnectionCount(v int32) {
	o.ConnectionCount = &v
}

// GetCsReplications returns the CsReplications field value if set, zero value otherwise.
func (o *ConnectionServerMonitorInfo) GetCsReplications() []ConnectionServerMonitorCSReplication {
	if o == nil || IsNil(o.CsReplications) {
		var ret []ConnectionServerMonitorCSReplication
		return ret
	}
	return o.CsReplications
}

// GetCsReplicationsOk returns a tuple with the CsReplications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerMonitorInfo) GetCsReplicationsOk() ([]ConnectionServerMonitorCSReplication, bool) {
	if o == nil || IsNil(o.CsReplications) {
		return nil, false
	}
	return o.CsReplications, true
}

// HasCsReplications returns a boolean if a field has been set.
func (o *ConnectionServerMonitorInfo) HasCsReplications() bool {
	if o != nil && !IsNil(o.CsReplications) {
		return true
	}

	return false
}

// SetCsReplications gets a reference to the given []ConnectionServerMonitorCSReplication and assigns it to the CsReplications field.
func (o *ConnectionServerMonitorInfo) SetCsReplications(v []ConnectionServerMonitorCSReplication) {
	o.CsReplications = v
}

// GetDefaultCertificate returns the DefaultCertificate field value if set, zero value otherwise.
func (o *ConnectionServerMonitorInfo) GetDefaultCertificate() bool {
	if o == nil || IsNil(o.DefaultCertificate) {
		var ret bool
		return ret
	}
	return *o.DefaultCertificate
}

// GetDefaultCertificateOk returns a tuple with the DefaultCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerMonitorInfo) GetDefaultCertificateOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultCertificate) {
		return nil, false
	}
	return o.DefaultCertificate, true
}

// HasDefaultCertificate returns a boolean if a field has been set.
func (o *ConnectionServerMonitorInfo) HasDefaultCertificate() bool {
	if o != nil && !IsNil(o.DefaultCertificate) {
		return true
	}

	return false
}

// SetDefaultCertificate gets a reference to the given bool and assigns it to the DefaultCertificate field.
func (o *ConnectionServerMonitorInfo) SetDefaultCertificate(v bool) {
	o.DefaultCertificate = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *ConnectionServerMonitorInfo) GetDetails() ConnectionServerMonitorDetails {
	if o == nil || IsNil(o.Details) {
		var ret ConnectionServerMonitorDetails
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerMonitorInfo) GetDetailsOk() (*ConnectionServerMonitorDetails, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *ConnectionServerMonitorInfo) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given ConnectionServerMonitorDetails and assigns it to the Details field.
func (o *ConnectionServerMonitorInfo) SetDetails(v ConnectionServerMonitorDetails) {
	o.Details = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConnectionServerMonitorInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerMonitorInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConnectionServerMonitorInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ConnectionServerMonitorInfo) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConnectionServerMonitorInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerMonitorInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConnectionServerMonitorInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConnectionServerMonitorInfo) SetName(v string) {
	o.Name = &v
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *ConnectionServerMonitorInfo) GetServices() []ConnectionServerMonitorServiceStatus {
	if o == nil || IsNil(o.Services) {
		var ret []ConnectionServerMonitorServiceStatus
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerMonitorInfo) GetServicesOk() ([]ConnectionServerMonitorServiceStatus, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *ConnectionServerMonitorInfo) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []ConnectionServerMonitorServiceStatus and assigns it to the Services field.
func (o *ConnectionServerMonitorInfo) SetServices(v []ConnectionServerMonitorServiceStatus) {
	o.Services = v
}

// GetSessionProtocolData returns the SessionProtocolData field value if set, zero value otherwise.
func (o *ConnectionServerMonitorInfo) GetSessionProtocolData() []ConnectionServerSessionProtocolData {
	if o == nil || IsNil(o.SessionProtocolData) {
		var ret []ConnectionServerSessionProtocolData
		return ret
	}
	return o.SessionProtocolData
}

// GetSessionProtocolDataOk returns a tuple with the SessionProtocolData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerMonitorInfo) GetSessionProtocolDataOk() ([]ConnectionServerSessionProtocolData, bool) {
	if o == nil || IsNil(o.SessionProtocolData) {
		return nil, false
	}
	return o.SessionProtocolData, true
}

// HasSessionProtocolData returns a boolean if a field has been set.
func (o *ConnectionServerMonitorInfo) HasSessionProtocolData() bool {
	if o != nil && !IsNil(o.SessionProtocolData) {
		return true
	}

	return false
}

// SetSessionProtocolData gets a reference to the given []ConnectionServerSessionProtocolData and assigns it to the SessionProtocolData field.
func (o *ConnectionServerMonitorInfo) SetSessionProtocolData(v []ConnectionServerSessionProtocolData) {
	o.SessionProtocolData = v
}

// GetSessionThreshold returns the SessionThreshold field value if set, zero value otherwise.
func (o *ConnectionServerMonitorInfo) GetSessionThreshold() int32 {
	if o == nil || IsNil(o.SessionThreshold) {
		var ret int32
		return ret
	}
	return *o.SessionThreshold
}

// GetSessionThresholdOk returns a tuple with the SessionThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerMonitorInfo) GetSessionThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.SessionThreshold) {
		return nil, false
	}
	return o.SessionThreshold, true
}

// HasSessionThreshold returns a boolean if a field has been set.
func (o *ConnectionServerMonitorInfo) HasSessionThreshold() bool {
	if o != nil && !IsNil(o.SessionThreshold) {
		return true
	}

	return false
}

// SetSessionThreshold gets a reference to the given int32 and assigns it to the SessionThreshold field.
func (o *ConnectionServerMonitorInfo) SetSessionThreshold(v int32) {
	o.SessionThreshold = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ConnectionServerMonitorInfo) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerMonitorInfo) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ConnectionServerMonitorInfo) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ConnectionServerMonitorInfo) SetStatus(v string) {
	o.Status = &v
}

// GetTunnelConnectionCount returns the TunnelConnectionCount field value if set, zero value otherwise.
func (o *ConnectionServerMonitorInfo) GetTunnelConnectionCount() int32 {
	if o == nil || IsNil(o.TunnelConnectionCount) {
		var ret int32
		return ret
	}
	return *o.TunnelConnectionCount
}

// GetTunnelConnectionCountOk returns a tuple with the TunnelConnectionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionServerMonitorInfo) GetTunnelConnectionCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TunnelConnectionCount) {
		return nil, false
	}
	return o.TunnelConnectionCount, true
}

// HasTunnelConnectionCount returns a boolean if a field has been set.
func (o *ConnectionServerMonitorInfo) HasTunnelConnectionCount() bool {
	if o != nil && !IsNil(o.TunnelConnectionCount) {
		return true
	}

	return false
}

// SetTunnelConnectionCount gets a reference to the given int32 and assigns it to the TunnelConnectionCount field.
func (o *ConnectionServerMonitorInfo) SetTunnelConnectionCount(v int32) {
	o.TunnelConnectionCount = &v
}

func (o ConnectionServerMonitorInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionServerMonitorInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.ConnectionCount) {
		toSerialize["connection_count"] = o.ConnectionCount
	}
	if !IsNil(o.CsReplications) {
		toSerialize["cs_replications"] = o.CsReplications
	}
	if !IsNil(o.DefaultCertificate) {
		toSerialize["default_certificate"] = o.DefaultCertificate
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Services) {
		toSerialize["services"] = o.Services
	}
	if !IsNil(o.SessionProtocolData) {
		toSerialize["session_protocol_data"] = o.SessionProtocolData
	}
	if !IsNil(o.SessionThreshold) {
		toSerialize["session_threshold"] = o.SessionThreshold
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.TunnelConnectionCount) {
		toSerialize["tunnel_connection_count"] = o.TunnelConnectionCount
	}
	return toSerialize, nil
}

type NullableConnectionServerMonitorInfo struct {
	value *ConnectionServerMonitorInfo
	isSet bool
}

func (v NullableConnectionServerMonitorInfo) Get() *ConnectionServerMonitorInfo {
	return v.value
}

func (v *NullableConnectionServerMonitorInfo) Set(val *ConnectionServerMonitorInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionServerMonitorInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionServerMonitorInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionServerMonitorInfo(val *ConnectionServerMonitorInfo) *NullableConnectionServerMonitorInfo {
	return &NullableConnectionServerMonitorInfo{value: val, isSet: true}
}

func (v NullableConnectionServerMonitorInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionServerMonitorInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


