/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2111
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// DesktopPoolStorageSettings Virtual Center storage settings for the automated desktop pool.
type DesktopPoolStorageSettings struct {
	// Datastores to store the machine (or the OS disk using other options for linked clone or instant clone machine storage)
	Datastores *[]DesktopPoolDatastoreSettings `json:"datastores,omitempty"`
	// Non persistent disk drive letter.
	NonPersistentDiskDriveLetter *string `json:"non_persistent_disk_drive_letter,omitempty"`
	// Size of the non persistent disk in MB.
	NonPersistentDiskSizeMb *int32 `json:"non_persistent_disk_size_mb,omitempty"`
	// Redirect disposable files to a non-persistent disk that will be deleted automatically when a user's session ends.
	NonPersistentRedirectDisposableFiles *bool `json:"non_persistent_redirect_disposable_files,omitempty"`
	// Datastores to store persistent disks for linked clone machines.
	PersistentDiskDatastores *[]DesktopPoolDatastoreSettings `json:"persistent_disk_datastores,omitempty"`
	// Persistent disk drive letter.
	PersistentDiskDriveLetter *string `json:"persistent_disk_drive_letter,omitempty"`
	// Size of the persistent disk in MB.
	PersistentDiskSizeMb *int32 `json:"persistent_disk_size_mb,omitempty"`
	// With vSphere 5.x, virtual machines can be configured to use a space efficient disk format that supports reclamation of unused disk space (such as deleted files). This option reclaims unused disk space on each virtual machine. The operation is initiated when an estimate of used disk space exceeds the specified threshold.
	ReclaimVmDiskSpace *bool `json:"reclaim_vm_disk_space,omitempty"`
	// Initiate reclamation when unused space on virtual machine exceeds the threshold in MB.
	ReclamationThresholdMb *int64 `json:"reclamation_threshold_mb,omitempty"`
	// Windows profiles will be redirected to persistent disks, which are not affected by View Composer operations such as refresh, recompose and rebalance.
	RedirectWindowsProfile *bool `json:"redirect_windows_profile,omitempty"`
	// Datastore to store replica disks for linked clone and instant clone machines.
	ReplicaDiskDatastoreId *string `json:"replica_disk_datastore_id,omitempty"`
	// Applicable To: Linked/instant clone automated desktop pool.<br>Native NFS Snapshots (VAAI - vStorage API for Array Integration) is a hardware feature of certain storage arrays. It uses native snapshotting technology to provide linked clone functionality.
	UseNativeSnapshots *bool `json:"use_native_snapshots,omitempty"`
	// Whether to use separate datastores for persistent and OS disks.
	UseSeparateDatastoresPersistentAndOsDisks *bool `json:"use_separate_datastores_persistent_and_os_disks,omitempty"`
	// Whether to use separate datastores for replica and OS disks.
	UseSeparateDatastoresReplicaAndOsDisks *bool `json:"use_separate_datastores_replica_and_os_disks,omitempty"`
	// Whether to use vSphere vSAN.
	UseVsan *bool `json:"use_vsan,omitempty"`
}

// NewDesktopPoolStorageSettings instantiates a new DesktopPoolStorageSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDesktopPoolStorageSettings() *DesktopPoolStorageSettings {
	this := DesktopPoolStorageSettings{}
	return &this
}

// NewDesktopPoolStorageSettingsWithDefaults instantiates a new DesktopPoolStorageSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDesktopPoolStorageSettingsWithDefaults() *DesktopPoolStorageSettings {
	this := DesktopPoolStorageSettings{}
	return &this
}

// GetDatastores returns the Datastores field value if set, zero value otherwise.
func (o *DesktopPoolStorageSettings) GetDatastores() []DesktopPoolDatastoreSettings {
	if o == nil || o.Datastores == nil {
		var ret []DesktopPoolDatastoreSettings
		return ret
	}
	return *o.Datastores
}

// GetDatastoresOk returns a tuple with the Datastores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolStorageSettings) GetDatastoresOk() (*[]DesktopPoolDatastoreSettings, bool) {
	if o == nil || o.Datastores == nil {
		return nil, false
	}
	return o.Datastores, true
}

// HasDatastores returns a boolean if a field has been set.
func (o *DesktopPoolStorageSettings) HasDatastores() bool {
	if o != nil && o.Datastores != nil {
		return true
	}

	return false
}

// SetDatastores gets a reference to the given []DesktopPoolDatastoreSettings and assigns it to the Datastores field.
func (o *DesktopPoolStorageSettings) SetDatastores(v []DesktopPoolDatastoreSettings) {
	o.Datastores = &v
}

// GetNonPersistentDiskDriveLetter returns the NonPersistentDiskDriveLetter field value if set, zero value otherwise.
func (o *DesktopPoolStorageSettings) GetNonPersistentDiskDriveLetter() string {
	if o == nil || o.NonPersistentDiskDriveLetter == nil {
		var ret string
		return ret
	}
	return *o.NonPersistentDiskDriveLetter
}

// GetNonPersistentDiskDriveLetterOk returns a tuple with the NonPersistentDiskDriveLetter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolStorageSettings) GetNonPersistentDiskDriveLetterOk() (*string, bool) {
	if o == nil || o.NonPersistentDiskDriveLetter == nil {
		return nil, false
	}
	return o.NonPersistentDiskDriveLetter, true
}

// HasNonPersistentDiskDriveLetter returns a boolean if a field has been set.
func (o *DesktopPoolStorageSettings) HasNonPersistentDiskDriveLetter() bool {
	if o != nil && o.NonPersistentDiskDriveLetter != nil {
		return true
	}

	return false
}

// SetNonPersistentDiskDriveLetter gets a reference to the given string and assigns it to the NonPersistentDiskDriveLetter field.
func (o *DesktopPoolStorageSettings) SetNonPersistentDiskDriveLetter(v string) {
	o.NonPersistentDiskDriveLetter = &v
}

// GetNonPersistentDiskSizeMb returns the NonPersistentDiskSizeMb field value if set, zero value otherwise.
func (o *DesktopPoolStorageSettings) GetNonPersistentDiskSizeMb() int32 {
	if o == nil || o.NonPersistentDiskSizeMb == nil {
		var ret int32
		return ret
	}
	return *o.NonPersistentDiskSizeMb
}

// GetNonPersistentDiskSizeMbOk returns a tuple with the NonPersistentDiskSizeMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolStorageSettings) GetNonPersistentDiskSizeMbOk() (*int32, bool) {
	if o == nil || o.NonPersistentDiskSizeMb == nil {
		return nil, false
	}
	return o.NonPersistentDiskSizeMb, true
}

// HasNonPersistentDiskSizeMb returns a boolean if a field has been set.
func (o *DesktopPoolStorageSettings) HasNonPersistentDiskSizeMb() bool {
	if o != nil && o.NonPersistentDiskSizeMb != nil {
		return true
	}

	return false
}

// SetNonPersistentDiskSizeMb gets a reference to the given int32 and assigns it to the NonPersistentDiskSizeMb field.
func (o *DesktopPoolStorageSettings) SetNonPersistentDiskSizeMb(v int32) {
	o.NonPersistentDiskSizeMb = &v
}

// GetNonPersistentRedirectDisposableFiles returns the NonPersistentRedirectDisposableFiles field value if set, zero value otherwise.
func (o *DesktopPoolStorageSettings) GetNonPersistentRedirectDisposableFiles() bool {
	if o == nil || o.NonPersistentRedirectDisposableFiles == nil {
		var ret bool
		return ret
	}
	return *o.NonPersistentRedirectDisposableFiles
}

// GetNonPersistentRedirectDisposableFilesOk returns a tuple with the NonPersistentRedirectDisposableFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolStorageSettings) GetNonPersistentRedirectDisposableFilesOk() (*bool, bool) {
	if o == nil || o.NonPersistentRedirectDisposableFiles == nil {
		return nil, false
	}
	return o.NonPersistentRedirectDisposableFiles, true
}

// HasNonPersistentRedirectDisposableFiles returns a boolean if a field has been set.
func (o *DesktopPoolStorageSettings) HasNonPersistentRedirectDisposableFiles() bool {
	if o != nil && o.NonPersistentRedirectDisposableFiles != nil {
		return true
	}

	return false
}

// SetNonPersistentRedirectDisposableFiles gets a reference to the given bool and assigns it to the NonPersistentRedirectDisposableFiles field.
func (o *DesktopPoolStorageSettings) SetNonPersistentRedirectDisposableFiles(v bool) {
	o.NonPersistentRedirectDisposableFiles = &v
}

// GetPersistentDiskDatastores returns the PersistentDiskDatastores field value if set, zero value otherwise.
func (o *DesktopPoolStorageSettings) GetPersistentDiskDatastores() []DesktopPoolDatastoreSettings {
	if o == nil || o.PersistentDiskDatastores == nil {
		var ret []DesktopPoolDatastoreSettings
		return ret
	}
	return *o.PersistentDiskDatastores
}

// GetPersistentDiskDatastoresOk returns a tuple with the PersistentDiskDatastores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolStorageSettings) GetPersistentDiskDatastoresOk() (*[]DesktopPoolDatastoreSettings, bool) {
	if o == nil || o.PersistentDiskDatastores == nil {
		return nil, false
	}
	return o.PersistentDiskDatastores, true
}

// HasPersistentDiskDatastores returns a boolean if a field has been set.
func (o *DesktopPoolStorageSettings) HasPersistentDiskDatastores() bool {
	if o != nil && o.PersistentDiskDatastores != nil {
		return true
	}

	return false
}

// SetPersistentDiskDatastores gets a reference to the given []DesktopPoolDatastoreSettings and assigns it to the PersistentDiskDatastores field.
func (o *DesktopPoolStorageSettings) SetPersistentDiskDatastores(v []DesktopPoolDatastoreSettings) {
	o.PersistentDiskDatastores = &v
}

// GetPersistentDiskDriveLetter returns the PersistentDiskDriveLetter field value if set, zero value otherwise.
func (o *DesktopPoolStorageSettings) GetPersistentDiskDriveLetter() string {
	if o == nil || o.PersistentDiskDriveLetter == nil {
		var ret string
		return ret
	}
	return *o.PersistentDiskDriveLetter
}

// GetPersistentDiskDriveLetterOk returns a tuple with the PersistentDiskDriveLetter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolStorageSettings) GetPersistentDiskDriveLetterOk() (*string, bool) {
	if o == nil || o.PersistentDiskDriveLetter == nil {
		return nil, false
	}
	return o.PersistentDiskDriveLetter, true
}

// HasPersistentDiskDriveLetter returns a boolean if a field has been set.
func (o *DesktopPoolStorageSettings) HasPersistentDiskDriveLetter() bool {
	if o != nil && o.PersistentDiskDriveLetter != nil {
		return true
	}

	return false
}

// SetPersistentDiskDriveLetter gets a reference to the given string and assigns it to the PersistentDiskDriveLetter field.
func (o *DesktopPoolStorageSettings) SetPersistentDiskDriveLetter(v string) {
	o.PersistentDiskDriveLetter = &v
}

// GetPersistentDiskSizeMb returns the PersistentDiskSizeMb field value if set, zero value otherwise.
func (o *DesktopPoolStorageSettings) GetPersistentDiskSizeMb() int32 {
	if o == nil || o.PersistentDiskSizeMb == nil {
		var ret int32
		return ret
	}
	return *o.PersistentDiskSizeMb
}

// GetPersistentDiskSizeMbOk returns a tuple with the PersistentDiskSizeMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolStorageSettings) GetPersistentDiskSizeMbOk() (*int32, bool) {
	if o == nil || o.PersistentDiskSizeMb == nil {
		return nil, false
	}
	return o.PersistentDiskSizeMb, true
}

// HasPersistentDiskSizeMb returns a boolean if a field has been set.
func (o *DesktopPoolStorageSettings) HasPersistentDiskSizeMb() bool {
	if o != nil && o.PersistentDiskSizeMb != nil {
		return true
	}

	return false
}

// SetPersistentDiskSizeMb gets a reference to the given int32 and assigns it to the PersistentDiskSizeMb field.
func (o *DesktopPoolStorageSettings) SetPersistentDiskSizeMb(v int32) {
	o.PersistentDiskSizeMb = &v
}

// GetReclaimVmDiskSpace returns the ReclaimVmDiskSpace field value if set, zero value otherwise.
func (o *DesktopPoolStorageSettings) GetReclaimVmDiskSpace() bool {
	if o == nil || o.ReclaimVmDiskSpace == nil {
		var ret bool
		return ret
	}
	return *o.ReclaimVmDiskSpace
}

// GetReclaimVmDiskSpaceOk returns a tuple with the ReclaimVmDiskSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolStorageSettings) GetReclaimVmDiskSpaceOk() (*bool, bool) {
	if o == nil || o.ReclaimVmDiskSpace == nil {
		return nil, false
	}
	return o.ReclaimVmDiskSpace, true
}

// HasReclaimVmDiskSpace returns a boolean if a field has been set.
func (o *DesktopPoolStorageSettings) HasReclaimVmDiskSpace() bool {
	if o != nil && o.ReclaimVmDiskSpace != nil {
		return true
	}

	return false
}

// SetReclaimVmDiskSpace gets a reference to the given bool and assigns it to the ReclaimVmDiskSpace field.
func (o *DesktopPoolStorageSettings) SetReclaimVmDiskSpace(v bool) {
	o.ReclaimVmDiskSpace = &v
}

// GetReclamationThresholdMb returns the ReclamationThresholdMb field value if set, zero value otherwise.
func (o *DesktopPoolStorageSettings) GetReclamationThresholdMb() int64 {
	if o == nil || o.ReclamationThresholdMb == nil {
		var ret int64
		return ret
	}
	return *o.ReclamationThresholdMb
}

// GetReclamationThresholdMbOk returns a tuple with the ReclamationThresholdMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolStorageSettings) GetReclamationThresholdMbOk() (*int64, bool) {
	if o == nil || o.ReclamationThresholdMb == nil {
		return nil, false
	}
	return o.ReclamationThresholdMb, true
}

// HasReclamationThresholdMb returns a boolean if a field has been set.
func (o *DesktopPoolStorageSettings) HasReclamationThresholdMb() bool {
	if o != nil && o.ReclamationThresholdMb != nil {
		return true
	}

	return false
}

// SetReclamationThresholdMb gets a reference to the given int64 and assigns it to the ReclamationThresholdMb field.
func (o *DesktopPoolStorageSettings) SetReclamationThresholdMb(v int64) {
	o.ReclamationThresholdMb = &v
}

// GetRedirectWindowsProfile returns the RedirectWindowsProfile field value if set, zero value otherwise.
func (o *DesktopPoolStorageSettings) GetRedirectWindowsProfile() bool {
	if o == nil || o.RedirectWindowsProfile == nil {
		var ret bool
		return ret
	}
	return *o.RedirectWindowsProfile
}

// GetRedirectWindowsProfileOk returns a tuple with the RedirectWindowsProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolStorageSettings) GetRedirectWindowsProfileOk() (*bool, bool) {
	if o == nil || o.RedirectWindowsProfile == nil {
		return nil, false
	}
	return o.RedirectWindowsProfile, true
}

// HasRedirectWindowsProfile returns a boolean if a field has been set.
func (o *DesktopPoolStorageSettings) HasRedirectWindowsProfile() bool {
	if o != nil && o.RedirectWindowsProfile != nil {
		return true
	}

	return false
}

// SetRedirectWindowsProfile gets a reference to the given bool and assigns it to the RedirectWindowsProfile field.
func (o *DesktopPoolStorageSettings) SetRedirectWindowsProfile(v bool) {
	o.RedirectWindowsProfile = &v
}

// GetReplicaDiskDatastoreId returns the ReplicaDiskDatastoreId field value if set, zero value otherwise.
func (o *DesktopPoolStorageSettings) GetReplicaDiskDatastoreId() string {
	if o == nil || o.ReplicaDiskDatastoreId == nil {
		var ret string
		return ret
	}
	return *o.ReplicaDiskDatastoreId
}

// GetReplicaDiskDatastoreIdOk returns a tuple with the ReplicaDiskDatastoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolStorageSettings) GetReplicaDiskDatastoreIdOk() (*string, bool) {
	if o == nil || o.ReplicaDiskDatastoreId == nil {
		return nil, false
	}
	return o.ReplicaDiskDatastoreId, true
}

// HasReplicaDiskDatastoreId returns a boolean if a field has been set.
func (o *DesktopPoolStorageSettings) HasReplicaDiskDatastoreId() bool {
	if o != nil && o.ReplicaDiskDatastoreId != nil {
		return true
	}

	return false
}

// SetReplicaDiskDatastoreId gets a reference to the given string and assigns it to the ReplicaDiskDatastoreId field.
func (o *DesktopPoolStorageSettings) SetReplicaDiskDatastoreId(v string) {
	o.ReplicaDiskDatastoreId = &v
}

// GetUseNativeSnapshots returns the UseNativeSnapshots field value if set, zero value otherwise.
func (o *DesktopPoolStorageSettings) GetUseNativeSnapshots() bool {
	if o == nil || o.UseNativeSnapshots == nil {
		var ret bool
		return ret
	}
	return *o.UseNativeSnapshots
}

// GetUseNativeSnapshotsOk returns a tuple with the UseNativeSnapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolStorageSettings) GetUseNativeSnapshotsOk() (*bool, bool) {
	if o == nil || o.UseNativeSnapshots == nil {
		return nil, false
	}
	return o.UseNativeSnapshots, true
}

// HasUseNativeSnapshots returns a boolean if a field has been set.
func (o *DesktopPoolStorageSettings) HasUseNativeSnapshots() bool {
	if o != nil && o.UseNativeSnapshots != nil {
		return true
	}

	return false
}

// SetUseNativeSnapshots gets a reference to the given bool and assigns it to the UseNativeSnapshots field.
func (o *DesktopPoolStorageSettings) SetUseNativeSnapshots(v bool) {
	o.UseNativeSnapshots = &v
}

// GetUseSeparateDatastoresPersistentAndOsDisks returns the UseSeparateDatastoresPersistentAndOsDisks field value if set, zero value otherwise.
func (o *DesktopPoolStorageSettings) GetUseSeparateDatastoresPersistentAndOsDisks() bool {
	if o == nil || o.UseSeparateDatastoresPersistentAndOsDisks == nil {
		var ret bool
		return ret
	}
	return *o.UseSeparateDatastoresPersistentAndOsDisks
}

// GetUseSeparateDatastoresPersistentAndOsDisksOk returns a tuple with the UseSeparateDatastoresPersistentAndOsDisks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolStorageSettings) GetUseSeparateDatastoresPersistentAndOsDisksOk() (*bool, bool) {
	if o == nil || o.UseSeparateDatastoresPersistentAndOsDisks == nil {
		return nil, false
	}
	return o.UseSeparateDatastoresPersistentAndOsDisks, true
}

// HasUseSeparateDatastoresPersistentAndOsDisks returns a boolean if a field has been set.
func (o *DesktopPoolStorageSettings) HasUseSeparateDatastoresPersistentAndOsDisks() bool {
	if o != nil && o.UseSeparateDatastoresPersistentAndOsDisks != nil {
		return true
	}

	return false
}

// SetUseSeparateDatastoresPersistentAndOsDisks gets a reference to the given bool and assigns it to the UseSeparateDatastoresPersistentAndOsDisks field.
func (o *DesktopPoolStorageSettings) SetUseSeparateDatastoresPersistentAndOsDisks(v bool) {
	o.UseSeparateDatastoresPersistentAndOsDisks = &v
}

// GetUseSeparateDatastoresReplicaAndOsDisks returns the UseSeparateDatastoresReplicaAndOsDisks field value if set, zero value otherwise.
func (o *DesktopPoolStorageSettings) GetUseSeparateDatastoresReplicaAndOsDisks() bool {
	if o == nil || o.UseSeparateDatastoresReplicaAndOsDisks == nil {
		var ret bool
		return ret
	}
	return *o.UseSeparateDatastoresReplicaAndOsDisks
}

// GetUseSeparateDatastoresReplicaAndOsDisksOk returns a tuple with the UseSeparateDatastoresReplicaAndOsDisks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolStorageSettings) GetUseSeparateDatastoresReplicaAndOsDisksOk() (*bool, bool) {
	if o == nil || o.UseSeparateDatastoresReplicaAndOsDisks == nil {
		return nil, false
	}
	return o.UseSeparateDatastoresReplicaAndOsDisks, true
}

// HasUseSeparateDatastoresReplicaAndOsDisks returns a boolean if a field has been set.
func (o *DesktopPoolStorageSettings) HasUseSeparateDatastoresReplicaAndOsDisks() bool {
	if o != nil && o.UseSeparateDatastoresReplicaAndOsDisks != nil {
		return true
	}

	return false
}

// SetUseSeparateDatastoresReplicaAndOsDisks gets a reference to the given bool and assigns it to the UseSeparateDatastoresReplicaAndOsDisks field.
func (o *DesktopPoolStorageSettings) SetUseSeparateDatastoresReplicaAndOsDisks(v bool) {
	o.UseSeparateDatastoresReplicaAndOsDisks = &v
}

// GetUseVsan returns the UseVsan field value if set, zero value otherwise.
func (o *DesktopPoolStorageSettings) GetUseVsan() bool {
	if o == nil || o.UseVsan == nil {
		var ret bool
		return ret
	}
	return *o.UseVsan
}

// GetUseVsanOk returns a tuple with the UseVsan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopPoolStorageSettings) GetUseVsanOk() (*bool, bool) {
	if o == nil || o.UseVsan == nil {
		return nil, false
	}
	return o.UseVsan, true
}

// HasUseVsan returns a boolean if a field has been set.
func (o *DesktopPoolStorageSettings) HasUseVsan() bool {
	if o != nil && o.UseVsan != nil {
		return true
	}

	return false
}

// SetUseVsan gets a reference to the given bool and assigns it to the UseVsan field.
func (o *DesktopPoolStorageSettings) SetUseVsan(v bool) {
	o.UseVsan = &v
}

func (o DesktopPoolStorageSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Datastores != nil {
		toSerialize["datastores"] = o.Datastores
	}
	if o.NonPersistentDiskDriveLetter != nil {
		toSerialize["non_persistent_disk_drive_letter"] = o.NonPersistentDiskDriveLetter
	}
	if o.NonPersistentDiskSizeMb != nil {
		toSerialize["non_persistent_disk_size_mb"] = o.NonPersistentDiskSizeMb
	}
	if o.NonPersistentRedirectDisposableFiles != nil {
		toSerialize["non_persistent_redirect_disposable_files"] = o.NonPersistentRedirectDisposableFiles
	}
	if o.PersistentDiskDatastores != nil {
		toSerialize["persistent_disk_datastores"] = o.PersistentDiskDatastores
	}
	if o.PersistentDiskDriveLetter != nil {
		toSerialize["persistent_disk_drive_letter"] = o.PersistentDiskDriveLetter
	}
	if o.PersistentDiskSizeMb != nil {
		toSerialize["persistent_disk_size_mb"] = o.PersistentDiskSizeMb
	}
	if o.ReclaimVmDiskSpace != nil {
		toSerialize["reclaim_vm_disk_space"] = o.ReclaimVmDiskSpace
	}
	if o.ReclamationThresholdMb != nil {
		toSerialize["reclamation_threshold_mb"] = o.ReclamationThresholdMb
	}
	if o.RedirectWindowsProfile != nil {
		toSerialize["redirect_windows_profile"] = o.RedirectWindowsProfile
	}
	if o.ReplicaDiskDatastoreId != nil {
		toSerialize["replica_disk_datastore_id"] = o.ReplicaDiskDatastoreId
	}
	if o.UseNativeSnapshots != nil {
		toSerialize["use_native_snapshots"] = o.UseNativeSnapshots
	}
	if o.UseSeparateDatastoresPersistentAndOsDisks != nil {
		toSerialize["use_separate_datastores_persistent_and_os_disks"] = o.UseSeparateDatastoresPersistentAndOsDisks
	}
	if o.UseSeparateDatastoresReplicaAndOsDisks != nil {
		toSerialize["use_separate_datastores_replica_and_os_disks"] = o.UseSeparateDatastoresReplicaAndOsDisks
	}
	if o.UseVsan != nil {
		toSerialize["use_vsan"] = o.UseVsan
	}
	return json.Marshal(toSerialize)
}

type NullableDesktopPoolStorageSettings struct {
	value *DesktopPoolStorageSettings
	isSet bool
}

func (v NullableDesktopPoolStorageSettings) Get() *DesktopPoolStorageSettings {
	return v.value
}

func (v *NullableDesktopPoolStorageSettings) Set(val *DesktopPoolStorageSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableDesktopPoolStorageSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableDesktopPoolStorageSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDesktopPoolStorageSettings(val *DesktopPoolStorageSettings) *NullableDesktopPoolStorageSettings {
	return &NullableDesktopPoolStorageSettings{value: val, isSet: true}
}

func (v NullableDesktopPoolStorageSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDesktopPoolStorageSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
