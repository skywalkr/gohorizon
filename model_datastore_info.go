/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the DatastoreInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatastoreInfo{}

// DatastoreInfo Information related to datastore.
type DatastoreInfo struct {
	// Maximum capacity of this datastore, in MB.
	CapacityMb *int64 `json:"capacity_mb,omitempty"`
	// Datacenter id for this datastore.
	DatacenterId *string `json:"datacenter_id,omitempty"`
	// Disk type of the datastore. * SSD: Solid State Drive disk type. * NON_SSD: NON-Solid State Drive disk type. * UNKNOWN: Unknown disk type. * NON_VMFS: NON-VMFS disk type.
	DiskType *string `json:"disk_type,omitempty"`
	// File system type of the datastore. * VMFS: Virtual Machine File System. * NFS: Network File System. * VSAN: vSAN File System. * VVOL: Virtual Volumes. * UNKNOWN: Unknown File System type.
	FileSystemType *string `json:"file_system_type,omitempty"`
	// Available capacity of this datastore, in MB.
	FreeSpaceMb *int64 `json:"free_space_mb,omitempty"`
	// Host or Cluster id for this datastore.
	HostOrClusterId *string `json:"host_or_cluster_id,omitempty"`
	// Unique ID representing the datastore.
	Id *string `json:"id,omitempty"`
	// Reasons that may preclude this Datastore from being used in desktop pool/farm.
	IncompatibleReasons []string `json:"incompatible_reasons,omitempty"`
	// Indicates if this datastore is local to a single host.
	LocalDatastore *bool `json:"local_datastore,omitempty"`
	// Datastore name.
	Name *string `json:"name,omitempty"`
	// Indicates the number of virtual machines the datastore has for desktop pool/farm when applicable
	NumberOfVms *int32 `json:"number_of_vms,omitempty"`
	// Datastore path.
	Path *string `json:"path,omitempty"`
	// Virtual Center id for this datastore.
	VcenterId *string `json:"vcenter_id,omitempty"`
	// The VMFS major version number.
	VmfsMajorVersion *string `json:"vmfs_major_version,omitempty"`
}

// NewDatastoreInfo instantiates a new DatastoreInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatastoreInfo() *DatastoreInfo {
	this := DatastoreInfo{}
	return &this
}

// NewDatastoreInfoWithDefaults instantiates a new DatastoreInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatastoreInfoWithDefaults() *DatastoreInfo {
	this := DatastoreInfo{}
	return &this
}

// GetCapacityMb returns the CapacityMb field value if set, zero value otherwise.
func (o *DatastoreInfo) GetCapacityMb() int64 {
	if o == nil || IsNil(o.CapacityMb) {
		var ret int64
		return ret
	}
	return *o.CapacityMb
}

// GetCapacityMbOk returns a tuple with the CapacityMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInfo) GetCapacityMbOk() (*int64, bool) {
	if o == nil || IsNil(o.CapacityMb) {
		return nil, false
	}
	return o.CapacityMb, true
}

// HasCapacityMb returns a boolean if a field has been set.
func (o *DatastoreInfo) HasCapacityMb() bool {
	if o != nil && !IsNil(o.CapacityMb) {
		return true
	}

	return false
}

// SetCapacityMb gets a reference to the given int64 and assigns it to the CapacityMb field.
func (o *DatastoreInfo) SetCapacityMb(v int64) {
	o.CapacityMb = &v
}

// GetDatacenterId returns the DatacenterId field value if set, zero value otherwise.
func (o *DatastoreInfo) GetDatacenterId() string {
	if o == nil || IsNil(o.DatacenterId) {
		var ret string
		return ret
	}
	return *o.DatacenterId
}

// GetDatacenterIdOk returns a tuple with the DatacenterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInfo) GetDatacenterIdOk() (*string, bool) {
	if o == nil || IsNil(o.DatacenterId) {
		return nil, false
	}
	return o.DatacenterId, true
}

// HasDatacenterId returns a boolean if a field has been set.
func (o *DatastoreInfo) HasDatacenterId() bool {
	if o != nil && !IsNil(o.DatacenterId) {
		return true
	}

	return false
}

// SetDatacenterId gets a reference to the given string and assigns it to the DatacenterId field.
func (o *DatastoreInfo) SetDatacenterId(v string) {
	o.DatacenterId = &v
}

// GetDiskType returns the DiskType field value if set, zero value otherwise.
func (o *DatastoreInfo) GetDiskType() string {
	if o == nil || IsNil(o.DiskType) {
		var ret string
		return ret
	}
	return *o.DiskType
}

// GetDiskTypeOk returns a tuple with the DiskType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInfo) GetDiskTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DiskType) {
		return nil, false
	}
	return o.DiskType, true
}

// HasDiskType returns a boolean if a field has been set.
func (o *DatastoreInfo) HasDiskType() bool {
	if o != nil && !IsNil(o.DiskType) {
		return true
	}

	return false
}

// SetDiskType gets a reference to the given string and assigns it to the DiskType field.
func (o *DatastoreInfo) SetDiskType(v string) {
	o.DiskType = &v
}

// GetFileSystemType returns the FileSystemType field value if set, zero value otherwise.
func (o *DatastoreInfo) GetFileSystemType() string {
	if o == nil || IsNil(o.FileSystemType) {
		var ret string
		return ret
	}
	return *o.FileSystemType
}

// GetFileSystemTypeOk returns a tuple with the FileSystemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInfo) GetFileSystemTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FileSystemType) {
		return nil, false
	}
	return o.FileSystemType, true
}

// HasFileSystemType returns a boolean if a field has been set.
func (o *DatastoreInfo) HasFileSystemType() bool {
	if o != nil && !IsNil(o.FileSystemType) {
		return true
	}

	return false
}

// SetFileSystemType gets a reference to the given string and assigns it to the FileSystemType field.
func (o *DatastoreInfo) SetFileSystemType(v string) {
	o.FileSystemType = &v
}

// GetFreeSpaceMb returns the FreeSpaceMb field value if set, zero value otherwise.
func (o *DatastoreInfo) GetFreeSpaceMb() int64 {
	if o == nil || IsNil(o.FreeSpaceMb) {
		var ret int64
		return ret
	}
	return *o.FreeSpaceMb
}

// GetFreeSpaceMbOk returns a tuple with the FreeSpaceMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInfo) GetFreeSpaceMbOk() (*int64, bool) {
	if o == nil || IsNil(o.FreeSpaceMb) {
		return nil, false
	}
	return o.FreeSpaceMb, true
}

// HasFreeSpaceMb returns a boolean if a field has been set.
func (o *DatastoreInfo) HasFreeSpaceMb() bool {
	if o != nil && !IsNil(o.FreeSpaceMb) {
		return true
	}

	return false
}

// SetFreeSpaceMb gets a reference to the given int64 and assigns it to the FreeSpaceMb field.
func (o *DatastoreInfo) SetFreeSpaceMb(v int64) {
	o.FreeSpaceMb = &v
}

// GetHostOrClusterId returns the HostOrClusterId field value if set, zero value otherwise.
func (o *DatastoreInfo) GetHostOrClusterId() string {
	if o == nil || IsNil(o.HostOrClusterId) {
		var ret string
		return ret
	}
	return *o.HostOrClusterId
}

// GetHostOrClusterIdOk returns a tuple with the HostOrClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInfo) GetHostOrClusterIdOk() (*string, bool) {
	if o == nil || IsNil(o.HostOrClusterId) {
		return nil, false
	}
	return o.HostOrClusterId, true
}

// HasHostOrClusterId returns a boolean if a field has been set.
func (o *DatastoreInfo) HasHostOrClusterId() bool {
	if o != nil && !IsNil(o.HostOrClusterId) {
		return true
	}

	return false
}

// SetHostOrClusterId gets a reference to the given string and assigns it to the HostOrClusterId field.
func (o *DatastoreInfo) SetHostOrClusterId(v string) {
	o.HostOrClusterId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DatastoreInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DatastoreInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DatastoreInfo) SetId(v string) {
	o.Id = &v
}

// GetIncompatibleReasons returns the IncompatibleReasons field value if set, zero value otherwise.
func (o *DatastoreInfo) GetIncompatibleReasons() []string {
	if o == nil || IsNil(o.IncompatibleReasons) {
		var ret []string
		return ret
	}
	return o.IncompatibleReasons
}

// GetIncompatibleReasonsOk returns a tuple with the IncompatibleReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInfo) GetIncompatibleReasonsOk() ([]string, bool) {
	if o == nil || IsNil(o.IncompatibleReasons) {
		return nil, false
	}
	return o.IncompatibleReasons, true
}

// HasIncompatibleReasons returns a boolean if a field has been set.
func (o *DatastoreInfo) HasIncompatibleReasons() bool {
	if o != nil && !IsNil(o.IncompatibleReasons) {
		return true
	}

	return false
}

// SetIncompatibleReasons gets a reference to the given []string and assigns it to the IncompatibleReasons field.
func (o *DatastoreInfo) SetIncompatibleReasons(v []string) {
	o.IncompatibleReasons = v
}

// GetLocalDatastore returns the LocalDatastore field value if set, zero value otherwise.
func (o *DatastoreInfo) GetLocalDatastore() bool {
	if o == nil || IsNil(o.LocalDatastore) {
		var ret bool
		return ret
	}
	return *o.LocalDatastore
}

// GetLocalDatastoreOk returns a tuple with the LocalDatastore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInfo) GetLocalDatastoreOk() (*bool, bool) {
	if o == nil || IsNil(o.LocalDatastore) {
		return nil, false
	}
	return o.LocalDatastore, true
}

// HasLocalDatastore returns a boolean if a field has been set.
func (o *DatastoreInfo) HasLocalDatastore() bool {
	if o != nil && !IsNil(o.LocalDatastore) {
		return true
	}

	return false
}

// SetLocalDatastore gets a reference to the given bool and assigns it to the LocalDatastore field.
func (o *DatastoreInfo) SetLocalDatastore(v bool) {
	o.LocalDatastore = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DatastoreInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DatastoreInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DatastoreInfo) SetName(v string) {
	o.Name = &v
}

// GetNumberOfVms returns the NumberOfVms field value if set, zero value otherwise.
func (o *DatastoreInfo) GetNumberOfVms() int32 {
	if o == nil || IsNil(o.NumberOfVms) {
		var ret int32
		return ret
	}
	return *o.NumberOfVms
}

// GetNumberOfVmsOk returns a tuple with the NumberOfVms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInfo) GetNumberOfVmsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfVms) {
		return nil, false
	}
	return o.NumberOfVms, true
}

// HasNumberOfVms returns a boolean if a field has been set.
func (o *DatastoreInfo) HasNumberOfVms() bool {
	if o != nil && !IsNil(o.NumberOfVms) {
		return true
	}

	return false
}

// SetNumberOfVms gets a reference to the given int32 and assigns it to the NumberOfVms field.
func (o *DatastoreInfo) SetNumberOfVms(v int32) {
	o.NumberOfVms = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *DatastoreInfo) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInfo) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *DatastoreInfo) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *DatastoreInfo) SetPath(v string) {
	o.Path = &v
}

// GetVcenterId returns the VcenterId field value if set, zero value otherwise.
func (o *DatastoreInfo) GetVcenterId() string {
	if o == nil || IsNil(o.VcenterId) {
		var ret string
		return ret
	}
	return *o.VcenterId
}

// GetVcenterIdOk returns a tuple with the VcenterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInfo) GetVcenterIdOk() (*string, bool) {
	if o == nil || IsNil(o.VcenterId) {
		return nil, false
	}
	return o.VcenterId, true
}

// HasVcenterId returns a boolean if a field has been set.
func (o *DatastoreInfo) HasVcenterId() bool {
	if o != nil && !IsNil(o.VcenterId) {
		return true
	}

	return false
}

// SetVcenterId gets a reference to the given string and assigns it to the VcenterId field.
func (o *DatastoreInfo) SetVcenterId(v string) {
	o.VcenterId = &v
}

// GetVmfsMajorVersion returns the VmfsMajorVersion field value if set, zero value otherwise.
func (o *DatastoreInfo) GetVmfsMajorVersion() string {
	if o == nil || IsNil(o.VmfsMajorVersion) {
		var ret string
		return ret
	}
	return *o.VmfsMajorVersion
}

// GetVmfsMajorVersionOk returns a tuple with the VmfsMajorVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreInfo) GetVmfsMajorVersionOk() (*string, bool) {
	if o == nil || IsNil(o.VmfsMajorVersion) {
		return nil, false
	}
	return o.VmfsMajorVersion, true
}

// HasVmfsMajorVersion returns a boolean if a field has been set.
func (o *DatastoreInfo) HasVmfsMajorVersion() bool {
	if o != nil && !IsNil(o.VmfsMajorVersion) {
		return true
	}

	return false
}

// SetVmfsMajorVersion gets a reference to the given string and assigns it to the VmfsMajorVersion field.
func (o *DatastoreInfo) SetVmfsMajorVersion(v string) {
	o.VmfsMajorVersion = &v
}

func (o DatastoreInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatastoreInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CapacityMb) {
		toSerialize["capacity_mb"] = o.CapacityMb
	}
	if !IsNil(o.DatacenterId) {
		toSerialize["datacenter_id"] = o.DatacenterId
	}
	if !IsNil(o.DiskType) {
		toSerialize["disk_type"] = o.DiskType
	}
	if !IsNil(o.FileSystemType) {
		toSerialize["file_system_type"] = o.FileSystemType
	}
	if !IsNil(o.FreeSpaceMb) {
		toSerialize["free_space_mb"] = o.FreeSpaceMb
	}
	if !IsNil(o.HostOrClusterId) {
		toSerialize["host_or_cluster_id"] = o.HostOrClusterId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IncompatibleReasons) {
		toSerialize["incompatible_reasons"] = o.IncompatibleReasons
	}
	if !IsNil(o.LocalDatastore) {
		toSerialize["local_datastore"] = o.LocalDatastore
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NumberOfVms) {
		toSerialize["number_of_vms"] = o.NumberOfVms
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.VcenterId) {
		toSerialize["vcenter_id"] = o.VcenterId
	}
	if !IsNil(o.VmfsMajorVersion) {
		toSerialize["vmfs_major_version"] = o.VmfsMajorVersion
	}
	return toSerialize, nil
}

type NullableDatastoreInfo struct {
	value *DatastoreInfo
	isSet bool
}

func (v NullableDatastoreInfo) Get() *DatastoreInfo {
	return v.value
}

func (v *NullableDatastoreInfo) Set(val *DatastoreInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDatastoreInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDatastoreInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatastoreInfo(val *DatastoreInfo) *NullableDatastoreInfo {
	return &NullableDatastoreInfo{value: val, isSet: true}
}

func (v NullableDatastoreInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatastoreInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


