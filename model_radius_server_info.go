/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the RADIUSServerInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RADIUSServerInfo{}

// RADIUSServerInfo Information related to a RADIUS authentication server.
type RADIUSServerInfo struct {
	// The accounting port of the RADIUS authentication server.
	AccountingPort *int32 `json:"accounting_port,omitempty"`
	// The authentication port of the RADIUS authentication server.
	AuthenticationPort *int32 `json:"authentication_port,omitempty"`
	// The authentication type of the RADIUS authentication server. * PAP: Password authentication protocol. * CHAP: Challenge-handshake authentication protocol. * MSCHAP1: Microsoft challenge-handshake authentication protocol, version 1. * MSCHAP2: Microsoft challenge-handshake authentication protocol, version 2. * UNKNOWN: Indicates Auth type is unkonwn.
	AuthenticationType *string `json:"authentication_type,omitempty"`
	// The hostname of the RADIUS authentication server.
	Hostname *string `json:"hostname,omitempty"`
	// The maximum number of authentication attempts for the RADIUS authentication server.
	MaxAttempts *int32 `json:"max_attempts,omitempty"`
	// Indicates whether it is a primary RADIUS authentication server.
	PrimaryRadiusServer *bool `json:"primary_radius_server,omitempty"`
	// The realm prefix of the RADIUS authentication server.
	RealmPrefix *string `json:"realm_prefix,omitempty"`
	// The realm suffix of the RADIUS authentication server.
	RealmSuffix *string `json:"realm_suffix,omitempty"`
	// The server timeout (in seconds) of the RADIUS authentication server.
	ServerTimeoutSeconds *int32 `json:"server_timeout_seconds,omitempty"`
}

// NewRADIUSServerInfo instantiates a new RADIUSServerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRADIUSServerInfo() *RADIUSServerInfo {
	this := RADIUSServerInfo{}
	return &this
}

// NewRADIUSServerInfoWithDefaults instantiates a new RADIUSServerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRADIUSServerInfoWithDefaults() *RADIUSServerInfo {
	this := RADIUSServerInfo{}
	return &this
}

// GetAccountingPort returns the AccountingPort field value if set, zero value otherwise.
func (o *RADIUSServerInfo) GetAccountingPort() int32 {
	if o == nil || IsNil(o.AccountingPort) {
		var ret int32
		return ret
	}
	return *o.AccountingPort
}

// GetAccountingPortOk returns a tuple with the AccountingPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RADIUSServerInfo) GetAccountingPortOk() (*int32, bool) {
	if o == nil || IsNil(o.AccountingPort) {
		return nil, false
	}
	return o.AccountingPort, true
}

// HasAccountingPort returns a boolean if a field has been set.
func (o *RADIUSServerInfo) HasAccountingPort() bool {
	if o != nil && !IsNil(o.AccountingPort) {
		return true
	}

	return false
}

// SetAccountingPort gets a reference to the given int32 and assigns it to the AccountingPort field.
func (o *RADIUSServerInfo) SetAccountingPort(v int32) {
	o.AccountingPort = &v
}

// GetAuthenticationPort returns the AuthenticationPort field value if set, zero value otherwise.
func (o *RADIUSServerInfo) GetAuthenticationPort() int32 {
	if o == nil || IsNil(o.AuthenticationPort) {
		var ret int32
		return ret
	}
	return *o.AuthenticationPort
}

// GetAuthenticationPortOk returns a tuple with the AuthenticationPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RADIUSServerInfo) GetAuthenticationPortOk() (*int32, bool) {
	if o == nil || IsNil(o.AuthenticationPort) {
		return nil, false
	}
	return o.AuthenticationPort, true
}

// HasAuthenticationPort returns a boolean if a field has been set.
func (o *RADIUSServerInfo) HasAuthenticationPort() bool {
	if o != nil && !IsNil(o.AuthenticationPort) {
		return true
	}

	return false
}

// SetAuthenticationPort gets a reference to the given int32 and assigns it to the AuthenticationPort field.
func (o *RADIUSServerInfo) SetAuthenticationPort(v int32) {
	o.AuthenticationPort = &v
}

// GetAuthenticationType returns the AuthenticationType field value if set, zero value otherwise.
func (o *RADIUSServerInfo) GetAuthenticationType() string {
	if o == nil || IsNil(o.AuthenticationType) {
		var ret string
		return ret
	}
	return *o.AuthenticationType
}

// GetAuthenticationTypeOk returns a tuple with the AuthenticationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RADIUSServerInfo) GetAuthenticationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthenticationType) {
		return nil, false
	}
	return o.AuthenticationType, true
}

// HasAuthenticationType returns a boolean if a field has been set.
func (o *RADIUSServerInfo) HasAuthenticationType() bool {
	if o != nil && !IsNil(o.AuthenticationType) {
		return true
	}

	return false
}

// SetAuthenticationType gets a reference to the given string and assigns it to the AuthenticationType field.
func (o *RADIUSServerInfo) SetAuthenticationType(v string) {
	o.AuthenticationType = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *RADIUSServerInfo) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RADIUSServerInfo) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *RADIUSServerInfo) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *RADIUSServerInfo) SetHostname(v string) {
	o.Hostname = &v
}

// GetMaxAttempts returns the MaxAttempts field value if set, zero value otherwise.
func (o *RADIUSServerInfo) GetMaxAttempts() int32 {
	if o == nil || IsNil(o.MaxAttempts) {
		var ret int32
		return ret
	}
	return *o.MaxAttempts
}

// GetMaxAttemptsOk returns a tuple with the MaxAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RADIUSServerInfo) GetMaxAttemptsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxAttempts) {
		return nil, false
	}
	return o.MaxAttempts, true
}

// HasMaxAttempts returns a boolean if a field has been set.
func (o *RADIUSServerInfo) HasMaxAttempts() bool {
	if o != nil && !IsNil(o.MaxAttempts) {
		return true
	}

	return false
}

// SetMaxAttempts gets a reference to the given int32 and assigns it to the MaxAttempts field.
func (o *RADIUSServerInfo) SetMaxAttempts(v int32) {
	o.MaxAttempts = &v
}

// GetPrimaryRadiusServer returns the PrimaryRadiusServer field value if set, zero value otherwise.
func (o *RADIUSServerInfo) GetPrimaryRadiusServer() bool {
	if o == nil || IsNil(o.PrimaryRadiusServer) {
		var ret bool
		return ret
	}
	return *o.PrimaryRadiusServer
}

// GetPrimaryRadiusServerOk returns a tuple with the PrimaryRadiusServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RADIUSServerInfo) GetPrimaryRadiusServerOk() (*bool, bool) {
	if o == nil || IsNil(o.PrimaryRadiusServer) {
		return nil, false
	}
	return o.PrimaryRadiusServer, true
}

// HasPrimaryRadiusServer returns a boolean if a field has been set.
func (o *RADIUSServerInfo) HasPrimaryRadiusServer() bool {
	if o != nil && !IsNil(o.PrimaryRadiusServer) {
		return true
	}

	return false
}

// SetPrimaryRadiusServer gets a reference to the given bool and assigns it to the PrimaryRadiusServer field.
func (o *RADIUSServerInfo) SetPrimaryRadiusServer(v bool) {
	o.PrimaryRadiusServer = &v
}

// GetRealmPrefix returns the RealmPrefix field value if set, zero value otherwise.
func (o *RADIUSServerInfo) GetRealmPrefix() string {
	if o == nil || IsNil(o.RealmPrefix) {
		var ret string
		return ret
	}
	return *o.RealmPrefix
}

// GetRealmPrefixOk returns a tuple with the RealmPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RADIUSServerInfo) GetRealmPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.RealmPrefix) {
		return nil, false
	}
	return o.RealmPrefix, true
}

// HasRealmPrefix returns a boolean if a field has been set.
func (o *RADIUSServerInfo) HasRealmPrefix() bool {
	if o != nil && !IsNil(o.RealmPrefix) {
		return true
	}

	return false
}

// SetRealmPrefix gets a reference to the given string and assigns it to the RealmPrefix field.
func (o *RADIUSServerInfo) SetRealmPrefix(v string) {
	o.RealmPrefix = &v
}

// GetRealmSuffix returns the RealmSuffix field value if set, zero value otherwise.
func (o *RADIUSServerInfo) GetRealmSuffix() string {
	if o == nil || IsNil(o.RealmSuffix) {
		var ret string
		return ret
	}
	return *o.RealmSuffix
}

// GetRealmSuffixOk returns a tuple with the RealmSuffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RADIUSServerInfo) GetRealmSuffixOk() (*string, bool) {
	if o == nil || IsNil(o.RealmSuffix) {
		return nil, false
	}
	return o.RealmSuffix, true
}

// HasRealmSuffix returns a boolean if a field has been set.
func (o *RADIUSServerInfo) HasRealmSuffix() bool {
	if o != nil && !IsNil(o.RealmSuffix) {
		return true
	}

	return false
}

// SetRealmSuffix gets a reference to the given string and assigns it to the RealmSuffix field.
func (o *RADIUSServerInfo) SetRealmSuffix(v string) {
	o.RealmSuffix = &v
}

// GetServerTimeoutSeconds returns the ServerTimeoutSeconds field value if set, zero value otherwise.
func (o *RADIUSServerInfo) GetServerTimeoutSeconds() int32 {
	if o == nil || IsNil(o.ServerTimeoutSeconds) {
		var ret int32
		return ret
	}
	return *o.ServerTimeoutSeconds
}

// GetServerTimeoutSecondsOk returns a tuple with the ServerTimeoutSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RADIUSServerInfo) GetServerTimeoutSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.ServerTimeoutSeconds) {
		return nil, false
	}
	return o.ServerTimeoutSeconds, true
}

// HasServerTimeoutSeconds returns a boolean if a field has been set.
func (o *RADIUSServerInfo) HasServerTimeoutSeconds() bool {
	if o != nil && !IsNil(o.ServerTimeoutSeconds) {
		return true
	}

	return false
}

// SetServerTimeoutSeconds gets a reference to the given int32 and assigns it to the ServerTimeoutSeconds field.
func (o *RADIUSServerInfo) SetServerTimeoutSeconds(v int32) {
	o.ServerTimeoutSeconds = &v
}

func (o RADIUSServerInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RADIUSServerInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountingPort) {
		toSerialize["accounting_port"] = o.AccountingPort
	}
	if !IsNil(o.AuthenticationPort) {
		toSerialize["authentication_port"] = o.AuthenticationPort
	}
	if !IsNil(o.AuthenticationType) {
		toSerialize["authentication_type"] = o.AuthenticationType
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.MaxAttempts) {
		toSerialize["max_attempts"] = o.MaxAttempts
	}
	if !IsNil(o.PrimaryRadiusServer) {
		toSerialize["primary_radius_server"] = o.PrimaryRadiusServer
	}
	if !IsNil(o.RealmPrefix) {
		toSerialize["realm_prefix"] = o.RealmPrefix
	}
	if !IsNil(o.RealmSuffix) {
		toSerialize["realm_suffix"] = o.RealmSuffix
	}
	if !IsNil(o.ServerTimeoutSeconds) {
		toSerialize["server_timeout_seconds"] = o.ServerTimeoutSeconds
	}
	return toSerialize, nil
}

type NullableRADIUSServerInfo struct {
	value *RADIUSServerInfo
	isSet bool
}

func (v NullableRADIUSServerInfo) Get() *RADIUSServerInfo {
	return v.value
}

func (v *NullableRADIUSServerInfo) Set(val *RADIUSServerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRADIUSServerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRADIUSServerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRADIUSServerInfo(val *RADIUSServerInfo) *NullableRADIUSServerInfo {
	return &NullableRADIUSServerInfo{value: val, isSet: true}
}

func (v NullableRADIUSServerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRADIUSServerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


