/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the SettingsUpdateSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettingsUpdateSpec{}

// SettingsUpdateSpec Update specification for the configuration settings.
type SettingsUpdateSpec struct {
	FeatureSettings *FeatureSettingsUpdateSpec `json:"feature_settings,omitempty"`
	GeneralSettings *GeneralSettingsUpdateSpec `json:"general_settings,omitempty"`
	SecuritySettings *SecuritySettingsUpdateSpec `json:"security_settings,omitempty"`
}

// NewSettingsUpdateSpec instantiates a new SettingsUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingsUpdateSpec() *SettingsUpdateSpec {
	this := SettingsUpdateSpec{}
	return &this
}

// NewSettingsUpdateSpecWithDefaults instantiates a new SettingsUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsUpdateSpecWithDefaults() *SettingsUpdateSpec {
	this := SettingsUpdateSpec{}
	return &this
}

// GetFeatureSettings returns the FeatureSettings field value if set, zero value otherwise.
func (o *SettingsUpdateSpec) GetFeatureSettings() FeatureSettingsUpdateSpec {
	if o == nil || IsNil(o.FeatureSettings) {
		var ret FeatureSettingsUpdateSpec
		return ret
	}
	return *o.FeatureSettings
}

// GetFeatureSettingsOk returns a tuple with the FeatureSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsUpdateSpec) GetFeatureSettingsOk() (*FeatureSettingsUpdateSpec, bool) {
	if o == nil || IsNil(o.FeatureSettings) {
		return nil, false
	}
	return o.FeatureSettings, true
}

// HasFeatureSettings returns a boolean if a field has been set.
func (o *SettingsUpdateSpec) HasFeatureSettings() bool {
	if o != nil && !IsNil(o.FeatureSettings) {
		return true
	}

	return false
}

// SetFeatureSettings gets a reference to the given FeatureSettingsUpdateSpec and assigns it to the FeatureSettings field.
func (o *SettingsUpdateSpec) SetFeatureSettings(v FeatureSettingsUpdateSpec) {
	o.FeatureSettings = &v
}

// GetGeneralSettings returns the GeneralSettings field value if set, zero value otherwise.
func (o *SettingsUpdateSpec) GetGeneralSettings() GeneralSettingsUpdateSpec {
	if o == nil || IsNil(o.GeneralSettings) {
		var ret GeneralSettingsUpdateSpec
		return ret
	}
	return *o.GeneralSettings
}

// GetGeneralSettingsOk returns a tuple with the GeneralSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsUpdateSpec) GetGeneralSettingsOk() (*GeneralSettingsUpdateSpec, bool) {
	if o == nil || IsNil(o.GeneralSettings) {
		return nil, false
	}
	return o.GeneralSettings, true
}

// HasGeneralSettings returns a boolean if a field has been set.
func (o *SettingsUpdateSpec) HasGeneralSettings() bool {
	if o != nil && !IsNil(o.GeneralSettings) {
		return true
	}

	return false
}

// SetGeneralSettings gets a reference to the given GeneralSettingsUpdateSpec and assigns it to the GeneralSettings field.
func (o *SettingsUpdateSpec) SetGeneralSettings(v GeneralSettingsUpdateSpec) {
	o.GeneralSettings = &v
}

// GetSecuritySettings returns the SecuritySettings field value if set, zero value otherwise.
func (o *SettingsUpdateSpec) GetSecuritySettings() SecuritySettingsUpdateSpec {
	if o == nil || IsNil(o.SecuritySettings) {
		var ret SecuritySettingsUpdateSpec
		return ret
	}
	return *o.SecuritySettings
}

// GetSecuritySettingsOk returns a tuple with the SecuritySettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsUpdateSpec) GetSecuritySettingsOk() (*SecuritySettingsUpdateSpec, bool) {
	if o == nil || IsNil(o.SecuritySettings) {
		return nil, false
	}
	return o.SecuritySettings, true
}

// HasSecuritySettings returns a boolean if a field has been set.
func (o *SettingsUpdateSpec) HasSecuritySettings() bool {
	if o != nil && !IsNil(o.SecuritySettings) {
		return true
	}

	return false
}

// SetSecuritySettings gets a reference to the given SecuritySettingsUpdateSpec and assigns it to the SecuritySettings field.
func (o *SettingsUpdateSpec) SetSecuritySettings(v SecuritySettingsUpdateSpec) {
	o.SecuritySettings = &v
}

func (o SettingsUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettingsUpdateSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FeatureSettings) {
		toSerialize["feature_settings"] = o.FeatureSettings
	}
	if !IsNil(o.GeneralSettings) {
		toSerialize["general_settings"] = o.GeneralSettings
	}
	if !IsNil(o.SecuritySettings) {
		toSerialize["security_settings"] = o.SecuritySettings
	}
	return toSerialize, nil
}

type NullableSettingsUpdateSpec struct {
	value *SettingsUpdateSpec
	isSet bool
}

func (v NullableSettingsUpdateSpec) Get() *SettingsUpdateSpec {
	return v.value
}

func (v *NullableSettingsUpdateSpec) Set(val *SettingsUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingsUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingsUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingsUpdateSpec(val *SettingsUpdateSpec) *NullableSettingsUpdateSpec {
	return &NullableSettingsUpdateSpec{value: val, isSet: true}
}

func (v NullableSettingsUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingsUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


