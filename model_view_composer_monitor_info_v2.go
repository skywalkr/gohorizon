/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// checks if the ViewComposerMonitorInfoV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewComposerMonitorInfoV2{}

// ViewComposerMonitorInfoV2 Monitoring information related to View Composer.
type ViewComposerMonitorInfoV2 struct {
	// Information about the View Composer connections from each of the connection servers.
	ConnectionServers []ViewComposerMonitorConnectionServerV2 `json:"connection_servers,omitempty"`
	Details *ViewComposerMonitorDetails `json:"details,omitempty"`
	// View Composer server host name or IP address.
	Name *string `json:"name,omitempty"`
	// View Composer server port number.
	Port *int32 `json:"port,omitempty"`
}

// NewViewComposerMonitorInfoV2 instantiates a new ViewComposerMonitorInfoV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewComposerMonitorInfoV2() *ViewComposerMonitorInfoV2 {
	this := ViewComposerMonitorInfoV2{}
	return &this
}

// NewViewComposerMonitorInfoV2WithDefaults instantiates a new ViewComposerMonitorInfoV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewComposerMonitorInfoV2WithDefaults() *ViewComposerMonitorInfoV2 {
	this := ViewComposerMonitorInfoV2{}
	return &this
}

// GetConnectionServers returns the ConnectionServers field value if set, zero value otherwise.
func (o *ViewComposerMonitorInfoV2) GetConnectionServers() []ViewComposerMonitorConnectionServerV2 {
	if o == nil || IsNil(o.ConnectionServers) {
		var ret []ViewComposerMonitorConnectionServerV2
		return ret
	}
	return o.ConnectionServers
}

// GetConnectionServersOk returns a tuple with the ConnectionServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewComposerMonitorInfoV2) GetConnectionServersOk() ([]ViewComposerMonitorConnectionServerV2, bool) {
	if o == nil || IsNil(o.ConnectionServers) {
		return nil, false
	}
	return o.ConnectionServers, true
}

// HasConnectionServers returns a boolean if a field has been set.
func (o *ViewComposerMonitorInfoV2) HasConnectionServers() bool {
	if o != nil && !IsNil(o.ConnectionServers) {
		return true
	}

	return false
}

// SetConnectionServers gets a reference to the given []ViewComposerMonitorConnectionServerV2 and assigns it to the ConnectionServers field.
func (o *ViewComposerMonitorInfoV2) SetConnectionServers(v []ViewComposerMonitorConnectionServerV2) {
	o.ConnectionServers = v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *ViewComposerMonitorInfoV2) GetDetails() ViewComposerMonitorDetails {
	if o == nil || IsNil(o.Details) {
		var ret ViewComposerMonitorDetails
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewComposerMonitorInfoV2) GetDetailsOk() (*ViewComposerMonitorDetails, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *ViewComposerMonitorInfoV2) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given ViewComposerMonitorDetails and assigns it to the Details field.
func (o *ViewComposerMonitorInfoV2) SetDetails(v ViewComposerMonitorDetails) {
	o.Details = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ViewComposerMonitorInfoV2) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewComposerMonitorInfoV2) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ViewComposerMonitorInfoV2) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ViewComposerMonitorInfoV2) SetName(v string) {
	o.Name = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *ViewComposerMonitorInfoV2) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewComposerMonitorInfoV2) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *ViewComposerMonitorInfoV2) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *ViewComposerMonitorInfoV2) SetPort(v int32) {
	o.Port = &v
}

func (o ViewComposerMonitorInfoV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewComposerMonitorInfoV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConnectionServers) {
		toSerialize["connection_servers"] = o.ConnectionServers
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	return toSerialize, nil
}

type NullableViewComposerMonitorInfoV2 struct {
	value *ViewComposerMonitorInfoV2
	isSet bool
}

func (v NullableViewComposerMonitorInfoV2) Get() *ViewComposerMonitorInfoV2 {
	return v.value
}

func (v *NullableViewComposerMonitorInfoV2) Set(val *ViewComposerMonitorInfoV2) {
	v.value = val
	v.isSet = true
}

func (v NullableViewComposerMonitorInfoV2) IsSet() bool {
	return v.isSet
}

func (v *NullableViewComposerMonitorInfoV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewComposerMonitorInfoV2(val *ViewComposerMonitorInfoV2) *NullableViewComposerMonitorInfoV2 {
	return &NullableViewComposerMonitorInfoV2{value: val, isSet: true}
}

func (v NullableViewComposerMonitorInfoV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewComposerMonitorInfoV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


