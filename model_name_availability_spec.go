/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2111
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// NameAvailabilitySpec Information required for checking name availability of an inventory resource.
type NameAvailabilitySpec struct {
	// Name of the inventory resource to be checked for availability.
	Name string `json:"name"`
}

// NewNameAvailabilitySpec instantiates a new NameAvailabilitySpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNameAvailabilitySpec(name string) *NameAvailabilitySpec {
	this := NameAvailabilitySpec{}
	this.Name = name
	return &this
}

// NewNameAvailabilitySpecWithDefaults instantiates a new NameAvailabilitySpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNameAvailabilitySpecWithDefaults() *NameAvailabilitySpec {
	this := NameAvailabilitySpec{}
	return &this
}

// GetName returns the Name field value
func (o *NameAvailabilitySpec) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NameAvailabilitySpec) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NameAvailabilitySpec) SetName(v string) {
	o.Name = v
}

func (o NameAvailabilitySpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableNameAvailabilitySpec struct {
	value *NameAvailabilitySpec
	isSet bool
}

func (v NullableNameAvailabilitySpec) Get() *NameAvailabilitySpec {
	return v.value
}

func (v *NullableNameAvailabilitySpec) Set(val *NameAvailabilitySpec) {
	v.value = val
	v.isSet = true
}

func (v NullableNameAvailabilitySpec) IsSet() bool {
	return v.isSet
}

func (v *NullableNameAvailabilitySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNameAvailabilitySpec(val *NameAvailabilitySpec) *NullableNameAvailabilitySpec {
	return &NullableNameAvailabilitySpec{value: val, isSet: true}
}

func (v NullableNameAvailabilitySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNameAvailabilitySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
