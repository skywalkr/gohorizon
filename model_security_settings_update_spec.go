/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SecuritySettingsUpdateSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecuritySettingsUpdateSpec{}

// SecuritySettingsUpdateSpec Information related to Security Settings.
type SecuritySettingsUpdateSpec struct {
	// The SHA-256 hash of the (UTF-8) data recovery password.
	DataRecoveryPasswordHash []string `json:"data_recovery_password_hash,omitempty"`
	// The data recovery password hint. This property has a maximum length of 128 characters.
	DataRecoveryPasswordHint *string `json:"data_recovery_password_hint,omitempty"`
	// Determines if signing and verification of the JMS messages passed between Horizon components takes place. * DISABLED: Message security mode is disabled. * MIXED: Message security mode is enabled but not enforced. * ENABLED: Message security mode is enabled. Unsigned messages are rejected by Horizon components. * ENHANCED: Message Security mode is Enhanced. Message signing and validation is performed based on the current Security Level and desktop Message Security mode.
	MessageSecurityMode string `json:"message_security_mode"`
	// Determines if user credentials must be re-authenticated after a network interruption when Horizon clients use secure tunnel connections to Horizon resources. When you select this setting, if a secure tunnel connection ends during a session, Horizon Client requires the user to re-authenticate before reconnecting.
	ReAuthSecureTunnelAfterInterruption *bool `json:"re_auth_secure_tunnel_after_interruption,omitempty"`
}

type _SecuritySettingsUpdateSpec SecuritySettingsUpdateSpec

// NewSecuritySettingsUpdateSpec instantiates a new SecuritySettingsUpdateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecuritySettingsUpdateSpec(messageSecurityMode string) *SecuritySettingsUpdateSpec {
	this := SecuritySettingsUpdateSpec{}
	this.MessageSecurityMode = messageSecurityMode
	return &this
}

// NewSecuritySettingsUpdateSpecWithDefaults instantiates a new SecuritySettingsUpdateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecuritySettingsUpdateSpecWithDefaults() *SecuritySettingsUpdateSpec {
	this := SecuritySettingsUpdateSpec{}
	return &this
}

// GetDataRecoveryPasswordHash returns the DataRecoveryPasswordHash field value if set, zero value otherwise.
func (o *SecuritySettingsUpdateSpec) GetDataRecoveryPasswordHash() []string {
	if o == nil || IsNil(o.DataRecoveryPasswordHash) {
		var ret []string
		return ret
	}
	return o.DataRecoveryPasswordHash
}

// GetDataRecoveryPasswordHashOk returns a tuple with the DataRecoveryPasswordHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecuritySettingsUpdateSpec) GetDataRecoveryPasswordHashOk() ([]string, bool) {
	if o == nil || IsNil(o.DataRecoveryPasswordHash) {
		return nil, false
	}
	return o.DataRecoveryPasswordHash, true
}

// HasDataRecoveryPasswordHash returns a boolean if a field has been set.
func (o *SecuritySettingsUpdateSpec) HasDataRecoveryPasswordHash() bool {
	if o != nil && !IsNil(o.DataRecoveryPasswordHash) {
		return true
	}

	return false
}

// SetDataRecoveryPasswordHash gets a reference to the given []string and assigns it to the DataRecoveryPasswordHash field.
func (o *SecuritySettingsUpdateSpec) SetDataRecoveryPasswordHash(v []string) {
	o.DataRecoveryPasswordHash = v
}

// GetDataRecoveryPasswordHint returns the DataRecoveryPasswordHint field value if set, zero value otherwise.
func (o *SecuritySettingsUpdateSpec) GetDataRecoveryPasswordHint() string {
	if o == nil || IsNil(o.DataRecoveryPasswordHint) {
		var ret string
		return ret
	}
	return *o.DataRecoveryPasswordHint
}

// GetDataRecoveryPasswordHintOk returns a tuple with the DataRecoveryPasswordHint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecuritySettingsUpdateSpec) GetDataRecoveryPasswordHintOk() (*string, bool) {
	if o == nil || IsNil(o.DataRecoveryPasswordHint) {
		return nil, false
	}
	return o.DataRecoveryPasswordHint, true
}

// HasDataRecoveryPasswordHint returns a boolean if a field has been set.
func (o *SecuritySettingsUpdateSpec) HasDataRecoveryPasswordHint() bool {
	if o != nil && !IsNil(o.DataRecoveryPasswordHint) {
		return true
	}

	return false
}

// SetDataRecoveryPasswordHint gets a reference to the given string and assigns it to the DataRecoveryPasswordHint field.
func (o *SecuritySettingsUpdateSpec) SetDataRecoveryPasswordHint(v string) {
	o.DataRecoveryPasswordHint = &v
}

// GetMessageSecurityMode returns the MessageSecurityMode field value
func (o *SecuritySettingsUpdateSpec) GetMessageSecurityMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MessageSecurityMode
}

// GetMessageSecurityModeOk returns a tuple with the MessageSecurityMode field value
// and a boolean to check if the value has been set.
func (o *SecuritySettingsUpdateSpec) GetMessageSecurityModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MessageSecurityMode, true
}

// SetMessageSecurityMode sets field value
func (o *SecuritySettingsUpdateSpec) SetMessageSecurityMode(v string) {
	o.MessageSecurityMode = v
}

// GetReAuthSecureTunnelAfterInterruption returns the ReAuthSecureTunnelAfterInterruption field value if set, zero value otherwise.
func (o *SecuritySettingsUpdateSpec) GetReAuthSecureTunnelAfterInterruption() bool {
	if o == nil || IsNil(o.ReAuthSecureTunnelAfterInterruption) {
		var ret bool
		return ret
	}
	return *o.ReAuthSecureTunnelAfterInterruption
}

// GetReAuthSecureTunnelAfterInterruptionOk returns a tuple with the ReAuthSecureTunnelAfterInterruption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecuritySettingsUpdateSpec) GetReAuthSecureTunnelAfterInterruptionOk() (*bool, bool) {
	if o == nil || IsNil(o.ReAuthSecureTunnelAfterInterruption) {
		return nil, false
	}
	return o.ReAuthSecureTunnelAfterInterruption, true
}

// HasReAuthSecureTunnelAfterInterruption returns a boolean if a field has been set.
func (o *SecuritySettingsUpdateSpec) HasReAuthSecureTunnelAfterInterruption() bool {
	if o != nil && !IsNil(o.ReAuthSecureTunnelAfterInterruption) {
		return true
	}

	return false
}

// SetReAuthSecureTunnelAfterInterruption gets a reference to the given bool and assigns it to the ReAuthSecureTunnelAfterInterruption field.
func (o *SecuritySettingsUpdateSpec) SetReAuthSecureTunnelAfterInterruption(v bool) {
	o.ReAuthSecureTunnelAfterInterruption = &v
}

func (o SecuritySettingsUpdateSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecuritySettingsUpdateSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataRecoveryPasswordHash) {
		toSerialize["data_recovery_password_hash"] = o.DataRecoveryPasswordHash
	}
	if !IsNil(o.DataRecoveryPasswordHint) {
		toSerialize["data_recovery_password_hint"] = o.DataRecoveryPasswordHint
	}
	toSerialize["message_security_mode"] = o.MessageSecurityMode
	if !IsNil(o.ReAuthSecureTunnelAfterInterruption) {
		toSerialize["re_auth_secure_tunnel_after_interruption"] = o.ReAuthSecureTunnelAfterInterruption
	}
	return toSerialize, nil
}

func (o *SecuritySettingsUpdateSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message_security_mode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSecuritySettingsUpdateSpec := _SecuritySettingsUpdateSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSecuritySettingsUpdateSpec)

	if err != nil {
		return err
	}

	*o = SecuritySettingsUpdateSpec(varSecuritySettingsUpdateSpec)

	return err
}

type NullableSecuritySettingsUpdateSpec struct {
	value *SecuritySettingsUpdateSpec
	isSet bool
}

func (v NullableSecuritySettingsUpdateSpec) Get() *SecuritySettingsUpdateSpec {
	return v.value
}

func (v *NullableSecuritySettingsUpdateSpec) Set(val *SecuritySettingsUpdateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableSecuritySettingsUpdateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableSecuritySettingsUpdateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecuritySettingsUpdateSpec(val *SecuritySettingsUpdateSpec) *NullableSecuritySettingsUpdateSpec {
	return &NullableSecuritySettingsUpdateSpec{value: val, isSet: true}
}

func (v NullableSecuritySettingsUpdateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecuritySettingsUpdateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


