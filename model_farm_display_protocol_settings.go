/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2111
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
)

// FarmDisplayProtocolSettings Display protocol settings for the Farm.
type FarmDisplayProtocolSettings struct {
	// Indicates whether the display protocol settings could be overridden.If set to false, then default_display_protocol is used.Default value is true.
	AllowDisplayProtocolOverride *bool `json:"allow_display_protocol_override,omitempty"`
	// The default server display protocol. Default value is PCOIP. * RDP: Microsoft Remote Desktop Protocol. * PCOIP: PCoIP protocol. * BLAST: BLAST protocol.
	DefaultDisplayProtocol *string `json:"default_display_protocol,omitempty"`
	// If this is true, the host or cluster associated with the farm must support NVIDIA GRID andvGPU types required by the RDSH desktop virtualMachines, VmTemplate, or BaseImageSnapshot.If this is false, RDSH instant clone farm must not support NVIDIA GRID vGPUs.Default value is false.
	GridVgpusEnabled *bool `json:"grid_vgpus_enabled,omitempty"`
	// This property is no longer in use for Horizon Components. It is always set to true. HTML Access, enabled by VMware Blast technology, allows users to connect to Horizon machines from Web browsers. Horizon Client software does not have to be installed on the client devices. To enable HTML Access, you must install the HTML Machine Access feature pack.
	HtmlAccessEnabled *bool `json:"html_access_enabled,omitempty"`
	// Enable session collaboration feature. Session collaborationallows a user to share their remote session with other users.BLAST must be configured as a supported protocol in supported_display_protocols.Default value is false.
	SessionCollaborationEnabled *bool `json:"session_collaboration_enabled,omitempty"`
	// NVIDIA GRID vGPUs might have multiple profiles and any one of the available profiles can beapplied to newly created instant clone RDSH server. The profile specified in this field will beused in the newly created instant clone RDSH server. Will be set if enable_grid_vgpus set to true.
	VgpuGridProfile *string `json:"vgpu_grid_profile,omitempty"`
}

// NewFarmDisplayProtocolSettings instantiates a new FarmDisplayProtocolSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFarmDisplayProtocolSettings() *FarmDisplayProtocolSettings {
	this := FarmDisplayProtocolSettings{}
	return &this
}

// NewFarmDisplayProtocolSettingsWithDefaults instantiates a new FarmDisplayProtocolSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFarmDisplayProtocolSettingsWithDefaults() *FarmDisplayProtocolSettings {
	this := FarmDisplayProtocolSettings{}
	return &this
}

// GetAllowDisplayProtocolOverride returns the AllowDisplayProtocolOverride field value if set, zero value otherwise.
func (o *FarmDisplayProtocolSettings) GetAllowDisplayProtocolOverride() bool {
	if o == nil || o.AllowDisplayProtocolOverride == nil {
		var ret bool
		return ret
	}
	return *o.AllowDisplayProtocolOverride
}

// GetAllowDisplayProtocolOverrideOk returns a tuple with the AllowDisplayProtocolOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmDisplayProtocolSettings) GetAllowDisplayProtocolOverrideOk() (*bool, bool) {
	if o == nil || o.AllowDisplayProtocolOverride == nil {
		return nil, false
	}
	return o.AllowDisplayProtocolOverride, true
}

// HasAllowDisplayProtocolOverride returns a boolean if a field has been set.
func (o *FarmDisplayProtocolSettings) HasAllowDisplayProtocolOverride() bool {
	if o != nil && o.AllowDisplayProtocolOverride != nil {
		return true
	}

	return false
}

// SetAllowDisplayProtocolOverride gets a reference to the given bool and assigns it to the AllowDisplayProtocolOverride field.
func (o *FarmDisplayProtocolSettings) SetAllowDisplayProtocolOverride(v bool) {
	o.AllowDisplayProtocolOverride = &v
}

// GetDefaultDisplayProtocol returns the DefaultDisplayProtocol field value if set, zero value otherwise.
func (o *FarmDisplayProtocolSettings) GetDefaultDisplayProtocol() string {
	if o == nil || o.DefaultDisplayProtocol == nil {
		var ret string
		return ret
	}
	return *o.DefaultDisplayProtocol
}

// GetDefaultDisplayProtocolOk returns a tuple with the DefaultDisplayProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmDisplayProtocolSettings) GetDefaultDisplayProtocolOk() (*string, bool) {
	if o == nil || o.DefaultDisplayProtocol == nil {
		return nil, false
	}
	return o.DefaultDisplayProtocol, true
}

// HasDefaultDisplayProtocol returns a boolean if a field has been set.
func (o *FarmDisplayProtocolSettings) HasDefaultDisplayProtocol() bool {
	if o != nil && o.DefaultDisplayProtocol != nil {
		return true
	}

	return false
}

// SetDefaultDisplayProtocol gets a reference to the given string and assigns it to the DefaultDisplayProtocol field.
func (o *FarmDisplayProtocolSettings) SetDefaultDisplayProtocol(v string) {
	o.DefaultDisplayProtocol = &v
}

// GetGridVgpusEnabled returns the GridVgpusEnabled field value if set, zero value otherwise.
func (o *FarmDisplayProtocolSettings) GetGridVgpusEnabled() bool {
	if o == nil || o.GridVgpusEnabled == nil {
		var ret bool
		return ret
	}
	return *o.GridVgpusEnabled
}

// GetGridVgpusEnabledOk returns a tuple with the GridVgpusEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmDisplayProtocolSettings) GetGridVgpusEnabledOk() (*bool, bool) {
	if o == nil || o.GridVgpusEnabled == nil {
		return nil, false
	}
	return o.GridVgpusEnabled, true
}

// HasGridVgpusEnabled returns a boolean if a field has been set.
func (o *FarmDisplayProtocolSettings) HasGridVgpusEnabled() bool {
	if o != nil && o.GridVgpusEnabled != nil {
		return true
	}

	return false
}

// SetGridVgpusEnabled gets a reference to the given bool and assigns it to the GridVgpusEnabled field.
func (o *FarmDisplayProtocolSettings) SetGridVgpusEnabled(v bool) {
	o.GridVgpusEnabled = &v
}

// GetHtmlAccessEnabled returns the HtmlAccessEnabled field value if set, zero value otherwise.
func (o *FarmDisplayProtocolSettings) GetHtmlAccessEnabled() bool {
	if o == nil || o.HtmlAccessEnabled == nil {
		var ret bool
		return ret
	}
	return *o.HtmlAccessEnabled
}

// GetHtmlAccessEnabledOk returns a tuple with the HtmlAccessEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmDisplayProtocolSettings) GetHtmlAccessEnabledOk() (*bool, bool) {
	if o == nil || o.HtmlAccessEnabled == nil {
		return nil, false
	}
	return o.HtmlAccessEnabled, true
}

// HasHtmlAccessEnabled returns a boolean if a field has been set.
func (o *FarmDisplayProtocolSettings) HasHtmlAccessEnabled() bool {
	if o != nil && o.HtmlAccessEnabled != nil {
		return true
	}

	return false
}

// SetHtmlAccessEnabled gets a reference to the given bool and assigns it to the HtmlAccessEnabled field.
func (o *FarmDisplayProtocolSettings) SetHtmlAccessEnabled(v bool) {
	o.HtmlAccessEnabled = &v
}

// GetSessionCollaborationEnabled returns the SessionCollaborationEnabled field value if set, zero value otherwise.
func (o *FarmDisplayProtocolSettings) GetSessionCollaborationEnabled() bool {
	if o == nil || o.SessionCollaborationEnabled == nil {
		var ret bool
		return ret
	}
	return *o.SessionCollaborationEnabled
}

// GetSessionCollaborationEnabledOk returns a tuple with the SessionCollaborationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmDisplayProtocolSettings) GetSessionCollaborationEnabledOk() (*bool, bool) {
	if o == nil || o.SessionCollaborationEnabled == nil {
		return nil, false
	}
	return o.SessionCollaborationEnabled, true
}

// HasSessionCollaborationEnabled returns a boolean if a field has been set.
func (o *FarmDisplayProtocolSettings) HasSessionCollaborationEnabled() bool {
	if o != nil && o.SessionCollaborationEnabled != nil {
		return true
	}

	return false
}

// SetSessionCollaborationEnabled gets a reference to the given bool and assigns it to the SessionCollaborationEnabled field.
func (o *FarmDisplayProtocolSettings) SetSessionCollaborationEnabled(v bool) {
	o.SessionCollaborationEnabled = &v
}

// GetVgpuGridProfile returns the VgpuGridProfile field value if set, zero value otherwise.
func (o *FarmDisplayProtocolSettings) GetVgpuGridProfile() string {
	if o == nil || o.VgpuGridProfile == nil {
		var ret string
		return ret
	}
	return *o.VgpuGridProfile
}

// GetVgpuGridProfileOk returns a tuple with the VgpuGridProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FarmDisplayProtocolSettings) GetVgpuGridProfileOk() (*string, bool) {
	if o == nil || o.VgpuGridProfile == nil {
		return nil, false
	}
	return o.VgpuGridProfile, true
}

// HasVgpuGridProfile returns a boolean if a field has been set.
func (o *FarmDisplayProtocolSettings) HasVgpuGridProfile() bool {
	if o != nil && o.VgpuGridProfile != nil {
		return true
	}

	return false
}

// SetVgpuGridProfile gets a reference to the given string and assigns it to the VgpuGridProfile field.
func (o *FarmDisplayProtocolSettings) SetVgpuGridProfile(v string) {
	o.VgpuGridProfile = &v
}

func (o FarmDisplayProtocolSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowDisplayProtocolOverride != nil {
		toSerialize["allow_display_protocol_override"] = o.AllowDisplayProtocolOverride
	}
	if o.DefaultDisplayProtocol != nil {
		toSerialize["default_display_protocol"] = o.DefaultDisplayProtocol
	}
	if o.GridVgpusEnabled != nil {
		toSerialize["grid_vgpus_enabled"] = o.GridVgpusEnabled
	}
	if o.HtmlAccessEnabled != nil {
		toSerialize["html_access_enabled"] = o.HtmlAccessEnabled
	}
	if o.SessionCollaborationEnabled != nil {
		toSerialize["session_collaboration_enabled"] = o.SessionCollaborationEnabled
	}
	if o.VgpuGridProfile != nil {
		toSerialize["vgpu_grid_profile"] = o.VgpuGridProfile
	}
	return json.Marshal(toSerialize)
}

type NullableFarmDisplayProtocolSettings struct {
	value *FarmDisplayProtocolSettings
	isSet bool
}

func (v NullableFarmDisplayProtocolSettings) Get() *FarmDisplayProtocolSettings {
	return v.value
}

func (v *NullableFarmDisplayProtocolSettings) Set(val *FarmDisplayProtocolSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableFarmDisplayProtocolSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableFarmDisplayProtocolSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFarmDisplayProtocolSettings(val *FarmDisplayProtocolSettings) *NullableFarmDisplayProtocolSettings {
	return &NullableFarmDisplayProtocolSettings{value: val, isSet: true}
}

func (v NullableFarmDisplayProtocolSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFarmDisplayProtocolSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
