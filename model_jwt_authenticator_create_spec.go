/*
Horizon Server API

Welcome to the Horizon Server API Reference documentation. This API reference provides comprehensive information about status of all Horizon Server components and resources. <br> Choose Latest spec from dropdown to view API reference on latest version available.

API version: 2212
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gohorizon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JWTAuthenticatorCreateSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JWTAuthenticatorCreateSpec{}

// JWTAuthenticatorCreateSpec Information required to create a JWT authenticator.
type JWTAuthenticatorCreateSpec struct {
	// The description of this JWT authenticator.
	Description *string `json:"description,omitempty"`
	// The issuer of this JWT authenticator. The configured value is matched against the \"iss\" claim of the JWT.
	Issuer string `json:"issuer"`
	// The name of the JWT authenticator. It must be unique among all other JWT authenticators.
	Name string `json:"name"`
	// The publicKeys as Json strings for this JWT authenticator. If \"publicKeys\" is blank, then \"url\" must not be blank.
	PublicKeys []string `json:"public_keys,omitempty"`
	// The URL to fetch the public keys for this authenticator. If \"url\" is blank, then \"publicKeys\" must not be blank.
	Url *string `json:"url,omitempty"`
}

type _JWTAuthenticatorCreateSpec JWTAuthenticatorCreateSpec

// NewJWTAuthenticatorCreateSpec instantiates a new JWTAuthenticatorCreateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJWTAuthenticatorCreateSpec(issuer string, name string) *JWTAuthenticatorCreateSpec {
	this := JWTAuthenticatorCreateSpec{}
	this.Issuer = issuer
	this.Name = name
	return &this
}

// NewJWTAuthenticatorCreateSpecWithDefaults instantiates a new JWTAuthenticatorCreateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJWTAuthenticatorCreateSpecWithDefaults() *JWTAuthenticatorCreateSpec {
	this := JWTAuthenticatorCreateSpec{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *JWTAuthenticatorCreateSpec) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JWTAuthenticatorCreateSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *JWTAuthenticatorCreateSpec) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *JWTAuthenticatorCreateSpec) SetDescription(v string) {
	o.Description = &v
}

// GetIssuer returns the Issuer field value
func (o *JWTAuthenticatorCreateSpec) GetIssuer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value
// and a boolean to check if the value has been set.
func (o *JWTAuthenticatorCreateSpec) GetIssuerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Issuer, true
}

// SetIssuer sets field value
func (o *JWTAuthenticatorCreateSpec) SetIssuer(v string) {
	o.Issuer = v
}

// GetName returns the Name field value
func (o *JWTAuthenticatorCreateSpec) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *JWTAuthenticatorCreateSpec) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *JWTAuthenticatorCreateSpec) SetName(v string) {
	o.Name = v
}

// GetPublicKeys returns the PublicKeys field value if set, zero value otherwise.
func (o *JWTAuthenticatorCreateSpec) GetPublicKeys() []string {
	if o == nil || IsNil(o.PublicKeys) {
		var ret []string
		return ret
	}
	return o.PublicKeys
}

// GetPublicKeysOk returns a tuple with the PublicKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JWTAuthenticatorCreateSpec) GetPublicKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.PublicKeys) {
		return nil, false
	}
	return o.PublicKeys, true
}

// HasPublicKeys returns a boolean if a field has been set.
func (o *JWTAuthenticatorCreateSpec) HasPublicKeys() bool {
	if o != nil && !IsNil(o.PublicKeys) {
		return true
	}

	return false
}

// SetPublicKeys gets a reference to the given []string and assigns it to the PublicKeys field.
func (o *JWTAuthenticatorCreateSpec) SetPublicKeys(v []string) {
	o.PublicKeys = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *JWTAuthenticatorCreateSpec) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JWTAuthenticatorCreateSpec) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *JWTAuthenticatorCreateSpec) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *JWTAuthenticatorCreateSpec) SetUrl(v string) {
	o.Url = &v
}

func (o JWTAuthenticatorCreateSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JWTAuthenticatorCreateSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["issuer"] = o.Issuer
	toSerialize["name"] = o.Name
	if !IsNil(o.PublicKeys) {
		toSerialize["public_keys"] = o.PublicKeys
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

func (o *JWTAuthenticatorCreateSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"issuer",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJWTAuthenticatorCreateSpec := _JWTAuthenticatorCreateSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJWTAuthenticatorCreateSpec)

	if err != nil {
		return err
	}

	*o = JWTAuthenticatorCreateSpec(varJWTAuthenticatorCreateSpec)

	return err
}

type NullableJWTAuthenticatorCreateSpec struct {
	value *JWTAuthenticatorCreateSpec
	isSet bool
}

func (v NullableJWTAuthenticatorCreateSpec) Get() *JWTAuthenticatorCreateSpec {
	return v.value
}

func (v *NullableJWTAuthenticatorCreateSpec) Set(val *JWTAuthenticatorCreateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableJWTAuthenticatorCreateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableJWTAuthenticatorCreateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJWTAuthenticatorCreateSpec(val *JWTAuthenticatorCreateSpec) *NullableJWTAuthenticatorCreateSpec {
	return &NullableJWTAuthenticatorCreateSpec{value: val, isSet: true}
}

func (v NullableJWTAuthenticatorCreateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJWTAuthenticatorCreateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


